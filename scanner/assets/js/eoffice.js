// Support jQuery being loaded as a third party library without breaking Velocity
if (window.jQuery) {
    window.Velocity = jQuery.Velocity;
}

/** 
 * @class Common
 * @classdesc All common functions used across the platform
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (Common, Velocity, window, document, undefined) {

    /**
     * @typedef {UiParameter} UiParameter
     * @property {string} Name Name of the UI Parameter
     * @property {string} Value Value of the UI Parameter
     * @property {UiParameter[]} UiParameters - A list of UiParameters
     * @public
     */

    /**
     * @member {string} Common.InsertType
     * @description Where to Insert HTML Markup into the DOM
     * @property {string} Before Insert at the begining of the DOM
     * @property {string} After Insert at the end of the DOM
     * @property {string} Append Insert at the end of an element
     * @property {string} Prepend Insert at the begining of an element
     * @example
     * Common.InsertHTMLString(document.head, Common.InsertType.Append, linkMarkup);
     */
    Common.InsertType = {
        Before: 'beforebegin',
        After: 'afterend',
        Append: 'beforeend',
        Prepend: 'afterbegin'
    };

    /**
     * @member {string} Common.SiblingType
     * @description Sibling to find
     * @property {string} Previous Previous Sibling
     * @property {string} Next Next Sibling
     * @property {string} All All Siblings
     * @example
     * var nextTiles = Common.GetAllSibling(this, Common.SiblingType.Next);
     */
    Common.SiblingType = {
        Previous: 'Previous',
        Next: 'Next',
        All: 'All'
    };

    // Private Variables
    var mediaView = {
        'Mobile': {
            Match: false,
            Cached: false,
            Size: '(max-width: 640px)'
        },
        'Tablet': {
            Match: false,
            Cached: false,
            Size: '(min-width: 641px) and (max-width: 1024px)'
        },
        'Desktop': {
            Match: false,
            Cached: false,
            Size: '(min-width: 1025px) and (max-width: 1280px)'
        },
        'HighResolution': {
            Match: false,
            Cached: false,
            Size: '(min-width: 1281px)'
        },
        'Custom': {
            Match: false,
            Cached: false,
            Size: ''
        }
    };

    /**
     * @function Common.CheckMedia
     * @param {string} type - Media Type (Mobile, Tablet, Desktop, HighResolution, Custom)
     * @param {boolean} recache - Recache the Media View object
     * @param {string} custom - Custom sizing information
     * @description Gets Media sizing information
     * @returns {object} MediaView object
     */
    Common.CheckMedia = function (type, recache, custom) {

        if (type == 'Custom') {
            mediaView[type].Size = custom;
            recache = true;
        }

        // Return cached value
        if (recache != true && mediaView[type].Cached) {
            return mediaView[type].Match;
        }

        // Firefox hidden iframe fix (matchMedia returns null when called from within a hidden iframe)
        var mediaResults = window.matchMedia(mediaView[type].Size);
        if (Common.IsDefined(mediaResults) && mediaResults.matches == true) {
            mediaView[type].Match = true;
            mediaView[type].Cached = true;
            return mediaView[type].Match;
        }

        // Else default and cache (Couldnt determine)
        mediaView[type].Match = false;
        mediaView[type].Cached = true;
        return mediaView[type].Match;

    };

    /**
     * @function Common.SetStorage
     * @param {string} key - Session Item Key
     * @param {string} value - Value of the Session Item
     * @description Sets a Session Storage Item
     * @returns {boolean} <i>true</i>
     */
    Common.SetStorage = function (key, value) {

        sessionStorage.setItem(key, value);
        return true;

    };

    /**
     * @function Common.GetStorage
     * @param {string} key - Session Item Key
     * @description Gets a Session Storage Item
     * @returns {string} Value of a Session Item (returns null is value is 'null')
     */
    Common.GetStorage = function (key) {

        var storageValue = sessionStorage.getItem(key);
        if (storageValue == 'null') {
            return null;
        }
        return storageValue;

    };

    /**
     * @function Common.RemoveStorage
     * @param {string} key - Session Item Key
     * @description Removes a Session Storage Item
     * @returns {boolean} <i>true</i>
     */
    Common.RemoveStorage = function (key) {

        sessionStorage.removeItem(key);
        return true;

    };

    /**
     * @function Common.ClearStorage
     * @description Clears all Session Storage Items
     * @returns {boolean} <i>true</i>
     */
    Common.ClearStorage = function () {

        sessionStorage.clear();
        return true;

    };

    /**
     * @function Common.SetSessionToken
     * @param {string} value - Session Token Value
     * @description Sets the Session Token in Local Storage<br>
     *              Uses Local Storage so Session Token is available cross tab for permalinks
     * @returns {boolean} <i>true</i>
     */
    Common.SetSessionToken = function (value) {

        localStorage.setItem('SessionToken', value);
        return true;

    };

    /**
     * @function Common.GetSessionToken
     * @description Gets the Session Token from Local Storage
     * @returns {string} Value of the Session Token (returns null is value is 'null')
     */
    Common.GetSessionToken = function () {

        var sessionTokenValue = localStorage.getItem('SessionToken');
        if (sessionTokenValue == 'null') {
            return null;
        }
        return sessionTokenValue;

    };

    /**
     * @function Common.ClearSessionToken
     * @description Clears the Session Token from Local Storage
     * @returns {boolean} <i>true</i>
     */
    Common.ClearSessionToken = function () {

        localStorage.clear();
        return true;

    };

    /**
     * @function Common.SetOnLoadEvent
     * @param {object} control - A DOM link element
     * @param {boolean} isModalLink - Is the control a ModalLink View Element?
     * @param {boolean} fromBreadcrumb - Is this call invoked from the Breadcrumb View Element?
     * @description Sets the parameters needed for the OnLoadView Behavior of a View
     * @returns {boolean} <i>true</i>
     */
    Common.SetOnLoadEvent = function (control, isModalLink, fromBreadcrumb) {

        // Create Page Key
        var pageHref = Common.GetAttr(control, 'href');
        var pageKey = pageHref.replace('/Content/', '').replace('/', '').replace('.html', '');

        // Get OnLoad Event
        var onLoadEvent = Common.GetAttr(control, 'data-load');

        // Form To Send? Hyperlinks, ModalLinks, ImageLinks and Tiles can send current form state to next page OnLoad
        var formToSerialize = Common.GetAttr(control, 'data-formtoserialize');
        if (Common.IsDefined(formToSerialize)) {
            var parsedOnLoad = JSON.parse(onLoadEvent);
            var onLoadParameters = [];
            if (Common.IsDefined(parsedOnLoad)) {
                onLoadParameters = onLoadParameters.concat(parsedOnLoad);
            }
            onLoadParameters = onLoadParameters.concat(Form.SerializeArray(Common.Get(formToSerialize)));
            parsedOnLoad = onLoadParameters;
            onLoadEvent = JSON.stringify(parsedOnLoad);
        }

        // Update Breadcrumb
        var breadcrumbNamespace = window['Breadcrumb'];
        if (Common.IsDefined(breadcrumbNamespace)) {
            if (pageHref == Common.GetStorage('BreadcrumbHomeView')) {
                breadcrumbNamespace.ClearBreadcrumbData();
            }
            else if (!isModalLink && !fromBreadcrumb) {
                breadcrumbNamespace.UpdateBreadcrumbData(control, pageHref, pageKey, JSON.parse(onLoadEvent));
            }
        }

        // Set Session Data
        Common.SetStorage(pageKey, onLoadEvent);
        return true;

    };

    /**
     * @function Common.AttachObservationEvent
     * @param {string} elementName - A DOM element id
     * @param {callback} onChangeFunction - Function to call on the event
     * @param {object} context - DOM context
     * @param {string} eventNamespace - Unique namespace for the event
     * @param {object} eventData - Custom event Data
     * @param {object} options - Observe options
     * @description Watch for element changes and trigger observechanges event
     * @listens observechanges (id = #<var>elementName</var>)
     * @fires observechanges (id = #<var>elementName</var>)
     */
    Common.AttachObservationEvent = function (elementName, onChangeFunction, context, eventNamespace, eventData, options) {

        var element = context.Common.Query('#' + elementName);
        var currentBrowser = context.Common.GetBrowser();

        // Attach custom observechanges event
        if (context.Common.IsDefined(eventNamespace) && context.Common.IsNotEmptyString(eventNamespace)) {
            eventNamespace = '.' + eventNamespace;
        }
        else {
            eventNamespace = '';
        }
        Events.On(element, 'observechanges' + eventNamespace, onChangeFunction);

        // IE10 and lower does not support MutationObservers so fake it
        if (currentBrowser[0] == 'IE' && context.parseInt(currentBrowser[1], 10) < 11) {
            // Setup timer
            var timer = context.setInterval(
                function () {
                    Events.Trigger(element, 'observechanges', { EventData: eventData, isMutationObserver: false, IntervalId: timer });
                }, 500
            );
        }
        else {
            // Watch individual mutations on element and trigger event (Callback needs to properly handle over-processing and stopping observations)
            var observer = new context.MutationObserver(
                function (mutations) {
                    mutations.forEach(
                        function (mutation) {
                            context.Events.Trigger(mutation.target, 'observechanges', { EventData: eventData, isMutationObserver: true, Observer: observer });
                        }
                    );
                }
            );

            // Default watches ALL attributes, subtrees and additions/removals of children along with old value of a changed attribute
            // Pass in options to override these defaults and to save performance
            // Option Descriptions:
            // ====================
            // NOTE: At the very least, childList, attributes, or characterData must be set to true. Otherwise error is thrown.
            // attributes: Set to true if mutations to target's attributes are to be observed.
            // subtree: Set to true if mutations to not just target, but also target's descendants are to be observed.
            // childList: Set to true if additions and removals of the target node's child elements (including text nodes) are to be observed.
            // characterData: Set to true if mutations to target's data are to be observed.
            // attributeOldValue: Set to true if attributes is set to true and target's attribute value before the mutation needs to be recorded.
            // characterDataOldValue: Set to true if characterData is set to true and target's data before the mutation needs to be recorded.
            // attributeFilter: Set to an array of attribute local names (without namespace) if not all attribute mutations need to be observed.
            var config = {
                attributes: true,
                subtree: true,
                childList: true,
                characterData: false,
                attributeOldValue: true,
                characterDataOldValue: false
            };
            if (context.Common.IsDefined(options)) {
                config = options;
            }

            // Begin observing
            observer.observe(element, config);
        }

    };

    /**
     * @function Common.DetachObservationEvent
     * @param {object} eventData - Custom event Data (to clear IntervalId)
     * @description Cleanup observation event
     */
    Common.DetachObservationEvent = function (eventData) {

        if (eventData.isMutationObserver == true) {
            eventData.Observer.disconnect();
        }
        else {
            clearInterval(eventData.IntervalId);
        }

    };

    var isObserving = false;
    var observedElements = [];

    /**
     * @function Common.AttachVisibilityEvent
     * @param {string} elementName - A DOM element id
     * @param {callback} onVisibilityChangeFunction - Function to call on the event
     * @param {string} eventNamespace - Unique namespace for the event
     * @param {object} eventData - Custom event Data
     * @param {string} isDisplayedStartState - Current display state (Yes / No)
     * @description Watch for visibility changes and trigger visibilitychange event
     * @listens visibilitychange (id = #<var>elementName</var>)
     * @fires visibilitychange (id = #<var>elementName</var>)
     */
    Common.AttachVisibilityEvent = function (elementName, onVisibilityChangeFunction, eventNamespace, eventData, isDisplayedStartState) {

        var element = Common.Get(elementName);
        var isDisplayed = (isDisplayedStartState == 'No' ? isDisplayedStartState : 'Yes');
        var currentBrowser = Common.GetBrowser();

        // Attach custom visibilitychange event
        if (Common.IsDefined(eventNamespace) && Common.IsNotEmptyString(eventNamespace)) {
            eventNamespace = '.' + eventNamespace;
        }
        else {
            eventNamespace = '';
        }
        Events.On(element, 'visibilitychange' + eventNamespace, onVisibilityChangeFunction);

        // Only allow an element to be attached once
        if (Common.IsInArray(elementName, observedElements) == -1) {
            // IE10 and lower does not support MutationObservers so fake it
            if (currentBrowser[0] == 'IE' && parseInt(currentBrowser[1], 10) < 11) {
                // Add element name to list of elements to observe
                observedElements.push(elementName);

                // Setup timer
                var timer = setInterval(
                    function () {
                        if (Common.IsHidden(element, true) && isDisplayed == 'Yes') {
                            isDisplayed = 'No';
                            Events.Trigger(element, 'visibilitychange', { Visible: false, EventData: eventData, isMutationObserver: false, IntervalId: timer });
                        }
                        else if (Common.IsVisible(element, true) && isDisplayed == 'No') {
                            isDisplayed = 'Yes';
                            Events.Trigger(element, 'visibilitychange', { Visible: true, EventData: eventData, isMutationObserver: false, IntervalId: timer });
                        }
                    }, 500
                );
            }
            else {
                // This monitors entire body and checks each configured element for visibility changes

                // Add element name to list of elements to observe
                observedElements.push(elementName);

                // Save data for each element on the actual element, since mutation observation is only attached once we dont have proper scope
                Cache.Set(element, 'isDisplayed', isDisplayed);
                Cache.Set(element, 'eventData', eventData);

                // Check if observer is already attached to body. It shouldnt attach more than one by default by why work harder than we need to.
                if (!isObserving) {
                    isObserving = true;

                    // Check individual elements on any mutation list and trigger event (Callback needs to properly handle over-processing and stopping observations)
                    // No need to check each mutation. We monitor entire body since we want to know if a parent has made a child hidden.
                    // Since we are monitoring entire body disconnecting only requires removing element from observed list and if IE10 or lower clearing interval
                    var observer = new MutationObserver(
                        function (mutations) {
                            var name, index = 0, length = observedElements.length;
                            for (; index < length; index++) {
                                name = observedElements[index];
                                if (Common.IsNotDefined(name)) {
                                    continue;
                                }

                                // Check each element for changed visibility and trigger event if its changed
                                var observedElement = Common.Get(name);
                                var currentIsDisplayed = Cache.Get(observedElement, 'isDisplayed');
                                if (Common.IsHidden(observedElement, true) && currentIsDisplayed == 'Yes') {
                                    Cache.Set(observedElement, 'isDisplayed', 'No');
                                    Events.Trigger(observedElement, 'visibilitychange', { Visible: false, EventData: Cache.Get(observedElement, 'eventData'), isMutationObserver: true, ElementName: name });
                                }
                                else if (Common.IsVisible(observedElement, true) && currentIsDisplayed == 'No') {
                                    Cache.Set(observedElement, 'isDisplayed', 'Yes');
                                    Events.Trigger(observedElement, 'visibilitychange', { Visible: true, EventData: Cache.Get(observedElement, 'eventData'), isMutationObserver: true, ElementName: name });
                                }
                            }
                        }
                    );

                    // Check only style attribute of body and all subtrees. All that really matters for visibility and saves performance
                    var config = {
                        attributes: true,
                        subtree: true,
                        childList: false,
                        characterData: false,
                        attributeOldValue: false,
                        characterDataOldValue: false,
                        attributeFilter: ['style']
                    };

                    // Begin observing
                    observer.observe(document.body, config);
                }
            }
        }

    };

    /**
     * @function Common.DetachVisibilityEvent
     * @param {object} eventData - Custom event Data (to clear IntervalId)
     * @description Cleanup visibility event
     */
    Common.DetachVisibilityEvent = function (eventData) {

        // Remove element from observe list
        observedElements = Common.FilterArray(observedElements,
            function (value) {
                return value != eventData.ElementName;
            }
        );

        // Cleanup data
        var element = Common.Get(eventData.ElementName);
        Cache.Remove(element, 'isDisplayed');
        Cache.Remove(element, 'eventData');

        // If IE10 or lower clear interval
        if (eventData.isMutationObserver == false) {
            clearInterval(eventData.IntervalId);
        }

    };

    /**
     * @function Common.AttachWindowResizingEvent
     * @param {callback} onResizeEndFunction - Function to call on the event
     * @param {string} eventNamespace - Unique namespace for the event
     * @param {object} eventData - Custom event Data
     * @description Watch window for resizing and trigger reseize and resizeend events
     * @listens resize (window)
     * @listens resizeend (window)
     * @fires resize (window)
     * @fires resizeend (window)
     */
    Common.AttachWindowResizingEvent = function (onResizeEndFunction, eventNamespace, eventData) {

        // Attach custom resize end event
        Events.On(window, 'resizeend.' + eventNamespace, eventData, onResizeEndFunction);

        // Intialize resize timer
        var resizeTimer = window.setTimeout(function () { }, 0);
        Cache.Set(window, eventNamespace, resizeTimer);

        // Attach window resize event
        Events.On(window, 'resize.' + eventNamespace,
            function () {
                // On resize event clear our custom event timer
                window.clearTimeout(resizeTimer);

                // Reset timer to call custom event if 250ms passes with no resize
                resizeTimer = window.setTimeout(
                    function () {
                        Events.Trigger(window, 'resizeend.' + eventNamespace);
                    }, 250
                );
            }
        );

    };

    /**
     * @function Common.DetachWindowResizingEvent
     * @param {string} eventNamespace - Unique namespace for the event
     * @description Cleanup window resize events
     */
    Common.DetachWindowResizingEvent = function (eventNamespace) {

        var resizeTimer = Cache.Get(window, eventNamespace);
        window.clearTimeout(resizeTimer);
        Events.Off(window, 'resize.' + eventNamespace);

    };

    /**
     * @function Common.CloseView
     * @description Close a Modal dialog or go back to the previous page
     */
    Common.CloseView = function () {

        // Is View a Modal?
        if (Common.IsModal()) {
            Modals.CloseModalDialog();
        }
        else {
            // Go back to previous View
            parent.history.back();
        }

    };

    /**
     * @function Common.RefreshView
     * @description Reload a page
     */
    Common.RefreshView = function () {

        // Is View a Modal?
        if (Common.IsModal()) {
            // Modal
            window.parent.Common.Query('.gtc-modal-iframe').contentWindow.location.reload();
        }
        else {
            // View
            location.reload();
        }

    };

    /**
     * @function Common.RefreshView
     * @description Close a Modal and refresh the parent page or go back to the previous page
     */
    Common.CloseRefreshView = function () {

        // Is View a Modal?
        if (Common.IsModal()) {
            // Modal
            setTimeout(
                function () {
                    top.document.location.reload();
                }, 600
            );
            window.parent.Widgets.modal(window.parent.Common.Query('.gtc-modal-iframe').parentNode, 'close');
        }
        else {
            // View
            parent.history.back();
        }

    };

    /**
     * @function Common.ResizeView
     * @param {boolean} modalOnly - Trigger resizemodal event
     * @description Initiates Page.SetPageHeight (for Modals via an event)
     * @fires resizemodal (Modal displayed)
     */
    Common.ResizeView = function (modalOnly) {

        // Is View a Modal?
        if (modalOnly == true || Common.IsModal()) {
            window.parent.Events.Trigger(window.parent.Common.Query('.gtc-modal-iframe', null, true), 'resizemodal');
        }
        else {
            Page.SetPageHeight();
        }

    };

    /**
     * @function Common.ShowPinwheel
     * @param {object} element - A DOM element
     * @param {boolean} animateIn - Animate the pinwheel in
     * @param {boolean} noBackground - Do not place an overlay
     * @description Shows Pinwheel on the DOM Element
     */
    Common.ShowPinwheel = function (element, animateIn, noBackground) {

        document.body.style.cursor = 'wait';
        var divPinwheelOverlay = '<div';
        var pinwheelClassing = ' class="gtc-pinwheel-overlay';
        divPinwheelOverlay += ' id="PinwheelOverlay" style="display:';
        if (Common.IsDefined(element)) {
            var namespace = window[Common.GetAttr(element, 'data-namespace')];
            if (Common.IsNotDefined(namespace)) {
                if (Common.IsDefined(window.console)) {
                    console.log('Error[' + namespace + ']: Namespace missing');
                }
            }
            else {
                divPinwheelOverlay += 'block;';
                if (Common.IsModal() || noBackground || Common.IsFunction(namespace.ShowPinwheel)) {
                    pinwheelClassing += ' gtc-pinwheel-overlay-transparent';
                }
                divPinwheelOverlay += '"' + pinwheelClassing + '"></div>';
                if (Common.IsNotDefined(Common.Get('PinwheelOverlay'))) {
                    Common.InsertHTMLString(document.body, Common.InsertType.Append, divPinwheelOverlay);
                }
                if (Common.IsFunction(namespace.ShowPinwheel)) {
                    namespace.ShowPinwheel(element);
                }
            }
        }
        else {
            if (animateIn) {
                divPinwheelOverlay += 'none;';
            }
            else {
                divPinwheelOverlay += 'block;';
            }
            if (noBackground) {
                pinwheelClassing += ' gtc-pinwheel-overlay-transparent';
            }
            divPinwheelOverlay += '"' + pinwheelClassing + '"></div>';
            if (Common.IsNotDefined(Common.Get('PinwheelOverlay'))) {
                Common.InsertHTMLString(document.body, Common.InsertType.Append, divPinwheelOverlay);
                var pinwheelOverlay = Common.Get('PinwheelOverlay');
                SpinKit.Show(pinwheelOverlay);
                if (animateIn) {
                    Velocity(pinwheelOverlay, 'fadeIn', 500,
                        function () {
                            Events.Trigger(document, 'showPinwheelComplete');
                        }
                    );
                }
            }
        }

    };

    /**
     * @function Common.HidePinwheel
     * @param {object} element - A DOM element
     * @description Hides Pinwheel on the DOM Element
     */
    Common.HidePinwheel = function (element) {

        if (Common.IsDefined(element)) {
            var namespace = window[Common.GetAttr(element, 'data-namespace')];
            if (Common.IsNotDefined(namespace)) {
                if (Common.IsDefined(window.console)) {
                    console.log('Error[' + namespace + ']: Namespace missing');
                }
            }
            else {
                if (Common.IsFunction(namespace.HidePinwheel)) {
                    namespace.HidePinwheel(element);
                }
                var pinwheelOverlay = Common.Get('PinwheelOverlay');
                if (Common.IsDefined(pinwheelOverlay)) {
                    Common.Remove(pinwheelOverlay);
                }
            }
        }
        else {
            Velocity(Common.Get('PinwheelOverlay'), 'fadeOut', 500,
                function () {
                    Common.Remove(this[0]);
                }
            );
        }
        document.body.style.cursor = 'default';

    };

    /**
     * @function Common.ExecuteViewBehavior
     * @param {string} behaviorUrl - URL to the Controller Behavior
     * @param {UiParameter[]} behaviorParameters - Parameters for the Behavior
     * @param {callback} behaviorDataProcessor - The callback that will process the data from the Behavior
     * @param {object} requestingElement - DOM element in context
     * @param {boolean} ignoreMaskingValidation - Ignore that mask validation that is done before the call?
     * @description Calls a View Element Controller Behavior
     */
    Common.ExecuteViewBehavior = function (behaviorUrl, behaviorParameters, behaviorDataProcessor, requestingElement, ignoreMaskingValidation) {

        var osType;

        if (navigator.appVersion.indexOf("Win") != -1) {
            osType = "Windows";
        } else if (navigator.appVersion.indexOf("Mac") != -1) {
            osType = "MacOS";
        } else if (navigator.appVersion.indexOf("Linux") != -1) {
            osType = "Linux";
        } else if (navigator.appVersion.indexOf("X11") != -1) {
            osType = "Unix";
        } else if (navigator.appVersion.indexOf("Android") != -1) {
            osType = "Android";
        } else if (navigator.appVersion.indexOf("iPhone") != -1 || navigator.appVersion.indexOf("iPad") != -1 || navigator.appVersion.indexOf("iPod") != -1) {
            osType = "iOS";
        } else {
            osType = "Unknown";
        }

        // Show Pinwheel
        Common.ShowPinwheel(requestingElement);

        // Remove LastViewBehaviorReturnedValidations Session Variable
        Common.RemoveStorage("LastViewBehaviorReturnedValidations");

        // Check masking
        var formNamespace = window['Form'];
        if (ignoreMaskingValidation != true && Common.IsDefined(formNamespace)) {
            if (formNamespace.HasMaskingErrors()) {
                Form.DisplayMaskingErrors();
                Common.HidePinwheel(requestingElement);
                return;
            }
        }

        // Add CurrentUser to BehaviorParameters
        var sessionToken = Common.GetSessionToken();
        if (Common.IsDefined(sessionToken)) {
            var currentUserParameter = [
                {
                    "Name": "CurrentUser",
                    "Value": sessionToken
                }
            ];
            if (Common.IsNotDefined(behaviorParameters)) {
                behaviorParameters = [];
            }
            behaviorParameters = behaviorParameters.concat(currentUserParameter);
        }
        // Define the base URL
        var url = window.location.protocol + '//' + window.location.hostname;
        var port = window.location.port;
        if (port) {
            url += ':' + port;
        }

        // Define an array of paths to match
        var paths = [
            '/Content/Document/ScanDocumentSummary.html'
        ];


        // Check if the linkElement is found
        if (paths.includes(window.location.pathname)) {
            var oSParameter = [
                {
                    "Name": "OSType",
                    "Value": osType
                }
            ];
            behaviorParameters = behaviorParameters.concat(oSParameter);
        }
        // Setup UiParameters
        var uiParameters = { uiParameters: behaviorParameters };

        // Make Ajax Call
        var requestObject = new XMLHttpRequest();
        requestObject.open('POST', behaviorUrl, true);
        requestObject.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        requestObject.onload = function () {
            if (this.status >= 200 && this.status < 400) {
                // Success!
                var behaviorData = JSON.parse(this.response);
                behaviorDataProcessor(behaviorData, requestingElement);
                var hidePinwheel = function () {
                    Common.HidePinwheel(requestingElement);
                };
                if (Common.IsModal() && Common.GetBrowser()[0] == 'Firefox') {
                    // This is so terrible but hidden iframe and getComputedStyle on an element inside explodes
                    // and the call is happening in VelocityJS so I can't control it.
                    setTimeout(hidePinwheel, 1000);
                }
                else if (Common.IsDefined(requestingElement)) {
                    hidePinwheel();
                }
                else {
                    setTimeout(hidePinwheel, 200);
                }
            }
            else {
                Common.RequestErrorHandler(this, requestingElement, false);
            }
        };
        requestObject.onerror = function () {
            Common.RequestErrorHandler(this, requestingElement, false);
        };
        requestObject.send(JSON.stringify(uiParameters));

    };
    /**
     * @function Common.RequestErrorHandler
     * @param {object} xhr - An Ajax request
     * @param {object} requestingElement - A DOM element
     * @param {boolean} ignorePinwheel - Do not hide pinwheel
     * @description Handles errors from Common.ExecuteViewBehavior
     */
    Common.RequestErrorHandler = function (xhr, requestingElement, ignorePinwheel) {

        if (!ignorePinwheel) {
            Common.HidePinwheel(requestingElement);
        }
        if (xhr.status == Modals.ErrorCodes.AuthorizationError || xhr.status == Modals.ErrorCodes.ConcurrencyError || xhr.status == Modals.ErrorCodes.SessionExpirationError) {
            Modals.ShowExceptionDialog(xhr);
        }
        else {
            Modals.ShowModalErrorDialog(xhr.response);
        }

    };

    /**
     * @function Common.IsEventViewElementDefined
     * @param {object} eventElement - EventElement or any its descendants in JSON format
     * @description Checks EventElement is valid, with a ControllerPath and ActionName
     * @returns {boolean} <i>true</i> if valid, <i>false</i> otherwise
     */
    Common.IsEventViewElementDefined = function (eventElement) {

        // Check Event
        if (Common.IsDefined(eventElement) && Common.IsDefined(eventElement.ControllerPath) && Common.IsDefined(eventElement.ActionName)) {
            return true;
        }
        return false;

    };

    /**
     * @function Common.AddTimezone
     * @param {object} dateObject - A javascript date object
     * @description Adds the local time-zone
     * @returns {object} A javascript date object
     */
    Common.AddTimezone = function (dateObject) {

        return new Date(dateObject.getTime() + dateObject.getTimezoneOffset() * 60000);

    };

    /**
     * @function Common.RemoveTimezone
     * @param {number} milliSecondsFrom1970 - Millseconds from 1970 (in local time)
     * @description Removes the local time-zone
     * @returns {object} Millseconds from 1970 (in UTC)
     */
    Common.RemoveTimezone = function (milliSecondsFrom1970) {

        return milliSecondsFrom1970 = milliSecondsFrom1970 - (60000 * new Date(milliSecondsFrom1970).getTimezoneOffset());

    };

    /**
     * @function Common.GetOrdinalDay
     * @param {number} day - A numeric day
     * @description Returns the ordinal day (adds suffix)
     * @returns {string} Day + Suffix
     * @example 
     * // return 17th
     * Common.GetOrdinalDay(17)
     */
    Common.GetOrdinalDay = function (day) {

        if ((parseFloat(day) == parseInt(day, 10)) && !isNaN(day)) {
            var suffix = ['th', 'st', 'nd', 'rd'];
            var modulusDay = day % 100;
            return day + (suffix[(modulusDay - 20) % 10] || suffix[modulusDay] || suffix[0]);
        }
        return day;

    };

    /**
     * @function Common.GetLanguage
     * @description Gets the current Language from the Storage Item
     * @returns {string} Language Code (en-US if none exists)
     */
    Common.GetLanguage = function () {

        // Get Language
        var currentLanguage = Common.GetStorage('CurrentLanguage');
        if (Common.IsNotDefined(currentLanguage) || currentLanguage.length <= 0) {
            currentLanguage = 'en-US';
        }
        return currentLanguage;

    };

    /**
     * @function Common.TranslatePage
     * @param {boolean} fromSettingsModal - Is the call from a Settings Modal?
     * @param {object} additionalResources - All the translation keys/values in JSON format 
     * @description Translates the current page
     */
    Common.TranslatePage = function (fromSettingsModal, additionalResources) {

        // Get Language
        var language = Common.GetLanguage();

        // Sanity Check: Context
        var currentContext = Common.GetStorage('CurrentContext');
        if (Common.IsNotDefined(currentContext) || currentContext.length <= 0) {
            return;
        }

        // Initialize
        i18n.init(
            {
                lng: language,
                useDataAttrOptions: true,
                useLocalStorage: true,
                localStorageExpirationTime: false,
                selectorAttr: 'data-translate',
                fallbackLng: false,
                load: 'current',
                resGetPath: '/Content/locales/__lng__/__ns__.json',
                defaultValueFromContent: false,
                ns: 'locale',
                setJqueryExt: false
            },
            function () {
                // Graphite GTC Preview Support
                if (Common.IsDefined(additionalResources)) {
                    i18n.addResourceBundle(language, 'locale', additionalResources);
                }

                // Translate Body
                var bodyObject;
                if (fromSettingsModal) {
                    bodyObject = parent.window.document.body;
                }
                else {
                    bodyObject = document.body;
                }
                i18n.translateObject(bodyObject);

                // Translate Title
                var translatedTitle = Common.TranslateKey(document.title);
                if (Common.IsDefined(translatedTitle) && Common.IsNotEmptyString(translatedTitle)) {
                    document.title = translatedTitle;
                }

                // Translate 508 Compliance SkipToMainContent
                var skipToMainContent = Common.Get('SkipToMainContent508');
                if (Common.IsDefined(skipToMainContent)) {
                    skipToMainContent.textContent = Common.TranslateKey('SkipToMainContent');
                }

                // Let anyone waiting know translations loaded
                Events.Trigger(document.body, 'translationsloaded');
            }
        );

        // Setup parent retranslate event
        if (!Common.IsModal()) {
            Events.On(document.body, 'translateparent',
                function () {
                    Common.RetranslatePage();
                }
            );
        }

    };

    /**
     * @function Common.RetranslatePage
     * @description Retranslates the current page
     */
    Common.RetranslatePage = function () {

        // Get Language
        var language = Common.GetLanguage();

        // Translate
        i18n.setLng(language,
            function () {
                i18n.translateObject(document.body);

                // Translate Title
                var translatedTitle = Common.TranslateKey(document.title);
                if (Common.IsDefined(translatedTitle) && Common.IsNotEmptyString(translatedTitle)) {
                    document.title = translatedTitle;
                }
            }
        );

    };

    /**
     * @function Common.GetTranslationEngine
     * @param {object} context - document or document.parent
     * @description Returns a function that translates a key or returs the key
     */
    Common.GetTranslationEngine = function (context) {

        // If no context passed default it
        if (Common.IsNotDefined(context)) {
            context = window;
        }

        // Did translations load?
        var translate = (context.i18n && context.i18n.t) ? context.i18n.t : null;

        // If not build fake translation function
        if (!Common.IsFunction(translate)) {
            translate = function (key) {
                return key;
            };
        }

        // Return function
        return translate;

    };

    /**
     * @function Common.TranslateKey
     * @param {boolean} key - Key to translate
     * @param {object} context - Current DOM context
     * @description Translates a specific Key
     * @returns {string} Translated value
     * @todo If we upgrade i18next(current: 1.10.1), see if this is no longer required
     */
    Common.TranslateKey = function (key, context) {

        var translate = Common.GetTranslationEngine(context);
        var translation = translate(key);

        // Between i18next loading the translation file but i18next has itself loaded it
        // returns an empty string instead of the key, this makes sure that doesn't happen
        // TODO: If we upgrade i18next(current: 1.10.1), see if this is no longer required.
        if (Common.IsNotDefined(translation) || Common.IsEmptyString(translation)) {
            translation = key;
        }
        return translation;

    };

    /**
     * @function Common.ApplyTheme
     * @param {boolean} fromSettingsModal - Is the call from a Settings Modal?
     * @description Apply the theme set in the Storage Item
     */
    Common.ApplyTheme = function (fromSettingsModal) {

        // Sanity Check
        var theme = Common.GetStorage('CurrentTheme');
        if (Common.IsNotDefined(theme) || theme.length <= 0 || theme == 'null') {
            return;
        }

        // Intialize
        var context, linkList, length, themeLowerCase = theme.toLowerCase();
        if (fromSettingsModal) {
            context = top.document;
        }
        else {
            context = document;
        }

        // Find relevant style sheets and icons
        linkList = Common.QueryAll('link[rel="stylesheet"]:not([media="print"]), link[rel="icon"]', context);
        length = linkList.length;

        // Stop if same theme is already set
        if (length > 0 && linkList[0].href.indexOf('thirdParty') != -1 && linkList[0].href.indexOf(themeLowerCase) > 0) {
            return;
        }

        // Set Theme
        Common.SetAttr(context.body, 'data-theme', theme);

        // Update stylesheets
        var linkItem, href, index = 0, groupName = Common.GetAttr(document.body, 'data-group');
        var newHref, hrefArray, arrayIndex, arrayCount;
        for (; index < length; index++) {
            linkItem = linkList[index];
            href = Common.GetAttr(linkItem, 'href');
            if (href.indexOf(groupName) != -1) {
                newHref = '', hrefArray = href.split('/'), arrayIndex = 0, arrayCount = hrefArray.length;
                while (arrayIndex < arrayCount) {
                    if (hrefArray[arrayIndex] == 'skins') {
                        hrefArray[(arrayIndex + 1)] = themeLowerCase;
                    }
                    if (hrefArray[arrayIndex].length > 0) {
                        newHref += '/' + hrefArray[arrayIndex];
                    }
                    arrayIndex++;
                }
                Common.SetAttr(linkItem, 'href', newHref);
            }
        }
        Page.SetPageHeight();

    };

    var decodeHtml = null;

    /**
     * @function Common.Decode
     * @param {string} value - An encoded string
     * @description Unescape string (&amp; to &)
     */
    Common.Decode = function (value) {

        if (Common.IsNotDefined(decodeHtml)) {
            decodeHtml = document.createElement('textarea');
        }
        decodeHtml.innerHTML = value;
        return decodeHtml.value;

    };

    /**
     * @function Common.Promise
     * @param {callback} optionalLogic - Optional Logic to execute when promise is complete
     * @description Create a promise that all animations are complete
     */
    Common.Promise = function (optionalLogic) {

        var promiseWrapper = {};
        var promise = new Promise(
            function (resolve, reject) {
                promiseWrapper.resolve = resolve;
                promiseWrapper.reject = reject;
                if (Common.IsFunction(optionalLogic)) {
                    promiseWrapper.optionalLogicResponse = optionalLogic(promiseWrapper);
                }
            }
        );
        promiseWrapper.promise = promise;
        return promiseWrapper;

    };

    var proxyGuid = 0;

    /**
     * @function Common.Proxy
     * @param {callback} fn - A javascript function
     * @param {object} context - A DOM element
     * @description Takes a function and returns a new one with passed context applied
     * @returns {callback} A javascript function
     */
    Common.Proxy = function (fn, context) {

        var tmp, args, proxy;

        if (Common.IsString(context)) {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }

        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if (!Common.IsFunction(fn)) {
            return undefined;
        }

        // Simulated bind
        args = [].slice.call(arguments, 2);
        proxy = function () {
            return fn.apply(context || this, args.concat([].slice.call(arguments)));
        };

        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || 'GTCProxy' + proxyGuid++;
        return proxy;

    };

    /**
     * @function Common.Create
     * @param {string} type - Type of the DOM element
     * @param {string} id - id of the DOM element
     * @param {string} classes - CSS classes
     * @param {string} innerHTML - Inner HTML markup
     * @description  Creates a DOM element and sets some values
     * @returns {object} A DOM element
     */
    Common.Create = function (type, id, classes, innerHTML) {

        var element = document.createElement(type);

        // Add id?
        if (Common.IsDefined(id)) {
            element.id = id;
        }

        // Add classes?
        if (Common.IsDefined(classes)) {
            Common.AddClasses(element, classes);
        }

        // Add inner HTML string?
        if (Common.IsDefined(innerHTML) && Common.IsString(innerHTML) && Common.IsNotEmptyString(innerHTML)) {
            element.innerHTML = innerHTML;
        }
        return element;

    };

    /**
     * @function Common.Get
     * @param {string} id - id of the DOM element
     * @param {boolean} fromParent - Look in parent page
     * @description Retrieve a DOM element by id
     * @returns {object} A DOM element
     */
    Common.Get = function (id, fromParent) {

        var context = document;
        if (fromParent) {
            context = parent.document;
        }
        return context.getElementById(id);

    };

    /**
     * @function Common.GetByName
     * @param {string} name - name of one or more DOM elements
     * @param {boolean} fromParent - Look in parent page
     * @description Retrieve DOM elements by name
     * @returns {object[]} An array of DOM elements
     */
    Common.GetByName = function (name, fromParent) {

        var context = document;
        if (fromParent) {
            context = parent.document;
        }
        return Common.NodeListToArray(context.getElementsByName(name));

    };

    /**
     * @function Common.GetByTagName
     * @param {string} tag - tag of one or more DOM elements
     * @param {object} context - A DOM element
     * @param {boolean} fromParent - Look in parent page
     * @description Retrieve DOM elements by tag and/or context
     * @returns {object[]} An array of DOM elements
     */
    Common.GetByTagName = function (tag, context, fromParent) {

        if (Common.IsNotDefined(context)) {
            context = document;
        }
        if (fromParent) {
            context = parent.document;
        }
        return Common.NodeListToArray(context.getElementsByTagName(tag));

    };

    /**
     * @function Common.Query
     * @param {string} selector - A HTML selector
     * @param {object} context - A DOM element
     * @param {boolean} fromParent - Look in parent page
     * @description Retrieve a DOM element with a selector
     * @returns {object} An DOM element
     */
    Common.Query = function (selector, context, fromParent) {

        if (Common.IsNotDefined(context)) {
            context = document;
        }
        if (fromParent) {
            context = parent.document;
        }
        return context.querySelector(selector);

    };

    /**
     * @function Common.QueryAll
     * @param {string} selector - A HTML selector
     * @param {object} context - A DOM element
     * @param {boolean} fromParent - Look in parent page
     * @description Retrieve DOM elements with a selector
     * @returns {object[]} An array of DOM elements
     */
    Common.QueryAll = function (selector, context, fromParent) {

        if (Common.IsNotDefined(context)) {
            context = document;
        }
        if (fromParent) {
            context = parent.document;
        }
        return Common.NodeListToArray(context.querySelectorAll(selector));

    };

    /**
     * @function Common.QueryAllHidden
     * @param {string} selector - A HTML selector
     * @param {object} context - A DOM element
     * @param {boolean} fromParent - Look in parent page
     * @description Retrieve hidden DOM elements with a selector
     * @returns {object[]} An array of DOM elements
     */
    Common.QueryAllHidden = function (selector, context, fromParent) {

        if (Common.IsNotDefined(context)) {
            context = document;
        }
        if (fromParent) {
            context = parent.document;
        }
        var results = context.querySelectorAll(selector);
        var hiddenElements = [], element, index = 0, length = results.length;
        for (; index < length; index++) {
            element = results[index];
            if (Common.IsHidden(element)) {
                hiddenElements.push(element);
            }
        }
        return hiddenElements;

    };

    /**
     * @function Common.QueryAllVisible
     * @param {string} selector - A HTML selector
     * @param {object} context - A DOM element
     * @param {boolean} fromParent - Look in parent page
     * @description Retrieve visible DOM elements with a selector
     * @returns {object[]} An array of DOM elements
     */
    Common.QueryAllVisible = function (selector, context, fromParent) {

        if (Common.IsNotDefined(context)) {
            context = document;
        }
        if (fromParent) {
            context = parent.document;
        }
        var results = context.querySelectorAll(selector);
        var visibleElements = [], element, index = 0, length = results.length;
        for (; index < length; index++) {
            element = results[index];
            if (Common.IsVisible(element)) {
                visibleElements.push(element);
            }
        }
        return visibleElements;

    };

    /**
     * @function Common.NodeListToArray
     * @param {object[]} nodeList - An list of DOM elements
     * @description Converts a node list into an array
     * @returns {object[]} An array of DOM elements
     */
    Common.NodeListToArray = function (nodeList) {

        return [].slice.call(nodeList, 0);

    };

    /**
     * @function Common.GetByClass
     * @param {string} selector - A HTML selector
     * @param {object} context - A DOM element
     * @param {boolean} fromParent - Look in parent page
     * @description Retrieve DOM elements by class name
     * @returns {object[]} An array of DOM elements
     */
    Common.GetByClass = function (selector, context, fromParent) {

        if (Common.IsNotDefined(context)) {
            context = document;
        }
        if (fromParent) {
            context = parent.document;
        }
        return Common.NodeListToArray(context.getElementsByClassName(selector));

    };

    // Polyfill if no browser support for matches
    (function () {

        if (!Element.prototype.matches) {
            Element.prototype.matches = Element.prototype.msMatchesSelector
                || Element.prototype.mozMatchesSelector
                || Element.prototype.webkitMatchesSelector;
        }

    }());

    /**
     * @function Common.Closest
     * @param {string} selector - A HTML selector
     * @param {object} context - A DOM element
     * @description Retrieve the first DOM element that matches the selector by testing the element itself and traversing up through its ancestors
     * @returns {object} An DOM element
     */
    Common.Closest = function (selector, context) {

        var matchedElement = null;
        if (Common.IsNotDefined(context)) {
            return matchedElement;
        }
        if (Common.IsFunction(context.closest)) {
            matchedElement = context.closest(selector);
        }
        else {
            // IE is why we can't have nice things
            var matchedElement = context;
            if (!matchedElement.matches(selector)) {
                while ((matchedElement = matchedElement.parentElement) && !matchedElement.matches(selector)) {
                    // Continue
                }
            }
            return matchedElement;
        }
        return matchedElement;

    };

    /**
     * @function Common.ClosestAll
     * @param {string} selector - A HTML selector
     * @param {object} context - A DOM element
     * @description Retrieve the DOM elements that match the selector by testing the element itself and traversing up through its ancestors
     * @returns {object[]} An array of DOM elements
     */
    Common.ClosestAll = function (selector, context) {

        if (context.length) {
            var match = [], index = 0, length = context.length;
            for (; index < length; index++) {
                match.push(Common.Closest(selector, context[index]));
            }
            return match;
        }
        else {
            return [Common.Closest(selector, context)];
        }

    };

    /**
     * @function Common.ParentsUntil
     * @param {string} selector - A HTML selector
     * @param {object} context - A DOM element
     * @param {string} filterSelector - A HTML selector
     * @description Retrieves an element's parents up to but not including the element matched by the selector<br>
     *              Pass null selector for all parents<br>
     *              Pass selector to filter further the parent elements
     * @returns {object[]} An array of DOM elements
     * @example
     * Common.ParentsUntil(treeNode, '.gtc-accordiontree-root', 'ul')
     */
    Common.ParentsUntil = function (selector, context, filterSelector) {

        var match = [];
        var truncate = Common.IsDefined(context);
        var filter = Common.IsDefined(filterSelector);
        while ((context = context.parentNode) && context.nodeType !== 9) {
            if (context.nodeType === 1) {
                if (truncate && context.matches(selector)) {
                    break;
                }
                if (filter && !context.matches(filterSelector)) {
                    continue;
                }
                match.push(context);
            }
        }
        return match;

    };

    /**
     * @function Common.GetSibling
     * @param {object} context - A DOM element
     * @param {Common.SiblingType} type - Sybling type
     * @param {string} selector - A HTML selector
     * @description Retrieve a DOM element's previous or next sibling<br>
     *              Pass selector to filter further
     * @returns {object} An DOM element
     */
    Common.GetSibling = function (context, type, selector) {

        var match = null;
        if (Common.IsNotDefined(context)) {
            return match;
        }
        if (type == Common.SiblingType.Next) {
            match = context.nextSibling;
        }
        else if (type == Common.SiblingType.Previous) {
            match = context.previousSibling;
        }
        if (Common.IsDefined(selector) && Common.IsNotEmptyString(selector) && Common.IsDefined(match)) {
            if (!match.matches(selector)) {
                match = null;
            }
        }
        return match;

    };

    /**
     * @function Common.GetAllSibling
     * @param {object} context - A DOM element
     * @param {Common.SiblingType} type - Sybling type
     * @param {string} selector - A HTML selector
     * @description Retrieve all previous, all next or all siblings of a DOM element<br>
     *              Pass selector to filter further
     * @returns {object[]} An array of DOM elements
     */
    Common.GetAllSibling = function (context, type, selector) {

        var match = [];
        if (Common.IsNotDefined(context)) {
            return match;
        }
        if (type == Common.SiblingType.Next || type == Common.SiblingType.Previous) {
            var siblingProperty = '';
            if (type == Common.SiblingType.Next) {
                siblingProperty = 'nextSibling';
            }
            else if (type == Common.SiblingType.Previous) {
                siblingProperty = 'previousSibling';
            }
            while (context = context[siblingProperty]) {
                if (Common.IsDefined(selector)) {
                    if (context.matches(selector)) {
                        match.push(context);
                    }
                }
                else {
                    match.push(context);
                }
            }
        }
        else if (type == Common.SiblingType.All) {
            var currentSibling = context.parentNode.firstChild;
            do {
                if (currentSibling == context) {
                    continue;
                }
                if (Common.IsDefined(selector)) {
                    if (currentSibling.matches(selector)) {
                        match.push(currentSibling);
                    }
                }
                else {
                    match.push(currentSibling);
                }
            } while (currentSibling = currentSibling.nextSibling)
        }
        return match;

    };

    /**
     * @function Common.GetChildren
     * @param {object} context - A DOM element
     * @param {string} selector - A HTML selector
     * @description Retrieve a DOM element's children<br>
     *              Pass selector to filter further
     * @returns {object[]} An array of DOM elements
     */
    Common.GetChildren = function (context, selector) {

        var match = [];
        if (Common.IsNotDefined(context)) {
            return match;
        }
        var allChildren = context.children;
        if (Common.IsDefined(selector) && Common.IsNotEmptyString(selector) && Common.IsDefined(match)) {
            var index = 0, length = allChildren.length;
            for (; index < length; index++) {
                if (allChildren[index].matches(selector)) {
                    match.push(allChildren[index]);
                }
            }
        }
        else {
            match = allChildren;
        }
        return match;

    };

    /**
     * @function Common.GetIndex
     * @param {object} context - A DOM element
     * @description Find a DOM element's index relative to its sibling elements
     * @returns {number} An DOM element's index
     */
    Common.GetIndex = function (context) {

        var index = 0;
        while (context = context.previousElementSibling) {
            index++;
        }
        return index;

    };

    /**
     * @function Common.Remove
     * @param {object | object[]} elements - A DOM element or an array of DOM elements
     * @param {boolean} ignoreData - If <i>true</i> events and cache should not be cleared
     * @param {boolean} ignoreDelegatedData - If <i>true</i> then remove cache of the children
     * @description Remove an element or array of elements from the DOM<br>
     *              This will switch off all events and remove cache
     * @returns {object[]} An array of removed DOM elements
     */
    Common.Remove = function (elements, ignoreData, ignoreDelegatedData) {

        // Initialize and sanity check
        var removedChildren = []
        if (Common.IsNotDefined(elements)) {
            return removedChildren;
        }

        // Convert elements to an array, if necessary.
        if (!elements.length) {
            elements = [elements];
        }

        // Loop over each element to be removed, cleanup their data and events and remove element
        var removedChild, element, childElements, index = 0, length = elements.length;
        for (; index < length; index++) {
            element = elements[index];
            if (ignoreData != true && element.nodeType === 1) {
                // Get all elements inside element to be removed and clean up their data and events as well
                // INFO: getElementsByTagName is MUCH faster in this context than querySelectorAll (NodeList - live vs static)
                childElements = element.getElementsByTagName('*');

                // Merge top element back in for clean up
                childElements = Common.MergeArray([element], childElements);
                Cache.CleanElementData(childElements, ignoreDelegatedData);
            }
            if (Common.IsDefined(element.parentNode)) {
                removedChild = element.parentNode.removeChild(element);
                removedChildren.push(removedChild);
            }
        }
        return removedChildren;

    };

    /**
     * @function Common.Detach
     * @param {object | object[]} elements - A DOM element or an array of DOM elements
     * @description Removes element or array of elements from DOM but does not clean up events or data associated with them
     * @returns {object[]} An array of removed DOM elements
     */
    Common.Detach = function (elements) {

        return Common.Remove(elements, true);

    };

    /**
     * @function Common.Detach
     * @param {object} object - A DOM element
     * @description Removes opacity from a DOM element, mostly used to cleanup velocity animations
     */
    Common.RemoveOpacity = function (object) {

        if (Common.IsDefined(object)) {
            if (Common.IsArray(object)) {
                object = object[0];
            }
            object.style.opacity = '';
        }

    };

    /**
     * @function Common.GenerateHTML
     * @param {string} string - HTML Markup
     * @description Generates elements from a string of HTML<br>
     *              This function assumes a single top level element in the HTML structure
     * @returns {object} An DOM element
     */
    Common.GenerateHTML = function (string) {

        // This function assumes a single top level element in the HTML structure.
        // I could expand it later if needed but for now its not necessary for our uses.
        var temporaryDiv = document.createElement('div');
        temporaryDiv.innerHTML = string;
        return temporaryDiv.firstChild;

    };

    /**
     * @function Common.GenerateFragment
     * @param {string} string - HTML Markup
     * @description Creates a document fragment from a string of HTML
     * @returns {object} An DOM element
     */
    Common.GenerateFragment = function (string) {

        var currentChild, temporaryDiv = document.createElement('div'), fragment = document.createDocumentFragment();
        temporaryDiv.innerHTML = string;
        while (currentChild = temporaryDiv.firstChild) {
            fragment.appendChild(currentChild);
        }
        return fragment;

    };

    /**
     * @function Common.InsertHTMLString
     * @param {object} element - A DOM element
     * @param {Common.InsertType} insertType - Insert type
     * @param {string} htmlString - HTML markup
     * @param {string} stringParentId - id of the parent DOM element
     * @description Inserts a string of HTML into the DOM based on the Insert type
     * @returns {object} An DOM element (or undefined)
     */
    Common.InsertHTMLString = function (element, insertType, htmlString, stringParentId) {

        if (Common.IsDefined(element) && Common.IsNotEmptyString(htmlString)) {
            element.insertAdjacentHTML(insertType, htmlString);
            if (Common.IsDefined(stringParentId)) {
                return Common.Get(stringParentId);
            }
        }

    };

    /**
     * @function Common.Wrap
     * @param {object | object[]} elements - A DOM element or an array of DOM elements
     * @param {string} wrapper - A DOM element
     * @description Wraps a DOM element or elements with a html node
     */
    Common.Wrap = function (elements, wrapper) {

        // Convert elements to an array, if necessary.
        if (!elements.length) {
            elements = [elements];
        }

        // Loops backwards to prevent having to clone the wrapper on the first element
        var index = elements.length - 1, child, element, parent, sibling;
        for (; index >= 0; index--) {
            child = (index > 0) ? wrapper.cloneNode(true) : wrapper;
            element = elements[index];

            // Cache the current parent and sibling.
            parent = element.parentNode;
            sibling = element.nextSibling;

            // Wrap the element which is automatically removed from its current parent).
            child.appendChild(element);

            // If no parent dont bother reinserting, probably element not in DOM yet
            if (parent) {
                // If the element had a sibling, insert the wrapper before the sibling to maintain the HTML structure else just append it to the parent.
                if (sibling) {
                    parent.insertBefore(child, sibling);
                }
                else {
                    parent.appendChild(child);
                }
            }
        }

    };

    /**
     * @function Common.Unwrap
     * @param {object | object[]} elements - A DOM element or an array of DOM elements
     * @description Unwraps a DOM element from its parent and puts it back into DOM
     */
    Common.Unwrap = function (elements) {

        // Convert elements to an array, if necessary.
        if (!elements.length) {
            elements = [elements];
        }

        // Loop and unwrap elements
        var element, parent, index = 0, length = elements.length;
        for (; index < length; index++) {
            element = elements[index];

            // Get the element's parent node
            parent = element.parentNode;

            // Move all children out of the element
            while (parent.firstChild) {
                parent.parentNode.insertBefore(parent.firstChild, parent);
            }

            // Remove the empty element
            Common.Remove(parent);
        }

    };

    /**
     * @function Common.GetStyle
     * @param {object} element - A DOM element
     * @param {string} styleName - Name of a HTML class
     * @description Gets the style of HTML class name of a DOM element
     * @returns {string} HTML style (or null)
     */
    Common.GetStyle = function (element, styleName) {

        var value = null;
        if (Common.IsDefined(element)) {
            value = element.style[styleName];
            if (Common.IsNotDefined(value) || Common.IsEmptyString(value)) {
                var computedStyle = getComputedStyle(element);
                if (Common.IsDefined(computedStyle)) {
                    value = computedStyle[styleName];
                }
            }
        }
        return value;

    };

    /**
     * @function Common.GetAttr
     * @param {object} object - A DOM element
     * @param {string} attrName - Name of a HTML attribute
     * @description Retrieves a DOM element's attribute
     * @returns {string} HTML attribute value (or null)
     */
    Common.GetAttr = function (object, attrName) {

        var value = null;
        if (Common.IsDefined(object)) {
            value = object.getAttribute(attrName);
        }
        return value;

    };

    /**
     * @function Common.SetAttr
     * @param {object} object - A DOM element
     * @param {string} attrName - Name of a HTML attribute
     * @param {string} value - Value of the HTML attribute to set
     * @description Set a DOM element's attribute
     */
    Common.SetAttr = function (object, attrName, value) {

        if (Common.IsDefined(object)) {
            object.setAttribute(attrName, value);
        }

    };

    /**
     * @function Common.RemoveAttr
     * @param {object} object - A DOM element
     * @param {string} attrName - Name of a HTML attribute
     * @description Removes a DOM element's attribute
     */
    Common.RemoveAttr = function (object, attrName) {

        if (Common.IsDefined(object)) {
            object.removeAttribute(attrName);
        }

    };

    /**
     * @function Common.HasAttr
     * @param {object} object - A DOM element
     * @param {string} attrName - Name of a HTML attribute
     * @description Checks existence of an element's attribute
     * @returns {boolean} <i>true</i> if exists <i>false</i> otherwise
     */
    Common.HasAttr = function (object, attrName) {

        if (Common.IsDefined(object)) {
            return object.hasAttribute(attrName);
        }
        return false;

    };

    /**
     * @function Common.HasClass
     * @param {object} object - A DOM element
     * @param {string} className - Name of a HTML class
     * @description Checks existence of a DOM element's HTML class
     * @returns {boolean} <i>true</i> if exists <i>false</i> otherwise
     */
    Common.HasClass = function (object, className) {

        if (Common.IsDefined(object)) {
            return object.classList.contains(className);
        }
        return false;

    };

    /**
     * @function Common.InsertLink
     * @param {string} thirdPartyName - UI control's Third party folder name 
     * @param {string} linkName - HTML class file name
     * @description Insert a <Link> into the DOM
     */
    Common.InsertLink = function (thirdPartyName, linkName) {

        // Build URL
        var url = window.location.protocol + '//' + window.location.hostname;
        var port = window.location.port;
        if (Common.IsDefined(port) && Common.IsNotEmptyString(port)) {
            url += ':' + port;
        }
        url += '/Content/thirdParty/' + thirdPartyName + '/styles/' + linkName + '.css';

        // Check if Link exists
        var sameLinks = Common.QueryAll('link[href="' + url + '"]');
        if (Common.IsDefined(sameLinks) && sameLinks.length <= 0) {
            // Insert Link into Head
            var linkMarkup = '<link rel="stylesheet" type="text/css" href="' + url + '">';
            Common.InsertHTMLString(document.head, Common.InsertType.Append, linkMarkup);
        }

    };

    /**
     * @function Common.AddClass
     * @param {object} object - A DOM element
     * @param {string} className - Name of a HTML class
     * @description Adds HTML class to a DOM element
     */
    Common.AddClass = function (object, className) {

        if (Common.IsDefined(object)) {
            object.classList.add(className);
        }

    };

    /**
     * @function Common.AddClassToElements
     * @param {object} objects - An array DOM elements
     * @param {string} className - Name of a HTML class
     * @description Adds HTML class to an array of DOM elements
     */
    Common.AddClassToElements = function (objects, className) {

        var index = 0, length = objects.length;
        for (; index < length; index++) {
            Common.AddClass(objects[index], className);
        }

    };

    /**
     * @function Common.AddClasses
     * @param {object} object - A DOM element
     * @param {string} classes - A space separated list of HTML classes
     * @description Adds space separated list of HTML classes to a DOM element
     */
    Common.AddClasses = function (object, classes) {

        var index = 0, classArray = classes.split(' '), length = classArray.length;
        for (; index < length; index++) {
            Common.AddClass(object, classArray[index]);
        }

    };

    /**
     * @function Common.AddClassesToElements
     * @param {object} objects - An array DOM elements
     * @param {string} classes - A space separated list of HTML classes
     * @description Adds space separated list of HTML classes to an array of DOM elements
     */
    Common.AddClassesToElements = function (objects, classes) {

        var index = 0, length = objects.length;
        for (; index < length; index++) {
            Common.AddClasses(objects[index], classes);
        }

    };

    /**
     * @function Common.RemoveClass
     * @param {object} object - A DOM element
     * @param {string} className - Name of a HTML class
     * @description Removes HTML class from an DOM element
     */
    Common.RemoveClass = function (object, className) {

        if (Common.IsDefined(object)) {
            object.classList.remove(className);
        }

    };

    /**
     * @function Common.RemoveClassFromElements
     * @param {object} objects - An array DOM elements
     * @param {string} className - Name of a HTML class
     * @description Removes HTML class from an array of DOM elements
     */
    Common.RemoveClassFromElements = function (objects, className) {

        var index = 0, length = objects.length;
        for (; index < length; index++) {
            Common.RemoveClass(objects[index], className);
        }

    };

    /**
     * @function Common.RemoveClasses
     * @param {object} object - A DOM element
     * @param {string} classes - A space separated list of HTML classes
     * @description Removes space separated list of HTML classes from a DOM element
     */
    Common.RemoveClasses = function (object, classes) {

        var index = 0, classArray = classes.split(' '), length = classArray.length;
        for (; index < length; index++) {
            Common.RemoveClass(object, classArray[index]);
        }

    };

    /**
     * @function Common.RemoveClassesFromElements
     * @param {object} objects - An array DOM elements
     * @param {string} classes - A space separated list of HTML classes
     * @description Removes space separated list of HTML classes from an array of DOM elements
     */
    Common.RemoveClassesFromElements = function (objects, classes) {

        var index = 0, length = objects.length;
        for (; index < length; index++) {
            Common.RemoveClasses(objects[index], classes);
        }

    };

    /**
     * @function Common.ToggleClass
     * @param {object} object - A DOM element
     * @param {string} className - Name of a HTML class
     * @description Adds or removes a HTML class from a DOM element depending on the class's presence
     */
    Common.ToggleClass = function (object, className) {

        if (Common.IsDefined(object)) {
            object.classList.toggle(className);
        }

    };

    /**
     * @function Common.SwitchClass
     * @param {object} object - A DOM element
     * @param {string} removeClass - Name of the HTML class to remove
     * @param {string} addClass - Name of the HTML class to add
     * @description Replaces one HTML class for another on a DOM element
     */
    Common.SwitchClass = function (object, removeClass, addClass) {

        if (Common.IsDefined(object)) {
            Common.RemoveClass(object, removeClass);
            Common.AddClass(object, addClass);
        }

    };

    /**
     * @function Common.SwitchClassOnElements
     * @param {object} objects - An array DOM elements
     * @param {string} removeClass - Name of the HTML class to remove
     * @param {string} addClass - Name of the HTML class to add
     * @description Replaces one HTML class for another on an array of DOM elements
     */
    Common.SwitchClassOnElements = function (objects, removeClass, addClass) {

        var index = 0, length = objects.length;
        for (; index < length; index++) {
            Common.SwitchClass(objects[index], removeClass, addClass);
        }

    };

    /**
     * @function Common.IsHidden
     * @param {object} object - A DOM element
     * @param {boolean} checkParents - Check on parent page
     * @description Determines if a DOM element is hidden, optional boolean to check if element is hidden by a parent
     * @returns {boolean} <i>true</i> if hidden <i>false</i> otherwise
     */
    Common.IsHidden = function (object, checkParents) {

        // Easiest check, is element hidden?
        if (object.style.display == 'none' || getComputedStyle(object).display == 'none') {
            return true;
        }

        // If element isn't hidden lets check for a hidden parent
        if (checkParents == true) {
            while (object.parentNode) {
                if (object.style.display == 'none' || getComputedStyle(object).display == 'none') {
                    return true;
                }
                object = object.parentNode;
            }
        }
        return false;

    };

    /**
     * @function Common.IsVisible
     * @param {object} object - A DOM element
     * @param {boolean} checkParents - Check on parent page
     * @description Determines if a DOM element is visible, optional boolean to check if element is hidden by a parent
     * @returns {boolean} <i>true</i> if visible <i>false</i> otherwise
     */
    Common.IsVisible = function (object, checkParents) {

        return !Common.IsHidden(object, checkParents);

    };

    /**
     * @function Common.IsTabbable
     * @param {object} element - A DOM element
     * @description Determines if a DOM element is tabbable (tabindex set to valid value)
     * @returns {boolean} <i>true</i> if tabbable <i>false</i> otherwise
     */
    Common.IsTabbable = function (element) {

        var tabIndex = Common.GetAttr(element, 'tabindex');
        tabIndex = Common.IsDefined(tabIndex) ? tabIndex : undefined;
        var isTabIndexNaN = isNaN(tabIndex);
        return (isTabIndexNaN || tabIndex >= 0) && Common.IsFocusable(element, !isTabIndexNaN);

    };

    /**
     * @function Common.IsTabbable
     * @param {object} element - A DOM element
     * @param {boolean} isTabIndexNotNaN - <i>true</i> if tabindex is set, <i>false</i> otherwise
     * @description Determines if an element is focusable
     * @returns {boolean} <i>true</i> if focusable, <i>false</i> otherwise
     */
    Common.IsFocusable = function (element, isTabIndexNotNaN) {

        var nodeName = element.nodeName.toLowerCase();
        return (/^(input|select|textarea|button|object)$/.test(nodeName) ? !element.disabled : 'a' === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && Common.IsVisible(element, true);

    };

    /**
     * @function Common.IsTextOverflowing
     * @param {object} element - A DOM element
     * @description Determines if a DOM element's text will overflow its width
     * @returns {boolean} <i>true</i> if overflows <i>false</i> otherwise
     */
    Common.IsTextOverflowing = function (element) {

        if (Common.IsDefined(element)) {
            return (element.offsetWidth < element.scrollWidth);
        }
        else {
            return false;
        }

    };

    /**
     * @function Common.MergeObjects
     * @description Merge the contents of two or more objects together into the first object
     * @returns {object} A merged object
     */
    Common.MergeObjects = function () {

        var options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // Handle a deep copy situation
        if (Common.IsBoolean(target)) {
            deep = target;

            // Skip the boolean and the target
            target = arguments[i] || {};
            i++;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (!Common.IsObject(target) && !Common.IsFunction(target)) {
            target = {};
        }

        // Extend object itself if only one argument is passed
        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {
            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {
                // Extend the base object
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    // Prevent never-ending loop
                    if (target === copy) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (Common.IsPlainObject(copy) || (copyIsArray = Common.IsArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && Common.IsArray(src) ? src : [];

                        }
                        else {
                            clone = src && Common.IsPlainObject(src) ? src : {};
                        }

                        // Never move original objects, clone them
                        target[name] = Common.MergeObjects(deep, clone, copy);

                        // Don't bring in undefined values
                    }
                    else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;

    };

    var PlainObject = {};
    var HasOwn = PlainObject.hasOwnProperty;
    var ToString = PlainObject.toString;

    /**
     * @function Common.IsPlainObject
     * @param {object} object - A variable
     * @description Determines if an object is a plain old javascript object
     * @returns {boolean} <i>true</i> if object <i>false</i> otherwise
     */
    Common.IsPlainObject = function (object) {

        if (Common.GetType(object) !== 'object' || object.nodeType || Common.IsWindow(object)) {
            return false;
        }
        if (object.constructor && !HasOwn.call(object.constructor.prototype, 'isPrototypeOf')) {
            return false;
        }
        return true;

    };

    /**
     * @function Common.CheckNodeType
     * @param {object} element - A DOM element
     * @param {string} name - DOM node type
     * @description Determines if a DOM element matches passed in type
     * @returns {boolean} <i>true</i> if matches <i>false</i> otherwise
     */
    Common.CheckNodeType = function (element, name) {

        return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();

    };

    /**
     * @function Common.GetType
     * @param {object} object - A variable
     * @description Returns type of an object
     * @returns {string} The type of the object
     */
    Common.GetType = function (object) {

        if (object == null) {
            return object + '';
        }

        // Support: Android < 4.0, iOS < 6 (functionish RegExp)
        return Common.IsObject(object) || Common.IsFunction(object) ? PlainObject[ToString.call(object)] || 'object' : typeof object;

    };

    /**
     * @function Common.IsInArray
     * @param {object} value - A value
     * @param {object[]} array - An array
     * @param {number} fromIndex - Start index
     * @description Determines if value exists in an array<br>
     *              Optional index to start search on
     * @returns {boolean} <i>true</i> if exists <i>false</i> otherwise
     */
    Common.IsInArray = function (value, array, fromIndex) {

        return array == null ? -1 : array.indexOf(value, fromIndex);

    };

    /**
     * @function Common.MergeArray
     * @param {object[]} first - An array
     * @param {object[]} second - An array
     * @description Merge the contents of two arrays together into the first array<br>
     *              Pass empty array as first argument to clone an array
     * @returns {object[]} Merged Array
     */
    Common.MergeArray = function (first, second) {

        // Initialize
        var length = +second.length, index = 0, newLength = first.length;

        // Merge
        for (; index < length; index++) {
            first[newLength++] = second[index];
        }
        first.length = newLength;

        // Return
        return first;
    };

    /**
     * @function Common.FilterArray
     * @param {object[]} array - An array
     * @param {callback} filter - A callback that will return true or false
     * @description Filters an array based on passed in filter function returning a new array
     * @returns {object[]} Filtered Array
     */
    Common.FilterArray = function (array, filter) {

        // Go through the array, only saving the items that pass the filter function
        var matches = [], index = 0, length = array.length;
        for (; index < length; index++) {
            if (filter(array[index], index)) {
                matches.push(array[index]);
            }
        }
        return matches;

    };

    /**
     * @function Common.FilterElementArray
     * @param {object[]} array - An array of DOM elements
     * @param {string} selector - A HTML selector
     * @description Filters an array of DOM elements based on passed in selector returning a new array
     * @returns {object[]} Filtered Array
     */
    Common.FilterElementArray = function (array, selector) {

        var match = [];
        if (Common.IsNotDefined(array)) {
            return match;
        }
        if (Common.IsDefined(selector) && Common.IsNotEmptyString(selector)) {
            var index = 0, length = array.length;
            for (; index < length; index++) {
                if (array[index].matches(selector)) {
                    match.push(array[index]);
                }
            }
        }
        return match;

    };

    /**
     * @function Common.FilterElementsOnDescendants
     * @param {object[]} elements - An array of DOM elements
     * @param {string} selector - A HTML selector
     * @description Filters array of elements only if they have a descendant who matches the selector, returns a new array
     * @returns {object[]} Filtered Array
     */
    Common.FilterElementsOnDescendants = function (elements, selector) {

        var match = [];
        if (Common.IsNotDefined(elements)) {
            return match;
        }
        if (Common.IsDefined(selector) && Common.IsNotEmptyString(selector)) {
            var element, targets, targetsIndex, targetCheck, targetsLength, index = 0, length = elements.length;
            for (; index < length; index++) {
                element = elements[index];
                targets = Common.QueryAll(selector, element);
                targetsIndex = 0, targetsLength = targets.length, targetCheck = true;
                for (; targetsIndex < targetsLength; targetsIndex++) {
                    if (!element.contains(targets[targetsIndex])) {
                        targetCheck = false;
                    }
                    if (targetsIndex == targetsLength - 1 && targetCheck) {
                        match.push(element);
                    }
                }
            }
        }
        return match;

    };

    /**
     * @function Common.Height
     * @param {object} object - A DOM element
     * @param {boolean} includeMargin - <i>true</i> to include margin (top/bottom) in the calculation otherwise <i>false</i>
     * @description Calculates a DOM element's height<br>
     *              Optionally including margins (top and bottom)<br>
     *              Padding doesn't matter since we use box-sizing
     * @returns {number} Height of the DOM element
     */
    Common.Height = function (object, includeMargin) {

        var height = null;
        if (Common.IsDefined(object)) {
            if (Common.IsWindow(object)) {
                // Get window height
                height = object.document.documentElement.clientHeight;
            }
            else if (object.nodeType === 9) {
                // Get document height
                var documentElement = object.documentElement;
                var bodyElement = object.body;
                height = Math.max(bodyElement.scrollHeight, documentElement.scrollHeight, bodyElement.offsetHeight, documentElement.offsetHeight, documentElement.clientHeight);
            }
            else {
                // Get element height
                height = object.offsetHeight;
                if (height <= 0 || Common.IsNotDefined(height)) {
                    if (Common.IsHidden(object)) {
                        object.style.visibility = "hidden";
                        object.style.opacity = 0;
                        object.style.display = "block";
                        height = object.offsetHeight;
                        object.style.display = "";
                        object.style.visibility = "";
                        object.style.opacity = "";
                    }
                }
                if (includeMargin == true) {
                    var styles = getComputedStyle(object);
                    if (Common.IsDefined(styles)) {
                        var marginTop = parseFloat(styles.getPropertyValue('margin-top'));
                        var marginBottom = parseFloat(styles.getPropertyValue('margin-bottom'));
                        if (Common.IsNumeric(marginTop)) {
                            height += marginTop;
                        }
                        if (Common.IsNumeric(marginBottom)) {
                            height += marginBottom;
                        }
                    }
                }
            }
        }
        return height;

    };

    /**
     * @function Common.Width
     * @param {object} object - A DOM element
     * @param {boolean} includeMargin - <i>true</i> to include margin (left/right) in the calculation otherwise <i>false</i>
     * @description Calculates a DOM element's width<br>
     *              Optionally including margins (left and right)<br>
     *              Padding doesn't matter since we use box-sizing
     * @returns {number} Width of the DOM element
     */
    Common.Width = function (object, includeMargin) {

        var width = null;
        if (Common.IsDefined(object)) {
            if (Common.IsWindow(object)) {
                // Get window width
                width = object.document.documentElement.clientWidth;
            }
            else if (object.nodeType === 9) {
                // Get document width
                var documentElement = object.documentElement;
                var bodyElement = object.body;
                width = Math.max(bodyElement.scrollWidth, documentElement.scrollWidth, bodyElement.offsetWidth, documentElement.offsetWidth, documentElement.clientWidth);
            }
            else {
                // Get element width
                width = object.offsetWidth;
                if (width <= 0 || Common.IsNotDefined(width)) {
                    if (Common.IsHidden(object)) {
                        object.style.visibility = "hidden";
                        object.style.opacity = 0;
                        object.style.display = "block";
                        width = object.offsetWidth;
                        object.style.display = "";
                        object.style.visibility = "";
                        object.style.opacity = "";
                    }
                }
                if (includeMargin == true) {
                    var styles = getComputedStyle(object);
                    if (Common.IsDefined(styles)) {
                        var marginLeft = parseFloat(styles.getPropertyValue('margin-left'));
                        var marginRight = parseFloat(styles.getPropertyValue('margin-right'));
                        if (Common.IsNumeric(marginLeft)) {
                            width += marginLeft;
                        }
                        if (Common.IsNumeric(marginRight)) {
                            width += marginRight;
                        }
                    }
                }
            }
        }
        return width;

    };

    /**
     * @function Common.OffsetParent
     * @param {object} object - A DOM element
     * @description Get the closest ancestor element that is positioned
     * @returns {object} A DOM element
     */
    Common.OffsetParent = function (object) {

        var offsetParent = object.offsetParent || document.documentElement;
        while (offsetParent && (!Common.CheckNodeType(object, 'html') && Common.GetStyle(offsetParent, 'position') === 'static')) {
            offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || document.documentElement;

    };

    /**
     * @function Common.Offset
     * @param {object} object - A DOM element
     * @description Get the current coordinates of the DOM element relative to the document
     * @returns {object} A JSON object containing properties - top and left
     */
    Common.Offset = function (object) {

        var defaultValues = {
            top: 0,
            left: 0
        };
        if (Common.IsNotDefined(object) || !Common.IsFunction(object.getBoundingClientRect)) {
            return defaultValues;
        }
        else {
            defaultValues = object.getBoundingClientRect();
        }
        return {
            top: defaultValues.top + window.pageYOffset - document.documentElement.clientTop,
            left: defaultValues.left + window.pageXOffset - document.documentElement.clientLeft
        };

    };

    /**
     * @function Common.Position
     * @param {object} object - A DOM element
     * @description Get the current coordinates of the DOM element relative to the offset parent
     * @returns {object} A JSON object containing properties - top and left
     */
    Common.Position = function (object) {

        // Initialize
        var offset;
        var parentOffset = {
            top: 0,
            left: 0
        };

        // Fixed elements are offset from window
        if (Common.GetStyle(object, 'position') == 'fixed') {
            offset = object.getBoundingClientRect();
        }
        else {
            // Get offsetParent
            var offsetParent = object.offsetParent || document.documentElement;
            while (offsetParent && (!Common.CheckNodeType(offsetParent, 'html') && Common.GetStyle(offsetParent, 'position') == 'static')) {
                offsetParent = offsetParent.offsetParent;
            }
            offsetParent = offsetParent || document.documentElement;

            // Get offsets
            offset = Common.Offset(object);
            if (!Common.CheckNodeType(offsetParent, 'html')) {
                parentOffset = Common.Offset(offsetParent);
            }

            // Add offsetParent borders
            parentOffset.top += parseFloat(Common.GetStyle(offsetParent, 'borderTopWidth'));
            parentOffset.left += parseFloat(Common.GetStyle(offsetParent, 'borderLeftWidth'));
        }

        // Subtract parent offsets and element margins
        return {
            top: offset.top - parentOffset.top - parseFloat(Common.GetStyle(object, 'marginTop')),
            left: offset.left - parentOffset.left - parseFloat(Common.GetStyle(object, 'marginLeft'))
        };

    };

    /**
     * @function Common.RemovePrefix
     * @param {string} fieldName - A Field's name
     * @description Remove Prefix and the underscore
     * @returns {string} The modified Field name
     */
    Common.RemovePrefix = function (fieldName) {

        if (Common.IsDefined(fieldName)) {
            var itemArray = fieldName.split('_');
            return itemArray[itemArray.length - 1];
        }

    };

    /**
     * @function Common.SanitizeToken
     * @param {string} token - An encrypted id string
     * @description Cleans up an encrypted id string and removes unsafe characters<br>
     *              This function is one way - it is impossible to covert the returned value to its original token
     * @returns {string} A sanitized id string
     */
    Common.SanitizeToken = function (token) {

        var newToken = '';
        if (Common.IsDefined(token)) {
            var tokenArray = token.split(':');
            if (tokenArray.length == 2) {
                // Prepend with 'GTC' since HTML5 allows IDs starting with numbers but selectors do not allow it
                newToken = 'GTC' + tokenArray[1].replace(/[+]/g, '43').replace(/[=]/g, '61').replace(/[//]/g, '47');
            }
            else {
                return token;
            }
        }
        return newToken;

    };

    /**
     * @function Common.BuildResourcePath
     * @param {string} resourceValue - A URL path to a resource, a base 64 data of a resource or image for the DocumentDisplay View Element
     * @description Builds a resource path for a img DOM element 
     * @returns {string} A resource path
     */
    Common.BuildResourcePath = function (resourceValue) {

        var resourcePath = '';
        if (Common.IsDefined(resourceValue)) {
            resourcePath = resourceValue;
            var isGraphiteResource = (resourceValue.indexOf('data:') != 0 && resourceValue.indexOf('http') != 0) ? true : false;
            if (isGraphiteResource) {
                if (resourceValue.indexOf(':') != -1) {
                    var resourceValueArray = resourceValue.split(':');
                    var currentResource = 'common';
                    if (resourceValueArray[1] == 'Theme') {
                        currentResource = Common.GetAttr(document.body, 'data-theme').toLowerCase();
                    }
                    resourcePath = '/Content/thirdParty/' + resourceValueArray[0] + '/skins/' + currentResource + '/resources/' + resourceValueArray[2];
                }
                else {
                    var justGuid = resourceValue.substring(0, 36);
                    if (Common.IsGuid(justGuid)) {
                        resourcePath = '/DocumentFile/' + resourceValue;
                    }
                }
            }
        }
        return resourcePath;

    };

    /**
     * @function Common.IsGuid
     * @param {string} guidValue - A GUID string
     * @description Check if GUID
     * @returns {boolean} <i>true</i> if GUID, <i>false</i> otherwise
     */
    Common.IsGuid = function (guidValue) {

        return new RegExp(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i).test(guidValue);

    };

    /**
     * @function Common.IsPreview
     * @description Determines if in design mode
     * @returns {boolean} <i>true</i> if in Preview, <i>false</i> otherwise
     */
    Common.IsPreview = function () {

        if (Common.IsFunction(window['RenderPreview']) || Common.IsFunction(window['RenderPreviewModal'])) {
            return true;
        }
        return false;

    };

    /**
     * @function Common.IsWindow
     * @param {object} object - A DOM element
     * @description Determines if object is window object
     * @returns {boolean} <i>true</i> if window, <i>false</i> otherwise
     */
    Common.IsWindow = function (object) {

        return Common.IsDefined(object) && object === object.window;

    };

    /**
     * @function Common.IsObject
     * @param {object} object - A DOM element
     * @description Determines if object is a DOM element
     * @returns {boolean} <i>true</i> if DOM element, <i>false</i> otherwise
     */
    Common.IsObject = function (object) {

        return typeof object === 'object';

    };

    /**
     * @function Common.IsFunction
     * @param {object} object - A variable
     * @description Determines if object is a function
     * @returns {boolean} <i>true</i> if function, <i>false</i> otherwise
     */
    Common.IsFunction = function (object) {

        return typeof object === 'function';

    };

    /**
     * @function Common.IsString
     * @param {object} object - A variable
     * @description Determines if object is a string
     * @returns {boolean} <i>true</i> if string, <i>false</i> otherwise
     */
    Common.IsString = function (object) {

        return typeof object === 'string';

    };

    /**
     * @function Common.IsNumber
     * @param {object} object - A variable
     * @description Determines if object is a number
     * @returns {boolean} <i>true</i> if number, <i>false</i> otherwise
     */
    Common.IsNumber = function (object) {

        return typeof object === 'number';

    };

    /**
     * @function Common.IsNumeric
     * @param {object} value - A variable
     * @description Determines if a value is numeric
     * @returns {boolean} <i>true</i> if numeric, <i>false</i> otherwise
     */
    Common.IsNumeric = function (value) {

        return !Common.IsArray(value) && (value - parseFloat(value) + 1) >= 0;

    };

    /**
     * @function Common.IsBoolean
     * @param {object} object - A variable
     * @description Determines if object is a boolean
     * @returns {boolean} <i>true</i> if boolean, <i>false</i> otherwise
     */
    Common.IsBoolean = function (object) {

        return typeof object === 'boolean';

    };

    /**
     * @function Common.IsBoolean
     * @param {object} object - A variable
     * @description Determines if object is an array
     * @returns {boolean} <i>true</i> if array, <i>false</i> otherwise
     */
    Common.IsArray = function (object) {

        return Array.isArray(object);

    };

    /**
     * @function Common.IsModal
     * @description Determines if current context is a modal
     * @returns {boolean} <i>true</i> if modal, <i>false</i> otherwise
     */
    Common.IsModal = function () {

        return window.location != window.parent.location;

    };

    /**
     * @function Common.IsDefined
     * @param {object} value - A variable
     * @description Determines if value defined and not null
     * @returns {boolean} <i>true</i> if defined, <i>false</i> otherwise
     */
    Common.IsDefined = function (value) {

        return typeof value !== 'undefined' && value != null;

    };

    /**
     * @function Common.IsNotDefined
     * @param {object} value - A variable
     * @description Determines if value is undefined or null
     * @returns {boolean} <i>true</i> if undefined, <i>false</i> otherwise
     */
    Common.IsNotDefined = function (value) {

        return !Common.IsDefined(value);

    };

    /**
     * @function Common.IsEmptyObject
     * @param {object} object - A variable
     * @description Determines if object is empty
     * @returns {boolean} <i>true</i> if empty, <i>false</i> otherwise
     */
    Common.IsEmptyObject = function (object) {

        var property;
        for (property in object) {
            return false;
        }
        return true;

    };

    /**
     * @function Common.IsEmptyElement
     * @param {object} element - A DOM element
     * @description Determines if element is empty
     * @returns {boolean} <i>true</i> if empty, <i>false</i> otherwise
     */
    Common.IsEmptyElement = function (element) {

        if (Common.IsDefined(element)) {
            for (element = element.firstChild; element; element = element.nextSibling) {
                if (element.nodeType < 6) {
                    return false;
                }
            }
            return true;
        }
        return false;

    };

    /**
     * @function Common.IsEmptyString
     * @param {string} value - A string variable
     * @description Determines if string is empty
     * @returns {boolean} <i>true</i> if empty, <i>false</i> otherwise
     */
    Common.IsEmptyString = function (value) {

        return value === '';

    };

    /**
     * @function Common.IsNotEmptyString
     * @param {string} value - A string variable
     * @description Determines if string is not empty
     * @returns {boolean} <i>true</i> if not empty, <i>false</i> otherwise
     */
    Common.IsNotEmptyString = function (value) {

        return !Common.IsEmptyString(value);

    };


    // Polyfill if no browser support for stringEndsWith (IE is why we can't have nice things!)
    (function () {

        if (!String.prototype.endsWith) {
            String.prototype.endsWith = function (searchString, position) {
                var subjectString = this.toString();
                if (!position || position > subjectString.length) {
                    position = subjectString.length;
                }
                position -= searchString.length;
                var lastIndex = subjectString.indexOf(searchString, position);
                return lastIndex !== -1 && lastIndex === position;
            };
        }

    }());

    /**
     * @function Common.StringEndsWith
     * @param {string} string - Source string
     * @param {string} search - Search string
     * @param {number} range - Length of the string to search
     * @description Determines if a string ends a value
     * @returns {boolean} <i>true</i> if found, <i>false</i> otherwise
     */
    Common.StringEndsWith = function (string, search, range) {

        return string.endsWith(search, range);

    };

    /**
     * @function Common.IsOneDefined
     * @param {object[]} array - An array
     * @description Checks if an array of values has one value that is defined and not null
     * @returns {boolean} <i>true</i> if one is defined, <i>false</i> otherwise
     */
    Common.IsOneDefined = function (array) {

        var isDefined = false;
        if (Common.IsDefined(array)) {
            var object, index = 0, length = array.length;
            for (; index < length; index++) {
                object = array[index];
                if (Common.IsDefined(object)) {
                    isDefined = true;
                    break;
                }
            }
        }
        return isDefined;

    };

    /**
     * @function Common.AreAllDefined
     * @param {object[]} array - An array
     * @description Checks if an array of values are all defined and not null
     * @returns {boolean} <i>true</i> if all are defined, <i>false</i> otherwise
     */
    Common.AreAllDefined = function (array) {

        var allDefined = false;
        if (Common.IsDefined(array)) {
            var object, index = 0, length = array.length;
            for (; index < length; index++) {
                object = array[index];
                if (Common.IsNotDefined(object)) {
                    allDefined = false;
                    break;
                }
                allDefined = true;
            }
        }
        return allDefined;

    };

    /**
     * @function Common.Transfer
     * @param {object} fromElement - A DOM element
     * @param {object} toElement - A DOM element
     * @param {string} className - A CSS class
     * @param {number} duration - Transfer duration
     * @param {callback} callback - Callback function after animation
     * @description jQueryUI Transfer Animation using Velocity
     */
    Common.Transfer = function (fromElement, toElement, className, duration, callback) {

        if (Common.IsNotDefined(fromElement) || Common.IsNotDefined(toElement)) {
            return;
        }

        // Initialize
        className = (Common.IsNotDefined(className)) ? '' : className;
        var isTargetFixed = Common.GetStyle(toElement, 'position') === 'fixed';
        var bodyObject = document.body;
        var fixedTop = isTargetFixed ? bodyObject.scrollTop : 0;
        var fixedLeft = isTargetFixed ? bodyObject.scrollLeft : 0;
        var endPosition = Common.Offset(toElement);
        var animation = {
            top: endPosition.top - fixedTop,
            left: endPosition.left - fixedLeft,
            height: Common.Height(toElement),
            width: Common.Width(toElement)
        };
        var startPosition = Common.Offset(fromElement);

        // Create and insert transfer element
        var transferMarkup = '<div class="gtc-transfer-effect ' + className + '" style="';
        transferMarkup += 'top:' + (startPosition.top - fixedTop) + 'px;';
        transferMarkup += 'left:' + (startPosition.left - fixedLeft) + 'px;';
        transferMarkup += 'height:' + Common.Height(fromElement) + 'px;';
        transferMarkup += 'width:' + Common.Width(fromElement) + 'px;';
        transferMarkup += 'position:' + (isTargetFixed ? 'fixed' : 'absolute') + ';';
        transferMarkup += '"></div>';
        Common.InsertHTMLString(bodyObject, Common.InsertType.Append, transferMarkup);
        var transferElement = bodyObject.lastChild;

        // Animate
        Velocity(transferElement, animation, duration, function () {
            Common.Remove(transferElement);
            if (Common.IsFunction(callback)) {
                callback();
            }
        });

    };

    /**
     * @function Common.Slide
     * @param {object} element - A DOM element
     * @param {object} displayType - show or hide
     * @param {string} direction - up, down, left or right
     * @param {number} duration - Slide duration
     * @param {callback} callback - Callback function after animation
     * @description jQueryUI Slide Hide/Show Left/Right/Up/Down Animation using Velocity
     */
    Common.Slide = function (element, displayType, direction, duration, callback) {

        if (Common.IsNotDefined(element)) {
            return;
        }

        // Initialize
        duration = (Common.IsNotDefined(duration) ? 'slow' : duration);
        var properties = ['position', 'top', 'bottom', 'left', 'right', 'width', 'height'];
        var isShowing = (displayType == 'show');
        var positiveMotion = (direction == 'up' || direction == 'left');
        var cssValue = (direction == 'up' || direction == 'down') ? 'top' : 'left';
        var distance, animation = {};

        // Save current properties and adjust for animation
        SaveProperties(element, properties);
        if (element.style.display == 'none') {
            element.style.display = '';
        }
        if (cssValue == 'left') {
            distance = Common.Width(element, true);
        }
        else {
            distance = Common.Height(element, true);
        }

        // Wrap element
        AddWrapper(element);

        // Set element to its starting position when showing
        if (isShowing) {
            element.style[cssValue] = (positiveMotion ? (isNaN(distance) ? '-' + distance : -distance) : distance) + 'px';
        }

        // Initialize animation object with values
        animation[cssValue] = (isShowing ? (positiveMotion ? '+=' : '-=') : (positiveMotion ? '-=' : '+=')) + distance;

        // Animate
        Velocity(element, animation, {
            queue: false,
            duration: duration,
            complete: function () {
                if (displayType == 'hide') {
                    element.style.display = 'none';
                }
                RestoreProperties(element, properties);
                RemoveWrapper(element);
                if (Common.IsFunction(callback)) {
                    callback();
                }
            }
        });

    };

    /**
     * @function Common.SlideElements
     * @param {object} elements - DOM element array
     * @param {object} displayType - show or hide
     * @param {string} direction - up, down, left or right
     * @param {number} duration - Slide duration
     * @param {callback} callback - Callback function after animation
     * @description jQueryUI Slide Hide/Show Left/Right/Up/Down Animation using Velocity
     */
    Common.SlideElements = function (elements, displayType, direction, duration, callback) {

        if (Common.IsNotDefined(elements)) {
            return;
        }

        // Loop and slide
        var index = 0, length = elements.length;
        for (; index < length; index++) {
            Common.Slide(elements[index], displayType, direction, duration, callback);
        }

    };

    // Private Methods (jQueryUI)
    function AddWrapper(element) {

        // If the element is already wrapped, return
        if (Common.HasClass(element.parentNode, 'gtc-wrapper')) {
            return;
        }

        // Wrap the element
        var elementStyle = element.style;
        var properties = {
            width: Common.Width(element, true),
            height: Common.Height(element, true),
            'float': Common.GetStyle(element, 'float')
        };
        var wrapper = Common.Create('div', null, 'gtc-wrapper');
        var wrapperStyle = wrapper.style;
        wrapperStyle.fontSize = '100%';
        wrapperStyle.background = 'transparent';
        wrapperStyle.border = 'none';
        wrapperStyle.margin = 0;
        wrapperStyle.padding = 0;
        wrapperStyle.overflow = 'hidden';

        // Store the size in case width/height are defined in %
        var size = {
            width: Common.Width(element),
            height: Common.Height(element)
        };
        var active = document.activeElement;

        // Firefox incorrectly exposes anonymous content
        // https://bugzilla.mozilla.org/show_bug.cgi?id=561664
        try {
            active.id;
        }
        catch (e) {
            active = document.body;
        }
        Common.Wrap(element, wrapper);

        // Elements lose focus when wrapped.
        if (element === active || element.contains(active)) {
            active.focus();
        }
        wrapper = element.parentNode;

        // Transfer positioning properties to the wrapper
        if (Common.GetStyle(element, 'position') == 'static') {
            wrapperStyle.position = 'relative';
            elementStyle.position = 'relative';
        }
        else {
            Common.MergeObjects(properties, {
                position: Common.GetStyle(element, 'position'),
                zIndex: Common.GetStyle(element, 'z-index')
            });
            var directional = ['top', 'left', 'bottom', 'right'], index = 0, length = 4;
            for (; index < length; index++) {
                var indexValue = directional[index];
                properties[indexValue] = Common.GetStyle(element, indexValue);
                if (isNaN(parseInt(properties[indexValue], 10))) {
                    properties[indexValue] = 'auto';
                }
            }
            elementStyle.position = 'relative';
            elementStyle.top = 0;
            elementStyle.left = 0;
            elementStyle.right = 'auto';
            elementStyle.bottom = 'auto';
        }
        if (Common.IsNumeric(size.width)) {
            size.width += 'px';
        }
        elementStyle.width = size.width;
        if (Common.IsNumeric(size.height)) {
            size.height += 'px';
        }
        elementStyle.height = size.height;
        if (Common.IsDefined(properties.width)) {
            if (Common.IsNumeric(properties.width)) {
                properties.width += 'px';
            }
            wrapperStyle.width = properties.width;
        }
        if (Common.IsDefined(properties.height)) {
            if (Common.IsNumeric(properties.height)) {
                properties.height += 'px';
            }
            wrapperStyle.height = properties.height;
        }
        if (Common.IsDefined(properties.float)) {
            wrapperStyle.float = properties.float;
        }
        if (Common.IsDefined(properties.position)) {
            wrapperStyle.position = properties.position;
        }
        if (Common.IsDefined(properties.zIndex)) {
            wrapperStyle.zIndex = properties.zIndex;
        }
        if (Common.IsDefined(properties.top)) {
            if (Common.IsNumeric(properties.top)) {
                properties.top += 'px';
            }
            wrapperStyle.top = properties.top;
        }
        if (Common.IsDefined(properties.left)) {
            if (Common.IsNumeric(properties.left)) {
                properties.top += 'px';
            }
            wrapperStyle.left = properties.left;
        }
        if (Common.IsDefined(properties.right)) {
            if (Common.IsNumeric(properties.right)) {
                properties.top += 'px';
            }
            wrapperStyle.right = properties.right;
        }
        if (Common.IsDefined(properties.bottom)) {
            if (Common.IsNumeric(properties.bottom)) {
                properties.top += 'px';
            }
            wrapperStyle.bottom = properties.bottom;
        }
        wrapper.style.display = '';

    };

    function RemoveWrapper(element) {

        var active = document.activeElement;
        var wrapper = element.parentNode;
        if (Common.HasClass(wrapper, 'gtc-wrapper')) {
            wrapper.parentNode.replaceChild(element, wrapper);
            if (element === active || element.contains(active)) {
                active.focus();
            }
        }
        return element;

    };

    function SaveProperties(element, properties) {

        var index = 0, length = properties.length;
        for (; index < length; index++) {
            if (properties[index] !== null) {
                Cache.Set(element, 'gtc-propertystore-' + properties[index], element.style[properties[index]]);
            }
        }

    };

    function RestoreProperties(element, properties) {

        var value, index = 0, length = properties.length;
        for (; index < length; index++) {
            if (properties[index] !== null) {
                value = Cache.Get(element, 'gtc-propertystore-' + properties[index]);
                if (value === undefined) {
                    value = '';
                }
                element.style[properties[index]] = value;
                Cache.Remove(element, 'gtc-propertystore-' + properties[index]);
            }
        }

    };

    var browserCacheData = {
        Cached: false,
        AttributeString: '',
        DataArray: []
    };

    /**
     * @function Common.GetBrowser
     * @param {boolean} asAttributeString - Set as attribute
     * @description Determines Browser
     */
    Common.GetBrowser = function (asAttributeString) {

        if (browserCacheData.Cached === false) {
            var userAgent = navigator.userAgent;
            var agentTest = userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
            var version = '';
            if (/trident/i.test(agentTest[1])) {
                version = /\brv[ :]+(\d+)/g.exec(userAgent) || [];
                browserCacheData.DataArray = ['IE', (version[1] || '')];
                browserCacheData.Cached = true;
            }
            if (browserCacheData.Cached === false && agentTest[1] === 'Chrome') {
                version = userAgent.match(/\bOPR\/(\d+)/);
                if (version != null) {
                    browserCacheData.DataArray = ['Opera', version[1]];
                    browserCacheData.Cached = true;
                }
            }
            if (browserCacheData.Cached === false) {
                agentTest = agentTest[2] ? [agentTest[1], agentTest[2]] : [navigator.appName, navigator.appVersion, '-?'];
                if ((version = userAgent.match(/version\/(\d+)/i)) != null) {
                    agentTest.splice(1, 1, version[1]);
                }
                browserCacheData.DataArray = agentTest;
                browserCacheData.Cached = true;
            }
            browserCacheData.AttributeString = ' data-browsername="' + browserCacheData.DataArray[0] + '" data-browserversion="' + browserCacheData.DataArray[1] + '"';
        }
        if (asAttributeString) {
            return browserCacheData.AttributeString;
        }
        else {
            return browserCacheData.DataArray;
        }

    };

    var BitsCache = [];

    /**
     * @function Common.GenerateUniqueID
     * @description Generate a GUID
     */
    Common.GenerateUniqueID = function () {

        if (BitsCache.length == 0) {
            var bitIndex = 0;
            for (; bitIndex < 256; bitIndex++) {
                BitsCache[bitIndex] = (bitIndex < 16 ? '0' : '') + bitIndex.toString(16);
            }
        }
        var generatedUniqueID = '';
        var generatedBits1 = Math.random() * 0xffffffff | 0;
        var generatedBits2 = Math.random() * 0xffffffff | 0;
        var generatedBits3 = Math.random() * 0xffffffff | 0;
        var generatedBits4 = Math.random() * 0xffffffff | 0;
        generatedUniqueID += BitsCache[generatedBits1 & 0xff] + BitsCache[generatedBits1 >> 8 & 0xff] + BitsCache[generatedBits1 >> 16 & 0xff] + BitsCache[generatedBits1 >> 24 & 0xff] + '-';
        generatedUniqueID += BitsCache[generatedBits2 & 0xff] + BitsCache[generatedBits2 >> 8 & 0xff] + '-' + BitsCache[generatedBits2 >> 16 & 0x0f | 0x40] + BitsCache[generatedBits2 >> 24 & 0xff] + '-';
        generatedUniqueID += BitsCache[generatedBits3 & 0x3f | 0x80] + BitsCache[generatedBits3 >> 8 & 0xff] + '-' + BitsCache[generatedBits3 >> 16 & 0xff] + BitsCache[generatedBits3 >> 24 & 0xff];
        generatedUniqueID += BitsCache[generatedBits4 & 0xff] + BitsCache[generatedBits4 >> 8 & 0xff] + BitsCache[generatedBits4 >> 16 & 0xff] + BitsCache[generatedBits4 >> 24 & 0xff];
        return generatedUniqueID;

    };

    /**
     * @function Common.Base64ToBlob
     * @param {string} base64Data - Base64 content string 
     * @param {string} contentType - Mime Type
     * @description Converts a base64 string to a blob
     */
    Common.Base64ToBlob = function (base64Data, contentType) {

        // Initialize content type, slice size and slice index
        contentType = contentType || '';
        var sliceSize = 1024;
        var sliceIndex = 0;

        // Decode base 64 string
        var byteCharacters = atob(base64Data);

        // Initialize containers and counts
        var bytesLength = byteCharacters.length;
        var slicesCount = Math.ceil(bytesLength / sliceSize);
        var byteArrays = new Array(slicesCount);

        // Process slices (processing data in smaller chunks increases performance)
        for (; sliceIndex < slicesCount; ++sliceIndex) {
            var begin = sliceIndex * sliceSize;
            var end = Math.min(begin + sliceSize, bytesLength);

            // Create character for each byte of the binary data
            var bytes = new Array(end - begin);
            var offset = begin;
            var index = 0;
            for (; offset < end; ++index, ++offset) {
                bytes[index] = byteCharacters[offset].charCodeAt(0);
            }

            // Convert byte values into typed byte array
            byteArrays[sliceIndex] = new Uint8Array(bytes);
        }

        // Create and return new blob
        return new Blob(byteArrays, { type: contentType });

    };

    /**
     * @function Common.ExecuteBlobDownload
     * @param {binary} blob - Base 64 content
     * @param {string} fileName - A filename 
     * @description Creates a URL from a blob and downloads the data or in IE case does something proprietary
     */
    Common.ExecuteBlobDownload = function (blob, fileName) {

        // IE is why we can't have nice things!!
        if (window.navigator.msSaveOrOpenBlob) {
            window.navigator.msSaveOrOpenBlob(blob, fileName);
        }
        else {
            // Create download url from blob memory address
            var fileUrl = URL.createObjectURL(blob);

            // Create link, click, remove
            var downloadLink = document.createElement('a');
            downloadLink.href = fileUrl;
            downloadLink.download = fileName;
            document.body.appendChild(downloadLink);
            downloadLink.click();
            Common.Remove(downloadLink);
        }

    };

    var timeoutId, authenticationMode, sessionTokenTimeout, timeoutRedirect;

    /**
     * @function Common.CreateTimeout
     * @param {} time - Session timeout duration in seconds
     * @param {} redirect - Redirect URL
     * @param {} winAuth - Authentication mode
     * @description Creates a Timeout for a Session
     */
    Common.CreateTimeout = function (time, redirect, winAuth) {

        authenticationMode = winAuth;
        sessionTokenTimeout = parseInt(time, 10) * 60000;
        timeoutRedirect = redirect;
        timeoutId = window.setTimeout(
            function () {
                LogoutTimeout();
            }, sessionTokenTimeout
        );

    };

    /**
     * @function Common.RefreshTimeout
     * @description Refresh (Restart) the Session timeout
     */
    Common.RefreshTimeout = function () {

        if (Common.IsDefined(sessionTokenTimeout)) {
            window.clearTimeout(timeoutId);
            timeoutId = window.setTimeout(
                function () {
                    LogoutTimeout();
                }, sessionTokenTimeout
            );
        }

    };

    // Private Methods (Local Timeouts)
    function LogoutTimeout() {

        Common.Remove(Common.FilterElementArray(document.body.children, 'div'));
        if (authenticationMode == 'Windows') {
            var requestObject = new XMLHttpRequest();
            requestObject.open('POST', '/Base/Logoff', true, 'GTCInvalidUser', 'GTCInvalidPassword');
            requestObject.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
            requestObject.onload = function () {
                window.location = timeoutRedirect;
            };
            requestObject.onerror = function () {
                window.location = timeoutRedirect;
            };
            requestObject.send();
        }
        else {
            window.location = timeoutRedirect;
        }

    };

    // Initialize
    document.addEventListener('DOMContentLoaded',
        function () {
            document.removeEventListener('DOMContentLoaded', arguments.callee);
            window.onerror = function (message, url, line) {
                var currentContext = Common.GetStorage('CurrentContext');
                var errorMessage = {
                    Type: -1,
                    Title: null,
                    Body: null
                };
                Modals.ShowMessageDialog(errorMessage,
                    function (modalResult) {
                        if (currentContext && currentContext.toLowerCase().indexOf('modal') != -1) {
                            parent.location.reload();
                        }
                        else {
                            parent.history.back();
                        }
                    }
                );

                // Cleanup Breadcrumb
                var breadcrumbNamespace = window['Breadcrumb'];
                if (Common.IsDefined(breadcrumbNamespace)) {
                    breadcrumbNamespace.PopBreadcrumbData();
                }

                // Cleanup pinwheels
                Common.Remove(Common.QueryAll('.gtc-pinwheel, .gtc-pinwheel-overlay', null, true));
                Common.Remove(Common.QueryAll('.gtc-pinwheel, .gtc-pinwheel-overlay'));
            };
        }
    );

}(window.Common = window.Common || {}, Velocity, window, document));
/** 
 * @class Cache
 * @classdesc This is complete port of jQuery 3.0 data cache code to pure vanilla javascript
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (Cache, window, document, Common, undefined) {

    // Private Variables
    var rnotwhite = (/\S+/g);
    var rmsPrefix = /^-ms-/;
    var rdashAlpha = /-([\da-z])/gi;
    var fcamelCase = function (all, letter) {

        return letter.toUpperCase();

    };

    // Private Methods
    function CamelCase (string) {

        return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);

    };

    function AcceptData (owner) {

        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner && (owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType));

    };

    // Data Cache Definition
    function Data () {

        this.CacheKey = 'GTCCache3.0' + Data.Guid++;

    };
    Data.Guid = 1;
    Data.Accepts = AcceptData;
    Data.prototype = {
        register: function (owner) {

            var value = {};

            // If it is a node unlikely to be stringify-ed or looped over use plain assignment
            if (owner.nodeType) {
                owner[this.CacheKey] = value;
            }
            else {
                // Otherwise secure it in a non-enumerable, non-writable property
                // configurability must be true to allow the property to be
                // deleted with the delete operator
                Object.defineProperty(owner, this.CacheKey, {
                    value: value,
                    writable: true,
                    configurable: true
                });
            }
            return owner[this.CacheKey];

        },
        cache: function (owner) {

            // We can accept data for non-element nodes in modern browsers, but we should not, see #8335.
            // Always return an empty object.
            if (!Data.Accepts(owner)) {
                return {};
            }

            // Check if the owner object already has a cache
            var cache = owner[this.CacheKey];

            // If so, return it
            if (cache) {
                return cache;
            }

            // If not, register one
            return this.register(owner);

        },
        set: function (owner, data, value) {

            var prop, cache = this.cache(owner);
            if (Common.IsString(data)) {
                cache[CamelCase(data)] = value;
            }
            else {
                // Copy the properties one-by-one to the cache object
                for (prop in data) {
                    cache[CamelCase(prop)] = data[prop];
                }
            }
            return cache;

        },
        get: function (owner, key) {

            var cache = this.cache(owner);
            return key === undefined ? cache : cache[CamelCase(key)];

        },
        access: function (owner, key, value) {

            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the 'read' path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if (key === undefined || ((key && Common.IsString(key)) && value === undefined)) {
                return this.get(owner, key);
            }

            // [*]When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set(owner, key, value);

            // Since the 'set' path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;

        },
        remove: function (owner, key) {

            var index, cache = owner[this.CacheKey];

            if (cache === undefined) {
                return;
            }

            if (key !== undefined) {

                // Support array or space separated string of keys
                if (Common.IsArray(key)) {
                    key = key.map(CamelCase);
                }
                else {
                    key = CamelCase(key);

                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ? [key] : (key.match(rnotwhite) || []);
                }

                index = key.length;

                while (index--) {
                    delete cache[key[index]];
                }
            }

            // Remove the cache key if there's no more data
            if (key === undefined || Common.IsEmptyObject(cache)) {
                delete owner[ this.CacheKey ];
            }

        },
        hasData: function (owner) {

            var cache = owner[this.CacheKey];
            return cache !== undefined && !Common.IsEmptyObject(cache);

        }
    };

    // Create new cache
    var DataCache = new Data();

    /**
     * @function Cache.Get
     * @param {object} element - A DOM element
     * @param {string} [key] - A Key
     * @description Gets a cached item
     * @returns {object} The cached item
     */
    Cache.Get = function (element, key) {

        return DataCache.get(element, key);

    };

    /**
     * @function Cache.Set
     * @param {object} element - A DOM element
     * @param {string} [key] - A Key
     * @param {object} value - The item to be cached
     * @description Caches an item
     * @returns {object} The cache of the element
     */
    Cache.Set = function (element, key, value) {

        return DataCache.set(element, key, value);

    };

    /**
     * @function Cache.Access
     * @param {object} element - A DOM element
     * @param {string} [key] - A Key
     * @param {object} [value] - The item to be cached
     * @description Caches an item<br>
                    In cases where either:<br>
                        &nbsp;&nbsp;1. No key was specified<br>
                        &nbsp;&nbsp;2. A string key was specified, but no value provided<br>
                    Take the 'read' path and allow the get method to determine<br>
                    which value to return, respectively either:<br>
                        &nbsp;&nbsp;1. The entire cache object<br>
                        &nbsp;&nbsp;2. The data stored at the key<br>
     * @returns {object} The cached value or the key
     */
    Cache.Access = function (element, key, value) {

        return DataCache.access(element, key, value);

    };

    /**
     * @function Cache.HasData
     * @param {object} element - A DOM element
     * @description Checks to see if the element has any cached data
     * @returns {boolean} <i>true</i> or <i>false</i> based on existence of cached data
     */
    Cache.HasData = function (element) {

        return DataCache.hasData(element);

    };

    /**
     * @function Cache.Remove
     * @param {object} element - A DOM element
     * @param {string} [key] - A Key
     * @description Removed a cached item or the cache of the element
     */
    Cache.Remove = function (element, key) {

        return DataCache.remove(element, key);

    };

    /**
     * @function Cache.CleanElementData
     * @param {object} element - A DOM element
     * @param {boolean} ignoreDelegatedData - If <i>true</i> then remove cache of the children
     * @description Called from Common.Remove among other places to cleanup data and events on elements
     * @todo Test performance
     */
    Cache.CleanElementData = function (elements, ignoreDelegatedData) {

        // Convert elements to an array, if necessary.
        if (!elements.length) {
            elements = [elements];
        }
        var data, element, type, index = 0;
        var eventInternal = Events.GetInternal();
        var special = eventInternal.special;

        // For each element destroy widgets, remove events and delete any remaining data
        for ( ; (element = elements[index]) !== undefined; index++) {
            if (AcceptData(element) && (data = element[DataCache.CacheKey])) {
                if (data.events) {
                    // Destroy widgets on elements
                    try {
                        // Only trigger remove when necessary to save time
                        if (data.events.remove) {
                            Events.TriggerHandler(element, 'remove');
                        }
                    } catch (e) {}

                    // Remove events
                    if (ignoreDelegatedData != true) {
                        CleanDelegatedElementData(element);
                    }
                    for (type in data.events) {
                        if (special[type]) {
                            eventInternal.remove(element, type);
                        }
                        else {
                            // Shortcut to avoid Events.event.remove's overhead
                            if (element.removeEventListener) {
                                element.removeEventListener(type, data.handle);
                            }
                        }
                    }
                }

                // Remove data
                delete element[DataCache.CacheKey];
            }
        }

    };

    /**
     * @function Cache.CleanDelegatedElementsData
     * @param {object} element - A DOM element
     * @param {boolean} onlyChildren - If <i>true</i> then remove cache of the only the children otherwise included element also
     * @description Use this function to only remove delegated events from an element and all its children
                    Useful when you need to leave an element in the DOM for replacement while the replacement element
                    is being built with delegated events. Using this function you can remove delegated events, insert new element
                    then when you call Remove on the old element pass true to ignore delegated events on removal.
     */
    Cache.CleanDelegatedElementsData = function (element, onlyChildren) {

        if (element.nodeType === 1) {
            // Get all elements inside element to be removed and clean up their data and events as well
            // INFO: getElementsByTagName is MUCH faster in this context than querySelectorAll (NodeList - live vs static)
            var childElements = element.getElementsByTagName('*');

            // Merge top element back in for clean up
            if (onlyChildren != true) {
                childElements = Common.MergeArray([element], childElements);
            }

            // For each element remove delegated events
            var element, index = 0;
            for ( ; (element = childElements[index]) !== undefined; index++) {
                CleanDelegatedElementData(element);
            }
        }

    };

    // Private Methods
    function CleanDelegatedElementData (element) {

        var id = element.id;
        if (Common.IsDefined(id) && Common.IsNotEmptyString(id)) {
            id = '.' + id;
            Events.Off(document.body, id);
            Events.Off(document, id);
            Events.Off(window, id);
        }

    };

} (window.Cache = window.Cache || {}, window, document, Common));
// INFO: This is complete port of jQuery 2.1.1 event code to pure vanilla javascript
// Events
(function (Events, window, document, Common, Cache, Velocity, undefined) {

    // Private Variables
    var EventGUID = 0;
    var CommonGUID = 'GTCEvents' + ('2.1.1' + Math.random()).replace(/\D/g, '');
    var expr = {
        attrHandle: {},
        match: {
            bool: /^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$/i,
            needsContext: /^[\x20\t\r\n\f]*[>+~]/
        }
    };
    var FocusinBubbles = 'onfocusin' in window;
    var PlainObject = {};
    var HasOwn = PlainObject.hasOwnProperty;
    var PlainArray = [];
    var slice = PlainArray.slice;
    var concat = PlainArray.concat;
    var push = PlainArray.push;
    var indexOf = PlainArray.indexOf;
    var rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)/,
        rnotwhite = (/\S+/g);
    var eventInternal = {
        global: {},
        add: function (elem, types, handler, data, selector) {

            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType,
                elemData = Cache.Get(elem) || {};

            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                var context = {};
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // If the selector is invalid, throw any exceptions at attach time
            if (selector) {
                Find(selector, elem);
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
                handler.guid = 'GTCEvents' + EventGUID++;
            }

            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    // Discard the second event of a eventInternal.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof Events !== 'undefined' && eventInternal.triggered !== e.type ? eventInternal.dispatch.apply(elem, arguments) : undefined;
                };
            }

            // Handle multiple events separated by a space
            types = (types || '').match(rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();

                // There *must* be a type, no attaching namespace-only handlers
                if (!type) {
                    continue;
                }

                // If event changes its type, use the special event handlers for the changed type
                special = eventInternal.special[type] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;

                // Update special based on newly reset type
                special = eventInternal.special[type] || {};

                // handleObj is passed to all event handlers
                handleObj = Common.MergeObjects({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && expr.match.needsContext.test(selector),
                    namespace: namespaces.join('.')
                }, handleObjIn);

                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener if the special events handler returns false
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        }
                    }
                }

                if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // Add to the element's handler list, delegates in front
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                }
                else {
                    handlers.push(handleObj);
                }

                // Keep track of which events have ever been used, for event optimization
                eventInternal.global[type] = true;
            }

        },

        // Detach an event or set of events from an element
        remove: function (elem, types, handler, selector, mappedTypes) {

            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType,
                elemData = Cache.HasData(elem) && Cache.Get(elem);

            if (!elemData || !(events = elemData.events)) {
                return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = (types || '').match(rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();

                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for (type in events) {
                        eventInternal.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }

                special = eventInternal.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');

                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];

                    if ((mappedTypes || origType === handleObj.origType) &&
                        (!handler || handler.guid === handleObj.guid) &&
                        (!tmp || tmp.test(handleObj.namespace)) &&
                        (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                        handlers.splice(j, 1);

                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        Events.RemoveEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }

            // Remove the CommonGUID if it's no longer used
            if (Common.IsEmptyObject(events)) {
                delete elemData.handle;
                Cache.Remove(elem, 'events');
            }
        },

        trigger: function (event, data, elem, onlyHandlers) {

            var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document],
                type = HasOwn.call(event, 'type') ? event.type : event,
                namespaces = HasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];

            cur = tmp = elem = elem || document;

            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + eventInternal.triggered)) {
                return;
            }

            if (type.indexOf('.') >= 0) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split('.');
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(':') < 0 && 'on' + type;

            // Caller can pass in a Events.Event object, Object, or just an event type string
            event = event[CommonGUID] ? event : new Events.Event(type, Common.IsObject(event) && event);

            // Trigger bitmask: & 1 for native handlers; & 2 for custom (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join('.');
            event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;

            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [event] : MakeArray(data, [event]);

            // Allow special events to draw outside the lines
            special = eventInternal.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }

            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !Common.IsWindow(elem)) {

                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for ( ; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }

            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

                event.type = i > 1 ? bubbleType : special.bindType || type;

                // Custom handler
                handle = (Cache.Get(cur, 'events') || {})[event.type] && Cache.Get(cur, 'handle');
                if (handle) {
                    handle.apply(cur, data);
                }

                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && AcceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {

                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && AcceptData(elem)) {

                    // Call a native DOM method on the target with the same name name as the event.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if (ontype && Common.IsFunction(elem[type]) && !Common.IsWindow(elem)) {

                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];

                        if (tmp) {
                            elem[ontype] = null;
                        }

                        // Prevent re-triggering of the same event, since we already bubbled it above
                        eventInternal.triggered = type;
                        elem[type]();
                        eventInternal.triggered = undefined;

                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },

        dispatch: function (nativeEvent) {

            // Make a writable Events.Event from the native event object
            var event = eventInternal.fix(nativeEvent);

            var i, j, ret, matched, handleObj, handlerQueue,
                args = new Array(arguments.length),
                handlers = (Cache.Get(this, 'events') || {})[event.type] || [],
                special = eventInternal.special[event.type] || {};

            // Use the fix-ed Events.Event rather than the (read-only) native event
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
            }
            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }

            // Determine handlers
            handlerQueue = eventInternal.handlers.call(this, event, handlers);

            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;

                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

                    // Triggered event must either 1) have no namespace, or
                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {

                        event.handleObj = handleObj;
                        event.data = handleObj.data;

                        ret = ((eventInternal.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },

        handlers: function (event, handlers) {
            var i, matches, sel, handleObj,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            // Avoid non-left-click bubbling in Firefox (#3861)
            if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {

                for ( ; cur !== this; cur = cur.parentNode || this) {

                    // Don't check non-elements (#13208)
                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== 'click')) {
                        matches = [];
                        for ( i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];

                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + ' ';

                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? Index(Common.QueryAll(sel, this), cur) >= 0 : Find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({ elem: cur, handlers: matches });
                        }
                    }
                }
            }

            // Add the remaining (directly-bound) handlers
            if (delegateCount < handlers.length) {
                handlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) });
            }
            return handlerQueue;
        },

        addProp: function (name, hook) {
            Object.defineProperty(Events.Event.prototype, name, {
                enumerable: true,
                configurable: true,

                get: Common.IsFunction(hook) ?
                    function () {
                        if (this.originalEvent) {
                            return hook(this.originalEvent);
                        }
                    } :
                    function () {
                        if (this.originalEvent) {
                            return this.originalEvent[name];
                        }
                    },

                set: function (value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },

        fix: function (originalEvent) {
            return originalEvent[CommonGUID] ? originalEvent : new Events.Event(originalEvent);
        },

        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            focus: {
                // Fire native event if possible so blur/focus sequence is correct
                trigger: function () {
                    if (this !== SafeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: 'focusin'
            },
            blur: {
                trigger: function () {
                    if (this === SafeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: 'focusout'
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function () {
                    if (this.type === 'checkbox' && this.click && Common.CheckNodeType(this, 'input')) {
                        this.click();
                        return false;
                    }
                },

                // For cross-browser consistency, don't fire native .click() on links
                _default: function (event) {
                    return Common.CheckNodeType(event.target, 'a');
                }
            },

            beforeunload: {
                postDispatch: function (event) {

                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },

        simulate: function (type, elem, event, bubble) {
            // Piggyback on a donor event to simulate a different one
            // Used only for `focus(in | out)` events
            var e = Common.MergeObjects(
                new Events.Event(),
                event,
                {
                    type: type,
                    isSimulated: true
                }
            );
            eventInternal.trigger(e, null, elem);
        }
    };

    // Events.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    Events.Event = function (src, props) {
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof Events.Event)) {
            return new Events.Event(src, props);
        }

        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            // Support: Android < 4.0
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? ReturnTrue : ReturnFalse;

            // Create target properties
            // Support: Safari <=6 - 7 only
            // Target should not be a text node (#504, #13143)
            this.target = (src.target && src.target.nodeType === 3) ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;

        // Event type
        }
        else {
            this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if (props) {
            Common.MergeObjects(this, props);
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || Date.now();

        // Mark it as fixed
        this[CommonGUID] = true;
    };

    Events.Event.prototype = {
        constructor: Events.Event,
        isDefaultPrevented: ReturnFalse,
        isPropagationStopped: ReturnFalse,
        isImmediatePropagationStopped: ReturnFalse,
        isSimulated: false,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = ReturnTrue;
            if (e && !this.isSimulated) {
                e.preventDefault();
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = ReturnTrue;
            if (e && !this.isSimulated) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function () {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = ReturnTrue;
            if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };

    // Public Methods
    Events.RemoveEvent = function (elem, type, handle) {

        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }

    };

    Events.GetInternal = function (property) {

        if (Common.IsDefined(property) && Common.IsNotEmptyString(property)) {
            return eventInternal[property];
        }
        else {
            return eventInternal;
        }

    };

    Events.On = function (elements, types, selector, data, fn, one) {

        var origFn, type;

        // Types can be a map of types/handlers
        if (Common.IsObject(types)) {
            // (types-Object, selector, data)
            if (Common.IsString(selector)) {
                // (types-Object, data)
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                Events.On(elements, type, selector, data, types[type], one);
            }
            return elements;
        }

        if (data == null && fn == null) {
            // (types, fn)
            fn = selector;
            data = selector = undefined;
        }
        else if (fn == null) {
            if (Common.IsString(selector)) {
                // (types, selector, fn)
                fn = data;
                data = undefined;
            }
            else {
                // (types, data, fn)
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = ReturnFalse;
        }
        else if (!fn) {
            return elements;
        }

        if (one === 1) {
            origFn = fn;
            fn = function (event) {
                // Can use an empty set, since event contains the info
                Events.Off(event);
                return origFn.apply(this, arguments);
            };

            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || (origFn.guid = 'GTCEvents' + EventGUID++);
        }
        if (Common.IsArray(elements)) {
            var index = 0, length = elements.length;
            for ( ; index < length; index++) {
                eventInternal.add(elements[index], types, fn, data, selector);
            }
        }
        else {
            eventInternal.add(elements, types, fn, data, selector);
        }

    };

    Events.One = function (elements, types, selector, data, fn) {

        return Events.On(elements, types, selector, data, fn, 1);

    };

    Events.Off = function (elements, types, selector, fn) {

        var handleObj, type;
        if (elements && elements.preventDefault && elements.handleObj) {
            // (event)  dispatched Events.Event
            handleObj = elements.handleObj;
            Events.Off(elements.delegateTarget,
                handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType,
                handleObj.selector,
                handleObj.handler
            );
            return elements;
        }
        if (Common.IsObject(types)) {
            // (types-object [, selector])
            for (type in types) {
                Events.Off(elements, type, selector, types[type]);
            }
            return elements;
        }
        if (selector === false || Common.IsFunction(selector)) {
            // (types [, fn])
            fn = selector;
            selector = undefined;
        }
        if (fn === false) {
            fn = ReturnFalse;
        }
        if (Common.IsArray(elements)) {
            var index = 0, length = elements.length;
            for ( ; index < length; index++) {
                eventInternal.remove(elements[index], types, fn, selector);
            }
        }
        else {
            eventInternal.remove(elements, types, fn, selector);
        }

    };

    Events.Trigger = function (elements, type, data) {

        if (Common.IsArray(elements)) {
            var index = 0, length = elements.length;
            for ( ; index < length; index++) {
                eventInternal.trigger(type, data, elements[index]);
            }
        }
        else {
            eventInternal.trigger(type, data, elements);
        }

    };

    Events.TriggerHandler = function (element, type, data) {

        if (element) {
            return eventInternal.trigger(type, data, element, true);
        }

    };

    Events.GetNextEventGUID = function () {

        return EventGUID++;

    };

    // Private Methods
    // Custom function to support $.find
    function Find (selector, context, results, seed) {

        var elem, nodeType, i = 0;
        results = results || [];
        context = context || document;

        // Same basic safeguard as Sizzle
        if (!selector || !Common.IsString(selector)) {
            return results;
        }

        // Early return if context is not an element or document
        if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
            return [];
        }
        if (seed) {
            while ((elem = seed[i++])) {
                if (elem.matches(selector)) {
                    results.push(elem);
                }
            }
        }
        else {
            Common.MergeArray(results, Common.QueryAll(selector, context));
        }
        return results;

    };

    function Index (elements, elem) {

        // No argument, return index in parent
        if (!elem) {
            return (elements[0] && elements[0].parentNode) ? Common.GetAllSibling(elements[0], Common.SiblingType.Previous).length : -1;
        }

        // index in selector
        if (Common.IsString(elem)) {
            return indexOf.call(elem, elements[0]);
        }

        // Locate the position of the desired element
        return indexOf.call(elements, elem);

    }

    function MakeArray (arr, results) {

        var ret = results || [];
        if (arr != null) {
            if (IsArrayLike(Object(arr))) {
                Common.MergeArray(ret, Common.IsString(arr) ? [arr] : arr);
            }
            else {
                push.call(ret, arr);
            }
        }
        return ret;

    };

    function IsArrayLike (obj) {

        var length = obj.length,
            type = Common.GetType(obj);
        if (Common.IsFunction(type) || Common.IsWindow(obj)) {
            return false;
        }
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return type === 'array' || length === 0 || Common.IsNumber(length) && length > 0 && (length - 1) in obj;

    };

    function AcceptData (owner) {

        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);

    };

    function Contains (a, b) {

        var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && adown.contains(bup));

    }

    function ReturnTrue () {

        return true;

    };

    function ReturnFalse () {

        return false;

    };

    function SafeActiveElement () {

        try {
            return document.activeElement;
        }
        catch (err) {}

    };

    // Includes all common event props including KeyEvent and MouseEvent specific props
    var property, value;
    var eventProperties = {
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,

        which: function (event) {
            var button = event.button;

            // Add which for key events
            if (event.which == null && rkeyEvent.test(event.type)) {
                return event.charCode != null ? event.charCode : event.keyCode;
            }

            // Add which for click: 1 === left; 2 === middle; 3 === right
            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                return (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
            }

            return event.which;
        }
    };
    for (property in eventProperties) {
        value = eventProperties[property];
        eventInternal.addProp(property, value)
    }

    // Generate special events
    // Create mouseenter/leave events using mouseover/out and event-time checks
    // Support: Chrome 15+
    var mouseEvents = {
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
    };
    for (property in mouseEvents) {
        value = mouseEvents[property];
        (function (property, value) {
            eventInternal.special[property] = {
                delegateType: value,
                bindType: value,
                handle: function (event) {
                    var ret,
                        target = this,
                        related = event.relatedTarget,
                        handleObj = event.handleObj;

                    // For mousenter/leave call the handler if related is outside the target.
                    // NB: No relatedTarget if the mouse left/entered the browser window
                    if (!related || (related !== target && !Contains(target, related))) {
                        event.type = handleObj.origType;
                        ret = handleObj.handler.apply(this, arguments);
                        event.type = value;
                    }
                    return ret;
                }
            };
        }(property, value));
    }

    // Create 'bubbling' focus and blur events
    // Support: Firefox, Chrome, Safari
    if (!FocusinBubbles) {
        var bubbleEvents = {
            focus: 'focusin',
            blur: 'focusout'
        };
        for (property in bubbleEvents) {
            value = bubbleEvents[property];
            (function (property, value) {
                // Attach a single capturing handler on the document while someone wants focusin/focusout
                var handler = function (event) {
                    eventInternal.simulate(value, event.target, eventInternal.fix(event), true);
                };
                eventInternal.special[value] = {
                    setup: function () {
                        var doc = this.ownerDocument || this, attaches = Cache.Access(doc, value);
                        if (!attaches) {
                            doc.addEventListener(property, handler, true);
                        }
                        Cache.Access(doc, value, (attaches || 0) + 1);
                    },
                    teardown: function () {
                        var doc = this.ownerDocument || this, attaches = Cache.Access(doc, value) - 1;
                        if (!attaches) {
                            doc.removeEventListener(property, handler, true);
                            Cache.Remove(doc, value);

                        }
                        else {
                            Cache.Access(doc, value, attaches);
                        }
                    }
                };
            }(property, value));
        }
    }

} (window.Events = window.Events || {}, window, document, Common, Cache, Velocity));
// Page
(function (Page, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Variables
    Page.Images = 0;
    Page.LoadedImages = 0;

    // Private Variables
    var isSetEnvironmentRunning = false;

    // Public Methods : Page Setup
    Page.Setup = function (pageName, isFirstPage) {

        // First Page?
        if (isFirstPage) {
            // Get Theme, SpinKit and Language
            var theme = Common.GetAttr(document.body, 'data-theme');
            var language = Common.GetLanguage();
            var spinKit = SpinKit.Setup();

            // Clear Session Data
            Common.ClearStorage();

            // Reset Theme, Language, SpinKit and SessionToken
            Common.SetStorage('CurrentTheme', theme);
            Common.SetStorage('CurrentLanguage', language);
            Common.SetStorage("CurrentSpinKit", spinKit);
            Common.SetSessionToken(null);
        }

        // Set Context
        Common.SetStorage('CurrentContext', pageName);

        // Handle QueryString Parameters - from a permalink?
        if (QueryString.ParametersExist()) {
            QueryString.CreateOnLoadParameters(pageName);
        }

        // Get OnLoad
        var onLoadParameters = JSON.parse(Common.GetStorage(pageName));
        if (Common.IsNotDefined(onLoadParameters)) {
            Common.SetStorage(pageName, null);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior('/' + pageName + '/OnLoadView', onLoadParameters, ProcessOnLoadView);

    };

    Page.Render = function (page) {

        // Set and Translate Title
        var pageTitle = Common.TranslateKey(page.Title) || '';
        document.title = pageTitle;
        Common.SetAttr(document.getElementsByTagName('title')[0], 'data-translate', pageTitle);

        // Light or dark color?
        var addClass = '';
        if (Common.IsDefined(page.Color)) {
            addClass = Colors.IsDarkColor(page.Color) ? ' gtc-theme-dark' : ' gtc-theme-light';
        }

        // Initialize
        var pageMarkup = '<div class="gtc-page' + addClass + '" id="DivPage" data-namespace="Page" data-istransparent="';
        if (page.IsTransparent == 'Yes') {
            pageMarkup += 'true">';
        }
        else {
            pageMarkup += 'false">';
        }

        // Page theme classes
        if (Common.IsDefined(page.Color)) {
            RenderThemeClasses(page);
        }

        // Header
        if (Common.IsDefined(page.Header)) {
            pageMarkup += Header.Render(page.Header);
        }

        // Content
        if (Common.IsDefined(page.Content)) {
            pageMarkup += Content.Render(page.Content, page.Region);
        }

        // Footer
        if (Common.IsDefined(page.Footer)) {
            pageMarkup += Footer.Render(page.Footer);
        }

        // Slide Panel
        if (Common.IsDefined(window['SlidePanel']) && SlidePanel.Markup.length > 0) {
            var index = 0, length = SlidePanel.Markup.length;
            for ( ; index < length; index++) {
                pageMarkup += SlidePanel.Markup[index];
            }
        }

        // Div</>
        pageMarkup += '</div>';
        return pageMarkup;

    };

    Page.Configure = function (page, configureStage) {

        // Configure Elements with data-configure
        var viewElements = Common.QueryAll('[data-configure="' + configureStage + '"]');
        if (viewElements.length > 0) {
            var viewElement, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                viewElement = viewElements[index];
                var namespace = window[Common.GetAttr(viewElement, 'data-namespace')];
                namespace.Configure(viewElement);
            }
        }

        // Special Configuration (Pre Translations)
        if (configureStage == 'Pre') {
            // Labels
            ConfigureLabelFocus(page);

            // Tooltips
            ConfigureTooltips(page);
            if (!Common.IsModal()) {
                // When not modal attach event to reconfigure tooltips on parent from page instructions
                Events.On(document.body, 'reconfiguretooltipsfrommodal',
                    function () {
                        ConfigureTooltips(page);
                    }
                );
            }

            // Trigger Additional Configuration
            TriggerAdditionalConfiguration(false);
        }

    };
    
    Page.SetPageHeight = function (onParent) {

        // Initialize
        var pageContent = Common.Get('PageContent');
        var header = Common.Get('PageHeader');
        var footer = Common.Get('PageFooter');

        // Do nothing when inside modals
        if (Common.IsModal() && onParent !== true) {
            return;
        }

        // Do nothing when no content
        if (Common.IsNotDefined(pageContent)) {
            return;
        }

        // Check for header or footer and get height values
        if (header || footer) {
            // Check for header and set value as margin to pageContent
            if (header && header.hasAttribute('data-header-sticky')) {
                var headerHeight = header.offsetHeight;
                pageContent.style.marginTop = headerHeight + 'px';
            }

            // Check for footer and set value as margin to pageContent
            if (footer && footer.hasAttribute('data-footer-sticky')) {
                var footerHeight = footer.offsetHeight;
                pageContent.style.marginBottom = footerHeight + 'px';
            }
        }

    };

    // Public Methods : Page Instructions
    Page.RunInstructions = function (pageInstructionData, requestingElement) {

        // Set SessionToken
        Common.SetSessionToken(pageInstructionData.SessionToken);

        // Update Timeout
        Common.RefreshTimeout();

        // Process Instructions or Validations
        if (pageInstructionData.UiValidation.ContainsError == 'Yes') {
            Validation.DisplayValidations(pageInstructionData.UiValidation, requestingElement, false);
        }
        else if (Common.IsDefined(pageInstructionData.PageInstructions)) {
            // Cleanup any displayed validations
            Validation.RemoveValidations();

            // Warnings exist?
            var warningsExist = false;
            if (pageInstructionData.UiValidation.ContainsError == 'No' && pageInstructionData.UiValidation.ValidationExists == 'Yes') {
                warningsExist = true;
            }

            // Do we have a navigate instruction and should we run it first?
            var navigateInstruction = null;
            var closingModalFirst = false;
            var closingModalPromise = null;
            var isModal = Common.IsModal();
            if (isModal) {
                Common.AddClass(document.body, 'gtc-modal-resizing');
            }
            navigateInstruction = Common.FilterArray(pageInstructionData.PageInstructions,
                function (pageInstruction) {
                    return pageInstruction.Type == 'NavigateInstruction';
                }
            );
            if (navigateInstruction.length > 0) {
                navigateInstruction = navigateInstruction[0];

                // Only run complete instructions if parent is not being refreshed and is not going to a new page
                if (isModal && ((navigateInstruction.Action == 'CloseView' && navigateInstruction.Instruction != 'CloseRefresh') || (navigateInstruction.Action == 'SetEnvironment' && navigateInstruction.Instruction == 'All' && Common.IsDefined(navigateInstruction.Theme)))) {
                    closingModalPromise = Common.Promise();
                    window.parent.Cache.Set(Common.Query('.gtc-modal-iframe', null, true), 'CloseModalFirstPromise', closingModalPromise);
                    closingModalFirst = true;
                    closingModalPromise.promise.then(
                        function () {
                            CompleteWarningValidationsWithNoErrors(pageInstructionData.UiValidation, warningsExist, true);
                            CompletePageInstructions(pageInstructionData.PageInstructions, navigateInstruction, closingModalFirst, requestingElement);
                        }
                    );
                }

                // Only setup NotificationsOnLoad if parent is being refreshed or going to a new page
                if (navigateInstruction.Instruction == 'CloseRefresh' || navigateInstruction.Action == 'ShowView') {
                    var notifications = [], pageInstruction, index = 0, length = pageInstructionData.PageInstructions.length;
                    for ( ; index < length; index++) {
                        pageInstruction = pageInstructionData.PageInstructions[index];
                        if (pageInstruction.Type == 'NotificationInstruction') {
                            notifications.push(pageInstruction);
                        }
                    }
                    if (notifications.length > 0) {
                        Common.SetStorage('NotificationsOnLoad', JSON.stringify(notifications));
                    }
                    if (warningsExist) {
                        Common.SetStorage('WarningsOnLoad', JSON.stringify(pageInstructionData.UiValidation));
                    }
                    if (isModal) {
                        // If a modal and refreshing view dont destroy modal or we lose the timeout context and we have a race condition
                        window.parent.Cache.Set(Common.Query('.gtc-modal-iframe', null, true), 'OnRefreshIgnoreModalDestroy', true);
                    }
                }
                RunNavigateInstruction(navigateInstruction, requestingElement);
            }
            else {
                if (!closingModalFirst) {
                    CompleteWarningValidationsWithNoErrors(pageInstructionData.UiValidation, warningsExist, false);
                }
                CompletePageInstructions(pageInstructionData.PageInstructions, navigateInstruction, closingModalFirst, requestingElement);
            }
        }

    };

    Page.RunNotificationInstructions = function (pageInstructions) {

        // Caution: This method cannot be private since it must be accessed from parent context

        var context = window.parent;
        var notificationContainer = Common.Get('NotificationContainer', true);
        if (Common.IsNotDefined(notificationContainer)) {
            var fragment = Common.GenerateFragment('<div id="NotificationContainer" class="gtc-notification-container"></div>');

            // Insert into parent document
            context.document.body.appendChild(fragment);
            notificationContainer = Common.Get('NotificationContainer', true);
        }

        var pageInstruction, index = 0, length = pageInstructions.length;
        for ( ; index < length; index++) {
            pageInstruction = pageInstructions[index];

            // Build HTML Markup
            var uniqueId = 'GTC' + context.Common.GenerateUniqueID();
            var backgroundImage = '';
            if (Common.IsDefined(pageInstruction.BackgroundImage)) {
                var resourcePath = Common.BuildResourcePath(pageInstruction.BackgroundImage);
                var image = new Image();
                image.onload = function () {
                    backgroundImage = ' style="';
                    var imageWidth = image.naturalWidth;
                    var imageHeight = image.naturalHeight;
                    if (imageWidth > 299) {
                        backgroundImage += 'width:' + imageWidth + 'px;';
                    }
                    if (imageHeight > 99) {
                        backgroundImage += 'height:' + imageHeight + 'px;';
                    }
                    backgroundImage += 'background-image:url(' + resourcePath + ');"';
                    CompleteNotificationInstruction(pageInstruction, backgroundImage, notificationContainer, uniqueId, context);
                };
                image.src = resourcePath;
            }
            else {
                CompleteNotificationInstruction(pageInstruction, backgroundImage, notificationContainer, uniqueId, context);
            }
        }

        // Cleanup notifications
        context.Common.AttachObservationEvent('NotificationContainer',
            function (event, eventData) {
                if (context.Common.IsEmptyElement(this)) {
                    context.Common.DetachObservationEvent(eventData);
                    context.Common.Remove(this);
                }
            }, window.parent, null, null,
            {
                attributes: false,
                subtree: false,
                childList: true,
                characterData: false,
                attributeOldValue: false,
                characterDataOldValue: false
            }
        );

    };

    Page.UpdateSetting = function (page, settingKey, uiParameters) {

        if (settingKey == 'Currency') {
            var currentCurrency = {
                Id: '',
                Code: '',
                Symbol: '',
                MinorUnits: ''
            };
            var uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];
                switch (uiParameter.Name) {
                    case 'Id':
                        currentCurrency.Id = uiParameter.Value;
                        break;
                    case 'Code':
                        currentCurrency.Code = uiParameter.Value;
                        break;
                    case 'Symbol':
                        currentCurrency.Symbol = uiParameter.Value;
                        break;
                    case 'MinorUnits':
                        currentCurrency.MinorUnits = uiParameter.Value;
                        break;
                }
            }
            Common.SetStorage('CurrentCurrency', JSON.stringify(currentCurrency));
        }

    };

    // Private Methods
    function ProcessOnLoadView (onLoadViewModel) {

        // Set Session Token
        if (Common.IsDefined(onLoadViewModel.SessionToken)) {
            Common.SetSessionToken(onLoadViewModel.SessionToken);
        }

        // Set timeout?
        if (Common.IsDefined(onLoadViewModel.SessionTokenTimeout) && onLoadViewModel.SessionTokenTimeout != -1) {
            Common.CreateTimeout(onLoadViewModel.SessionTokenTimeout, onLoadViewModel.TimeoutRedirect, onLoadViewModel.AuthenticationMode);
        }

        // Set (User defined) Session Storage Variables
        if (Common.IsDefined(onLoadViewModel.View.StorageItems) && onLoadViewModel.View.StorageItems.length > 0) {
            SetUserDefinedStorage(onLoadViewModel.View.StorageItems);
        }

        // Build Page HTML
        var pageHtml = Page.Render(onLoadViewModel.View);

        // 508 Compliance
        pageHtml = '<a id="SkipToMainContent508" class="gtc-sr-only gtc-sr-only-focusable" href="#PageMainContent" data-translate="SkipToMainContent">' + Common.TranslateKey('SkipToMainContent') + '</a>' + pageHtml;

        // Insert into DOM
        var bodyObject = document.body;
        var contentDiv = document.createElement('div');
        contentDiv.innerHTML = pageHtml;
        bodyObject.insertBefore(contentDiv, bodyObject.firstChild);

        // Configure Page (Stage - Pre Translations)
        Page.Configure(onLoadViewModel.View, 'Pre');

        // Notifications OnLoad / Translate Validations
        Events.One(document.body, 'translationsloaded',
            function () {
                // Display Stored Notifcations
                DisplayStoredNotifcations(onLoadViewModel);

                // Display Validations
                DisplayValidations(onLoadViewModel);

                // Display Notifications from server
                DisplayServerNotifcations(onLoadViewModel);

                // Configure Page (Stage - Post Translations)
                Page.Configure(onLoadViewModel.View, 'Post');
            }
        );

        // Translate page
        Common.TranslatePage(false);

        // Page resizing?
        var onResizeEndFunction = function (event) {
            Page.SetPageHeight();
        };
        Common.AttachWindowResizingEvent(onResizeEndFunction, 'onWindowResize');

        // Is View a Modal? Let anything interested know modal loading is complete
        if (Common.IsModal()) {
            var timing = 0;
            if (Common.GetBrowser()[0] == 'IE') {
                timing = 100;
            }
            setTimeout(
                function () {
                    window.parent.Events.Trigger(parent.document, 'modalviewloadingcomplete');
                }, timing
            );
        }

        // Set Page Height/Margins
        Page.SetPageHeight();
    };

    function SetUserDefinedStorage (storageItems) {

        var storageItem, index = 0, length = storageItems.length;
        for ( ; index < length; index++) {
            storageItem = storageItems[index];
            Common.SetStorage(storageItem.Name, storageItem.Value);
        }

    };

    function ConfigureLabelFocus (page) {

        // Classes of elements that need focus events for label focus
        var inputClasses = 'input,'
                         + 'select,'
                         + '.gtc-input-notefield,'
                         + '.gtc-ui-slider-handle,'
                         + '.gtc-sliderfield-input-textbox';

        // Classes to check against for fields that need a little help finding their label
        var contextClasses = '.gtc-coupledfieldset,'
                           + '.gtc-ui-slider-handle,'
                           + '.gtc-sliderfield-input-textbox,'
                           + '.gtc-switchmask-text';

        // Find elements and attach events.
        var inputs = Common.QueryAll(inputClasses);
        var inputsNoSwitchMaskCheck = Common.FilterElementArray(inputs, ':not(.gtc-classInputSwitchMaskFieldCheck)');
        Events.On(inputsNoSwitchMaskCheck, 'focusin',
            function (event) {
                var labelFor = Common.GetAttr(this, 'data-checkboxgroup');
                if (Common.IsNotDefined(labelFor)) {
                    labelFor = this.name;
                }
                var label = Common.Query('.gtc-label[for="' + labelFor + '"]');
                if (Common.IsDefined(Common.Closest(contextClasses, this))) {
                    label = Common.Query('.gtc-label', Common.Closest('li', this));
                }
                if (Common.IsDefined(label)) {
                    if (Cache.Get(label, 'focused') != true) {
                        Cache.Set(label, 'focused', true);
                        Common.AddClass(label, 'gtc-label-focused');
                    }
                }
            }
        );
        Events.On(inputs, 'focusout',
            function (event) {
                var labelFor = Common.GetAttr(this, 'data-checkboxgroup');
                if (Common.IsNotDefined(labelFor)) {
                    labelFor = this.name;
                }
                var label = Common.Query('.gtc-label[for="' + labelFor + '"]');
                if (Common.IsDefined(Common.Closest(contextClasses, this))) {
                    label = Common.Query('.gtc-label', Common.Closest('li', this));
                }
                if (Common.IsDefined(label)) {
                    Common.RemoveClass(label, 'gtc-label-focused');
                    Cache.Set(label, 'focused', false);
                }
            }
        );

    };

    function ConfigureTooltips (page) {

        // Label Tooltips
        var labelTooltips = Common.QueryAll('.gtc-label-tooltip:not(.gtc-label-tooltip-init)');
        Common.AddClassToElements(labelTooltips, 'gtc-label-tooltip-init');
        Events.On(labelTooltips, 'click',
            function () {
                var that = this;
                Widgets.tooltip(that, {
                    tooltipClass: 'gtc-label-tooltip-style',
                    items: '[data-tooltip]',
                    content: function () {
                        return Common.GetAttr(this, 'data-tooltip');
                    },
                    close: function (event, ui) {
                        Widgets.tooltip(that, 'destroy');
                    },
                    position: {
                        my: 'center bottom-20',
                        at: 'center top',
                        using: function (position, positionData) {
                            var thisStyle = this.style;
                            thisStyle.top = position.top + 'px';
                            thisStyle.left = position.left + 'px';
                            var horizontal = 'center';
                            if (position.left == 0) {
                                horizontal = 'left';
                            }
                            else if (position.left + Common.Width(this) == Common.Width(window)) {
                                horizontal = 'right';
                            }
                            var newDiv = Common.Create('div', null, 'gtc-tooltip-arrow ' + positionData.vertical + ' ' + horizontal);
                            this.appendChild(newDiv);
                        }
                    }
                });
                Widgets.tooltip(that, 'open');
            }
        );

        // Link Tooltips
        var linkTooltips = Common.QueryAll('.gtc-link-tooltip:not(.gtc-link-tooltip-init)');
        Common.AddClassToElements(linkTooltips, 'gtc-link-tooltip-init');
        Widgets.tooltip(linkTooltips, {
            tooltipClass: 'gtc-label-tooltip-style',
            items: '[data-tooltip]',
            content: function () {
                return Common.GetAttr(this, 'data-tooltip');
            },
            delayedShow: 500,
            position: {
                my: 'center bottom-20',
                at: 'center top',
                using: function (position, positionData) {
                    var thisStyle = this.style;
                    thisStyle.top = position.top + 'px';
                    thisStyle.left = position.left + 'px';
                    var horizontal = 'center';
                    if (position.left == 0) {
                        horizontal = 'left';
                    }
                    else if (position.left + Common.Width(this) == Common.Width(window)) {
                        horizontal = 'right';
                    }
                    var newDiv = Common.Create('div', null, 'gtc-tooltip-arrow ' + positionData.vertical + ' ' + horizontal);
                    this.appendChild(newDiv);
                }
            }
        });

        // Tab Text Overflow Tooltips
        var tabButtonTooltips = Common.QueryAll('.gtc-tabbutton-link:not(.gtc-tabbutton-link-tooltip-init)');
        Common.AddClassToElements(tabButtonTooltips, 'gtc-tabbutton-link-tooltip-init');
        if (tabButtonTooltips.length > 0) {
            Events.Trigger(tabButtonTooltips, 'configuretabbutton');
        }

    };

    function DisplayValidations (onLoadViewModel) {

        var onLoadWarningsExist = false;
        var onLoadWarnings = JSON.parse(Common.GetStorage('WarningsOnLoad'));
        if (Common.IsDefined(onLoadWarnings)) {
            onLoadWarningsExist = true;
            Common.RemoveStorage('WarningsOnLoad');
        }
        if (onLoadViewModel.UiValidation.ValidationExists == 'Yes') {
            if (onLoadWarningsExist) {
                // If onload errors exist and onload warnings put warnings in front since they came first
                for (var index = onLoadWarnings.UiValidationResults.length; i-- > 0; ) {
                    onLoadViewModel.UiValidation.UiValidationResults.unshift(onLoadWarnings.UiValidationResults[index]);
                }
            }
            Validation.DisplayValidations(onLoadViewModel.UiValidation, null, true);
        }
        else if (onLoadWarningsExist) {
            CompleteWarningValidationsWithNoErrors(onLoadWarnings, onLoadWarningsExist, true);
        }

    };

    function DisplayStoredNotifcations (onLoadViewModel) {

        var onLoadNotifications = JSON.parse(Common.GetStorage('NotificationsOnLoad'));
        if (Common.IsDefined(onLoadNotifications)) {
            Common.RemoveStorage('NotificationsOnLoad');
            window.parent.Page.RunNotificationInstructions(onLoadNotifications);
        }

    };

    function DisplayServerNotifcations (onLoadViewModel) {

        if (Common.IsDefined(onLoadViewModel.NotificationInstructions) && onLoadViewModel.NotificationInstructions.length > 0) {
            window.parent.Page.RunNotificationInstructions(onLoadViewModel.NotificationInstructions);
        }

    };

    function CompleteWarningValidationsWithNoErrors (uiValidation, warningsExist, displayOnParent) {

        var context = window;
        if (displayOnParent) {
            context = window.parent;
        }
        if (warningsExist) {
            context.Validation.DisplayValidations(uiValidation, null, false);
        }

    };

    function RenderThemeClasses (page) {

        var themeColor = Colors.ProcessValue(page.Color, false, null);
        var singleGradientColor = Common.IsArray(themeColor) ? themeColor[0] : themeColor;
        var themeColorOpacity = Colors.ProcessValue(page.Color, true, .5);
        var colorCss = Colors.ColorCSS(themeColor);

        var styleMarkup = '';
        styleMarkup += '<style>';
        styleMarkup += ' .gtc-page-theme-color { ';
        styleMarkup += colorCss;
        styleMarkup += ' }';
        styleMarkup += ' .gtc-page-theme-background { ';
        styleMarkup += Colors.BackgroundCSS(themeColor);
        styleMarkup += ' }';
        styleMarkup += ' .gtc-page-theme-background-opacity { ';
        styleMarkup += Colors.BackgroundCSS(themeColorOpacity);
        styleMarkup += ' }';
        styleMarkup += ' .gtc-page-theme-border-top { ';
        styleMarkup += Colors.BorderColorCSS(singleGradientColor, 'top');
        styleMarkup += ' }';
        styleMarkup += ' .gtc-page-theme-border-bottom { ';
        styleMarkup += Colors.BorderColorCSS(singleGradientColor, 'bottom');
        styleMarkup += ' }';
        styleMarkup += ' .gtc-page-theme-border { ';
        styleMarkup += Colors.BorderColorCSS(singleGradientColor);
        styleMarkup += ' }';
        styleMarkup += ' .gtc-input-radio-selected:after { ';
        styleMarkup += 'background: ' + singleGradientColor + ';';
        styleMarkup += 'border-color: ' + singleGradientColor + ';';
        styleMarkup += ' }';
        styleMarkup += ' .gtc-input-checkbox-selected:after { ';
        styleMarkup += 'border-color: ' + singleGradientColor + ';';
        styleMarkup += ' }';
        var gradientLighterValue = Colors.ChangeLuminosity(singleGradientColor, .2);
        var gradientCss = Colors.BackgroundCSS([gradientLighterValue, singleGradientColor]);
        styleMarkup += ' .gtc-page-theme-gradient { ';
        styleMarkup += gradientCss;
        styleMarkup += ' }';
        var gradientDarkerValue = Colors.ChangeLuminosity(singleGradientColor, .1);
        var gradientDarkestValue = Colors.ChangeLuminosity(singleGradientColor, -.05);
        styleMarkup += ' .gtc-page-theme-gradient:hover { ';
        styleMarkup += Colors.BackgroundCSS([gradientDarkerValue, gradientDarkestValue]);
        styleMarkup += ' }';
        styleMarkup += ' .gtc-page-theme-active-select-option { ';
        styleMarkup += gradientCss;
        styleMarkup += ' }';
        styleMarkup += ' .gtc-tree .gtc-node { ';
        styleMarkup += colorCss;
        styleMarkup += ' }';
        styleMarkup += '</style>';

    };

    function CompletePageInstructions (pageInstructions, navigateInstruction, closingModalFirst, requestingElement) {

        // Initialize promises and notifications array
        var promises = [];
        var notifications = [];

        // Initialize Context object
        var parentContext = {
            Exists: false
        };

        // Begin Page Instructions
        var pageInstruction, index = 0, length = pageInstructions.length;
        for ( ; index < length; index++) {
            pageInstruction = pageInstructions[index];
            switch (pageInstruction.Type) {
                case 'ContentInstruction':
                    RunContentInstruction(pageInstruction, promises, parentContext);
                    break;
                case 'DisplayInstruction':
                    RunDisplayInstruction(pageInstruction, promises, parentContext);
                    break;
                case 'DownloadInstruction':
                    RunDownloadInstruction(pageInstruction);
                    break;
                case 'NavigateInstruction':
                    if (closingModalFirst == false) {
                        navigateInstruction = pageInstruction;
                    }
                    break;
                case 'NotificationInstruction':
                    notifications.push(pageInstruction);
                    break;
                case 'ValueInstruction':
                    RunValueInstruction(pageInstruction, promises, parentContext);
                    break;
            }
        }

        if (notifications.length > 0 && ((Common.IsNotDefined(navigateInstruction) || navigateInstruction.length == 0) || (Common.IsDefined(navigateInstruction) && navigateInstruction.Instruction != 'CloseRefresh'))) {
            window.parent.Page.RunNotificationInstructions(notifications);
        }
        else if (notifications.length > 0 && (Common.IsDefined(navigateInstruction) || navigateInstruction.length > 0)) {
            Common.SetStorage('NotificationsOnLoad', JSON.stringify(notifications));
        }

        // Define completion function to reset page height, resize modal and run navigate instruction
        var completionFunction = function () {
            TriggerAdditionalConfiguration(false);
            ReconfigureFormElements(false);
            Page.SetPageHeight();
            Common.RetranslatePage();
            ConfigureTooltips();
            if (Common.IsModal() && parentContext.Exists == true) {
                TriggerAdditionalConfiguration(true);
                ReconfigureFormElements(true);
                Page.SetPageHeight(true);
                window.parent.Events.Trigger(window.parent.document.body, 'translateparent');
                window.parent.Events.Trigger(window.parent.document.body, 'reconfiguretooltipsfrommodal');
            }

            // Let anyone interested know page instructions are complete
            Events.Trigger(document.body, 'pageinstructionscomplete');
            if (window.parent != window.top) {
                window.parent.Events.Trigger(top.document.body, 'pageinstructionscomplete');
            }

            // Resize modal if needed
            var iFrameModal = window.parent.Common.Query('.gtc-modal-iframe');
            if (Common.IsModal() && closingModalFirst == false && (Common.IsNotDefined(navigateInstruction) || navigateInstruction.length == 0)) {
                window.parent.Events.Trigger(iFrameModal, 'resizemodal');
            }
            else {
                Common.RemoveClass(document.body, 'gtc-modal-resizing');
            }

            // Clean up modal?
            var cleanupModalPromise = Cache.Get(iFrameModal, 'CleanupModalPromise');
            if (Common.IsDefined(cleanupModalPromise)) {
                cleanupModalPromise.resolve();
            }

            // Navigate if instruction exists
            if (closingModalFirst == false && Common.IsDefined(navigateInstruction)) {
                RunNavigateInstruction(navigateInstruction, requestingElement);
            }
        };

        // TODO: find a better way than timeout although nothing else seems to work (even promises)
        // because of javascripts asynchronous ways. So give time for promises in callbacks to collect
        setTimeout(
            function () {
                if (promises.length > 0) {
                    var allPromise = Promise.all(promises);
                    allPromise.then(
                        function () {
                            completionFunction();
                        }
                    );
                }
                else {
                    completionFunction();
                }
            }, 1000
        );

    };

    function RunNavigateInstruction (navigateInstruction, requestingElement) {

        switch (navigateInstruction.Action) {
            case 'CloseView':
                RunNavigateInstructionCloseView(navigateInstruction);
                break;
            case 'SetEnvironment':
                RunNavigateInstructionSetEnvironment(navigateInstruction);
                break;
            case 'ShowView':
                RunNavigateInstructionShowView(navigateInstruction, '_self');
                break;
            case 'ShowView - NewWindow':
                RunNavigateInstructionShowView(navigateInstruction, '_blank');
                break;
            case 'ShowModal':
                RunNavigateInstructionShowModal(navigateInstruction, requestingElement);
                break;
        }

    };

    function RunContentInstruction (contentInstruction, promises, parentContext) {

        // If Id exists update ContainerName
        if (Common.IsDefined(contentInstruction.Id)) {
            contentInstruction.ContainerName += Common.SanitizeToken(contentInstruction.Id);
        }

        // Element
        var element;
        if (contentInstruction.Context == 'Parent') {
            element = Common.Get(contentInstruction.ContainerName, true);
            parentContext.Exists = true;
        }
        else {
            element = Common.Get(contentInstruction.ContainerName);
        }
        if (Common.IsNotDefined(element)) {
            return;
        }

        // Namespace
        var namespace;
        if (contentInstruction.Context == 'Parent') {
            namespace = window.top.window[Common.GetAttr(element, 'data-namespace')];
        }
        else {
            namespace = window[Common.GetAttr(element, 'data-namespace')];
        }

        // Process Content Instruction
        var functionName = contentInstruction.Action + contentInstruction.Instruction;
        var functionCall = namespace[functionName];
        functionCall(element, contentInstruction.ViewElements, promises, contentInstruction.Context);

    };

    function RunDisplayInstruction (displayInstruction, promises, parentContext) {

        switch (displayInstruction.Action) {
            case 'Hide':
            case 'Show':
                RunDisplayInstructionShowHide(displayInstruction, promises, parentContext);
                break;
            case 'Lock':
                RunDisplayInstructionLock(displayInstruction, promises, parentContext);
                break;
            case 'Opacity':
                RunDisplayInstructionOpacity(displayInstruction, promises, parentContext);
                break;
            case 'Unlock':
                RunDisplayInstructionUnlock(displayInstruction, promises, parentContext);
                break;
        }

    };

    function RunDownloadInstruction (downloadInstruction) {

        var files = downloadInstruction.Files;
        if (Common.IsDefined(files)) {
            var fileData, blob, index = 0, length = files.length;
            for ( ; index < length; index++) {
                fileData = files[index];

                // Convert data
                blob = Common.Base64ToBlob(fileData.Content, fileData.Type);

                // Download blob
                Common.ExecuteBlobDownload(blob, fileData.Name);
            }
        }

    };

    function RunValueInstruction (valueInstruction, promises, parentContext) {

        // If Id exists update ElementName
        if (Common.IsDefined(valueInstruction.Id)) {
            valueInstruction.ElementName += Common.SanitizeToken(valueInstruction.Id);
        }

        // Element
        var element, isRadioArray = false;
        if (valueInstruction.Context == 'Parent') {
            element = Common.Get(valueInstruction.ElementName, true);
            parentContext.Exists = true;
        }
        else {
            element = Common.Get(valueInstruction.ElementName);
        }
        if (Common.IsNotDefined(element)) {
            if (valueInstruction.Context == 'Parent') {
                element = Common.QueryAll('input[name="' + valueInstruction.ElementName + '"]', null, true);
                parentContext.Exists = true;
            }
            else {
                element = Common.QueryAll('input[name="' + valueInstruction.ElementName + '"]');
            }
            if (element.length == 0) {
                if (valueInstruction.Instruction == 'EventParameters') {
                    element = document.body;
                }
                else {
                    return;
                }
            }
            else {
                isRadioArray = true;
            }
        }

        // Namespace
        var namespace;
        if (valueInstruction.Instruction == 'EventParameters' || valueInstruction.Instruction == 'EventPath') {
            namespace = window['EventElement'];
        }
        else if (valueInstruction.Instruction == 'Mask') {
            namespace = window['MaskField'];
        }
        else {
            if (isRadioArray) {
                namespace = window[Common.GetAttr(element[0], 'data-namespace')];
            }
            else {
                namespace = window[Common.GetAttr(element, 'data-namespace')];
            }
        }
        
        // Set Function Call
        var functionName = 'Update' + valueInstruction.Instruction;
        var functionCall = namespace[functionName];
        
        // Handle RadioField/CheckboxField and EventParameters
        if (valueInstruction.Instruction == 'EventParameters' || valueInstruction.Instruction == 'EventPath') {
            if (isRadioArray == false && Common.GetAttr(element, 'data-namespace') == 'CheckboxField') {
                element = Common.QueryAll('input', element);
                isRadioArray = true;
            }
            if (isRadioArray) {
                var index = 0, length = element.length;
                for ( ; index < length; index++) {
                    functionCall(element[index], valueInstruction.Value, valueInstruction.UiParameters);
                }
            }
            else {
                functionCall(element, valueInstruction.Value, valueInstruction.UiParameters);
            }
        }
        else {
            // Update Element
            if (Common.IsDefined(valueInstruction.UiParameters) && Common.IsDefined(valueInstruction.Value)) {
                functionCall(element, valueInstruction.Value, valueInstruction.UiParameters, promises, valueInstruction.Context);
            }
            else if (Common.IsDefined(valueInstruction.UiParameters)) {
                functionCall(element, valueInstruction.UiParameters, promises, valueInstruction.Context);
            }
            else if (Common.IsDefined(valueInstruction.Value)) {
                functionCall(element, valueInstruction.Value, promises, valueInstruction.Context);
            }
        }

    };

    function TriggerAdditionalConfiguration (onParent) {

        // Initialize
        var windowContext = window;
        var queryContext = Common.QueryAll;
        if (onParent == true) {
            windowContext = window.parent;
            queryContext = windowContext.Common.QueryAll;
        }
        var body = queryContext('body');

        // Mobile Navigation
        var mobileNav = queryContext('.gtc-mobile-nav-btn');
        if (mobileNav.length > 0) {
            windowContext.Events.Trigger(mobileNav, 'configuremobilemenu');
        }

        // Image Slider
        if (queryContext('.gtc-image-slider').length > 0) {
            windowContext.Events.Trigger(body, 'configureimageslider');
        }

        // Drag Drop Panel
        if (queryContext('.gtc-dragdroppanel').length > 0) {
            windowContext.Events.Trigger(body, 'configuredragdroppanel');
        }

        // Rearrange Panel
        if (queryContext('.gtc-rearrangepanel').length > 0) {
            windowContext.Events.Trigger(body, 'configurerearrangepanel');
        }

        // Progress Poll
        if (queryContext('.gtc-progresspoll').length > 0) {
            windowContext.Events.Trigger(body, 'configureprogresspoll');
        }

        // Progress Bar
        if (queryContext('.gtc-progressbar').length > 0) {
            windowContext.Events.Trigger(body, 'configureprogressbar');
        }

        // Responsive Tables
        if (queryContext('.gtc-table').length > 0) {
            windowContext.Events.Trigger(body, 'configureresponsivetable');
        }

        // Rich Text Editor
        if (queryContext('.gtc-editor-editablearea').length > 0) {
            windowContext.Events.Trigger(body, 'configurerichtexteditor');
        }

        // Rich Text Display/Item
        if (queryContext('.gtc-richtextdisplay').length > 0 || queryContext('.gtc-richtextdisplayitem').length > 0) {
            windowContext.Events.Trigger(body, 'configureinlineeditor');
        }

        // Progress Display Item
        if (queryContext('.gtc-progressdisplayitem').length > 0) {
            windowContext.Events.Trigger(body, 'configureprogressdisplayitem');
        }

        // Floating Menu
        if (queryContext('.gtc-floatingmenu').length > 0) {
            windowContext.Events.Trigger(body, 'configurefloatingmenu');
        }

        // Breadcrumb
        if (queryContext('.gtc-breadcrumb').length > 0) {
            windowContext.Events.Trigger(body, 'configurebreadcrumb');
        }

        // Back To Top
        windowContext.Events.Trigger(body, 'configurebacktotop');

        // Images
        windowContext.Events.Trigger(body, 'configureimages');

    };

    function ReconfigureFormElements (onParent) {

        // Initialize
        var windowContext = window;
        var queryContext = Common.QueryAll;
        if (onParent == true) {
            windowContext = window.parent;
            queryContext = windowContext.Common.QueryAll;
        }

        // Switchbox
        var switchboxes = queryContext('.gtc-input-switchbox:not([data-widgetinitialized="true"])');
        if (switchboxes.length > 0) {
            windowContext.Widgets.switchbox(switchboxes, { OnText: 'Yes', OffText: 'No' });
        }

    };

    function RunNavigateInstructionCloseView (navigateInstruction) {

        if (navigateInstruction.Instruction == 'CloseRefresh') {
            Common.CloseRefreshView();
        }
        else {
            Common.CloseView();
        }

    };

    function RunNavigateInstructionSetEnvironment (navigateInstruction) {

        if (isSetEnvironmentRunning) {
            return;
        }
        isSetEnvironmentRunning = true;

        var divPage = Common.Get('DivPage', true);
        Velocity(divPage, { 'opacity': 0 }, 'slow',
            function () {
                // Close modal
                if (Common.IsModal()) {
                    Common.CloseView();
                }

                // Get Current Settings
                var currentSetting = {
                    Language: Common.GetStorage('CurrentLanguage'),
                    Theme: Common.GetStorage('CurrentTheme')
                };

                // Set Language and Translate page
                if (currentSetting.Language != navigateInstruction.Language) {
                    Events.One(document.body, 'translationsloaded',
                        function () {
                            var viewElements = Common.QueryAll('[data-configure="Post"]');
                            if (viewElements.length > 0) {
                                var viewElement, index = 0, length = viewElements.length;
                                for ( ; index < length; index++) {
                                    viewElement = viewElements[index];
                                    var namespace = window[Common.GetAttr(viewElement, 'data-namespace')];
                                    if (Common.IsDefined(namespace) && Common.IsFunction(namespace.Translate)) {
                                        namespace.Translate(viewElement);
                                    }
                                }
                            }
                        }
                    );
                    Common.SetStorage('CurrentLanguage', navigateInstruction.Language);
                    Common.TranslatePage(true);
                }

                // Set Theme and Load Theme
                if (currentSetting.Theme != navigateInstruction.Theme) {
                    Common.SetStorage('CurrentTheme', navigateInstruction.Theme);
                    Common.ApplyTheme(true);
                }

                // Reset Page Height
                Page.SetPageHeight();

                // Bring it back
                Velocity(divPage, 'reverse',
                    function () {
                        Common.RemoveOpacity(divPage);
                        isSetEnvironmentRunning = false;
                    }
                );
            }
        );

    };

    function RunNavigateInstructionShowView (navigateInstruction, target) {

        // Set User language
        if (Common.IsDefined(navigateInstruction.Language) && navigateInstruction.Language.length > 0) {
            Common.SetStorage('CurrentLanguage', navigateInstruction.Language);
        }

        // Set User theme
        if (Common.IsDefined(navigateInstruction.Theme) && navigateInstruction.Theme.length > 0) {
            Common.SetStorage('CurrentTheme', navigateInstruction.Theme);
        }

        // Set OnLoadEvent object
        var pageName = navigateInstruction.Instruction.replace('/Content/', '').replace('/', '').replace('.html', '');
        Common.SetStorage(pageName, JSON.stringify(navigateInstruction.UiParameters));

        // Find correct context
        var windowContext = window;
        if (Common.IsModal()) {
            windowContext = window.parent;
        }

        // Check if we are going to the same place
        var sameUrl = false;
        if (windowContext.location.pathname == navigateInstruction.Instruction) {
            sameUrl = true;
        }

        // Update breadcrumb
        var breadcrumbNamespace = windowContext['Breadcrumb'];
        if (Common.IsDefined(breadcrumbNamespace)) {
            if (navigateInstruction.Instruction == Common.GetStorage('BreadcrumbHomeView')) {
                breadcrumbNamespace.ClearBreadcrumbData();
            }
            else if (sameUrl == false) {
                var control = windowContext.Common.Create('a', 'GTC' + Common.GenerateUniqueID());
                breadcrumbNamespace.UpdateBreadcrumbData(control, navigateInstruction.Instruction, pageName, navigateInstruction.UiParameters);
            }
        }

        // Goto next Page
        if (Common.IsModal()) {
            window.parent.location.href = navigateInstruction.Instruction;
        }
        else {
            if (target == '_blank') {
                var newWindow = window.open(navigateInstruction.Instruction, '_blank');
            }
            else {
                location.href = navigateInstruction.Instruction;
            }
        }

    };

    function RunNavigateInstructionShowModal (navigateInstruction, requestingElement) {

        // Set User language
        if (Common.IsDefined(navigateInstruction.Language) && navigateInstruction.Language.length > 0) {
            Common.SetStorage('CurrentLanguage', navigateInstruction.Language);
        }

        // Set User theme
        if (Common.IsDefined(navigateInstruction.Theme) && navigateInstruction.Theme.length > 0) {
            Common.SetStorage('CurrentTheme', navigateInstruction.Theme);
        }

        // Set OnLoadEvent object
        var modalName = navigateInstruction.Instruction.replace('/Content/', '').replace('/', '').replace('.html', '');
        Common.SetStorage(modalName, JSON.stringify(navigateInstruction.UiParameters));

        // Open Modal
        Modals.ShowModalDialog(modalName, navigateInstruction.Instruction, requestingElement.id);

    };

    function RunDisplayInstructionShowHide (displayInstruction, promises, parentContext) {

        if (Common.IsDefined(displayInstruction.ElementNameList)) {
            // Initialize
            var onParent = false, functionCall;
            var element, index = 0, length = displayInstruction.ElementNameList.length;

            // Determine context
            if (displayInstruction.Context == 'Parent') {
                onParent = true;
                parentContext.Exists = true;
            }

            // Get correct function call
            if (displayInstruction.Action == 'Show') {
                functionCall = CompleteDisplayInstructionShow;
            }
            else {
                functionCall = CompleteDisplayInstructionHide;
            }

            // For each element, find it and show or hide
            for ( ; index < length; index++) {
                element = Common.Get(displayInstruction.ElementNameList[index], onParent);
                if (Common.IsDefined(element)) {
                    functionCall(element, displayInstruction.Instruction, promises);
                }
            }
        }

    };

    function RunDisplayInstructionLock (displayInstruction, promises, parentContext) {

        if (Common.IsDefined(displayInstruction.ElementNameList)) {
            var onParent = false, elementName, index = 0, length = displayInstruction.ElementNameList.length;

            // Determine context
            if (displayInstruction.Context == 'Parent') {
                onParent = true;
                parentContext.Exists = true;
            }

            // Run instructions
            for ( ; index < length; index++) {
                elementName = displayInstruction.ElementNameList[index];
                if (displayInstruction.Instruction == 'radio') {
                    var radios = Common.QueryAll('input[name=' + elementName + ']', null, onParent);
                    Widgets[displayInstruction.Instruction](radios, 'DisableControl');
                }
                else if (displayInstruction.Instruction == 'checkbox') {
                    var checkboxes = Common.QueryAll('input[data-checkboxgroup=' + elementName + ']', null, onParent);
                    Widgets[displayInstruction.Instruction](checkboxes, 'DisableControl');
                }
                else if (displayInstruction.Instruction == 'tab') {
                    TabButton.DisableControl(Common.Get(elementName, onParent));
                }
                else if (displayInstruction.Instruction == 'calendar') {
                    DateField.Lock(Common.Get(elementName, onParent), onParent);
                }
                else if (displayInstruction.Instruction == 'secure') {
                    SecureField.Lock(Common.Get(elementName, onParent));
                }
                else if (displayInstruction.Instruction == 'multiselectpanel') {
                    MultiSelectPanel.Lock(Common.Get(elementName, onParent));
                }
                else if (displayInstruction.Instruction == 'link') {
                    Link.Disable(Common.Get(elementName, onParent));
                }
                else {
                    var element = Common.Get(elementName, onParent);
                    Widgets[displayInstruction.Instruction](element, 'DisableControl');
                }
            }
        }

    };

    function RunDisplayInstructionOpacity (displayInstruction, promises, parentContext) {

        if (Common.IsDefined(displayInstruction.ElementNameList)) {
            if (Common.IsDefined(displayInstruction.Instruction)) {
                var onParent = false, index = 0, length = displayInstruction.ElementNameList.length;

                // Determine context
                if (displayInstruction.Context == 'Parent') {
                    onParent = true;
                    parentContext.Exists = true;
                }

                // Run instructions
                for ( ; index < length; index++) {
                    var animationPromise = Common.Promise();
                    promises.push(animationPromise.promise);

                    // For loops have no scope! Give it some. (IIFE)
                    (function (elementName, instruction, animationPromise, onParent) {

                        var element = Common.Get(elementName, onParent);
                        if (Common.IsHidden(element)) {
                            var currentOpacity = element.style.opacity;
                            if (currentOpacity == '0' || Common.IsEmptyString(currentOpacity)) {
                                element.style.opacity = 0;
                                element.style.display = '';
                            }
                        }
                        Velocity(element, { opacity: instruction }, 'slow',
                            function () {
                                if (instruction == '1') {
                                    element.style.opacity = '';
                                }
                                animationPromise.resolve();
                            }
                        );

                    }(displayInstruction.ElementNameList[index], displayInstruction.Instruction, animationPromise, onParent));
                }
            }
        }

    };

    function RunDisplayInstructionUnlock (displayInstruction, promises, parentContext) {

        if (Common.IsDefined(displayInstruction.ElementNameList)) {
            var onParent = false, elementName, index = 0, length = displayInstruction.ElementNameList.length;

            // Determine context
            if (displayInstruction.Context == 'Parent') {
                onParent = true;
                parentContext.Exists = true;
            }

            // Run instructions
            for ( ; index < length; index++) {
                elementName = displayInstruction.ElementNameList[index];
                if (displayInstruction.Instruction == 'radio') {
                    var radios = Common.QueryAll('input[name=' + elementName + ']', null, onParent);
                    Widgets[displayInstruction.Instruction](radios, 'EnableControl');
                }
                else if (displayInstruction.Instruction == 'checkbox') {
                    var checkboxes = Common.QueryAll('input[data-checkboxgroup=' + elementName + ']', null, onParent);
                    Widgets[displayInstruction.Instruction](checkboxes, 'EnableControl');
                }
                else if (displayInstruction.Instruction == 'tab') {
                    TabButton.EnableControl(Common.Get(elementName, onParent));
                }
                else if (displayInstruction.Instruction == 'calendar') {
                    DateField.Unlock(Common.Get(elementName, onParent), onParent);
                }
                else if (displayInstruction.Instruction == 'secure') {
                    SecureField.Unlock(Common.Get(elementName, onParent));
                }
                else if (displayInstruction.Instruction == 'multiselectpanel') {
                    MultiSelectPanel.Unlock(Common.Get(elementName, onParent));
                }
                else if (displayInstruction.Instruction == 'link') {
                    Link.Enable(Common.Get(elementName, onParent));
                }
                else {
                    var element = Common.Get(elementName, onParent);
                    Widgets[displayInstruction.Instruction](element, 'EnableControl');
                }
            }
        }

    };

    function CompleteDisplayInstructionShow (element, animationType, promises) {

        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Initialize
        var rowElement = null;

        // Cache element style
        var elementStyle = element.style;

        // Clear opacity to avoid show issues
        if (elementStyle.opacity == '0') {
            elementStyle.display = 'none';
            elementStyle.opacity = '';
        }

        // If sidePanel open, else do nothing if element is visibile else show it
        if (Common.HasClass(element, 'gtc-slidepanel')) {
            SlidePanel.ShowHide(element, 'Show');
        }
        else if (Common.IsVisible(element)) {
            animationPromise.resolve();
        }
        else {
            if (element.tagName == 'TR') {
                rowElement = element;
                Common.Wrap(rowElement, Common.GenerateHTML('<div style="display:none;"></div>'));
                elementStyle.display = '';
                animationPromise.promise.then(
                    function () {
                        Common.Unwrap(rowElement);
                    }
                );
                element = rowElement.parentNode;
            }
            switch (animationType) {
                case 'Slide':
                    Velocity(element, 'slideDown', {
                            duration: 400,
                            complete: function () {
                                PostInstructionConfiguration(element);
                                animationPromise.resolve();
                            },
                            display: ''
                        }
                    );
                    break;
                case 'SlideLeft':
                    Common.Slide(element, 'show', 'left', 600,
                        function () {
                            PostInstructionConfiguration(element);
                            animationPromise.resolve();
                        }
                    );
                    break;
                case 'SlideRight':
                    Common.Slide(element, 'show', 'right', 600,
                        function () {
                            PostInstructionConfiguration(element);
                            animationPromise.resolve();
                        }
                    );
                    break;
                case 'Fade':
                    Velocity(element, 'fadeIn', 400,
                        function () {
                            element.style.opacity = null;
                            PostInstructionConfiguration(element);
                            animationPromise.resolve();
                        }
                    );
                    break;
                case 'ShowRightCoupledFields':
                    CoupledFieldSet.ShowRightFields(element);
                    animationPromise.resolve();
                    break;
                default:
                    elementStyle.display = '';
                    PostInstructionConfiguration(element);
                    animationPromise.resolve();
                    break;
            }
        }

    };

    function CompleteDisplayInstructionHide (element, animationType, promises) {

        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);
        var rowElement = null;
        if (Common.IsHidden(element)) {
            animationPromise.resolve();
        }
        else if (Common.HasClass(element, 'gtc-slidepanel')) {
            SlidePanel.ShowHide(element, 'Hide');
        }
        else {
            if (element.tagName == 'TR') {
                rowElement = element;
                animationPromise.promise.then(
                    function () {
                        rowElement.style.display = 'none';
                        Common.Unwrap(rowElement);
                    }
                );
                Common.Wrap(rowElement, Common.GenerateHTML('<div></div>'));
                element = rowElement.parentNode;
            }
            switch (animationType) {
                case 'Slide':
                    Velocity(element, 'slideUp', 600,
                        function () {
                            animationPromise.resolve();
                        }
                    );
                    break;
                case 'SlideLeft':
                    Common.Slide(element, 'hide', 'left', 600,
                        function () {
                            animationPromise.resolve();
                        }
                    );
                    break;
                case 'SlideRight':
                    Common.Slide(element, 'hide', 'right', 600,
                        function () {
                            animationPromise.resolve();
                        }
                    );
                    break;
                case 'Fade':
                    Velocity(element, 'fadeOut', 600,
                        function () {
                            element.style.display = 'none';
                            element.style.opacity = '';
                            animationPromise.resolve();
                        }
                    );
                    break;
                case 'HideRightCoupledFields':
                    CoupledFieldSet.HideRightFields(element);
                    animationPromise.resolve();
                    break;
                default:
                    element.style.display = 'none';
                    animationPromise.resolve();
                    break;
            }
        }

    };

    function PostInstructionConfiguration(element) {

        var namespace = window[Common.GetAttr(element, 'data-namespace')];
        if (Common.IsDefined(namespace) && Common.IsFunction(namespace.PostInstructionConfiguration)) {
            namespace.PostInstructionConfiguration(element);
        }

    };

    function CompleteNotificationInstruction (pageInstruction, backgroundImage, notificationContainer, uniqueId, context) {

        var extraClass = '';
        if (pageInstruction.Action == 'ShowNag') {
            extraClass = 'gtc-notification-nag ';
        }
        var notificationMarkup = '<div id="' + uniqueId + '" class="' + extraClass + 'gtc-notification ' + pageInstruction.Instruction + '"' + backgroundImage + '>';
        if (window.parent.Common.IsDefined(pageInstruction.Icon)) {
            notificationMarkup += '<div class="gtc-notification-icon gtc-page-theme-color">' + context.Icon.Render(pageInstruction.Icon) + '</div>';
        }
        notificationMarkup += '<div class="gtc-notification-message">';
        notificationMarkup += '<h2 class="gtc-page-theme-color" data-translate="' + pageInstruction.Title + '">' + Common.TranslateKey(pageInstruction.Title, context) + '</h2>';
        notificationMarkup += '<p data-translate="' + pageInstruction.Message + '">' + Common.TranslateKey(pageInstruction.Message, context) + '</p>';
        notificationMarkup += '</div></div>';

        // Insert into NotificationContainer (Prepend so newest notifications are first)
        notificationContainer.insertBefore(Common.GenerateFragment(notificationMarkup), notificationContainer.firstChild);

        // Get display time and inserted element
        var displayTime = 5;
        if (context.Common.IsDefined(pageInstruction.Duration) && context.Common.IsNotEmptyString(pageInstruction.Duration) && !context.isNaN(pageInstruction.Duration) && context.parseInt(pageInstruction.Duration, 10) > 0) {
            displayTime = context.parseInt(pageInstruction.Duration, 10) * 1000;
        }
        var notification = Common.Get(uniqueId, true);

        // Display
        var timerId = null;
        switch (pageInstruction.Instruction) {
            case 'Fade':
                context.Velocity(notification, 'fadeIn', 'slow',
                    function () {
                        timerId = context.setTimeout(
                            function () {
                                context.Velocity(notification, 'fadeOut', 'slow',
                                    function () {
                                        context.Common.Remove(notification);
                                    }
                                );
                            }, displayTime
                        );
                    }
                );
                break;
            case 'Slide':
                context.Velocity(notification, 'slideDown', 'slow',
                    function () {
                        timerId = context.setTimeout(
                            function () {
                                context.Velocity(notification, 'slideUp', 'slow',
                                    function () {
                                        context.Common.Remove(notification);
                                    }
                                );
                            }, displayTime
                        );
                    }
                );
                break;
            case 'SlideLeft':
                context.Velocity(notification, 'transition.slideLeftBigIn',
                    function () {
                        timerId = context.setTimeout(
                            function () {
                                context.Velocity(notification, 'transition.slideLeftBigOut',
                                    function () {
                                        context.Common.Remove(notification);
                                    }
                                );
                            }, displayTime
                        );
                    }
                );
                break;
            case 'SlideRight':
                context.Velocity(notification, 'transition.slideRightBigIn',
                    function () {
                        timerId = context.setTimeout(
                            function () {
                                context.Velocity(notification, 'transition.slideRightBigOut',
                                    function () {
                                        context.Common.Remove(notification);
                                    }
                                );
                            }, displayTime
                        );
                    }
                );
                break;
            default:
                notification.style.display = 'block';
                timerId = context.setTimeout(
                    function () {
                        notification.style.display = 'none';
                        context.Common.Remove(notification);
                    }, displayTime
                );
                break;
        }

        // Setup on click close
        notification.addEventListener('click',
            function () {
                context.clearTimeout(timerId);
                context.Velocity(notification, 'slideUp', 200,
                    function () {
                        context.Common.Remove(notification);
                    }
                );
            }
        );

    };

} (window.Page = window.Page || {}, window, document, Common, Cache, Events, Velocity));
// Modals Namespace
(function (Modals, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Variables
    Modals.ModalTypes = {
        Confirmation: 0,
        Error: 1,
        Warning: 2,
        Success: 3
    };

    Modals.ModalResult = {
        Yes: 0,
        No: 1,
        Ok: 2
    };

    Modals.ErrorCodes = {
        AuthorizationError: 401,
        ConcurrencyError: 409,
        SessionExpirationError: 498
    };

    // Private Variables
    var modalMessagePopupExists = false;

    // Public Methods
    Modals.ShowModalDialog = function (modalName, modalUrl, modalLinkId) {

        // Test for iframe support (508 Compliance)
        var insertContent = modalName;
        var iframeTest = document.createElement('iframe');
        if (!iframeTest) {
            insertContent = 'This browser doesn\'t seem to support iframes. <a id="' + modalName + 'IframeFail" alt="' + modalName + '" href="' + modalUrl + '">Click here</a> to view page.';
        }

        // Set Current Context as Parent Context of Modal Dialog
        Common.SetStorage('ParentContext', Common.GetStorage('CurrentContext'));

        // Build Modal
        var divOverlay = '<div id="' + modalName + 'Overlay" class="gtc-modal-overlay"></div>';
        var divModal = '<div id="' + modalName + '" class="gtc-modal-container">';
        divModal += '<iframe title="' + modalName + '" name="Iframe' + modalName + '" class="gtc-modal-iframe" id="Iframe' + modalName + '" scrolling="no" height="100%" width="100%">' + insertContent + '</iframe>';
        divModal += '</div>';

        // Insert pinwheel in case modal needs adjustments after showing
        var divPinwheelOverlay = '<div id="PinwheelModalOverlay" class="gtc-pinwheel-overlay gtc-pinwheel-overlay-transparent"></div>';
        Common.InsertHTMLString(document.body, Common.InsertType.Append, divPinwheelOverlay);
        SpinKit.Show(Common.Get('PinwheelModalOverlay'));
        var removeModalPinwheel = function () {
            Velocity(Common.Get('PinwheelModalOverlay'), 'fadeOut', 'slow',
                function () {
                    Common.Remove(this[0]);
                }
            );
        };

        // Attach Modal to DOM
        Common.InsertHTMLString(document.body, Common.InsertType.Append, divOverlay);
        Common.InsertHTMLString(document.body, Common.InsertType.Append, divModal);
        // Cache modal object
        var modalInstance = Common.Get(modalName);

        // Wait for complete modal view loading
        Events.On(document, 'modalviewloadingcomplete', { ModalName: modalName, ModalElement: modalInstance }, OnModalViewLoadingComplete);

        // Initialize modal dialog
        Widgets.modal(modalInstance,
            {
                minHeight: false,
                minWidth: false,
                maxHeight: false,
                maxWidth: false,
                width: false,
                dialogClass: 'gtc-modal-dialog',
                autoOpen: false,
                open: function () {
                    // Add class for screen printing when modal is open
                    Common.AddClass(Common.Get('DivPage'), 'gtc-modal-open');

                    // Hide BackToTop
                    var backToTop = Common.Get('QuickBackToTopDiv');
                    if (Common.IsDefined(backToTop) && Common.IsVisible(backToTop)) {
                        Velocity(backToTop, 'fadeOut', 'slow');
                        Common.SetAttr(backToTop, 'data-modalhidden', 'true');
                    }

                    // Transfer from clicked element to modal
                    setTimeout(
                        function () {
                            Common.Transfer(Common.Get(modalLinkId), Common.Get(modalName), 'gtc-modal-border-transfer gtc-page-theme-border', 700);
                            var lastModalBorder = Common.QueryAll('.gtc-modal-border-transfer');
                            lastModalBorder = lastModalBorder[lastModalBorder.length - 1];
                            if (Common.IsDefined(lastModalBorder)) {
                                Common.AddClass(lastModalBorder, 'gtc-modal-border-transfer-background');
                            }
                        }, 200
                    );
                },
                afterOpen: function () {
                    // Custom event to let anything interested know modal is visible
                    Events.Trigger(document, 'modalvisible');

                    // Remove pinwheel
                    removeModalPinwheel();
                },
                beforeClose: function () {
                    setTimeout(
                        function () {
                            // Transfer from modal to clicked element
                            var modalCache = Common.Get(modalName);
                            var modalLinkCache = Common.Get(modalLinkId);
                            if (Common.IsDefined(modalCache) && Common.IsDefined(modalLinkCache)) {
                                Common.Transfer(modalCache, modalLinkCache, 'gtc-modal-border-transfer gtc-page-theme-border', 700);
                                var lastModalBorder = Common.QueryAll('.gtc-modal-border-transfer');
                                lastModalBorder = lastModalBorder[lastModalBorder.length - 1];
                                if (Common.IsDefined(lastModalBorder)) {
                                    Common.AddClass(lastModalBorder, 'gtc-modal-border-transfer-background');
                                }
                            }
                        }, 1
                    );

                    // Show BackToTop
                    var backToTop = Common.Get('QuickBackToTopDiv');
                    if (Common.IsDefined(backToTop) && Common.IsDefined(Common.GetAttr(backToTop, 'data-modalhidden'))) {
                        Velocity(backToTop, 'fadeIn', 'slow');
                        Common.RemoveAttr(backToTop, 'data-modalhidden');
                    }
                },
                close: function () {
					// Remove any modalvisible events an element may have attached to parent document
					Events.Off(document, 'modalvisible');

                    // Trigger ModalCloseComplete
                    window.parent.Events.Trigger(parent.document, 'modalclosecomplete', { ModalLinkId: modalLinkId });

                    // Remove class for screen printing when modal is open
                    Common.RemoveClass(Common.Get('DivPage'), 'gtc-modal-open');

                    // Cleanup widget. Don't want old elements hanging about
                    var that = this;
                    var modalIFrameCache = Common.Query('.gtc-modal-iframe');
                    var cleanUpModalFunction = function () {
                        if (Common.GetBrowser()[0] == 'IE') {
                            // IE is why we cant have nice things!!! Focus bug fix.
                            modalIFrameCache.src = 'about:blank';
                        }

                        // Empty element
                        if (that.nodeType === 1) {
                            // Get all elements inside element to be removed and clean up their data and events as well
                            // INFO: getElementsByTagName is MUCH faster in this context than querySelectorAll (NodeList - live vs static)
                            Cache.CleanElementData(that.getElementsByTagName('*'));
                        }
                        that.textContent = '';

                        // Cleanup
                        Widgets.modal(that, 'destroy');
                        Common.Remove(Common.Get(modalName));
                        Common.RemoveClass(document.body, 'gtc-body-removescroll');
                        Common.RemoveClass(document.body, 'gtc-body-fullscreen');
                        Common.Remove(Common.Query('.gtc-modal-scrollcontainer'));
                    };
                    var closeModalFirstPromise = Cache.Get(modalIFrameCache, 'CloseModalFirstPromise');
                    if (Common.IsDefined(closeModalFirstPromise)) {
                        Cache.Remove(modalIFrameCache, 'CloseModalFirstPromise');
                        var cleanupModalPromise = Common.Promise();
                        Cache.Set(modalIFrameCache, 'CleanupModalPromise', cleanupModalPromise);
                        cleanupModalPromise.promise.then(
                            function () {
                                cleanUpModalFunction();
                            }
                        );
                        closeModalFirstPromise.resolve();
                    }
                    else {
                        // If a modal and refreshing view dont destroy modal or we lose the timeout context and we have a race condition
                        var onRefreshIgnoreModalDestroy = Cache.Get(modalIFrameCache, 'OnRefreshIgnoreModalDestroy');
                        if (onRefreshIgnoreModalDestroy == true) {
                            Cache.Remove(modalIFrameCache, 'OnRefreshIgnoreModalDestroy');
                        }
                        else {
                            cleanUpModalFunction();
                        }
                    }
                    Common.DetachWindowResizingEvent('onModalResize');
                    Velocity(Common.Get(modalName + 'Overlay'), 'fadeOut', 550,
                        function () {
                            Common.Remove(this[0]);
                        }
                    );
                }
            }
        );

        // Wrap for scrolling
        var wrapper = Common.GenerateHTML('<div class="gtc-modal-scrollcontainer"></div>');
        Common.Wrap(modalInstance.parentNode, wrapper);

        // Cache iFrame
        var iframeCache = Common.Get('Iframe' + modalName);

        // Wait for jquery ui to wrap iframe before giving iframe src url (Can cause multiple server requests if not)
        Common.SetAttr(iframeCache, 'src', modalUrl);

        // On modal load - Update title, calculate size, show, cleanup
        Events.One(iframeCache, 'load',
            function () {
                var modalElement = Common.Get(modalName);

                // Add custom class and close link to title bar
                var modalTitleBar = Common.Query('.gtc-ui-dialog-titlebar', modalElement.parentNode);
                Common.AddClass(modalTitleBar, 'gtc-modal-titlebar');
                Common.InsertHTMLString(modalTitleBar, Common.InsertType.Append, '<a class="gtc-modal-close">Close</a>');
                Events.On(Common.Query('.gtc-modal-close', modalTitleBar), 'click', Modals.AbortModalDialog);

                // Get modal sizes
                var modalBody = Common.Query('body', window.parent.Common.Get('Iframe' + modalName).contentDocument);
                Widgets.modal(modalElement, 'option', { height: 'auto' });

                // Add Modal classing
                Common.AddClass(modalBody, 'gtc-modal-body');

                // Show modal overlay
                Velocity(Common.Get(modalName + 'Overlay'), { opacity: .5 }, { duration: 'slow', display: 'block',
                    complete: function () {
                        Common.AddClass(window.parent.document.body, 'gtc-body-removescroll');
                        Common.AddClass(window.parent.document.body, 'gtc-body-fullscreen');
                        var scrollContainerStyle = Common.Query('.gtc-modal-scrollcontainer', window.parent.document).style;
                        scrollContainerStyle.overflowX = 'hidden';
                        scrollContainerStyle.overflowY = 'scroll';
                    }
                });
            }
        );

    };

    Modals.DetermineModalDialogWidth = function (modalBody) {

        // Initialize
        var className = 'gtc-modal-medium';

        // Find Rich Text Editors
        var richTextEditor = Common.QueryAll('.gtc-editor-container', modalBody);
        if (richTextEditor.length > 0) {
            className = 'gtc-modal-large';
            return className;
        }

        // Find Fieldsets
        var allFieldSets = Common.QueryAll('.gtc-fieldset', modalBody);
        var fieldSets = Common.FilterElementArray(fieldSets, '.gtc-fieldset:not(.gtc-fieldset-long)');
        if (fieldSets.length == 1) {
            className = 'gtc-modal-small';
        }
        else if (fieldSets.length == 2) {
            className = 'gtc-modal-medium';
        }
        else if (fieldSets.length > 2) {
            // If more than 2 set large and return. No need to check anything else.
            className = 'gtc-modal-large';
            return className;
        }

        // Find Other FieldSet Types
        var longFieldSets = Common.FilterElementArray(fieldSets, '.gtc-fieldset-long');
        if (longFieldSets.length > 0) {
            className = 'gtc-modal-medium';
        }

        // Find CoupledFieldSets
        var coupledFieldSets = Common.QueryAll('.gtc-coupledfieldset', modalBody);
        if (coupledFieldSets.length > 0) {
            // If at least 1 set large and return. No need to check anything else.
            className = 'gtc-modal-large';
            return className;
        }

        // Find MultiSelect Panels and Display Panels
        var displayPanels = Common.QueryAll('.gtc-displaypanel', modalBody);
        var multiSelectPanels = Common.QueryAll('.gtc-multiselectpanel', modalBody);
        if (displayPanels.length > 0 || multiSelectPanels.length > 0) {
            className = 'gtc-modal-medium';
        }

        // Find MultiSelect Details and Display Details
        var displayDetails = Common.QueryAll('.gtc-displaydetail', modalBody);
        var multiSelectDetails = Common.QueryAll('.gtc-multiselectdetail', modalBody);
        if (displayDetails.length > 0 || multiSelectDetails.length > 0) {
            className = 'gtc-modal-medium';
        }

        // Find Progress Polls and Progress Bars
        var progressPoll = Common.QueryAll('.gtc-progresspoll', modalBody);
        var progressBar = Common.QueryAll('.gtc-progressbar', modalBody);
        if (progressPoll.length > 0) {
            className = 'gtc-modal-medium';
        }
        else if (progressBar.length > 0 && className != 'gtc-modal-medium') {
            className = 'gtc-modal-small';
        }

        // Find Tab Header
        var tabHeader = Common.QueryAll('.gtc-tabheader', modalBody);
        if (tabHeader.length > 0) {
            // Find Tab Buttons
            var tabButtons = Common.QueryAll('.gtc-tabbutton', modalBody);
            if (tabButtons.length > 3) {
                // If 4 or more set large and return. No need to check anything else.
                className = 'gtc-modal-large';
                return className;
            }
            else {
                className = 'gtc-modal-medium';
            }
        }

        // Find Card Panels
        var cardPanel = Common.QueryAll('.gtc-card-panel', modalBody);
        if (cardPanel.length > 0) {
            className = 'gtc-modal-medium';
        }

        // Find Drag Drop Panels
        var dragDropPanels = Common.QueryAll('.gtc-dragdroppanel', modalBody);
        if (dragDropPanels.length > 0) {
            var isLarge = false, dragDropPanel, index = 0, length = dragDropPanel.length;
            for ( ; index < length; index++) {
                dragDropPanel = dragDropPanels[index];
                if (Common.HasClass(dragDropPanel, 'gtc-dragdroppanel-inline')) {
                    // If drag drop set large and return. No need to check anything else.
                    className = 'gtc-modal-large';
                    isLarge = true;
                    break;
                }
            }
            if (isLarge) {
                return className;
            }
            else {
                className = 'gtc-modal-medium';
            }
        }

        // Find Rearrange Panels
        var rearrangePanel = Common.QueryAll('.gtc-rearrangepanel', modalBody);
        if (rearrangePanel.length > 0) {
            className = 'gtc-modal-medium';
        }

        // Find Trees
        var trees = Common.QueryAll('.gtc-tree-container', modalBody);
        if (trees.length > 0) {
            // TODO: Determine if user defined styling is being added (Dimension)
            className = 'gtc-modal-medium';
        }

        // Find Display Areas
        var displayAreas = Common.QueryAll('.gtc-displayarea', modalBody);
        if (displayAreas.length > 0) {
            // TODO: Determine if user defined styling is being added (Dimension, Padding, Margins)
            className = 'gtc-modal-medium';
        }

        // Find Document Displays
        var documentDisplays = Common.QueryAll('.gtc-documentdisplay', modalBody);
        if (documentDisplays.length > 0) {
            className = 'gtc-modal-large';
        }

        // Find Document Scans
        var documentScans = Common.QueryAll('.gtc-documentscan', modalBody);
        if (documentScans.length > 0) {
            className = 'gtc-modal-large';
        }

        // File Downloads
        var fileDownloads = Common.QueryAll('.gtc-filedownload', modalBody);
        if (fileDownloads.length > 0) {
            className = 'gtc-modal-large';
        }

        // Return class
        return className;

    };

    Modals.AbortModalDialog = function () {

        var modalIFrame = Common.Query('.gtc-modal-iframe', null, true);
        var closeButtons = Common.QueryAllVisible('.gtc-btn-closebutton', modalIFrame.contentWindow.document.body);
        if (closeButtons.length > 0) {
            GTC.TriggerEvent(closeButtons[0], 'click');
        }
        else {
            Modals.CloseModalDialog();
        }

    };

    Modals.CloseModalDialog = function () {

        // Set Current Context from Parent Context
        Common.SetStorage('CurrentContext', Common.GetStorage('ParentContext'));
        Common.RemoveStorage('ParentContext');

        // Close Modal
        window.parent.Widgets.modal(Common.Closest('.gtc-modal-container', Common.Query('.gtc-modal-iframe', null, true)), 'close');

    };

    Modals.CenterHiddenDiv = function (element) {

        var parentWindow = window.parent;
        var elementStyle = element.style;
        elementStyle.visibility = 'hidden';
        elementStyle.display = 'block';
        var newTop = (Common.Height(parentWindow) - Common.Height(element)) / 2;
        var newLeft = (Common.Width(parentWindow) - Common.Width(element)) / 2;
        elementStyle.top = newTop + 'px';
        elementStyle.left = newLeft + 'px';
        elementStyle.display = 'none';
        elementStyle.visibility = '';

    };

    Modals.ShowModalMessageDialog = function (messageType, messageTitle, messageBody, modalCallback) {

        var message = {
            Type: messageType,
            Title: messageTitle,
            Body: messageBody
        };
        Modals.ShowMessageDialog(message, modalCallback);

    };

    Modals.ShowMessageDialog = function (confirmationMessage, callbackFunction) {

        if (modalMessagePopupExists == false) {
            modalMessagePopupExists = true;

            // Get parent context
            var context = window.parent;

            // Create array to track DOMs that need tab handling
            var documents = [top.document];

            // Check for modal and add to array and remove events
            var iFrame = Common.Query('.gtc-modal-iframe', top.document);
            if (Common.IsDefined(iFrame)) {
                documents.push(iFrame.contentDocument);
                RemoveModalTabbingEvents(iFrame);
            }

            // Handle tabbing
            Events.On(documents, 'keydown.ConfirmationTabbing',
                function (event) {
                    // Are we tabbing?
                    if (event.keyCode !== GTC.Keyboard.Tab) {
                        return;
                    }

                    // Get confirmation popup buttons
                    var confirmationButtons = context.Common.QueryAll('.gtc-modal-message-btn');
                    var length = confirmationButtons.length;
                    if (length > 0) {
                        if (length == 1) {
                            confirmationButtons[0].focus();
                        }
                        else {
                            if (context.document.activeElement == confirmationButtons[0]) {
                                confirmationButtons[1].focus();
                            }
                            else {
                                confirmationButtons[0].focus();
                            }
                        }
                        event.preventDefault();
                    }
                }
            );

            // Build Modal
            var divModalOverlay = '<div id="ModalMessagePopupOverlay" class="gtc-modal-overlay gtc-modal-overlay-message"></div>';
            var divMessageModal = '<div role="dialog" id="ModalMessagePopup" class="gtc-modal-message"><span class="gtc-sr-only" data-translate="BeginningOfContent508">' + Common.TranslateKey('BeginningOfContent508', context) + '</span>';
            divMessageModal += '<a class="gtc-modal-close"></a><div class="gtc-modal-';
            switch (confirmationMessage.Type) {
                case Modals.ModalTypes.Confirmation:
                    divMessageModal += 'confirmation';
                    break;
                case Modals.ModalTypes.Error:
                    divMessageModal += 'error';
                    break;
                case Modals.ModalTypes.Warning:
                    divMessageModal += 'warning';
                    break;
                case Modals.ModalTypes.Success:
                    divMessageModal += 'check';
                    break;
                default:
                    divMessageModal += 'systemerror';
                    break;
            }
            divMessageModal += '-image"></div>';

            // Set up Title, Body and Buttons (if NOT System Error)
            if (confirmationMessage.Type >= 0) {
                divMessageModal += '<div><span><strong>' + Common.TranslateKey(confirmationMessage.Title, context) + '</strong><br/><br/>' + Common.TranslateKey(confirmationMessage.Body, context) + '</span>';
                if (confirmationMessage.Type == Modals.ModalTypes.Confirmation) {
                    divMessageModal += '<a tabindex="0" class="gtc-btn gtc-btn--size-default gtc-modal-message-btn gtc-btn--basic-active" id="ModalMessageYesButton" data-modalresult="' + Modals.ModalResult.Yes + '">' + Common.TranslateKey('Yes', context) + '</a>';
                    divMessageModal += '<a tabindex="0" class="gtc-btn gtc-btn--size-default gtc-modal-message-btn gtc-btn--basic-passive" id="ModalMessageNoButton" data-modalresult="' + Modals.ModalResult.No + '">' + Common.TranslateKey('No', context) + '</a>';
                }
                else {
                    divMessageModal += '<a tabindex="0" class="gtc-btn gtc-btn--size-default gtc-modal-message-btn gtc-btn--basic-active" id="ModalMessageOkButton" data-modalresult="' + Modals.ModalResult.Ok + '">' + Common.TranslateKey('OK', context) + '</a>';
                }
                divMessageModal += '</div>';
            }
            divMessageModal += '<span class="gtc-sr-only" data-translate="EndOfContent508">' + Common.TranslateKey('EndOfContent508', context) + '</span></div>';

            // Add Modal to Body
            var parentBody = context.document.body;
            Common.InsertHTMLString(parentBody, Common.InsertType.Append, divModalOverlay);
            Common.InsertHTMLString(parentBody, Common.InsertType.Append, divMessageModal);

            // Compensate for scroll
            var modalMessagePopup = context.Common.Get('ModalMessagePopup');
            var messageStyle = modalMessagePopup.style;
            messageStyle.visibility = 'hidden';
            messageStyle.display = 'block';
            var scrollTop = ((Common.Height(context) / 2) - (Common.Height(modalMessagePopup) / 2)) + context.pageYOffset;
            messageStyle.visibility = '';
            messageStyle.display = '';
            messageStyle.top = scrollTop + 'px';

            // Setup Button (if NOT System Error)
            if (confirmationMessage.Type >= 0) {
                context.Widgets.uibutton(context.Common.QueryAll('.gtc-modal-message-btn'));
            }

            // Show Modal
            Velocity(context.Common.Get('ModalMessagePopupOverlay'), { opacity: .5 }, { duration: 'slow', display: 'block' });
            Velocity(modalMessagePopup, 'fadeIn', 'slow');

            // Handle Close Click
            context.Events.On(context.Common.QueryAll('.gtc-modal-close, .gtc-modal-message-btn'), 'click',
                function (event) {
                    var modalResult = Common.GetAttr(this, 'data-modalresult');
                    Velocity(modalMessagePopup, 'fadeOut', 'slow',
                        function () {
                            Common.Remove(modalMessagePopup);

                            // Remove tabbing events
                            Events.Off(documents, 'keydown.ConfirmationTabbing');

                            // If modal exists put tabbing back the way it was
                            if (Common.IsDefined(iFrame)) {
                                iFrame.contentWindow.focus();
                                AttachModalTabbingEvents(iFrame);
                            }

                            // Release semaphore
                            modalMessagePopupExists = false;
                        }
                    );
                    Velocity(Common.Get('ModalMessagePopupOverlay', true), 'fadeOut', 'slow',
                        function () {
                            Common.Remove(this[0]);
                        }
                    );
                    if (Common.IsFunction(callbackFunction)) {
                        callbackFunction(modalResult);
                    }
                }
            );
        }

    };

    Modals.ShowModalErrorDialog = function (xhrResponse) {

        // Remove any pinwheels being displayed
        Common.Remove(Common.QueryAll('.gtc-spinkit, .gtc-pinwheel-overlay', null, true));
        Common.Remove(Common.QueryAll('.gtc-spinkit, .gtc-pinwheel-overlay'));

        // Convert to JSON
        var errorObject = JSON.parse(xhrResponse);

        // Build Modal
        var divErrorOverlay = '<div id="ErrorModalOverlay" class="gtc-modal-overlay gtc-modal-overlay-error" style="display:block;"></div>';
        var divErrorModal = '<div role="dialog" id="ErrorModal" class="gtc-modal-error"><span class="gtc-sr-only" data-translate="BeginningOfContent508">BeginningOfContent508</span>';
        divErrorModal += '<a class="gtc-modal-close"></a>';
        divErrorModal += '<div class="gtc-modal-error-image"><img data-translate="[alt]SystemError" alt="SystemError" src="/Content/thirdParty/' + Common.GetAttr(document.body, 'data-group') + '/skins/' + Common.GetAttr(document.body, 'data-theme').toLowerCase() + '/images/BackgroundSadCloud.png" /></div>';

        // Parse Error Objects
        var firstErrorObject;
        var stackTrace = '<div id="StackTraceDiv" class="gtc-modal-error-details" style="height: 0px;"><code class="gtc-modal-error-stacktrace"><pre>';
        if(Common.IsDefined(errorObject.ErrorDisplayDetails)){
            var object, index = 0, length = errorObject.ErrorDisplayDetails.length;
            for ( ; index < length; index++) {
                object = errorObject.ErrorDisplayDetails[index];
                if (index == 0) {
                    firstErrorObject = object;
                }
                stackTrace += '<strong>[' + object.Name + ': ' + object.Message + ']</strong>\r\n' + object.StackTrace + '\r\n\r\n';
            }
        }
        stackTrace += '</pre></code></div>';
        divErrorModal += '<div class="gtc-modal-error-message"><h1 data-translate="SystemError">SystemError</h1>';
        divErrorModal += '<h2 data-translate="PleaseSpeakToYourSystemAdministrator">PleaseSpeakToYourSystemAdministrator</h2>';
        if(Common.IsDefined(firstErrorObject)){
            divErrorModal += '<h3>' + firstErrorObject.Message + '</h3>';
            if(Common.IsDefined(firstErrorObject.FullName)){
                divErrorModal += '<p><span data-translate="ExceptionDetails">ExceptionDetails</span>' + firstErrorObject.FullName + ': ' + firstErrorObject.Message + '</p>';
                divErrorModal += '<a id="StackTraceAnchor" class="gtc-btn gtc-btn--size-default gtc-btn--basic-passive"><i class="gtc-icon-styles fa fa-code"></i><span data-translate="Details">Details</span></a>';
                divErrorModal += '</div>' + stackTrace + '<span class="gtc-sr-only" data-translate="EndOfContent508">EndOfContent508</span>';
            }
        }
        divErrorModal += '</div>';

        // Translate Page
        Common.TranslatePage(true);

        // Show Modal
        var parentBody = window.parent.document.body;
        Common.InsertHTMLString(parentBody, Common.InsertType.Append, divErrorOverlay);
        Common.InsertHTMLString(parentBody, Common.InsertType.Append, divErrorModal);

        // Compensate for scroll
        var parentWindow = window.parent;
        var modalErrorPopup = Common.Get('ErrorModal', true);
        var modalErrorStyle = modalErrorPopup.style;
        modalErrorStyle.visibility = 'hidden';
        modalErrorStyle.display = 'block';
        modalErrorStyle.height = '100%';
        var fullScreenSize = Common.Height(modalErrorPopup, true) - 20;
        modalErrorStyle.height = '';
        var scrollTop = ((Common.Height(parentWindow) / 2) - (Common.Height(modalErrorPopup) / 2)) + parentWindow.pageYOffset;
        modalErrorStyle.visibility = '';
        modalErrorStyle.display = '';
        modalErrorStyle.top = scrollTop + 'px';

        // Show Stack trace
        var originalErrorSize = Common.Height(modalErrorPopup, true);
        var originalTop = Common.GetStyle(modalErrorPopup, 'top');
        var paddingBottom = parseInt(Common.GetStyle(modalErrorPopup, 'paddingBottom').replace('px', ''), 10);
        var stackTraceAnchor = Common.Get('StackTraceAnchor', true);
        if(Common.IsDefined(stackTraceAnchor)){
            Events.On(Common.Get('StackTraceAnchor', true), 'click',
                function () {
                    var stackTraceDiv = Common.Get('StackTraceDiv', true);
                    if (Common.HasClass(stackTraceDiv, 'open')) {
                        Velocity(modalErrorPopup, { 'top': originalTop, 'height': originalErrorSize + 'px' });
                        Common.RemoveClass(stackTraceDiv, 'open');
                        Velocity(stackTraceDiv, { 'height': '0' });
                    }
                    else {
                        var imageSize = Common.Height(Common.Query('.gtc-modal-error-image', modalErrorPopup), true) + 20;
                        var messageSize = Common.Height(Common.Query('.gtc-modal-error-message', modalErrorPopup), true) + 20;
                        var largerSize = (imageSize >= messageSize) ? imageSize : messageSize;
                        Velocity(modalErrorPopup, { 'top': parentWindow.pageYOffset + 10 + 'px', 'height': fullScreenSize + 'px' });
                        Common.AddClass(stackTraceDiv, 'open');
                        var newHeight = fullScreenSize - largerSize - paddingBottom;
                        Velocity(stackTraceDiv, { 'height': newHeight + 'px' });
                    }
                }
            );
        }

        // Handle resize
        var onResizeEndFunction = function (event) {
            // Recalculate all values for proper sizing on screen window change
            var stackTraceDiv = Common.Get('StackTraceDiv', true);
            Common.RemoveClass(stackTraceDiv, 'open');
            stackTraceDiv.style.height = '0px';
            Common.RemoveAttr(modalErrorPopup, 'style');
            var modalErrorStyle = modalErrorPopup.style;
            modalErrorStyle.visibility = 'hidden';
            modalErrorStyle.display = 'block';
            modalErrorStyle.height = '100%';
            fullScreenSize = Common.Height(modalErrorPopup, true) - 20;
            modalErrorStyle.height = '';
            var scrollTop = ((Common.Height(parentWindow) / 2) - (Common.Height(modalErrorPopup) / 2)) + parentWindow.pageYOffset;
            modalErrorStyle.visibility = '';
            modalErrorStyle.display = '';
            modalErrorStyle.top = scrollTop + 'px';
            originalErrorSize = Common.Height(modalErrorPopup, true);
            originalTop = Common.GetStyle(modalErrorPopup, 'top');
        };
        Common.AttachWindowResizingEvent(onResizeEndFunction, 'onErrorModalResize');

        // Handle Close Click
        Events.On(Common.Query('.gtc-modal-close', modalErrorPopup), 'click',
            function () {
                Common.DetachWindowResizingEvent('onErrorModalResize');
                Common.Remove(modalErrorPopup);
                Common.Remove(Common.Get('ErrorModalOverlay', true));
            }
        );

    };

    Modals.ShowExceptionDialog = function (xhr) {

        // Parse response
        var response = null;
        if (Common.IsDefined(xhr.response)) {
            response = JSON.parse(xhr.response);
        }

        // Build Modal
        var divModalOverlay = '<div id="ModalExceptionDialogOverlay" class="gtc-modal-overlay gtc-modal-overlay-error"></div>';
        var divMessageModal = '<div role="dialog" id="ModalExceptionDialog" class="gtc-modal-exceptiondialog"><span class="gtc-sr-only" data-translate="BeginningOfContent508">' + Common.TranslateKey('BeginningOfContent508') + '</span>';
        divMessageModal += '<a id="ModalExceptionDialogCloseButton" class="gtc-modal-close"></a>';

        // Set up Title, Body and Buttons
        if (xhr.status == Modals.ErrorCodes.AuthorizationError) {
            divMessageModal += '<div class="gtc-modal-exceptiondialog-permissiondenied"><span data-translate="PermissionDenied" class="gtc-sr-only">' + Common.TranslateKey('PermissionDenied') + '</span></div>';
            if (Common.IsDefined(response) && response.LoadPreviousPage == 'Yes') {
                divMessageModal += '<a class="gtc-btn gtc-btn--size-default gtc-modal-exceptiondialog-btn gtc-btn--basic-active" id="ModalExceptionDialogBackButton">Back</a>';
            }
            divMessageModal += '<a class="gtc-btn gtc-btn--size-default gtc-modal-exceptiondialog-btn gtc-btn--basic-passive" id="ModalExceptionDialogLogoutButton">Logout</a>';
        }
        else if (xhr.status == Modals.ErrorCodes.ConcurrencyError) {
            divMessageModal += '<div class="gtc-modal-exceptiondialog-concurrencyerror"><span data-translate="ConcurrencyError" class="gtc-sr-only">' + Common.TranslateKey('ConcurrencyError') + '</span></div>';
            divMessageModal += '<a class="gtc-btn gtc-btn--size-default gtc-modal-exceptiondialog-btn gtc-btn--basic-active" id="ModalExceptionDialogReloadButton">Reload</a>';
        }
        else if (xhr.status == Modals.ErrorCodes.SessionExpirationError) {
            divMessageModal += '<div class="gtc-modal-exceptiondialog-sessionexpired"><span data-translate="SessionExpired" class="gtc-sr-only">' + Common.TranslateKey('SessionExpired') + '</span></div>';
            divMessageModal += '<a class="gtc-btn gtc-btn--size-default gtc-modal-exceptiondialog-btn gtc-btn--basic-active" id="ModalExceptionDialogLoginButton">Login</a>';
            Common.ClearSessionToken();
        }
        divMessageModal += '<span class="gtc-sr-only" data-translate="EndOfContent508">' + Common.TranslateKey('EndOfContent508') + '</span></div>';

        // Add Modal to Body
        var parentBody = window.parent.document.body;
        Common.InsertHTMLString(parentBody, Common.InsertType.Append, divModalOverlay);
        Common.InsertHTMLString(parentBody, Common.InsertType.Append, divMessageModal);

        // Setup Button
        Widgets.uibutton(Common.QueryAll('.gtc-modal-exceptiondialog-btn'));

        // Center
        var modalExceptionDialog = Common.Get('ModalExceptionDialog', true);
        var modalExceptionDialogOverlay = Common.Get('ModalExceptionDialogOverlay', true);
        Modals.CenterHiddenDiv(modalExceptionDialog);

        // Show Modal
        Velocity(modalExceptionDialogOverlay, { opacity: .5 }, { duration: 'slow', display: 'block' });
        Velocity(modalExceptionDialog, 'fadeIn', 'slow');

        // Remove any pinwheels being displayed
        Common.Remove(Common.QueryAll('.gtc-spinkit, .gtc-pinwheel-overlay', null, true));
        Common.Remove(Common.QueryAll('.gtc-spinkit, .gtc-pinwheel-overlay'));

        // Handle Close Click
        Events.On(Common.QueryAll('.gtc-modal-exceptiondialog-btn, .gtc-modal-close', modalExceptionDialog), 'click',
            function (event) {
                var buttonId = this.id;
                Velocity(modalExceptionDialog, 'fadeOut', 'slow',
                    function () {
                        var timeoutRedirect;
                        switch (buttonId) {
                            case 'ModalExceptionDialogBackButton':
                                Common.CloseRefreshView();
                                break;
                            case 'ModalExceptionDialogReloadButton':
                                Common.RefreshView();
                                break;
                            case 'ModalExceptionDialogCloseButton':
                                if (xhr.status == Modals.ErrorCodes.AuthorizationError) {
                                    if (Common.IsDefined(response) && response.LoadPreviousPage == 'Yes') {
                                        Common.CloseRefreshView();
                                    }
                                }
                                else if (xhr.status == Modals.ErrorCodes.ConcurrencyError) {
                                    Common.RefreshView();
                                }
                                else {
                                    Common.ClearStorage();
                                    if (Common.IsDefined(response) && Common.IsNotEmptyString(response.TimeoutRedirect)) {
                                        timeoutRedirect = response.TimeoutRedirect;
                                        if (Common.IsDefined(timeoutRedirect)) {
                                            window.parent.location.href = timeoutRedirect;
                                        }
                                    }
                                }
                                break;
                            case 'ModalExceptionDialogLogoutButton':
                            case 'ModalExceptionDialogLoginButton':
                                Common.ClearStorage();
                                if (Common.IsDefined(response) && Common.IsNotEmptyString(response.TimeoutRedirect)) {
                                    timeoutRedirect = response.TimeoutRedirect;
                                    if (Common.IsDefined(timeoutRedirect)) {
                                        window.parent.location.href = timeoutRedirect;
                                    }
                                }
                                break;
                        }
                        Common.Remove(modalExceptionDialog);
                    }
                );
                Velocity(modalExceptionDialogOverlay, 'fadeOut', 'slow',
                    function () {
                        Common.Remove(modalExceptionDialogOverlay);
                    }
                );
            }
        );

    };

    // Private Methods
    function ResizeModal (modalName, centerModal, animateResizing, callBackFunction) {

        // Initialize
        var addedPinwheel = false;
        if (window.parent.Common.QueryAll('.gtc-spinkit').length == 0) {
            Common.ShowPinwheel(null, false, true);
            addedPinwheel = true;
        }
        var centeringStep = null;

        // Get deferred object for callback promise
        var callbackPromise = Common.Promise();

        // Get modal, body and sizes, add class to stop something else from resizing modal
        var modal = window.parent.Common.Get(modalName);
        if (Common.IsNotDefined(modal)) {
            return;
        }
        var modalScroll = Common.Closest('.gtc-modal-scrollcontainer', modal);
        var modalIframe = Common.Query('.gtc-modal-iframe', modal);
        var modalBody = Common.Query('body', modalIframe.contentDocument);
        Common.AddClass(modalBody, 'gtc-modal-resizing');
        var displayCache = '';
        var modalParent = modal.parentNode;
        var modalParentStyle = modalParent.style;
        if (animateResizing != true) {
            displayCache = Common.GetStyle(modalParent, 'display');
            modalParentStyle.zIndex = '-1000';
            modalParentStyle.display = 'block';
        }

        // TODO: Do we need to include titlebar height?
        var newHeight = Common.Height(modalBody, true);

        // Handle modals that need scrolling
        var positionObject = { my: 'center', at: 'center', of: modalScroll };
        if (newHeight > Common.Height(window)) {
            positionObject = { my: 'top', at: 'top', of: modalScroll };
        }
        else {
            var documentDisplay = Common.Query('.gtc-documentdisplay', modalBody);
            if (Common.IsDefined(documentDisplay)) {
                positionObject = { my: 'top', at: 'top', of: modalScroll };
                var documentHeight = Common.GetAttr(documentDisplay, 'data-height');
                if (Common.IsDefined(documentHeight)) {
                    // TODO: Add em, pt and % conversions
                    newHeight += parseInt(documentHeight, 10) + 200;
                }
                else {
                    newHeight += Common.Height(parent.window) + 200;
                }
            }
        }

        if (animateResizing == true) {
            // Add centering step function if needed
            if (centerModal == true) {
                centeringStep = function () {
                    Widgets.modal(modal, 'option', 'position', positionObject);
                };
            }

            // Start modal animations
            Velocity(modal,
                {
                    height: newHeight
                },
                250,
                function () {
                    Common.RemoveClass(modalBody, 'gtc-modal-resizing');
                    if (addedPinwheel) {
                        Common.HidePinwheel();
                    }
                    callbackPromise.resolve();
                }
            );

            // Start dialog widget animations
            Velocity(Widgets.modal(modal, 'widget'),
                {
                    height: newHeight
                },
                {
                    duration: 250,
                    progress: centeringStep
                }
            );
        }
        else {
            // Update new modal sizes
            modal.style.height = newHeight + 'px';

            // Create dialog options
            var dialogOptions = {
                height: newHeight
            };

            // Add centering if modal centering is needed
            if (centerModal == true) {
                dialogOptions.position = positionObject;
            }

            // Update modal
            Widgets.modal(modal, 'option', dialogOptions);

            // Resolve promise
            callbackPromise.resolve();
            Common.RemoveClass(modalBody, 'gtc-modal-resizing');
            if (addedPinwheel) {
                Common.HidePinwheel();
            }
        }

        // If callback exists, call after animations are done
        if (Common.IsFunction(callBackFunction)) {
            callbackPromise.promise.then(
                function () {
                    callBackFunction();
                }
            );
        }
        if (animateResizing != true) {
            modalParentStyle.display = displayCache;
            modalParentStyle.zIndex = '';
        }

    };

    function AttachModalTabbingEvents (iFrame) {

        // Stop tabbing from leaving modal
        Events.On(Common.Query('.gtc-modal-overlay', top.document), 'click.ModalTabbing focus.ModalTabbing focusin.ModalTabbing',
            function (event) {
                iFrame.focus();
                event.preventDefault();
                event.stopPropagation();
            }
        );
        Events.On(iFrame.contentDocument, 'keydown.ModalTabbing',
            function (event) {
                // Stop modals from tabbing out of themselves

                // Are we tabbing?
                if (event.keyCode !== GTC.Keyboard.Tab) {
                    return;
                }

                // Find all elements in modal
                var allBody = Common.QueryAll('*:not(#SkipToMainContent508)', this);

                // For each element, is it tabbable and find lowest and highest tabIndex in all elements
                var tabbables = [], tabbable, lowest, highest, index = 0, length = allBody.length;
                for ( ; index < length; index++) {
                    tabbable = allBody[index];
                    if (Common.IsTabbable(tabbable)) {
                        tabbables.push(tabbable);
                        if (tabbable.tabIndex > 0) {
                            if (Common.IsNotDefined(lowest) || lowest.tabIndex > tabbable.tabIndex) {
                                lowest = tabbable;
                            }
                            if (Common.IsNotDefined(highest) || highest.tabIndex < tabbable.tabIndex) {
                                highest = tabbable;
                            }
                        }
                    }
                }

                // Find first and last elements in document flow
                var first = tabbables[0];
                var last = tabbables[tabbables.length - 1];

                // Find if first and last was defined with tabIndex and does not match document flow
                if (Common.IsDefined(lowest) && first != lowest) {
                    first = lowest;
                }
                if (Common.IsDefined(highest) && last != highest) {
                    last = highest;
                }

                // Determine direction of tabbing and if it needs to set focus
                if (event.target === last && !event.shiftKey) {
                    first.focus();
                    event.preventDefault();
                }
                else if (event.target === first && event.shiftKey) {
                    last.focus();
                    event.preventDefault();
                }
            }
        );

    };

    function RemoveModalTabbingEvents (iFrame) {

        Events.Off(Common.Query('.gtc-modal-overlay', top.document), 'click.ModalTabbing focus.ModalTabbing focusin.ModalTabbing');
        Events.Off(iFrame.contentDocument, 'keydown.ModalTabbing');

    };

    function OnModalViewLoadingComplete (event) {
        Events.Off(document, 'modalviewloadingcomplete');

        // Determine if we should force modal width
        var modalBody = Common.Query('body', window.parent.Common.Get('Iframe' + event.data.ModalName).contentDocument);
        if (!Common.CheckMedia('Mobile')) {
            var modalSizeOverride = Common.GetAttr(modalBody, 'data-modalsize');
            if (Common.IsDefined(modalSizeOverride) && modalSizeOverride.toLowerCase() != 'auto') {
                Common.AddClass(event.data.ModalElement.parentNode, 'gtc-modal-' + modalSizeOverride.toLowerCase());
            }
            else {
                var modalSizingClass = Modals.DetermineModalDialogWidth(modalBody);
                Common.AddClass(event.data.ModalElement.parentNode, modalSizingClass);
            }
        }

        // Find real height (For now cant find a better way than timeout)
        setTimeout(
            function () {
                var iFrame = Common.Query('.gtc-modal-iframe', top.document);
                ResizeModal(event.data.ModalName, true, false, null);

                // Setup Animated resize event
                Events.On(iFrame, 'resizemodal',
                    function () {
                        ResizeModal(event.data.ModalName, true, true, null);
                    }
                );

                // Stop tabbing from leaving modal
                AttachModalTabbingEvents(iFrame);

                // Show modal
                Widgets.modal(event.data.ModalElement, 'open');

                var onResizeEndFunction = function (resizeEndEvent) {
                    ResizeModal(resizeEndEvent.data.ModalName, true, false, null);
                    if (resizeEndEvent.data.ModalElement && resizeEndEvent.data.ModalElement.parentNode) {
                        resizeEndEvent.data.ModalElement.parentNode.style.display = 'block';
                    }
                };
                Common.AttachWindowResizingEvent(onResizeEndFunction, 'onModalResize', { ModalName: event.data.ModalName, ModalElement: event.data.ModalElement });
            }, 100
        );
    };

} (window.Modals = window.Modals || {}, window, document, Common, Cache, Events, Velocity));
// Icon
// Based On: Icon -> ViewElement
(function (Icon, window, document, Common, Cache, Events, Velocity, undefined) {
    console.log(Icon)
    // Public Methods
    Icon.Render = function (icon, isOnField, labelExists) {
        var iconTextMarkup = '';
        
        if (Common.IsDefined(icon.Symbol)) {
            var iconType = icon.Symbol.split('-')[0];
            if (iconType == "gtc" || iconType == "material") {
                iconType += '-icon';
            }
            iconTextMarkup += '<i class="';
            if (isOnField) {
                if (labelExists) {
                    iconTextMarkup += 'gtc-input-custom ';
                }
                else {
                    iconTextMarkup += 'gtc-input-custom-nolabel ';
                }
            }
            iconTextMarkup += 'gtc-icon-styles ' + iconType;
            iconTextMarkup += ' ' + icon.Symbol.toLowerCase() + '"';
            iconTextMarkup += '></i>';
        }
        return iconTextMarkup;

    };

    

    Icon.GetClassing = function (iconSymbol) {
        var iconClass = '';
        if (Common.IsDefined(iconSymbol)) {
            var iconType = iconSymbol.split('-')[0];
            if (iconType == 'gtc') {
                iconType += '-icon';
            }
            iconClass += 'gtc-icon-styles ' + iconType;
            iconClass += ' ' + iconSymbol.toLowerCase();
        }
        return iconClass;

    };

} (window.Icon = window.Icon || {}, window, document, Common, Cache, Events, Velocity));
// SpinKit
// Based On: SpinKit
(function (SpinKit, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var spinners = {
        ChasingDots: '<div class="sk-chasing-dots"><div class="sk-child sk-dot1"></div><div class="sk-child sk-dot2"></div></div>',
        Circle: '<div class="sk-circle"><div class="sk-circle1 sk-child"></div><div class="sk-circle2 sk-child"></div><div class="sk-circle3 sk-child"></div><div class="sk-circle4 sk-child"></div><div class="sk-circle5 sk-child"></div><div class="sk-circle6 sk-child"></div><div class="sk-circle7 sk-child"></div><div class="sk-circle8 sk-child"></div><div class="sk-circle9 sk-child"></div><div class="sk-circle10 sk-child"></div><div class="sk-circle11 sk-child"></div><div class="sk-circle12 sk-child"></div></div>',
        CubeGrid: '<div class="sk-cube-grid"><div class="sk-cube sk-cube1"></div><div class="sk-cube sk-cube2"></div><div class="sk-cube sk-cube3"></div><div class="sk-cube sk-cube4"></div><div class="sk-cube sk-cube5"></div><div class="sk-cube sk-cube6"></div><div class="sk-cube sk-cube7"></div><div class="sk-cube sk-cube8"></div><div class="sk-cube sk-cube9"></div></div>',
        DoubleBounce: '<div class="sk-double-bounce"><div class="sk-child sk-double-bounce1"></div><div class="sk-child sk-double-bounce2"></div>',
        FadingCircle: '<div class="sk-fading-circle"><div class="sk-circle1 sk-circle"></div><div class="sk-circle2 sk-circle"></div><div class="sk-circle3 sk-circle"></div><div class="sk-circle4 sk-circle"></div><div class="sk-circle5 sk-circle"></div><div class="sk-circle6 sk-circle"></div><div class="sk-circle7 sk-circle"></div><div class="sk-circle8 sk-circle"></div><div class="sk-circle9 sk-circle"></div><div class="sk-circle10 sk-circle"></div><div class="sk-circle11 sk-circle"></div><div class="sk-circle12 sk-circle"></div></div>',
        FoldingCube: '<div class="sk-folding-cube"><div class="sk-cube1 sk-cube"></div><div class="sk-cube2 sk-cube"></div><div class="sk-cube4 sk-cube"></div><div class="sk-cube3 sk-cube"></div></div>',
        Pulse: '<div class="sk-spinner sk-spinner-pulse"></div>',
        RotatingPlane: '<div class="sk-rotating-plane"></div>',
        ThreeBounce: '<div class="sk-three-bounce"><div class="sk-child sk-bounce1"></div><div class="sk-child sk-bounce2"></div><div class="sk-child sk-bounce3"></div></div>',
        WanderingCubes: '<div class="sk-wandering-cubes"><div class="sk-cube sk-cube1"></div><div class="sk-cube sk-cube2"></div></div>',
        Wave: '<div class="sk-wave"><div class="sk-rect sk-rect1"></div><div class="sk-rect sk-rect2"></div><div class="sk-rect sk-rect3"></div><div class="sk-rect sk-rect4"></div><div class="sk-rect sk-rect5"></div></div>'
    };

    // Public Methods
    SpinKit.Setup = function () {

        var spinKit = Common.GetStorage('CurrentSpinKit');
        if (Common.IsNotDefined(spinKit) || spinKit.length <= 0) {
            spinKit = Common.GetAttr(document.body, 'data-spinner');
            if (Common.IsNotDefined(spinKit) || spinKit.length <= 0) {
                spinKit = "FadingCircle";
            }
        }
        return spinKit;
    };

    SpinKit.Show = function (element, customType) {

        if (Common.IsEmptyString(element.id)) {
            element.id = Common.GenerateUniqueID();
        }
        var spinKit = customType;
        if (Common.IsNotDefined(spinKit) || spinKit.length <= 0) {
            spinKit = SpinKit.Setup();
        }
        var spinnerHtml = '<div id="GTC-SpinKit-' + element.id + '" class="gtc-spinkit">' + spinners[spinKit] + '</div>';

        // TODO: make this better; know which field
        if (Common.Closest('.gtc-coupledfieldset', element) != null) {
            element = element.lastElementChild;
        }
        Common.InsertHTMLString(element, Common.InsertType.Append, spinnerHtml);

    };

    SpinKit.Hide = function (element) {

        var spinner = Common.Query('#GTC-SpinKit-' + element.id, element);
        Common.Remove(spinner);

    };

    SpinKit.CleanupAll = function () {

        var allSpinners = Common.QueryAll('.gtc-spinkit');
        if (allSpinners.length) {
            Common.Remove(allSpinners);
        }
        if (window.parent != window.top) {
            var allParentSpinners = window.parent.Common.QueryAll('.gtc-spinkit');
            if (allParentSpinners.length) {
                window.parent.Common.Remove(allParentSpinners);
            }
        }

    };

} (window.SpinKit = window.SpinKit || {}, window, document, Common, Cache, Events, Velocity));
// View Element
(function (ViewElement, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    ViewElement.RenderAttributes = function (viewElement) {

        // Initialize
        var attributeMarkup = '';

        // TabIndex@
        if (viewElement.FocusIndex > 0) {
            attributeMarkup += ' tabindex="' + viewElement.FocusIndex + '"';
        }

        // Id@
        if (Common.IsDefined(viewElement.Name)) {
            attributeMarkup += ' id="' + viewElement.Name + '"';
        }

        // Style@, display: none;
        if (viewElement.IsDisplayed == 'No') {
            attributeMarkup += ' style="display: none;"';
        }

        // Return
        return attributeMarkup;

    };

    ViewElement.TestExists = function (type, namespace, childText, functionText) {

        functionText = functionText || 'Render';
        if (Common.IsNotDefined(namespace)) {
            if (Common.IsDefined(window.console)) {
                console.log('Error[' + type + ']: Namespace missing');
            }
        }
        else if (!Common.IsFunction(namespace[functionText])) {
            if (Common.IsDefined(window.console)) {
                console.log('Error[' + type + ']: ' + (childText || type) + '.' + functionText + '() missing');
            }
        }

    };

} (window.ViewElement = window.ViewElement || {}, window, document, Common, Cache, Events, Velocity));
// GTC
(function (GTC, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Variables
    GTC.Keyboard = {
        Alt: 18,
        Backspace: 8,
        CapsLock: 20,
        Control: 17,
        Delete: 46,
        Down: 40,
        End: 35,
        Enter: 13,
        Equal: 187,
        Escape: 27,
        Home: 36,
        Hyphen: 189,
        Left: 37,
        PageDown: 34,
        PageUp: 33,
        Period: 190,
        Right: 39,
        Shift: 16,
        Space: 32,
        Tab: 9,
        Up: 38
    };

    GTC.Numbers = {
        Zero: 48,
        One: 49,
        Two: 50,
        Three: 51,
        Four: 52,
        Five: 53,
        Six: 54,
        Seven: 55,
        Eight: 56,
        Nine: 57
    };

    GTC.Keypad = {
        Zero: 96,
        One: 97,
        Two: 98,
        Three: 99,
        Four: 100,
        Five: 101,
        Six: 102,
        Seven: 103,
        Eight: 104,
        Nine: 105,
        Plus: 107,
        Minus: 109,
        Multiply: 106,
        Divide: 111,
        Decimal: 110
    };

    // Public Methods
    GTC.TriggerEvent = function (eventElement, eventName, eventData) {

        var triggerEvent = Events.Event(eventName);
        triggerEvent.EventData = eventData;

        // Current context?
        if (document.body.contains(eventElement)) {
            Events.Trigger(eventElement, triggerEvent);
        }
        else {
            window.parent.Events.Trigger(eventElement, triggerEvent);
        }

    };

    GTC.IsControlDisabled = function (element) {

        var dataDisabled = Common.GetAttr(element, 'data-disabled');
        if (dataDisabled == 'true') {
            return true;
        }
        return false;

    };

    GTC.AttachKey = function (elementName, attachedKey) {

        var keyNamespace = attachedKey.split('.');
        if (keyNamespace.length == 2) {
            var attachedKeyCode = GTC[keyNamespace[0]][keyNamespace[1]];
            Events.On(document, 'keyup.' + elementName,
                function (event) {
                    var pressedKeyCode = (event.keyCode ? event.keyCode : event.which);
                    if (pressedKeyCode == attachedKeyCode) {
                        if (!IsSearchToolInContext()) {
                            var element = Common.Get(elementName);
                            if (element != document.activeElement) {
                                document.activeElement.blur();
                                Events.Trigger(element, 'mousedown');
                                setTimeout(
                                    function () {
                                        Events.Trigger(element, 'mouseup');
                                    }, 200
                                );
                                Events.Trigger(element, 'click');
                            }
                        }
                    }
                }
            );
        }

    };

    // Private Methods
    function IsSearchToolInContext () {

        var searchForm = Common.Closest("form", document.activeElement);
        if (Common.IsNotDefined(searchForm)) {
            return false;
        }
        var namespace = Common.GetAttr(searchForm, "data-namespace");
        if (namespace == "SearchTool") {
            return true;
        }
        return false;

    };

} (window.GTC = window.GTC || {}, window, document, Common, Cache, Events, Velocity));
// Position
(function (Position, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var cachedScrollbarWidth,
        supportsOffsetFractions,
        max = Math.max,
        abs = Math.abs,
        round = Math.round,
        rhorizontal = /left|center|right/,
        rvertical = /top|center|bottom/,
        roffset = /[\+\-]\d+(\.[\d]+)?%?/,
        rposition = /^\w+/,
        rpercent = /%$/;

    // Public Variables
    Position.Info = {
        scrollbarWidth: function () {

            if (cachedScrollbarWidth !== undefined) {
                return cachedScrollbarWidth;
            }
            var w1, w2,
                div = Common.GenerateHTML('<div style="display:block;position:absolute;width:50px;height:50px;overflow:hidden;""><div style="height:100px;width:auto;"></div></div>'),
                innerDiv = div.firstChild;

            document.body.appendChild(div);
            w1 = innerDiv.offsetWidth;
            div.style.overflow = 'scroll';

            w2 = innerDiv.offsetWidth;

            if (w1 === w2) {
                w2 = div.clientWidth;
            }

            Common.Remove(div, true);
            return (cachedScrollbarWidth = w1 - w2);

        },
        getScrollInfo: function (within) {

            var overflowX = within.isWindow || within.isDocument ? '' : Common.GetStyle(within.element, 'overflow-x'),
                overflowY = within.isWindow || within.isDocument ? '' : Common.GetStyle(within.element, 'overflow-y'),
                hasOverflowX = overflowX === 'scroll' ||
                    (overflowX === 'auto' && within.width < within.element.scrollWidth),
                hasOverflowY = overflowY === 'scroll' ||
                    (overflowY === 'auto' && within.height < within.element.scrollHeight);
            return {
                width: hasOverflowY ? Position.Info.scrollbarWidth() : 0,
                height: hasOverflowX ? Position.Info.scrollbarWidth() : 0
            };

        },
        getWithinInfo: function (element) {

            var withinElement = element || window,
                isWindow = Common.IsWindow(withinElement),
                isDocument = !!withinElement && withinElement.nodeType === 9,
                scrollTop, scrollLeft;
            if (isWindow || isDocument) {
                scrollTop = window.pageYOffset;
                scrollLeft = window.pageXOffset;
            }
            else {
                scrollTop = element.scrollTop;
                scrollLeft = element.scrollLeft;
            }
            return {
                element: withinElement,
                isWindow: isWindow,
                isDocument: isDocument,
                offset: Common.Offset(withinElement) || { left: 0, top: 0 },
                scrollLeft: scrollLeft,
                scrollTop: scrollTop,
                width: Common.Width(withinElement),
                height: Common.Height(withinElement)
            };

        }
    };

    Position.Collision = {
        fit: {
            left: function (position, data) {

                var within = data.within,
                    withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
                    outerWidth = within.width,
                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                    overLeft = withinOffset - collisionPosLeft,
                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
                    newOverRight;

                // Element is wider than within
                if (data.collisionWidth > outerWidth) {
                    if (overLeft > 0 && overRight <= 0) {
                        // Element is initially over the left side of within
                        newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                        position.left += overLeft - newOverRight;
                    }
                    else if (overRight > 0 && overLeft <= 0) {
                        // Element is initially over right side of within
                        position.left = withinOffset;
                    }
                    else {
                        // Element is initially over both left and right sides of within
                        if (overLeft > overRight) {
                            position.left = withinOffset + outerWidth - data.collisionWidth;
                        }
                        else {
                            position.left = withinOffset;
                        }
                    }
                }
                else if (overLeft > 0) {
                    // Too far left -> align with left edge
                    position.left += overLeft;
                }
                else if (overRight > 0) {
                    // Too far right -> align with right edge
                    position.left -= overRight;
                }
                else {
                    // Adjust based on position and margin
                    position.left = max(position.left - collisionPosLeft, position.left);
                }

            },
            top: function (position, data) {

                var within = data.within,
                    withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
                    outerHeight = data.within.height,
                    collisionPosTop = position.top - data.collisionPosition.marginTop,
                    overTop = withinOffset - collisionPosTop,
                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
                    newOverBottom;

                // Element is taller than within
                if (data.collisionHeight > outerHeight) {
                    if (overTop > 0 && overBottom <= 0) {
                        // Element is initially over the top of within
                        newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                        position.top += overTop - newOverBottom;
                    }
                    else if (overBottom > 0 && overTop <= 0) {
                        // Element is initially over bottom of within
                        position.top = withinOffset;
                    }
                    else {
                        // Element is initially over both top and bottom of within
                        if (overTop > overBottom) {
                            position.top = withinOffset + outerHeight - data.collisionHeight;
                        }
                        else {
                            position.top = withinOffset;
                        }
                    }
                }
                else if (overTop > 0) {
                    // Too far up -> align with top
                    position.top += overTop;
                }
                else if (overBottom > 0) {
                    // Too far down -> align with bottom edge
                    position.top -= overBottom;
                }
                else {
                    // Adjust based on position and margin
                    position.top = max(position.top - collisionPosTop, position.top);
                }
            }

        },
        flip: {
            left: function (position, data) {

                var within = data.within,
                    withinOffset = within.offset.left + within.scrollLeft,
                    outerWidth = within.width,
                    offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                    overLeft = collisionPosLeft - offsetLeft,
                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
                    myOffset = data.my[0] === 'left' ? -data.elemWidth : data.my[0] === 'right' ? data.elemWidth : 0,
                    atOffset = data.at[0] === 'left' ? data.targetWidth : data.at[0] === 'right' ? -data.targetWidth : 0,
                    offset = -2 * data.offset[0],
                    newOverRight,
                    newOverLeft;

                if (overLeft < 0) {
                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                    if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                        position.left += myOffset + atOffset + offset;
                    }
                }
                else if (overRight > 0) {
                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                    if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                        position.left += myOffset + atOffset + offset;
                    }
                }

            },
            top: function (position, data) {

                var within = data.within,
                    withinOffset = within.offset.top + within.scrollTop,
                    outerHeight = within.height,
                    offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
                    collisionPosTop = position.top - data.collisionPosition.marginTop,
                    overTop = collisionPosTop - offsetTop,
                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
                    top = data.my[1] === 'top',
                    myOffset = top ? -data.elemHeight : data.my[1] === 'bottom' ? data.elemHeight : 0,
                    atOffset = data.at[1] === 'top' ? data.targetHeight : data.at[1] === 'bottom' ? -data.targetHeight : 0,
                    offset = -2 * data.offset[1],
                    newOverTop,
                    newOverBottom;
                if (overTop < 0) {
                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                    if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
                        position.top += myOffset + atOffset + offset;
                    }
                }
                else if (overBottom > 0) {
                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                    if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                        position.top += myOffset + atOffset + offset;
                    }
                }

            }
        },
        flipfit: {
            left: function () {

                Position.Collision.flip.left.apply(this, arguments);
                Position.Collision.fit.left.apply(this, arguments);

            },
            top: function () {

                Position.Collision.flip.top.apply(this, arguments);
                Position.Collision.fit.top.apply(this, arguments);

            }
        }
    };

    // Public Methods
    Position.Set = function (elements, options) {

        // Make a copy, we don't want to modify arguments
        options = Common.MergeObjects({}, options);

        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target,
            within = Position.Info.getWithinInfo(options.within),
            scrollInfo = Position.Info.getScrollInfo(within),
            collision = (options.collision || 'flip').split(' '),
            offsets = {};

        if (Common.IsString(options.of)) {
            target = Common.Query(options.of);
        }
        else {
            target = options.of;
        }

        dimensions = getDimensions(target);
        if (target.preventDefault) {
            // Force left top to allow flipping
            options.at = 'left top';
        }
        targetWidth = dimensions.width;
        targetHeight = dimensions.height;
        targetOffset = dimensions.offset;

        // Clone to reuse original targetOffset later
        basePosition = Common.MergeObjects({}, targetOffset);

        // Force my and at to have valid horizontal and vertical positions
        // If a value is missing or invalid, it will be converted to center
        var which, myat = ['my', 'at'], index = 0, length = 2;
        for ( ; index < length; index++) {
            which = myat[index];
            var pos = (options[which] || '').split(' '),
                horizontalOffset,
                verticalOffset;

            if (pos.length === 1) {
                pos = rhorizontal.test(pos[0]) ? pos.concat(['center']) : rvertical.test(pos[0]) ? ['center'].concat(pos) : ['center', 'center'];
            }
            pos[0] = rhorizontal.test(pos[0]) ? pos[0] : 'center';
            pos[1] = rvertical.test(pos[1]) ? pos[1] : 'center';

            // Calculate offsets
            horizontalOffset = roffset.exec(pos[0]);
            verticalOffset = roffset.exec(pos[1]);
            offsets[which] = [
                horizontalOffset ? horizontalOffset[0] : 0,
                verticalOffset ? verticalOffset[0] : 0
            ];

            // Reduce to just the positions without the offsets
            options[which] = [
                rposition.exec(pos[0])[0],
                rposition.exec(pos[1])[0]
            ];
        }

        // Normalize collision option
        if (collision.length === 1) {
            collision[1] = collision[0];
        }

        if (options.at[0] === 'right') {
            basePosition.left += targetWidth;
        }
        else if (options.at[0] === 'center') {
            basePosition.left += targetWidth / 2;
        }

        if (options.at[1] === 'bottom') {
            basePosition.top += targetHeight;
        }
        else if (options.at[1] === 'center') {
            basePosition.top += targetHeight / 2;
        }

        atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
        basePosition.left += atOffset[0];
        basePosition.top += atOffset[1];

        // Convert elements to an array, if necessary.
        if (!elements.length) {
            elements = [elements];
        }
        index = 0, length = elements.length;
        for ( ; index < length; index++) {
            completePositioning(elements[index], options, atOffset, targetWidth, targetHeight, targetOffset, basePosition, target, within, scrollInfo, collision, offsets, index);
        }

    };

    // Private Methods
    function completePositioning (element, options, atOffset, targetWidth, targetHeight, targetOffset, basePosition, target, within, scrollInfo, collision, offsets, elementIndex) {

        var collisionPosition, using,
            elemWidth = Common.Width(element),
            elemHeight = Common.Height(element),
            marginLeft = parseCss(element, 'marginLeft'),
            marginTop = parseCss(element, 'marginTop'),
            collisionWidth = elemWidth + marginLeft + parseCss(element, 'marginRight') + scrollInfo.width,
            collisionHeight = elemHeight + marginTop + parseCss(element, 'marginBottom') + scrollInfo.height,
            position = Common.MergeObjects({}, basePosition),
            myOffset = getOffsets(offsets.my, Common.Width(element), Common.Height(element));

        if (options.my[0] === 'right') {
            position.left -= elemWidth;
        }
        else if (options.my[0] === 'center') {
            position.left -= elemWidth / 2;
        }

        if (options.my[1] === 'bottom') {
            position.top -= elemHeight;
        }
        else if (options.my[1] === 'center') {
            position.top -= elemHeight / 2;
        }

        position.left += myOffset[0];
        position.top += myOffset[1];

        // If the browser doesn't support fractions, then round for consistent results
        if (!supportsOffsetFractions) {
            position.left = round(position.left);
            position.top = round(position.top);
        }

        collisionPosition = {
            marginLeft: marginLeft,
            marginTop: marginTop
        };

        var leftTop = ['left', 'top'], index = 0, length = 2;
        for ( ; index < length; index++) {
            if (Position.Collision[collision[index]]) {
                Position.Collision[collision[index]][leftTop[index]](position, {
                    targetWidth: targetWidth,
                    targetHeight: targetHeight,
                    elemWidth: elemWidth,
                    elemHeight: elemHeight,
                    collisionPosition: collisionPosition,
                    collisionWidth: collisionWidth,
                    collisionHeight: collisionHeight,
                    offset: [atOffset[0] + myOffset[0], atOffset[1] + myOffset[1]],
                    my: options.my,
                    at: options.at,
                    within: within,
                    elem: element
                });
            }
        }

        if (options.using) {
            // Adds feedback as second argument to using callback, if present
            using = function (props) {
                var left = targetOffset.left - position.left,
                    right = left + targetWidth - elemWidth,
                    top = targetOffset.top - position.top,
                    bottom = top + targetHeight - elemHeight,
                    feedback = {
                        target: {
                            element: target,
                            left: targetOffset.left,
                            top: targetOffset.top,
                            width: targetWidth,
                            height: targetHeight
                        },
                        element: {
                            element: element,
                            left: position.left,
                            top: position.top,
                            width: elemWidth,
                            height: elemHeight
                        },
                        horizontal: right < 0 ? 'left' : left > 0 ? 'right' : 'center',
                        vertical: bottom < 0 ? 'top' : top > 0 ? 'bottom' : 'middle'
                    };
                if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                    feedback.horizontal = 'center';
                }
                if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                    feedback.vertical = 'middle';
                }
                if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                    feedback.important = 'horizontal';
                }
                else {
                    feedback.important = 'vertical';
                }
                options.using.call(this, props, feedback);
            };
        }
        setOffsets(element, Common.MergeObjects(position, { using: using}), elementIndex);

    };

    function setOffsets (elem, options, index) {

        var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
            position = Common.GetStyle(elem, 'position'),
            props = {}, style = elem.style;

        // Set position first, in-case top/left are set even on static elem
        if (position === 'static') {
            style.position = 'relative';
        }

        curOffset = Common.Offset(elem);
        curCSSTop = Common.GetStyle(elem, 'top');
        curCSSLeft = Common.GetStyle(elem, 'left');
        calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;

        // Need to be able to calculate position if either
        // top or left is auto and position is either absolute or fixed
        if (calculatePosition) {
            curPosition = Common.Position(elem);
            curTop = curPosition.top;
            curLeft = curPosition.left;

        }
        else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
        }

        if (Common.IsFunction(options)) {
            options = options.call(elem, index, curOffset);
        }

        if (options.top != null) {
            props.top = (options.top - curOffset.top) + curTop;
        }
        if (options.left != null) {
            props.left = (options.left - curOffset.left) + curLeft;
        }

        if ('using' in options) {
            options.using.call(elem, props);

        }
        else {
            if (props.top != null) {
                style.top = props.top + 'px';
            }
            if (props.left != null) {
                style.left = props.left + 'px';
            }
        }

    };

    function getOffsets (offsets, width, height) {

        return [
            parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1),
            parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)
        ];

    };

    function parseCss (element, property) {

        return parseInt(Common.GetStyle(element, property), 10) || 0;

    };

    function getDimensions (elem) {

        if (elem.nodeType === 9) {
            return {
                width: Common.Width(elem),
                height: Common.Height(elem),
                offset: { top: 0, left: 0 }
            };
        }
        if (Common.IsWindow(elem)) {
            return {
                width: Common.Width(elem),
                height: Common.Height(elem),
                offset: { top: window.pageYOffset, left: window.pageXOffset }
            };
        }
        if (elem.preventDefault) {
            return {
                width: 0,
                height: 0,
                offset: { top: elem.pageY, left: elem.pageX }
            };
        }
        return {
            width: Common.Width(elem),
            height: Common.Height(elem),
            offset: Common.Offset(elem)
        };

    };

    // Fraction support test
    (function() {

        var testElement, testElementParent, testElementStyle, offsetLeft, i, style,
            body = document.getElementsByTagName('body')[0],
            div = document.createElement('div');

        //Create a "fake body" for testing
        testElement = document.createElement(body ? 'div' : 'body');
        testElementStyle = {
            visibility: 'hidden',
            width: 0,
            height: 0,
            border: 0,
            margin: 0,
            background: 'none'
        };
        if (body) {
            Common.MergeObjects(testElementStyle, {
                position: 'absolute',
                left: '-1000px',
                top: '-1000px'
            });
        }
        style = testElement.style;
        for (i in testElementStyle) {
            style[i] = testElementStyle[i];
        }
        testElement.appendChild(div);
        testElementParent = body || document.documentElement;
        testElementParent.insertBefore(testElement, testElementParent.firstChild);

        div.style.cssText = 'position: absolute; left: 10.7432222px;';

        offsetLeft = Common.Offset(div).left;
        supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;

        testElement.innerHTML = '';
        testElementParent.removeChild(testElement);

    })();

} (window.Position = window.Position || {}, window, document, Common, Cache, Events, Velocity));
// Simple namespace to access widgets
// Widgets
(function (Widgets, window, document, Common, Cache, Events, Velocity, undefined) {

	// Public Variables
    Widgets = {};

} (window.Widgets = window.Widgets || {}, window, document, Common, Cache, Events, Velocity));

// INFO: This is complete port of jQueryUI 1.11.4 widget factory code to pure vanilla javascript
// Widget Factory
(function (WidgetFactory, window, document, Common, Cache, Events, Velocity, undefined) {

	// Public Variables
	WidgetFactory.WidgetInitializer = function () {};
	WidgetFactory.WidgetInitializer._childConstructors = [];

	// Private Variables
	var WidgetGUID = 0;
	var WidgetSlice = Array.prototype.slice;

    // Public Methods
	WidgetFactory.Register = function (name, base, prototype) {

		var fullName, existingConstructor, constructor, basePrototype;
		var index, length;

		// proxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple widgets (#8876)
		var proxiedPrototype = {}, namespace = name.split('.')[0];
		var name = name.split('.')[1];
		var fullName = namespace + '-' + name;

		if (!prototype) {
			prototype = base;
			base = WidgetFactory.WidgetInitializer;
		}

		WidgetFactory[namespace] = WidgetFactory[namespace] || {};
		existingConstructor = WidgetFactory[namespace][name];
		constructor = WidgetFactory[namespace][name] = function (options, element) {
			// allow instantiation without 'new' keyword
			if (!this._createWidget) {
				return new constructor(options, element);
			}

			// allow instantiation without initializing for simple inheritance
			// must use 'new' keyword (the code above always passes args)
			if (arguments.length) {
				this._createWidget(options, element);
			}
		};

		// extend with the existing constructor to carry over any static properties
		MergeWidget(constructor, existingConstructor, {
			version: prototype.version,
			// copy the object used to create the prototype in case we need to
			// redefine the widget later
			_proto: Common.MergeObjects({}, prototype),
			// track widgets that inherit from this widget in case this widget is
			// redefined after a widget inherits from it
			_childConstructors: []
		});

		basePrototype = new base();
		// we need to make the options hash a property directly on the new instance
		// otherwise we'll modify the options hash on the prototype that we're
		// inheriting from
		basePrototype.options = MergeWidget({}, basePrototype.options);
		for (prop in prototype) {
			value = prototype[prop];
			(function (prop, value) {
				if (!Common.IsFunction(value)) {
					proxiedPrototype[prop] = value;
					return;
				}
				proxiedPrototype[prop] = (function () {
					var _super = function () {
						return base.prototype[prop].apply(this, arguments);
					},
					_superApply = function (args) {
						return base.prototype[prop].apply(this, args);
					};
					return function () {
						var __super = this._super;
						var __superApply = this._superApply;
						var returnValue;

						this._super = _super;
						this._superApply = _superApply;

						returnValue = value.apply(this, arguments);

						this._super = __super;
						this._superApply = __superApply;

						return returnValue;
					};
				})();
			}(prop, value));
		}
		constructor.prototype = MergeWidget(basePrototype, {
			// TODO: remove support for widgetEventPrefix
			// always use the name + a colon as the prefix, e.g., draggable:start
			// don't prefix for widgets that aren't DOM-based
			widgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name
		}, proxiedPrototype, {
			constructor: constructor,
			namespace: namespace,
			widgetName: name,
			widgetFullName: fullName
		});

		// If this widget is being redefined then we need to find all widgets that
		// are inheriting from it and redefine all of them so that they inherit from
		// the new version of this widget. We're essentially trying to replace one
		// level in the prototype chain.
		if (existingConstructor) {
			var child, childPrototype, index = 0, length = existingConstructor._childConstructors.length;
			for ( ; index < length; index++) {
				child = existingConstructor._childConstructors[index];
				childPrototype = child.prototype;

				// redefine the child widget using the same prototype that was
				// originally used, but inherit from the new version of the base
				WidgetFactory.WidgetInitializer(childPrototype.namespace + '.' + childPrototype.widgetName, constructor, child._proto);
			}
			// remove the list of existing child constructors from the old constructor
			// so the old child constructors can be garbage collected
			delete existingConstructor._childConstructors;
		}
		else {
			base._childConstructors.push(constructor);
		}

		WidgetFactory.Bridge(name, constructor);
		return constructor;

	};

	WidgetFactory.Bridge = function (name, object) {

		var fullName = object.prototype.widgetFullName || name;
		Widgets[name] = function (elements, options) {
			var isMethodCall = Common.IsString(options);
			var elementArray;
			if (Common.IsArray(elements)) {
				elementArray = elements;
			}
			else {
				elementArray = [];
				elementArray.push(elements);
			}
			var args = WidgetSlice.call(arguments, 1), returnValue = elementArray;

			var index = 0, length = elementArray.length;
			if (isMethodCall) {
				// Remove method name from args
				args = WidgetSlice.call(args, 1);
				for ( ; index < length; index++) {
					var methodValue, instance = Cache.Get(elementArray[index], fullName);
					if (options === 'instance') {
						returnValue = instance;
						// TODO: handle multiple elements
						continue;
					}

					// Don't blow the world up like jQuery. Lets just log an error and 'attempt' to move on
					if (!instance) {
						console.log('Cannot call method: ' + options + ' on widget: ' + name + ' prior to initialization.');
						return;
					}
					if (!Common.IsFunction(instance[options]) || options.charAt(0) === '_') {
						console.log('No such method: ' + options + ' on widget instance: ' + name);
						return;
					}
					methodValue = instance[options].apply(instance, args);
					if (methodValue !== instance && methodValue !== undefined) {
						returnValue = methodValue;
						// TODO: handle multiple elements
						continue;
					}
				}
			}
			else {
				// Allow multiple hashes to be passed on init
				if (args.length) {
					options = MergeWidget.apply(null, [options].concat(args));
				}
				for ( ; index < length; index++) {
					var instance = Cache.Get(elementArray[index], fullName);
					if (instance) {
						instance.option(options || {});
						if (instance._init) {
							instance._init();
						}
					}
					else {
						Cache.Set(elementArray[index], fullName, new object(options, elementArray[index]));
					}
				}
			}
			return returnValue;
		};

	};

	WidgetFactory.WidgetInitializer.prototype = {
		widgetName: 'widget',
		widgetEventPrefix: '',
		defaultElement: '<div>',
		options: {
			disabled: false,

			// callbacks
			create: null
		},
		_createWidget: function (options, element) {
			element = element || this.defaultElement || this;
			this.element = element;
			this.uuid = 'GTCWidget' + WidgetGUID++;
			this.eventNamespace = '.' + this.widgetName + this.uuid;

			this.bindings = [];
			this.hoverable = [];
			this.focusable = [];

			if (element !== this) {
				Cache.Set(element, this.widgetFullName, this);

				// Add remove event for cleaning up widgets on Common.Remove -> Cache.CleanElementData
				this._on(true, this.element, {
					remove: function (event) {
						if (event.target === element) {
							this.destroy();
						}
					}
				});
				this.document = element.style ? element.ownerDocument : element.document || element;
				this.window = this.document.defaultView || this.document.parentWindow;
			}

			this.options = MergeWidget({}, this.options, this._getCreateOptions(), options);

			this._create();
			this._init();
		},
		_getCreateOptions: function () { return {}; },
		_getCreateEventData: function () {},
		_create: function () {},
		_init: function () {},
		destroy: function () {
			this._destroy();
			Events.Off(this.element, this.eventNamespace);
			Cache.Remove(this.element, this.widgetFullName);
			Events.Off(this.widget(), this.eventNamespace);
			Common.RemoveAttr(this.widget(), 'aria-disabled');
			Common.RemoveClasses(this.widget(), this.widgetFullName + '-disabled gtc-ui-state-disabled');

			// clean up events and states
			var index = 0, length = this.bindings.length;
			for ( ; index < length; index++) {
				Events.Off(this.bindings[index], this.eventNamespace);
			}
			index = 0, length = this.hoverable.length;
			for ( ; index < length; index++) {
				Common.RemoveClass(this.hoverable[index], 'gtc-ui-state-hover');
			}
			index = 0, length = this.focusable.length;
			for ( ; index < length; index++) {
				Common.RemoveClass(this.focusable[index], 'gtc-ui-state-focus');
			}
		},
		_destroy: function () {},
		widget: function () {
			return this.element;
		},
		option: function (key, value) {
			var options = key, parts, curOption, i;

			if (arguments.length === 0) {
				// don't return a reference to the internal hash
				return MergeWidget({}, this.options);
			}

			if (Common.IsString(key)) {
				// handle nested keys, e.g., 'foo.bar' => { foo: { bar: ___ } }
				options = {};
				parts = key.split('.');
				key = parts.shift();
				if (parts.length) {
					curOption = options[key] = MergeWidget({}, this.options[key]);
					for (i = 0; i < parts.length - 1; i++) {
						curOption[parts[i]] = curOption[parts[i]] || {};
						curOption = curOption[parts[i]];
					}
					key = parts.pop();
					if (arguments.length === 1) {
						return curOption[key] === undefined ? null : curOption[key];
					}
					curOption[key] = value;
				}
				else {
					if (arguments.length === 1) {
						return this.options[key] === undefined ? null : this.options[key];
					}
					options[key] = value;
				}
			}

			this._setOptions(options);
			return this;
		},
		_setOptions: function (options) {
			var key;
			for (key in options) {
				this._setOption(key, options[key]);
			}
			return this;
		},
		_setOption: function (key, value) {
			this.options[key] = value;
			if (key === 'disabled') {
				if (!!value) {
					Common.AddClass(this.widget(), this.widgetFullName + '-disabled');
				}
				else {
					Common.RemoveClass(this.widget(), this.widgetFullName + '-disabled');
				}
				if (value) {
					Common.RemoveClassFromElements(this.hoverable, 'gtc-ui-state-hover');
					Common.RemoveClassFromElements(this.focusable, 'gtc-ui-state-focus');
				}
			}
			return this;
		},
		enable: function () {
			return this._setOptions({ disabled: false });
		},
		disable: function () {
			return this._setOptions({ disabled: true });
		},
		_on: function (suppressDisabledCheck, element, handlers) {
			var delegateElement, instance = this;

			// no suppressDisabledCheck flag, shuffle arguments
			if (!Common.IsBoolean(suppressDisabledCheck)) {
				handlers = element;
				element = suppressDisabledCheck;
				suppressDisabledCheck = false;
			}

			// no element argument, shuffle and use this.element
			if (!handlers) {
				handlers = element;
				element = this.element;
				delegateElement = this.widget();
			}
			else {
				element = delegateElement = element;
				this.bindings.push(element);
			}

			for (eventType in handlers) {
				var handler = handlers[eventType];
                // For loops have no scope! Give it some. (IIFE)
                (function (eventType, handler) {
					function handlerProxy() {
						// allow widgets to customize the disabled handling
						// - disabled as an array instead of boolean
						// - disabled class as method for disabling individual parts
						if (!suppressDisabledCheck && (instance.options.disabled === true || (this && this.classList && Common.HasClass(this,  'gtc-ui-state-disabled')))) {
							return;
						}
						return (Common.IsString(handler) ? instance[handler] : handler).apply(instance, arguments);
					}

					// copy the guid so direct unbinding works
					if (!Common.IsString(handler)) {
						handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || Events.GetNextEventGUID();
					}

					var match = eventType.match(/^([\w:-]*)\s*(.*)$/),
						eventName = match[1] + instance.eventNamespace,
						selector = match[2];
					if (selector) {
						Events.On(delegateElement, eventName, selector, handlerProxy);
					}
					else {
						Events.On(element, eventName, handlerProxy);
					}
                }(eventType, handler));
			}
		},
		_off: function (element, eventName) {
			eventName = (eventName || '').split(' ').join(this.eventNamespace + ' ') + this.eventNamespace;
			Events.Off(element, eventName);

			// Clear the stack to avoid memory leaks (#10056)
			this.bindings = Common.FilterArray(this.bindings,
	            function (value) {
	                return value != element;
	            }
	        );
			this.focusable = Common.FilterArray(this.focusable,
	            function (value) {
	                return value != element;
	            }
	        );
			this.hoverable = Common.FilterArray(this.hoverable,
	            function (value) {
	                return value != element;
	            }
	        );
		},
		_trigger: function (type, event, data) {
			var prop, orig, callback = this.options[type];

			data = data || {};
			event = Events.Event(event);
			event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
			// The original event may come from any element so we need to reset the target on the new event
			event.target = this.element;

			// Copy original event properties over to the new event
			orig = event.originalEvent;
			if (orig) {
				for (prop in orig) {
					if (!(prop in event)) {
						event[prop] = orig[prop];
					}
				}
			}

			Events.Trigger(this.element, event, data);
			return !(Common.IsFunction(callback) && callback.apply(this.element, [event].concat(data)) === false || event.isDefaultPrevented());
		},
		_hoverable: function (elements) {
			if (!elements.length) {
				elements = [elements];
			}
			var element, index = 0, length = elements.length;
			for ( ; index < length; index++) {
				element = elements[index];
				this.hoverable.push(element);
				this._on(element, {
					mouseenter: function (event) {
						Common.AddClass(event.currentTarget, 'gtc-ui-state-hover');
					},
					mouseleave: function (event) {
						Common.RemoveClass(event.currentTarget, 'gtc-ui-state-hover');
					}
				});
			}
		},
		_focusable: function (elements) {
			if (!elements.length) {
				elements = [elements];
			}
			var element, index = 0, length = elements.length;
			for ( ; index < length; index++) {
				element = elements[index];
				this.focusable.push(element);
				this._on(element, {
					focusin: function (event) {
						Common.AddClass(event.currentTarget, 'gtc-ui-state-focus');
					},
					focusout: function (event) {
						Common.RemoveClass(event.currentTarget, 'gtc-ui-state-focus');
					}
				});
			}
		}
	};

	// Private Methods
	function MergeWidget (target) {

		var input = WidgetSlice.call(arguments, 1);
		var inputIndex = 0, inputLength = input.length, key, value;
		for ( ; inputIndex < inputLength; inputIndex++) {
			for (key in input[inputIndex]) {
				value = input[inputIndex][key];
				if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
					// Clone objects
					if (Common.IsPlainObject(value)) {
						// Don't extend strings, arrays, etc. with objects
						target[key] = Common.IsPlainObject(target[key]) ? MergeWidget({}, target[key], value) : MergeWidget({}, value);
						// Copy everything else by reference
					}
					else {
						target[key] = value;
					}
				}
			}
		}
		return target;

	};

} (window.WidgetFactory = window.WidgetFactory || {}, window, document, Common, Cache, Events, Velocity));
// Modal Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var ModalWidget = {

        // Options
        options: {
            appendTo: "body",
            autoOpen: true,
            closeOnEscape: true,
            closeText: "Close",
            dialogClass: "",
            hide: null,
            height: "auto",
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: false,
            position: {
                my: "center",
                at: "center",
                of: window,
                collision: "fit",
                // Ensure the titlebar is always visible
                using: function (pos) {
                    var thisStyle = this.style;
                    thisStyle.top = pos.top + 'px';
                    thisStyle.left = pos.left + 'px';
                    var topOffset = Common.Offset(this).top;
                    if (topOffset < 0) {
                        thisStyle.top = (pos.top - topOffset) + 'px';
                    }
                }
            },
            show: null,
            title: null,
            width: 300,

            // Callbacks
            beforeClose: null,
            close: null,
            focus: null,
            open: null,
            afterOpen: null
        },

        sizeRelatedOptions: {
            height: true,
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true,
            width: true
        },

        // Public Methods
        widget: function () {

            return this.uiDialog;

        },

        disable: function () {},

        enable: function () {},

        close: function (event) {

            var activeElement,
                thisWidget = this;

            if (!thisWidget._isOpen || thisWidget._trigger('beforeClose', event) === false) {
                return;
            }

            thisWidget._isOpen = false;
            thisWidget._focusedElement = null;
            thisWidget._destroyOverlay();
            thisWidget._untrackInstance();

            if (thisWidget.opener && Common.IsFocusable(thisWidget.opener)) {
                thisWidget.opener.focus();

                // support: IE9
                // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
                try {
                    activeElement = thisWidget.document.activeElement;

                    // Support: IE9, IE10
                    // If the <body> is blurred, IE will switch windows, see #4520
                    if (activeElement && activeElement.nodeName.toLowerCase() !== 'body') {

                        // Hiding a focused element doesn't trigger blur in WebKit
                        // so in case we have nothing to focus on, explicitly blur the active element
                        // https://bugs.webkit.org/show_bug.cgi?id=47182
                        Events.Trigger(activeElement, 'blur');
                    }
                }
                catch (error) {}
            }

            Velocity(thisWidget.uiDialog, 'fadeOut', 600,
                function () {
                    thisWidget._trigger('close', event);
                }
            );

        },

        isOpen: function () {

            return this._isOpen;

        },

        moveToTop: function () {

            this._moveToTop();

        },

        open: function () {

            var thisWidget = this;
            if (thisWidget._isOpen) {
                if (thisWidget._moveToTop()) {
                    thisWidget._focusTabbable();
                }
                return;
            }

            thisWidget._isOpen = true;
            thisWidget.opener = thisWidget.document.activeElement;

            thisWidget._size();
            thisWidget._position();
            thisWidget._createOverlay();
            thisWidget._moveToTop(null, true);

            // Ensure the overlay is moved to the top with the dialog, but only when
            // opening. The overlay shouldn't move after the dialog is open so that
            // modeless dialogs opened after the modal dialog stack properly.
            if (thisWidget.overlay) {
                var overlayZIndex = Common.GetStyle(thisWidget.uiDialog, 'z-index') - 1;
                thisWidget.overlay.style.zIndex = overlayZIndex;
            }

            Velocity(thisWidget.uiDialog, 'fadeIn', 1000,
                function () {
                    thisWidget._focusTabbable();
                    thisWidget._trigger('focus');
                    thisWidget._trigger('afterOpen');
                }
            );

            // Track the dialog immediately upon openening in case a focus event
            // somehow occurs outside of the dialog before an element inside the
            // dialog is focused (#10152)
            thisWidget._makeFocusTarget();

            thisWidget._trigger('open');

        },

        // Private Methods
        _appendTo: function () {

            var thisWidget = this;
            var element = thisWidget.options.appendTo;
            if (element && element.nodeType) {
                return element;
            }
            return Common.Query(element, document);

        },

        _destroy: function () {

            var thisWidget = this, next, originalPosition = thisWidget.originalPosition;

            thisWidget._untrackInstance();
            thisWidget._destroyOverlay();

            if (!thisWidget.element.id) {
                thisWidget.element.id = 'GTC' + Common.GenerateUniqueID();
            }
            Common.RemoveClasses(thisWidget.element, 'gtc-ui-dialog-content gtc-ui-widget-content');

            // Apply original css values
            var elementStyle = thisWidget.element.style;
            elementStyle.display = thisWidget.originalCss.display;
            elementStyle.width = thisWidget.originalCss.width;
            elementStyle.minHeight = thisWidget.originalCss.minHeight;
            elementStyle.maxHeight = thisWidget.originalCss.maxHeight;
            elementStyle.height = thisWidget.originalCss.height;

            // Without detaching first, the following becomes really slow
            Common.Detach(thisWidget.element);

            Velocity(thisWidget.uiDialog, 'stop', true);
            Common.Remove(thisWidget.uiDialog);

            if (thisWidget.originalTitle) {
                Common.SetAttr(thisWidget.element, 'title', thisWidget.originalTitle);
            }

            next = Common.GetChildren(originalPosition.parent)[originalPosition.index];

            // Don't try to place the dialog next to itself (#8613)
            if (next && next !== thisWidget.element) {
                next.parentNode.insertBefore(thisWidget.element, next);
            }
            else {
                originalPosition.parent.appendChild(thisWidget.element);
            }

        },

        _moveToTop: function (event, silent) {

            var thisWidget = this;
            var moved = false;
            var zIndices = Common.GetAllSibling(thisWidget.uiDialog, '.gtc-ui-front');
            var visibleZIndices = [], index = 0, length = zIndices.length;
            for ( ; index < length; index++) {
                if (Common.IsVisible(zIndices[index])) {
                    visibleZIndices.push(zIndices[index]);
                }
            }
            zIndices = [];
            index = 0, length = visibleZIndices.length;
            for ( ; index < length; index++) {
                zIndices.push(+Common.GetStyle(visibleZIndices[index], 'z-index'));
            }
            zIndexMax = Math.max.apply(null, zIndices);

            if (zIndexMax >= +Common.GetStyle(thisWidget.uiDialog, 'z-index')) {
                thisWidget.uiDialog.style.zIndex = zIndexMax + 1;
                moved = true;
            }

            if (moved && !silent) {
                thisWidget._trigger('focus', event);
            }
            return moved;

        },

        _focusTabbable: function () {

            // Set focus to the first match:
            // 1. An element that was focused previously
            // 2. First element inside the dialog matching [autofocus]
            // 3. Tabbable element inside the content element
            // 4. The close button
            // 5. The dialog itself
            var thisWidget = this;
            var allElements, index, length, hasFocus = thisWidget._focusedElement;
            if (!hasFocus) {
                hasFocus = Common.QueryAll('[autofocus]', thisWidget.element);
            }
            if (!hasFocus.length) {
                allElements = Common.GetByTagName('*', thisWidget.element);
                hasFocus = [], index = 0, length = allElements.length;
                for ( ; index < length; index++) {
                    if (Common.IsTabbable(allElements[index])) {
                        hasFocus.push(allElements[index]);
                    }
                }
            }
            if (!hasFocus.length) {
                allElements = Common.QueryAll('.gtc-modal-close', thisWidget.uiDialogTitlebar);
            }
            if (!hasFocus.length) {
                hasFocus = [thisWidget.uiDialog];
            }
            hasFocus[0].focus();

        },

        _keepFocus: function (event) {

            var thisWidget = this;
            function checkFocus () {
                var activeElement = this.document.activeElement,
                    isActive = this.uiDialog === activeElement ||
                        this.uiDialog.contains(activeElement);
                if (!isActive) {
                    this._focusTabbable();
                }
            }
            event.preventDefault();
            checkFocus.call(thisWidget);
            // support: IE
            // IE <= 8 doesn't prevent moving focus even with event.preventDefault()
            // so we check again later
            setTimeout(
                function () {
                    checkFocus.call(thisWidget);
                }, 0
            );

        },

        _createWrapper: function () {

            var thisWidget = this;
            thisWidget.uiDialog = Common.GenerateHTML('<div></div>');
            Common.AddClasses(thisWidget.uiDialog, 'gtc-ui-dialog gtc-ui-widget gtc-ui-widget-content gtc-ui-corner-all gtc-ui-front ' + thisWidget.options.dialogClass);
            thisWidget.uiDialog.style.display = 'none';
            Common.SetAttr(thisWidget.uiDialog, 'tabIndex', '-1');
            Common.SetAttr(thisWidget.uiDialog, 'role', 'dialog');
            thisWidget._appendTo().appendChild(thisWidget.uiDialog);

            thisWidget._on(thisWidget.uiDialog, {
                keydown: function (event) {

                    var thisWidget = this;
                    if ( thisWidget.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === GTC.Keyboard.Escape) {
                        event.preventDefault();
                        thisWidget.close(event);
                        return;
                    }

                    // prevent tabbing out of dialogs
                    if (event.keyCode !== GTC.Keyboard.Tab || event.isDefaultPrevented()) {
                        return;
                    }

                    var allElements = Common.GetByTagName('*', thisWidget.uiDialog);
                    var tabbables = [], tabbable, index = 0, length = allElements.length;
                    for ( ; index < length; index++) {
                        tabbable = allElements[index];
                        if (Common.IsTabbable(tabbable)) {
                            tabbables.push(tabbable);
                        }
                    }
                    var first = tabbables[0];
                    var last = tabbables[tabbables.length - 1];

                    if ((event.target || event.target === thisWidget.uiDialog) === last && !event.shiftKey) {
                        setTimeout(
                            function () {
                                first.focus();
                            }, 0
                        );
                        event.preventDefault();
                    }
                    else if ((event.target === first || event.target === thisWidget.uiDialog) && event.shiftKey) {
                        setTimeout(
                            function () {
                                last.focus();
                            }, 0
                        );
                        event.preventDefault();
                    }

                },
                mousedown: function (event) {

                    var thisWidget = this;
                    if (thisWidget._moveToTop(event)) {
                        thisWidget._focusTabbable();
                    }

                }
            });

            // We assume that any existing aria-describedby attribute means
            // that the dialog content is marked up properly
            // otherwise we brute force the content as the description
            if (!Common.QueryAll('[aria-describedby]', thisWidget.element).length) {
                if (!thisWidget.element.id) {
                    thisWidget.element.id = 'GTC' + Common.GenerateUniqueID();
                }
                Common.SetAttr(thisWidget.uiDialog, 'aria-describedby', thisWidget.element.id);
            }

        },

        _createTitlebar: function () {

            var thisWidget = this;
            var uiDialogTitle;

            thisWidget.uiDialogTitlebar = Common.GenerateHTML('<div></div>');
            Common.AddClasses(thisWidget.uiDialogTitlebar, 'gtc-ui-dialog-titlebar gtc-ui-widget-header gtc-ui-corner-all gtc-ui-helper-clearfix');
            thisWidget.uiDialog.insertBefore(thisWidget.uiDialogTitlebar, thisWidget.uiDialog.firstChild);

            uiDialogTitle = Common.GenerateHTML('<span></span>');
            uiDialogTitle.id = 'GTC' + Common.GenerateUniqueID();
            Common.AddClass(uiDialogTitle, 'gtc-ui-dialog-title');
            thisWidget.uiDialogTitlebar.insertBefore(uiDialogTitle, thisWidget.uiDialogTitlebar.firstChild);
            thisWidget._title(uiDialogTitle);

            Common.SetAttr(thisWidget.uiDialog, 'aria-labelledby', uiDialogTitle.id);

        },

        _title: function (title) {

            var thisWidget = this;
            if (!thisWidget.options.title) {
                title.innerHTML = '&#160;';
            }
            title.textContent = thisWidget.options.title;

        },

        _trackFocus: function () {

            var thisWidget = this;
            thisWidget._on(thisWidget.widget(), {
                focusin: function (event) {
                    this._makeFocusTarget();
                    this._focusedElement = event.target;
                }
            });

        },

        _makeFocusTarget: function () {

            var thisWidget = this;
            thisWidget._untrackInstance();
            thisWidget._trackingInstances().unshift(thisWidget);

        },

        _untrackInstance: function () {

            var thisWidget = this;
            var instances = thisWidget._trackingInstances(),
                exists = Common.IsInArray(thisWidget, instances);
            if (exists !== -1) {
                instances.splice(exists, 1);
            }

        },

        _trackingInstances: function () {

            var thisWidget = this;
            var instances = Cache.Get(thisWidget.document, 'gtc-ui-dialog-instances');
            if (!instances) {
                instances = [];
                Cache.Set(thisWidget.document, 'gtc-ui-dialog-instances', instances);
            }
            return instances;

        },

        _minHeight: function () {

            var thisWidget = this;
            var options = thisWidget.options;

            return options.height === 'auto' ? options.minHeight : Math.min(options.minHeight, options.height);

        },

        _position: function () {

            // Need to show the dialog to get the actual offset in the position plugin
            var thisWidget = this;
            var isVisible = Common.IsVisible(thisWidget.uiDialog);
            if (!isVisible) {
                thisWidget.uiDialog.style.display = 'block';
            }
            Position.Set(thisWidget.uiDialog, thisWidget.options.position);
            if (!isVisible) {
                thisWidget.uiDialog.style.display = 'none';
            }

        },

        _setOptions: function (options) {

            var thisWidget = this, prop, value, resize = false;

            for (prop in options) {
                value = options[prop];
                thisWidget._setOption(prop, value);

                if (prop in thisWidget.sizeRelatedOptions) {
                    resize = true;
                }
            }

            if (resize) {
                thisWidget._size();
                thisWidget._position();
            }

        },

        _setOption: function (key, value) {

            var thisWidget = this;
            var uiDialog = thisWidget.uiDialog;

            if (key === 'dialogClass') {
                Common.RemoveClass(uiDialog, thisWidget.options.dialogClass);
                Common.AddClass(uiDialog, value);
            }
            if (key === 'disabled') {
                return;
            }
            thisWidget._super(key, value);
            if (key === 'appendTo') {
                thisWidget._appendTo().appendChild(thisWidget.uiDialog);
            }
            if (key === 'position') {
                thisWidget._position();
            }
            if (key === 'title') {
                thisWidget._title(Common.Query('.gtc-ui-dialog-title', thisWidget.uiDialogTitlebar));
            }

        },

        _size: function () {

            var thisWidget = this;

            // If the user has resized the dialog, the .gtc-ui-dialog and .gtc-ui-dialog-content
            // divs will both have width and height set, so we need to reset them
            var nonContentHeight, minContentHeight, maxContentHeight,
                options = thisWidget.options;

            // Reset content sizing
            var elementStyle = thisWidget.element.style;
            elementStyle.display = 'block';
            elementStyle.width = 'auto';
            elementStyle.minHeight = '0px';
            elementStyle.maxHeight = 'none';
            elementStyle.height = '0px';

            if (options.minWidth > options.width) {
                options.width = options.minWidth;
            }

            // Reset wrapper sizing
            // determine the height of all the non-content elements
            var uiDialogStyle = thisWidget.uiDialog.style;
            uiDialogStyle.height = 'auto';
            uiDialogStyle.width = options.width + 'px';
            nonContentHeight = Common.Height(thisWidget.uiDialog, true);
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
            maxContentHeight = Common.IsNumber(options.maxHeight) ? Math.max(0, options.maxHeight - nonContentHeight) + 'px' : 'none';

            if (options.height === 'auto') {
                elementStyle.minHeight = minContentHeight + 'px';
                elementStyle.maxHeight = maxContentHeight;
                elementStyle.height = 'auto';
            }
            else {
                elementStyle.height = Math.max(0, options.height - nonContentHeight) + 'px';
            }

        },

        _blockFrames: function () {

            var thisWidget = this;
            thisWidget.iframeBlocks = [];
            var iFrames = Common.QueryAll('iframe', thisWidget.document);
            var iframe, newDiv, style, offset, index = 0, length = iFrames.length;
            for ( ; index < length; index++) {
                iframe = iFrames[index];
                newDiv = Common.GenerateHTML('<div></div>');
                style = newDiv.style;
                style.position = 'absolute';
                style.width = Common.Width(iframe, true);
                style.height = Common.Height(iframe, true);
                iframe.parentNode.appendChild(newDiv);
                offset = Common.Offset(iframe);
                style.top = offset.top + 'px';
                style.left = offset.left + 'px';
                thisWidget.iframeBlocks.push(newDiv);
            }

        },

        _unblockFrames: function () {

            var thisWidget = this;
            if ( thisWidget.iframeBlocks ) {
                Common.Remove(this.iframeBlocks);
                delete thisWidget.iframeBlocks;
            }

        },

        _allowInteraction: function (event) {

            if (Common.Closest('.gtc-ui-dialog', event.target)) {
                return true;
            }

            // TODO: Remove hack when datepicker implements
            // the .gtc-ui-front logic (#8989)
            return !!Common.Closest('.gtc-ui-datepicker', event.target);

        },

        _createOverlay: function () {

            var thisWidget = this;
            if (!thisWidget.options.modal) {
                return;
            }

            // We use a delay in case the overlay is created from an
            // event that we're going to be cancelling (#2804)
            var isOpening = true;
            setTimeout(
                function () {
                    isOpening = false;
                }, 0
            );

            if (!Cache.Get(thisWidget.document, 'gtc-ui-dialog-overlays')) {

                // Prevent use of anchors and inputs
                // Using _on() for an event handler shared across many instances is
                // safe because the dialogs stack and must be closed in reverse order
                thisWidget._on(thisWidget.document, {
                    focusin: function (event) {
                        if (isOpening) {
                            return;
                        }

                        if (!this._allowInteraction(event)) {
                            event.preventDefault();
                            this._trackingInstances()[0]._focusTabbable();
                        }
                    }
                });
            }

            thisWidget.overlay = Common.GenerateHTML('<div></div>');
            Common.AddClasses(thisWidget.overlay, 'gtc-ui-widget-overlay gtc-ui-front');
            thisWidget._appendTo().appendChild(thisWidget.overlay);
            thisWidget._on(thisWidget.overlay, {
                mousedown: "_keepFocus"
            });
            Cache.Set(thisWidget.document, 'gtc-ui-dialog-overlays', (Cache.Get(thisWidget.document, 'gtc-ui-dialog-overlays') || 0) + 1);

        },

        _destroyOverlay: function () {

            var thisWidget = this;
            if (!thisWidget.options.modal) {
                return;
            }

            if (thisWidget.overlay) {
                var overlays = Cache.Get(thisWidget.document, 'gtc-ui-dialog-overlays') - 1;

                if (!overlays) {
                    Events.Off(thisWidget.document, 'focusin');
                    Cache.Remove(thisWidget.document, 'gtc-ui-dialog-overlays');
                }
                else {
                    Cache.Set(thisWidget.document, 'gtc-ui-dialog-overlays', overlays);
                }

                Common.Remove(thisWidget.overlay);
                thisWidget.overlay = null;
            }

        },

        _init: function () {

            var thisWidget = this;
            if (thisWidget.options.autoOpen) {
                thisWidget.open();
            }

        },

        _create: function () {

            var thisWidget = this;
            var elementStyle = thisWidget.element.style;
            thisWidget.originalCss = {
                display: elementStyle.display,
                width: elementStyle.width,
                minHeight: elementStyle.minHeight,
                maxHeight: elementStyle.maxHeight,
                height: elementStyle.height
            };
            thisWidget.originalPosition = {
                parent: thisWidget.element.parentNode,
                index: Common.GetIndex(thisWidget.element)
            };
            thisWidget.originalTitle = Common.GetAttr(thisWidget.element, 'title');
            thisWidget.options.title = thisWidget.options.title || thisWidget.originalTitle;

            thisWidget._createWrapper();

            elementStyle.display = 'block';
            Common.RemoveAttr(thisWidget.element, 'title');
            Common.AddClasses(thisWidget.element, 'gtc-ui-dialog-content gtc-ui-widget-content');
            thisWidget.uiDialog.appendChild(thisWidget.element);

            thisWidget._createTitlebar();
            thisWidget._isOpen = false;
            thisWidget._trackFocus();

        }

    };

    WidgetFactory.Register('gtc.modal', ModalWidget);

} (window, document, Common, Cache, Events, Velocity));
// Mouse Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    // INFO: This is complete port of jQueryUI 1.11.4 base mouse widget code to pure vanilla javascript
    var mouseHandled = false;
    Events.On(document, 'mouseup',
        function () {
            mouseHandled = false;
        }
    );

    var MouseWidget = {

        options: {
            cancel: 'input,textarea,button,select,option',
            distance: 1,
            delay: 0
        },

        _mouseInit: function () {
            var that = this;

            Events.On(this.element, 'mousedown.' + this.widgetName,
                function (event) {
                    return that._mouseDown(event);
                }
            );
            Events.On(this.element, 'click.' + this.widgetName,
                function (event) {
                    if (true === Cache.Get(event.target, that.widgetName + '.preventClickEvent')) {
                        Cache.Remove(event.target, that.widgetName + '.preventClickEvent');
                        event.stopImmediatePropagation();
                        return false;
                    }
                }
            );

            this.started = false;
        },

        // TODO: make sure destroying one instance of mouse doesn't mess with
        // other instances of mouse
        _mouseDestroy: function() {
            Events.Off(this.element, '.' + this.widgetName);
            if (this._mouseMoveDelegate) {
                Events.Off(this.document, 'mousemove.' + this.widgetName, this._mouseMoveDelegate);
                Events.Off(this.document, 'mouseup.' + this.widgetName, this._mouseUpDelegate);
            }
        },

        _mouseDown: function(event) {
            // don't let more than one widget handle mouseStart
            if (mouseHandled) {
                return;
            }

            this._mouseMoved = false;

            // we may have missed mouseup (out of window)
            (this._mouseStarted && this._mouseUp(event));

            this._mouseDownEvent = event;

            var that = this,
                btnIsLeft = (event.which === 1),
                // event.target.nodeName works around a bug in IE 8 with
                // disabled inputs (#7620)
                elIsCancel = (Common.IsString(this.options.cancel) && event.target.nodeName ? Common.IsDefined(Common.Closest(this.options.cancel, event.target)) : false);
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true;
            }

            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function() {
                    that.mouseDelayMet = true;
                }, this.options.delay);
            }

            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = (this._mouseStart(event) !== false);
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }

            // Click event may never have fired (Gecko & Opera)
            if (true === Cache.Get(event.target, this.widgetName + '.preventClickEvent')) {
                Cache.Remove(event.target, this.widgetName + '.preventClickEvent');
            }

            // these delegates are required to keep context
            this._mouseMoveDelegate = function(event) {
                return that._mouseMove(event);
            };
            this._mouseUpDelegate = function(event) {
                return that._mouseUp(event);
            };

            Events.On(this.document, 'mousemove.' + this.widgetName, this._mouseMoveDelegate);
            Events.On(this.document, 'mouseup.' + this.widgetName, this._mouseUpDelegate);

            event.preventDefault();

            mouseHandled = true;
            return true;
        },

        _mouseMove: function(event) {
            // Only check for mouseups outside the document if you've moved inside the document
            // at least once. This prevents the firing of mouseup in the case of IE<9, which will
            // fire a mousemove event if content is placed under the cursor. See #7778
            // Support: IE <9
            if (this._mouseMoved) {
                // IE mouseup check - mouseup happened when mouse was out of window
                if (Common.GetBrowser()[0] == 'IE' && (!document.documentMode || document.documentMode < 9) && !event.button) {
                    return this._mouseUp(event);

                // Iframe mouseup check - mouseup occurred in another document
                }
                else if (!event.which) {
                    return this._mouseUp(event);
                }
            }

            if (event.which || event.button) {
                this._mouseMoved = true;
            }

            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }

            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted =
                    (this._mouseStart(this._mouseDownEvent, event) !== false);
                (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
            }

            return !this._mouseStarted;
        },

        _mouseUp: function(event) {
            Events.Off(this.document, 'mousemove.' + this.widgetName, this._mouseMoveDelegate);
            Events.Off(this.document, 'mouseup.' + this.widgetName, this._mouseUpDelegate);

            if (this._mouseStarted) {
                this._mouseStarted = false;

                if (event.target === this._mouseDownEvent.target) {
                    Cache.Set(event.target, this.widgetName + '.preventClickEvent', true);
                }

                this._mouseStop(event);
            }

            mouseHandled = false;
            return false;
        },

        _mouseDistanceMet: function(event) {
            return (Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance);
        },

        _mouseDelayMet: function(/* event */) {
            return this.mouseDelayMet;
        },

        // These are placeholder methods, to be overriden by extending plugin
        _mouseStart: function(/* event */) {},
        _mouseDrag: function(/* event */) {},
        _mouseStop: function(/* event */) {},
        _mouseCapture: function(/* event */) { return true; }
    };

    WidgetFactory.Register('gtc.mouse', MouseWidget);

} (window, document, Common, Cache, Events, Velocity));
// Mobile Menu Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var MobileMenuWidget = {

        // Options
        options: {
            MenuType: 'DropDown',
            MenuVisibleClass: 'gtc-nav-show',
            TargetName: '',
            ParentName: '',
            CloseButton: null,
            AnimationTime: 400,
            CloseOnBody: true
        },

        // Public Methods
        CloseMenu: function () {

            // Initialize
            var thisWidget = this;

            // Close menu
            thisWidget._closeMenu();

        },

        // Private Methods
        _closeMenu: function () {

            // Initialize
            var thisWidget = this;

            // Close menu
            if (Common.IsDefined(Common.GetAttr(Common.Get(thisWidget.options.ParentName), 'data-mobilemenu'))) {
                if (thisWidget.options.MenuType == 'DropDown') {
                    thisWidget._animateDropDownMenu();
                }
                else if (thisWidget.options.MenuType == 'SideBar') {
                    thisWidget._animateSideBarMenu();
                }
            }

        },

        _animateDropDownMenu: function () {

            // Initialize
            var thisWidget = this;
            var menuElement = Common.Get(thisWidget.options.TargetName);

            // If/Hide Else/Show
            if (Common.HasClass(menuElement, thisWidget.options.MenuVisibleClass)) {
                Common.RemoveAttr(Common.Get(thisWidget.options.ParentName), 'data-mobilemenu');
                Events.Off(document.body, 'click.mobileMenuCloseOnBodyClick' + thisWidget.options.TargetName);
                Velocity(menuElement, 'slideUp', thisWidget.options.AnimationTime,
                    function () {
                        Common.RemoveClass(this[0], thisWidget.options.MenuVisibleClass);
                        Common.RemoveAttr(this[0], 'style');
                    }
                );
            }
            else {
                Common.SetAttr(Common.Get(thisWidget.options.ParentName), 'data-mobilemenu', 'open');
                Velocity(menuElement, 'slideDown', thisWidget.options.AnimationTime,
                    function () {
                        Common.AddClass(this[0], thisWidget.options.MenuVisibleClass);
                        Common.RemoveAttr(this[0], 'style');
                    }
                );
                thisWidget._attachCloseOnBodyClick();
            }

        },

        _animateSideBarMenu: function () {

            // Initialize
            var thisWidget = this;
            var menuElement = Common.Get(thisWidget.options.TargetName);
            var pageElement = Common.Get('DivPage');
            var closeButton = Common.Get(thisWidget.options.CloseButton);

            // If/Hide Else/Show
            if (Common.HasClass(menuElement, thisWidget.options.MenuVisibleClass)) {
                Common.RemoveAttr(Common.Get(thisWidget.options.ParentName), 'data-mobilemenu');
                Events.Off(document.body, 'click.mobileMenuCloseOnBodyClick' + thisWidget.options.TargetName);
                Velocity(menuElement, { 'right': '-75%' }, thisWidget.options.AnimationTime,
                    function () {
                        Common.RemoveClass(menuElement, thisWidget.options.MenuVisibleClass);
                    }
                );
                Velocity(pageElement, { 'left': '0%' }, thisWidget.options.AnimationTime,
                    function () {
                        pageElement.style.position = '';
                    }
                );
                if (Common.IsDefined(closeButton)) {
                    Velocity(closeButton, { 'right': '-75%' }, thisWidget.options.AnimationTime,
                        function () {
                            Common.RemoveClass(closeButton, thisWidget.options.MenuVisibleClass);
                        }
                    );
                }
            }
            else {
                Common.SetAttr(Common.Get(thisWidget.options.ParentName), 'data-mobilemenu', 'open');
                Common.AddClass(menuElement, thisWidget.options.MenuVisibleClass);
                Velocity(menuElement, { 'right': '0%' }, thisWidget.options.AnimationTime);
                pageElement.style.position = 'relative';
                Velocity(pageElement, { 'left': '-75%' }, thisWidget.options.AnimationTime);
                if (Common.IsDefined(closeButton)) {
                    Common.AddClass(closeButton, thisWidget.options.MenuVisibleClass);
                    Velocity(closeButton, { 'right': '0%' }, thisWidget.options.AnimationTime);
                }
                thisWidget._attachCloseOnBodyClick();
            }

        },

        _attachClickOpenEvent: function () {

            // Initialize
            var thisWidget = this;

            // Add click event to mobile visibility only link
            Events.On(thisWidget.element, 'click',
                function (event) {
                    if (thisWidget.options.MenuType == 'DropDown') {
                        thisWidget._animateDropDownMenu();
                    }
                    else if (thisWidget.options.MenuType == 'SideBar') {
                        thisWidget._animateSideBarMenu();
                    }
                    if (Common.CheckMedia('Mobile')) {
                        thisWidget._viewElementHelper();
                    }
                }
            );

        },

        _attachClickCloseEvent: function () {

            // Initialize
            var thisWidget = this;

            // Attach close button event
            if (Common.IsDefined(thisWidget.options.CloseButton)) {
                Events.On(Common.Get(thisWidget.options.CloseButton), 'click',
                    function (event) {
                        if (Common.IsDefined(Common.GetAttr(Common.Get(thisWidget.options.ParentName), 'data-mobilemenu'))) {
                            thisWidget._animateSideBarMenu();
                        }
                    }
                );
            }

        },

        _attachCloseOnBodyClick: function () {

            // Initialize
            var thisWidget = this;

            // Attach body click event
            Events.On(document.body, 'click.mobileMenuCloseOnBodyClick' + thisWidget.options.TargetName + '.' + thisWidget.options.TargetName,
                function (event) {
                    var eventTarget = event.target;
                    if (Common.Closest('#' + thisWidget.element.id, eventTarget) && Common.Closest('#' + thisWidget.options.TargetName, eventTarget) && eventTarget.id != thisWidget.element.id && eventTarget.id != thisWidget.options.TargetName) {
                        Events.Off(document.body, 'click.mobileMenuCloseOnBodyClick' + thisWidget.options.TargetName);
                        thisWidget._closeMenu();
                    }
                }
            );

        },

        _addScrollbar: function () {

            // Initialize
            var thisWidget = this;
            var menuElement = Common.Get(thisWidget.options.TargetName);

            // Add scroll class
            Common.AddClass(menuElement, 'gtc-cfscroll-y');

        },

        _viewElementHelper: function () {

            Events.Trigger(document, 'mobilesliderscrollbar');

        },

        _init: function () {
        },

        _create: function () {

            // Initialize
            var thisWidget = this;

            // Attach open event
            thisWidget._attachClickOpenEvent();

            // Attach close click for side bar menu and check for scrollbar
            if (thisWidget.options.MenuType == 'SideBar') {
                thisWidget._attachClickCloseEvent();
                if (Common.CheckMedia('Mobile')) {
                    thisWidget._addScrollbar();
                }
            }

        }

    };

    WidgetFactory.Register('gtc.mobilemenu', MobileMenuWidget);

} (window, document, Common, Cache, Events, Velocity));
// Button Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var ButtonWidget = {

        // Options
        options: {
            Type: 'Default'
        },

        // Private Methods
        _attachSelectableClick: function () {

            // Initialize
            var thisWidget = this;

            // Mouse Down
            Events.On(thisWidget.element, 'mousedown',
                function (event) {
                    Common.AddClass(this, 'gtc-btn-selectableClick');
                }
            );

            // Mouse Up
            Events.On(thisWidget.element, 'mouseup',
                function (event) {
                    Common.RemoveClasses(this, 'gtc-btn-selectableClick');

                    // Get (old)Selected Button in the same ButtonGroup and Unselect it
                    var oldSelectedButton = Common.GetAllSibling(this, Common.SiblingType.All, '.gtc-btn--is-active')[0];
                    Common.RemoveClass(oldSelectedButton, 'gtc-btn--is-active');

                    // Set (new)Selected Button to active
                    Common.AddClass(this, 'gtc-btn--is-active');
                }
            );
        },

        _init: function () {
        },

        _create: function () {
            switch (this.options.Type) {
                case 'Selectable':
                    this._attachSelectableClick();
                    if (Common.GetAttr(this.element, 'data-selected') == 'true') {
                        Common.AddClass(this.element, 'gtc-btn--is-active');
                    }
                    break;
            }
        }

    };

    WidgetFactory.Register('gtc.uibutton', ButtonWidget);

} (window, document, Common, Cache, Events, Velocity));
// Checkbox Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var CheckboxWidget = {

        // Options
        options: {
            ClassLabelCheckboxUnchecked: 'gtc-classLabelCheckboxUnchecked',
            ClassLabelCheckboxUncheckedHover: 'gtc-classLabelCheckboxUncheckedHover',
            ClassLabelCheckboxChecked: 'gtc-input-checkbox-selected',
            ClassLabelCheckboxCheckedHover: 'gtc-classLabelCheckboxCheckedHover',
            ClassCheckboxLocked: 'gtc-input-locked'
        },

        // Public Methods
        IsDisabled: function () {

            return GTC.IsControlDisabled(this.element);

        },

        DisableControl: function () {

            this._disableControl();

        },

        EnableControl: function () {

            this._enableControl();

        },

        // Private Methods
        _setLabelStyle: function () {

            // Initialize
            var thisWidget = this;
            var label = thisWidget.element.parentNode;
            if (thisWidget.element.checked == true) {
                Common.AddClass(label, thisWidget.options.ClassLabelCheckboxUnchecked);
                Common.AddClass(label, thisWidget.options.ClassLabelCheckboxChecked);
                Common.SetAttr(label, 'aria-checked', 'true');
            }
            else {
                Common.AddClass(label, thisWidget.options.ClassLabelCheckboxUnchecked);
                Common.SetAttr(label, 'aria-checked', 'false');
            }

        },

        _bindFocus: function () {

            // Initialize
            var thisWidget = this;

            // Focus In
            Events.On(thisWidget.element, 'focusin',
                function (event) {
                    thisWidget.Focused = true;
                    if (thisWidget.element.checked == true) {
                        Common.AddClass(thisWidget.element.parentNode, thisWidget.options.ClassLabelCheckboxCheckedHover);
                    }
                    else {
                        Common.AddClass(thisWidget.element.parentNode, thisWidget.options.ClassLabelCheckboxUncheckedHover);
                    }
                }
            );

            // Focus Out
            Events.On(thisWidget.element, 'focusout',
                function (event) {
                    thisWidget.Focused = false;
                    if (thisWidget.element.checked == true) {
                        Common.RemoveClass(thisWidget.element.parentNode, thisWidget.options.ClassLabelCheckboxCheckedHover);
                    }
                    else {
                        Common.RemoveClass(thisWidget.element.parentNode, thisWidget.options.ClassLabelCheckboxUncheckedHover);
                    }
                }
            );

        },

        _updateDisplay: function () {

            // Initialize
            var thisWidget = this;

            // Update Field Display
            var serializable = Common.ParentsUntil(null, thisWidget.element, '.gtc-dropdown-wrapper');
            if (Common.IsDefined(serializable[0])) {
                var tagsWrapper = serializable[0].previousSibling;
                var checkBoxes = Common.GetByClass('gtc-input-checkbox-choice', serializable[0]);
                var tagsText = '', tags = [], index = 0;
                for ( ; index < checkBoxes.length; index++) {
                    if (checkBoxes[index].checked ) {
                        tagsText += checkBoxes[index].value;
                        tags.push(' ' + checkBoxes[index].previousSibling.innerHTML);
                    }
                }
                var tagsContainer = Common.GetByClass('gtc-vertical-tags', tagsWrapper);
                tagsContainer[0].innerHTML = tags.join();
            }
        },

        _bindClick: function () {

            // Initialize
            var thisWidget = this;

            // Click
            Events.On(thisWidget.element.parentNode, 'click',
                function (event, data) {
                    event.preventDefault();
                    if (data && data.stopProp) {
                        event.stopPropagation();
                    }
                    if (thisWidget.element.checked == true) {
                        Common.RemoveClass(this, thisWidget.options.ClassLabelCheckboxChecked);
                        Common.SetAttr(this, 'aria-checked', 'false');
                        thisWidget.element.checked = false;
                    }
                    else {
                        Common.AddClass(this, thisWidget.options.ClassLabelCheckboxChecked);
                        Common.SetAttr(this, 'aria-checked', 'true');
                        thisWidget.element.checked = true;
                    }
                    thisWidget._updateDisplay();
                    Events.Trigger(thisWidget.element, 'change');
                }
            );

            // UpdateWidget
            Events.On(thisWidget.element, 'widgetUpdateValue',
                function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    if (thisWidget.element.checked == true) {
                        Common.AddClass(thisWidget.element.parentNode, thisWidget.options.ClassLabelCheckboxChecked);
                        Common.SetAttr(thisWidget.element.parentNode, 'aria-checked', 'true');
                    }
                    else {
                        Common.RemoveClass(thisWidget.element.parentNode, thisWidget.options.ClassLabelCheckboxChecked);
                        Common.SetAttr(thisWidget.element.parentNode, 'aria-checked', 'false');
                    }
                    thisWidget._updateDisplay();
                }
            );

        },

        _disableControl: function () {

            // Initialize
            var thisWidget = this;

            // Disabled control
            if (!thisWidget.Locked) {
                thisWidget.Locked = true;
                Events.Off(thisWidget.element.parentNode, 'click');
                Common.SetAttr(thisWidget.element, 'data-disabled', 'true');
                thisWidget.element.disabled = true;
                var closestGroup = Common.Closest('.gtc-input-checkbox-group', thisWidget.element);
                Common.AddClass(closestGroup, thisWidget.options.ClassCheckboxLocked);
                if (Common.IsNotDefined(Common.Query('span.gtc-input-system', closestGroup))) {
                    Common.InsertHTMLString(closestGroup, Common.InsertType.Append, '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
                }
                Common.SetAttr(thisWidget.element, 'tabindex', '-1');
            }

        },

        _enableControl: function () {

            // Initialize
            var thisWidget = this;

            // Enable control
            if (thisWidget.Locked) {
                thisWidget._bindClick();
                Common.RemoveAttr(thisWidget.element, 'data-disabled');
                thisWidget.element.disabled = false;
                var closestGroup = Common.Closest('.gtc-input-checkbox-group', thisWidget.element);
                Common.RemoveClass(closestGroup, thisWidget.options.ClassCheckboxLocked);
                var systemInput = Common.Query('span.gtc-input-system', closestGroup);
                if (Common.IsDefined(systemInput)) {
                    Common.Remove(systemInput);
                }
                Common.SetAttr(thisWidget.element, 'tabindex', thisWidget.FocusIndex);
                thisWidget.Locked = false;
            }

        },

        _destroy: function () {

            // Initialize
            var thisWidget = this;

            // Click
            Events.Off(thisWidget.element.parentNode, 'click');
            Events.Off(thisWidget.element, 'widgetUpdateValue');
            Events.Off(thisWidget.element, 'focusin');
            Events.Off(thisWidget.element, 'focusout');

        },

        _init: function () {
        },

        _create: function () {

            // Initialize
            var thisWidget = this;

            // Data
            this.Locked = false;
            thisWidget.Focused = false;
            thisWidget.FocusIndex = Common.GetAttr(thisWidget.element, 'tabindex');

            // Initialize
            thisWidget._setLabelStyle();
            thisWidget._bindFocus();
            thisWidget._bindClick();
            thisWidget._updateDisplay();

            // Disabled?
            var dataDisabled = Common.GetAttr(thisWidget.element, 'data-disabled');
            if (dataDisabled == 'true') {
                thisWidget._disableControl();
            }

        }

    };

    WidgetFactory.Register('gtc.checkbox', CheckboxWidget);

} (window, document, Common, Cache, Events, Velocity));
// MultiSelect Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var MultiSelectWidget = {

        // Options
        options: {
            AllSelected: false,
            IsValidations: false
        },

        // Public Methods
        GetSelected: function () {

            return this.CurrentSelected;

        },

        GetAll: function () {

            return this._getAll();

        },

        UpdateSelected: function () {

            this._updateSelected();

        },

        IntializeNewDetails: function () {

            this._intializeNewDetails();

        },

        // Private Methods
        _getAll: function () {

            var thisWidget = this;
            var allSelectables = null;
            var selectables = Common.QueryAll(thisWidget.IntializedSelector, thisWidget.element);
            var selectable, object, index = 0, length = selectables.length;
            if (length > 0) {
                allSelectables = [];
                for ( ; index < length; index++) {
                    var selectable = selectables[index];
                    object = {
                        Name: selectable.id,
                        Value: Common.GetAttr(selectable, 'data-selectableid'),
                        Checked: Common.Query(thisWidget.CheckboxSelector, selectable).checked
                    };
                    allSelectables.push(object);
                }
            }
            return allSelectables;

        },

        _bindSelectingEvent: function () {

            var thisWidget = this;
            Events.On(thisWidget.element, 'selectableselecting',
                function (event, ui) {
                    Events.Trigger(Common.Get(Common.GetAttr(ui.selecting, 'data-selectablename') + 'MultiSelectCheckbox'), 'focusin');
                }
            );

        },

        _bindSelectedEvent: function () {

            var thisWidget = this;
            Events.On(thisWidget.element, 'selectableselected',
                function (event, ui) {
                    var selectedElement = ui.selected;
                    var checkbox = Common.Get(Common.GetAttr(ui.selected, 'data-selectablename') + 'MultiSelectCheckbox');
                    Events.Trigger(checkbox, 'focusout');
                    if (!checkbox.checked) {
                        // Force checkbox click or let event bubbling handling it
                        if ((Common.IsDefined(event.originalEvent) && !Common.CheckNodeType(event.originalEvent.target, 'label') && !Common.GetChildren(event.originalEvent.target, thisWidget.CheckboxSelector).length > 0) || Common.IsNotDefined(event.originalEvent)) {
                            Events.Trigger(checkbox.parentNode, 'click', { stopProp: ui.stopProp });
                        }
                        thisWidget.CurrentSelected.push(selectedElement);
                        Events.Trigger(checkbox, 'focusout');
                    }
                }
            );

        },

        _bindUnselectingEvent: function () {

            var thisWidget = this;
            Events.On(thisWidget.element, 'selectableunselecting',
                function (event, ui) {
                    Events.Trigger(Common.Get(Common.GetAttr(ui.selecting, 'data-selectablename') + 'MultiSelectCheckbox'), 'focusin');
                }
            );

        },

        _bindUnselectedEvent: function () {

            var thisWidget = this;
            Events.On(thisWidget.element, 'selectableunselected',
                function (event, ui) {
                    var unselectedElement = ui.unselected;
                    var checkbox = Common.Get(Common.GetAttr(ui.unselected, 'data-selectablename') + 'MultiSelectCheckbox');
                    Events.Trigger(checkbox, 'focusout');
                    if (checkbox.checked) {
                        // Force checkbox click or let event bubbling handling it
                        if ((Common.IsDefined(event.originalEvent) && !Common.CheckNodeType(event.originalEvent.target, 'label') && !Common.GetChildren(event.originalEvent.target, thisWidget.CheckboxSelector).length > 0) || Common.IsNotDefined(event.originalEvent)) {
                            Events.Trigger(checkbox.parentNode, 'click', { stopProp: ui.stopProp });
                        }
                        thisWidget.CurrentSelected = Common.FilterArray(thisWidget.CurrentSelected,
                            function (value) {
                                return Common.GetAttr(value.parentNode, 'data-selectableid') != Common.GetAttr(unselectedElement.parentNode, 'data-selectableid');
                            }
                        );
                        Events.Trigger(checkbox, 'focusout');
                    }
                }
            );

        },

        _bindSelectAllButtonEvent: function () {

            var thisWidget = this;
            var selectAllButton = Common.Get(thisWidget.element.id + 'SelectAllButton');
            if (Common.IsDefined(selectAllButton)) {
                Widgets.uibutton(selectAllButton);
                Events.On(selectAllButton, 'click',
                    function () {
                        var icon = this.firstChild;
                        var span = this.lastChild;
                        var multiSelectDetails = Common.QueryAll(thisWidget.IntializedSelector, thisWidget.element);
                        var multiSelectDetail, multiSelectBody, index = 0, length = multiSelectDetails.length;
                        if (thisWidget.options.AllSelected) {
                            thisWidget.options.AllSelected = false;
                            for ( ; index < length; index++) {
                                multiSelectDetail = multiSelectDetails[index];
                                multiSelectBody = Common.Query(thisWidget.FilterSelector, multiSelectDetail);
                                Common.SwitchClass(multiSelectBody, 'gtc-ui-selected', 'gtc-ui-unselecting');
                                Cache.Get(multiSelectDetail, 'gtc-selectable')._mouseStop(null, true);
                            }
                            Common.SwitchClass(icon, 'fa-check-square-o', 'fa-square-o');
                            Common.SetAttr(span, 'data-translate', 'SelectAll');
                            span.textContent = Common.TranslateKey('SelectAll');
                        }
                        else {
                            thisWidget.options.AllSelected = true;
                            for ( ; index < length; index++) {
                                multiSelectDetail = multiSelectDetails[index];
                                multiSelectBody = Common.Query(thisWidget.FilterSelector, multiSelectDetail);
                                Common.AddClass(multiSelectBody, 'gtc-ui-selecting');
                                Cache.Get(multiSelectDetail, 'gtc-selectable')._mouseStop(null, true);
                            }
                            Common.SwitchClass(icon, 'fa-square-o', 'fa-check-square-o');
                            Common.SetAttr(span, 'data-translate', 'UnselectAll');
                            span.textContent = Common.TranslateKey('UnselectAll');
                        }
                    }
                );
            }

        },

        _initializeSelectable: function () {

            var thisWidget = this;
            var elements = Common.QueryAll(thisWidget.IntializedSelector, thisWidget.element);
            Events.On(elements, 'mousedown',
                function (event) {
                    // This allows continuous selecting without holding ctrl
                    event.metaKey = true;
                }
            );
            Widgets.selectable(elements, { filter: thisWidget.FilterSelector, cancel: 'input,textarea,button,select,option,a' });

        },

        _initializeCheckboxes: function () {

            var thisWidget = this;
            Widgets.checkbox(Common.QueryAll(thisWidget.CheckboxSelector, thisWidget.element),
                {
                    ClassLabelCheckboxUnchecked: 'gtc-classLabelCheckboxUnchecked',
                    ClassLabelCheckboxUncheckedHover: 'gtc-classLabelCheckboxUncheckedHover',
                    ClassLabelCheckboxChecked: 'gtc-input-checkbox-selected',
                    ClassLabelCheckboxCheckedHover: 'gtc-classLabelCheckboxCheckedHover',
                    ClassCheckboxLocked: 'gtc-input-locked'
                }
            );

            // Apply selected
            var checkboxes = Common.QueryAll(thisWidget.CheckboxSelector, thisWidget.element);
            var checkbox, index = 0, length = checkboxes.length;
            for ( ; index < length; index++) {
                checkbox = checkboxes[index];
                if (checkbox.checked) {
                    var closestFilter = Common.Closest(thisWidget.FilterSelector, checkbox);
                    Common.AddClass(closestFilter, 'gtc-ui-selected');
                    thisWidget.CurrentSelected.push(closestFilter);
                }
            }

        },

        _updateSelected: function () {

            var thisWidget = this;
            this.CurrentSelected = [];
            var selectables = Common.QueryAll(thisWidget.IntializedSelector + '[data-selectableid]', thisWidget.element);
            var selectee, index = 0, length = selectables.length;
            for ( ; index < length; index++) {
                selectee = selectables[index];
                var selectableBody = Common.Query(thisWidget.FilterSelector, selectee);
                var checkbox = Common.Get(selectee.id + 'MultiSelectCheckbox');
                if (Common.HasClass(selectableBody, 'gtc-ui-selected')) {
                    thisWidget.CurrentSelected.push(selectableBody);
                    if (!checkbox.checked) {
                        Events.Trigger(checkbox.parentNode, 'click');
                        Events.Trigger(checkbox, 'focusout');
                    }
                }
                else {
                    if (checkbox.checked) {
                        Events.Trigger(checkbox.parentNode, 'click');
                        Events.Trigger(checkbox, 'focusout');
                    }
                }
            }

        },

        _intializeNewDetails: function () {

            var thisWidget = this;
            var newDetails = Common.QueryAll(thisWidget.IntializedSelector + ':not(.gtc-ui-selectable)', thisWidget.element);
            Events.On(newDetails, 'mousedown',
                function (event) {
                    // This allows continuous selecting without holding ctrl
                    event.metaKey = true;
                }
            );
            Widgets.selectable(newDetails, { filter: thisWidget.FilterSelector, cancel: 'input,textarea,button,select,option,a' });

            // Checkboxes
            var checkboxes = [];
            if (newDetails.length > 0) {
                var index = 0, length = newDetails.length;
                for ( ; index < length; index++) {
                    checkboxes = checkboxes.concat(Common.QueryAll(thisWidget.CheckboxSelector, newDetails[index]));
                }
            }
            if (checkboxes.length > 0) {
                Widgets.checkbox(checkboxes,
                    {
                        ClassLabelCheckboxUnchecked: 'gtc-classLabelCheckboxUnchecked',
                        ClassLabelCheckboxUncheckedHover: 'gtc-classLabelCheckboxUncheckedHover',
                        ClassLabelCheckboxChecked: 'gtc-input-checkbox-selected',
                        ClassLabelCheckboxCheckedHover: 'gtc-classLabelCheckboxCheckedHover',
                        ClassCheckboxLocked: 'gtc-input-locked'
                    }
                );

                // Apply selected
                var checkbox, index = 0, length = checkboxes.length;
                for ( ; index < length; index++) {
                    checkbox = checkboxes[index];
                    if (checkbox.checked) {
                        var closestFilter = Common.Closest(thisWidget.FilterSelector, checkbox);
                        Common.AddClass(closestFilter, 'gtc-ui-selected');
                        thisWidget.CurrentSelected.push(closestFilter);
                    }
                }
            }

        },

        _destroy: function () {

            var thisWidget = this;
            Events.Off(thisWidget.element, 'selectableselecting');
            Events.Off(thisWidget.element, 'selectableselected');
            Events.Off(thisWidget.element, 'selectableunselecting');
            Events.Off(thisWidget.element, 'selectableunselected');
            var selectAllButton = Common.Get(thisWidget.element.id + 'SelectAllButton');
            if ((thisWidget.options.IsValidations != true) && (Common.IsDefined(selectAllButton))) {
                Events.Off(selectAllButton, 'click');
            }
            var allSelectables = Common.QueryAll(thisWidget.IntializedSelector, thisWidget.element);
            Events.Off(allSelectables, 'mousedown');
            Widgets.selectable(allSelectables, 'destroy');
            this.CurrentSelected = [];

        },

        _init: function () {
        },

        _create: function () {

            var thisWidget = this;
            thisWidget.CurrentSelected = [];
            if (thisWidget.options.IsValidations == true) {
                thisWidget.IntializedSelector = 'li';
                thisWidget.FilterSelector = '.gtc-validation-body';
                thisWidget.CheckboxSelector = '.gtc-validation-multiselect-checkbox';
            }
            else {
                thisWidget.IntializedSelector = '.gtc-multiselectdetail';
                thisWidget.FilterSelector = '.gtc-multiselectdetail-body';
                thisWidget.CheckboxSelector = '.gtc-multiselectdetail-multiselectcheckbox';
            }
            thisWidget._initializeSelectable();
            thisWidget._initializeCheckboxes();
            thisWidget._bindSelectingEvent();
            thisWidget._bindSelectedEvent();
            thisWidget._bindUnselectingEvent();
            thisWidget._bindUnselectedEvent();
            if (thisWidget.options.IsValidations != true) {
                thisWidget._bindSelectAllButtonEvent();
            }

        }

    };

    WidgetFactory.Register('gtc.multiselect', MultiSelectWidget);

} (window, document, Common, Cache, Events, Velocity));
// Selectable Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var SelectableWidget = {

        // Options
        options: {
            appendTo: 'body',
            autoRefresh: true,
            distance: 0,
            filter: '*',
            tolerance: 'touch',

            // Callbacks
            selected: null,
            selecting: null,
            start: null,
            stop: null,
            unselected: null,
            unselecting: null
        },

        // Private Methods
        _destroy: function () {

            var thisWidget = this;
            if (thisWidget.selectees) {
                var index = 0, length = thisWidget.selectees.length;
                for ( ; index < length; index++) {
                    Common.RemoveClass(thisWidget.selectees[index], 'gtc-ui-selectee');
                    Cache.Remove(thisWidget.selectees[index], 'selectable-item');
                }
            }
            Common.RemoveClasses(thisWidget.element, 'gtc-ui-selectable gtc-ui-selectable-disabled');
            thisWidget._mouseDestroy();

        },

        _mouseStart: function (event) {

            var thisWidget = this;
            var options = this.options;

            thisWidget.opos = [ event.pageX, event.pageY ];

            if (thisWidget.options.disabled) {
                return;
            }

            thisWidget.selectees = Common.QueryAll(options.filter, thisWidget.element);

            thisWidget._trigger('start', event);

            Common.Query(options.appendTo).appendChild(thisWidget.helper);

            // Position helper (lasso)
            var helperStyle = thisWidget.helper.style;
            helperStyle.left = event.pageX + 'px';
            helperStyle.top = event.pageY + 'px';
            helperStyle.width = '0px';
            helperStyle.height = '0px';

            if (options.autoRefresh) {
                thisWidget.refresh();
            }

            var selectedElements = Common.FilterElementArray(thisWidget.selectees, '.gtc-ui-selected');
            var selectee, selectedElement, index = 0, length = selectedElements.length;
            for ( ; index < length; index++) {
                selectedElement = selectedElements[index];
                selectee = Cache.Get(selectedElement, 'selectable-item');
                selectee.startselected = true;
                if (!event.metaKey && !event.ctrlKey) {
                    Common.RemoveClass(selectee.element, 'gtc-ui-selected');
                    selectee.selected = false;
                    Common.AddClass(selectee.element, 'gtc-ui-unselecting');
                    selectee.unselecting = true;
                    // Selectable UNSELECTING callback
                    thisWidget._trigger('unselecting', event, {
                        unselecting: selectee.element
                    });
                }
            }

            var parents = Common.ParentsUntil(null, event.target);
            parents.push(event.target);
            selectee, selectedElement, index = 0, length = parents.length;
            for ( ; index < length; index++) {
                selectedElement = parents[index];
                var doSelect,
                    selectee = Cache.Get(selectedElement, 'selectable-item');
                if (selectee) {
                    doSelect = (!event.metaKey && !event.ctrlKey) || !Common.HasClass(selectee.element, 'gtc-ui-selected');
                    if (doSelect) {
                        Common.RemoveClass(selectee.element, 'gtc-ui-unselecting');
                        Common.AddClass(selectee.element, 'gtc-ui-selecting');
                    }
                    else {
                        Common.RemoveClass(selectee.element, 'gtc-ui-selected');
                        Common.AddClass(selectee.element, 'gtc-ui-unselecting');
                    }
                    selectee.unselecting = !doSelect;
                    selectee.selecting = doSelect;
                    selectee.selected = doSelect;
                    // Selectable (UN)SELECTING callback
                    if (doSelect) {
                        thisWidget._trigger('selecting', event, {
                            selecting: selectee.element
                        });
                    }
                    else {
                        thisWidget._trigger('unselecting', event, {
                            unselecting: selectee.element
                        });
                    }
                    break;
                }
            }

        },

        _mouseDrag: function (event) {

            var thisWidget = this;
            thisWidget.dragged = true;

            if (thisWidget.options.disabled) {
                return;
            }

            var tmp,
                options = thisWidget.options,
                x1 = thisWidget.opos[0],
                y1 = thisWidget.opos[1],
                x2 = event.pageX,
                y2 = event.pageY;

            if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
            if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
            var helperStyle = thisWidget.helper.style;
            helperStyle.left = x1 + 'px';
            helperStyle.top = y1 + 'px';
            helperStyle.width = (x2 - x1) + 'px';
            helperStyle.height = (y2 - y1) + 'px';

            var selectee, hit, index = 0, length = thisWidget.selectees.length;
            for ( ; index < length; index++) {
                selectee = Cache.Get(thisWidget.selectees[index], 'selectable-item');
                hit = false;

                // Prevent helper from being selected if appendTo: selectable
                if (!selectee || selectee.element === thisWidget.element) {
                    continue;
                }

                if (options.tolerance === 'touch') {
                    hit = (!(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1));
                }
                else if (options.tolerance === 'fit') {
                    hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
                }

                if (hit) {
                    // SELECT
                    if (selectee.selected) {
                        Common.RemoveClass(selectee.element, 'gtc-ui-selected');
                        selectee.selected = false;
                    }
                    if (selectee.unselecting) {
                        Common.RemoveClass(selectee.element, 'gtc-ui-unselecting');
                        selectee.unselecting = false;
                    }
                    if (!selectee.selecting) {
                        Common.AddClass(selectee.element, 'gtc-ui-selecting');
                        selectee.selecting = true;
                        // selectable SELECTING callback
                        thisWidget._trigger('selecting', event, {
                            selecting: selectee.element
                        });
                    }
                }
                else {
                    // UNSELECT
                    if (selectee.selecting) {
                        if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                            Common.RemoveClass(selectee.element, 'gtc-ui-selecting');
                            selectee.selecting = false;
                            Common.AddClass(selectee.element, 'gtc-ui-selected');
                            selectee.selected = true;
                        }
                        else {
                            Common.RemoveClass(selectee.element, 'gtc-ui-selecting');
                            selectee.selecting = false;
                            if (selectee.startselected) {
                                Common.AddClass(selectee.element, 'gtc-ui-unselecting');
                                selectee.unselecting = true;
                            }
                            // selectable UNSELECTING callback
                            thisWidget._trigger('unselecting', event, {
                                unselecting: selectee.element
                            });
                        }
                    }
                    if (selectee.selected) {
                        if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                            Common.RemoveClass(selectee.element, 'gtc-ui-selected');
                            selectee.selected = false;

                            Common.AddClass(selectee.element, 'gtc-ui-unselecting');
                            selectee.unselecting = true;
                            // selectable UNSELECTING callback
                            thisWidget._trigger('unselecting', event, {
                                unselecting: selectee.element
                            });
                        }
                    }
                }
            }

            return false;

        },

        _mouseStop: function (event, selectAllStopProp) {

            var thisWidget = this;
            var index = 0, length;

            thisWidget.dragged = false;

            var selectee, unselecting = Common.QueryAll('.gtc-ui-unselecting', thisWidget.element);
            length = unselecting.length;
            for ( ; index < length; index++) {
                selectee = Cache.Get(unselecting[index], "selectable-item");
                Common.RemoveClass(selectee.element, 'gtc-ui-unselecting');
                selectee.unselecting = false;
                selectee.startselected = false;
                thisWidget._trigger('unselected', event, {
                    unselected: selectee.element,
                    stopProp: selectAllStopProp
                });
            }
            var selecting = Common.QueryAll('.gtc-ui-selecting', thisWidget.element);
            length = selecting.length;
            for ( ; index < length; index++) {
                selectee = Cache.Get(selecting[index], 'selectable-item');
                Common.RemoveClass(selectee.element, 'gtc-ui-selecting');
                Common.AddClass(selectee.element, 'gtc-ui-selected');
                selectee.selecting = false;
                selectee.selected = true;
                selectee.startselected = true;
                thisWidget._trigger('selected', event, {
                    selected: selectee.element,
                    stopProp: selectAllStopProp
                });
            }
            thisWidget._trigger('stop', event);

            Common.Remove(thisWidget.helper);
            return false;

        },

        _create: function () {

            var selectees, thisWidget = this;

            Common.AddClass(thisWidget.element, 'gtc-ui-selectable');

            thisWidget.dragged = false;

            // Cache selectee children based on filter
            thisWidget.refresh = function () {
                selectees = Common.QueryAll(thisWidget.options.filter, thisWidget.element);
                var selectee, index = 0, length = selectees.length;
                for ( ; index < length; index++) {
                    selectee = selectees[index];
                    Common.AddClass(selectee, 'gtc-ui-selectee');
                    var pos = Common.Offset(selectee);
                    Cache.Set(selectee, 'selectable-item', {
                        element: selectee,
                        left: pos.left,
                        top: pos.top,
                        right: pos.left + Common.Width(selectee, true),
                        bottom: pos.top + Common.Height(selectee, true),
                        startselected: false,
                        selected: Common.HasClass(selectee, 'gtc-ui-selected'),
                        selecting: Common.HasClass(selectee, 'gtc-ui-selecting'),
                        unselecting: Common.HasClass(selectee, 'gtc-ui-unselecting')
                    });
                }
            };
            thisWidget.refresh();

            thisWidget._mouseInit();

            thisWidget.helper = Common.GenerateHTML('<div class="gtc-ui-selectable-helper"></div>');

        }

    };

    WidgetFactory.Register('gtc.selectable', WidgetFactory.gtc.mouse, SelectableWidget);

} (window, document, Common, Cache, Events, Velocity));
// Tooltip Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var TooltipWidget = {

        // Options
        options: {
            delayedShow: 0,
            content: function () {
                var title = Common.GetAttr(this, 'title') || '';
                return Common.Decode(title);
            },
            items: '[title]:not([disabled])',
            position: {
                my: "left top+15",
                at: "left bottom",
                collision: "flipfit flip"
            },
            tooltipClass: null,

            // Callbacks
            close: null,
            open: null
        },

        // Public Methods
        open: function (event) {

            var thisWidget = this;
            var target = Common.Closest(thisWidget.options.items, event && event.target ? event.target : thisWidget.element);

            // No element to show a tooltip for or the tooltip is already open
            if (!target || Cache.Get(target, 'gtc-ui-tooltip-id')) {
                return;
            }

            if (Common.GetAttr(target, 'title')) {
                Cache.Set(target, 'gtc-ui-tooltip-title', Common.GetAttr(target, 'title'));
            }

            Cache.Set(target, 'gtc-ui-tooltip-open', true);

            // kill parent tooltips, custom or native, for hover
            if (event && event.type === 'mouseover') {
                var targetParents = Common.ParentsUntil(null, target);
                var index = 0, length = targetParents.length;
                for ( ; index < length; index++) {
                    // For loops have no scope! Give it some. (IIFE)
                    (function (parent) {
                        var blurEvent;
                        if (Cache.Get(parent, 'gtc-ui-tooltip-open')) {
                            blurEvent = Events.Event('blur');
                            blurEvent.target = blurEvent.currentTarget = parent;
                            thisWidget.close(blurEvent, true);
                        }
                        if (Common.GetAttr(parent, 'title')) {
                            if (!parent.id) {
                                parent.id = 'GTC' + Common.GenerateUniqueID();
                            }
                            thisWidget.parents[parent.id] = {
                                element: parent,
                                title: Common.GetAttr(parent, 'title')
                            };
                            Common.SetAttr(parent, 'title', '');
                        }
                    }(targetParents[index]));
                }
            }

            thisWidget._registerCloseHandlers(event, target);
            thisWidget._updateContent(target, event);

        },

        close: function( event ) {
            var tooltip,
                thisWidget = this,
                target = event ? event.currentTarget : thisWidget.element,
                tooltipData = thisWidget._find(target);

            // The tooltip may already be closed
            if (!tooltipData) {
                // We set gtc-ui-tooltip-open immediately upon open (in open()), but only set the
                // additional data once there's actually content to show (in _open()). So even if the
                // tooltip doesn't have full data, we always remove gtc-ui-tooltip-open in case we're in
                // the period between open() and _open().
                Cache.Remove(target, 'gtc-ui-tooltip-open');
                return;
            }

            tooltip = tooltipData.tooltip;

            // disabling closes the tooltip, so we need to track when we're closing
            // to avoid an infinite loop in case the tooltip becomes disabled on close
            if (tooltipData.closing) {
                return;
            }

            // only set title if we had one before (see comment in _open())
            // If the title attribute has changed since open(), don't restore
            if (Cache.Get(target, 'gtc-ui-tooltip-title') && !Common.GetAttr(target, 'title')) {
                Common.SetAttr(target, 'title', Cache.Get(target, 'gtc-ui-tooltip-title'));
            }

            thisWidget._removeDescribedBy(target);

            tooltipData.hiding = true;
            Velocity(tooltip, 'stop', true);
            tooltip.style.display = 'none';
            thisWidget._removeTooltip(tooltip);

            Cache.Remove(target, 'gtc-ui-tooltip-open');
            thisWidget._off(target, 'mouseleave focusout keyup');

            // Remove 'remove' binding only on delegated targets
            if (target !== thisWidget.element) {
                thisWidget._off(target, 'remove');
            }
            thisWidget._off(thisWidget.document, 'mousemove');

            if (event && event.type === 'mouseleave') {
                for (property in thisWidget.parents) {
                    var value = thisWidget.parents[property];
                    Common.SetAttr(property.element, 'title', property.title);
                    delete thisWidget.parents[value];
                }
            }

            tooltipData.closing = true;
            this._trigger('close', event, { tooltip: tooltip });
            if (!tooltipData.hiding) {
                tooltipData.closing = false;
            }
        },

        // Private Methods
        _addDescribedBy: function (elem, id) {

            var describedby = (Common.GetAttr(elem, 'aria-describedby') || '').split(/\s+/);
            describedby.push(id);
            Cache.Set(elem, 'gtc-ui-tooltip-id', id);
            Common.SetAttr(elem, 'aria-describedby', describedby.join(' ').trim());

        },

        _removeDescribedBy: function (elem) {

            var id = Cache.Get(elem, 'gtc-ui-tooltip-id');
            var describedby = (Common.GetAttr(elem, 'aria-describedby') || '').split(/\s+/);
            var index = Common.IsInArray(id, describedby);

            if (index !== -1) {
                describedby.splice(index, 1);
            }

            Cache.Remove(elem, 'gtc-ui-tooltip-id');
            describedby = describedby.join(' ').trim();
            if (describedby) {
                Common.SetAttr(elem, 'aria-describedby', describedby);
            }
            else {
                Common.RemoveAttr(elem, 'aria-describedby');
            }

        },

        _updateContent: function (target, event) {

            var content,
                contentOption = this.options.content,
                thisWidget = this,
                eventType = event ? event.type : null;

            if (Common.IsString(contentOption)) {
                return this._open(event, target, contentOption);
            }

            content = contentOption.call(target,
                function (response) {
                    setTimeout(
                        function() {
                            if (!Cache.Get(target, 'gtc-ui-tooltip-open')) {
                                return;
                            }
                            if (event) {
                                event.type = eventType;
                            }
                            thisWidget._open(event, target, response);
                        }, 0
                    );
                }
            );
            if (content) {
                thisWidget._open(event, target, content);
            }

        },

        _open: function (event, target, content) {

            var tooltipData, tooltip, a11yContent,
                positionOption = Common.MergeObjects({}, this.options.position);

            if (!content) {
                return;
            }

            // Content can be updated multiple times. If the tooltip already
            // exists, then just update the content and bail.
            tooltipData = this._find(target);
            if (tooltipData) {
                Common.Query('.gtc-ui-tooltip-content', tooltipData.tooltip).innerHTML = content;
                return;
            }

            // if we have a title, clear it to prevent the native tooltip
            // we have to check first to avoid defining a title if none exists
            // (we don't want to cause an element to start matching [title])
            //
            // We use removeAttr only for key events, to allow IE to export the correct
            // accessible attributes. For mouse events, set to empty string to avoid
            // native tooltip showing up (happens only when removing inside mouseover).
            if (Common.HasAttr(target, '[title]')) {
                if (event && event.type === 'mouseover') {
                    Common.SetAttr(target, 'title', '');
                }
                else {
                    Common.RemoveAttr(target, 'title');
                }
            }

            tooltipData = this._tooltip(target);
            tooltip = tooltipData.tooltip;
            this._addDescribedBy(target, tooltip.id);
            Common.Query('.gtc-ui-tooltip-content', tooltip).innerHTML = content;

            // Support: Voiceover on OS X, JAWS on IE <= 9
            // JAWS announces deletions even when aria-relevant="additions"
            // Voiceover will sometimes re-read the entire log region's contents from the beginning
            var liveChildren = Common.GetChildren(this.liveRegion), index = 0, length = liveChildren.length;
            for ( ; index < length; index++) {
                liveChildren[index].style.display = 'none';
            }
            var newDiv = Common.Create('div');
            newDiv.innerHTML = content;
            this.liveRegion.appendChild(newDiv);

            Position.Set(tooltip, Common.MergeObjects({
                of: target
            }, this.options.position));

            tooltip.style.display = 'none';
            Velocity(tooltip, 'transition.slideLeftBigIn', { delay: this.options.delayedShow });
            this._trigger('open', event, { tooltip: tooltip });

        },

        _registerCloseHandlers: function (event, target) {

            var events = {
                keyup: function (event) {
                    if (event.keyCode === GTC.Keyboard.Escape) {
                        var fakeEvent = Events.Event(event);
                        fakeEvent.currentTarget = target;
                        this.close(fakeEvent, true);
                    }
                }
            };

            // Only bind remove handler for delegated targets. Non-delegated
            // tooltips will handle this in destroy.
            if (target !== this.element) {
                events.remove = function () {
                    this._removeTooltip(this._find(target).tooltip);
                };
            }

            if (!event || event.type === 'mouseover') {
                events.mouseleave = 'close';
            }
            if (!event || event.type === 'focusin') {
                events.focusout = 'close';
            }
            this._on(true, target, events);

        },

        _tooltip: function (element) {

            var tooltip = Common.Create('div');
            Common.SetAttr(tooltip, 'role', 'tooltip');
            Common.AddClasses(tooltip, 'gtc-ui-tooltip gtc-ui-widget gtc-ui-corner-all gtc-ui-widget-content ' + (this.options.tooltipClass || ''));
            if (!tooltip.id) {
                tooltip.id = 'GTC' + Common.GenerateUniqueID();
            }
            var id = tooltip.id;

            var newDiv = Common.Create('div');
            Common.AddClass(newDiv, 'gtc-ui-tooltip-content');
            tooltip.appendChild(newDiv);

            this.document.body.appendChild(tooltip);

            return this.tooltips[id] = {
                element: element,
                tooltip: tooltip
            };

        },

        _find: function (target) {

            var id = Cache.Get(target, 'gtc-ui-tooltip-id');
            return id ? this.tooltips[id] : null;

        },

        _removeTooltip: function (tooltip) {

            Common.Remove(tooltip);
            delete this.tooltips[tooltip.id];

        },

        _destroy: function () {

            var that = this;

            // close open tooltips
            for (id in this.tooltips) {
                var tooltipData = this.tooltips[id];

                // Delegate to close method to handle common cleanup
                var event = Events.Event('blur'),
                    element = tooltipData.element;
                event.target = event.currentTarget = element;
                that.close(event, true);

                // Remove immediately
                Common.Remove(Common.Get(id));

                // Restore the title
                if (Cache.Get(element, 'gtc-ui-tooltip-title')) {
                    // If the title attribute has changed since open(), don't restore
                    if (!Common.GetAttr(element, 'title')) {
                        Common.SetAttr(element, 'title', Cache.Get(element, 'gtc-ui-tooltip-title'));
                    }
                    Cache.Remove(element, 'gtc-ui-tooltip-title');
                }
            }
            Common.Remove(this.liveRegion);

        },

        _create: function() {

            this._on({
                mouseover: 'open',
                focusin: 'open'
            });

            // IDs of generated tooltips, needed for destroy
            this.tooltips = {};

            // IDs of parent tooltips where we removed the title attribute
            this.parents = {};

            // Append the aria-live region so tooltips announce correctly
            this.liveRegion = Common.Create('div');
            Common.SetAttr(this.liveRegion, 'role', 'log');
            Common.SetAttr(this.liveRegion, 'aria-live', 'assertive');
            Common.SetAttr(this.liveRegion, 'aria-relevant', 'additions');
            Common.AddClass(this.liveRegion, 'gtc-ui-helper-hidden-accessible');
            this.document.body.appendChild(this.liveRegion);

        }
    };

    WidgetFactory.Register('gtc.tooltip', TooltipWidget);

} (window, document, Common, Cache, Events, Velocity));
// Touch Namespace
(function (Touch, window, document, Common, Cache, Events, Velocity, undefined) {

    // Declare touch event support variables
    var supportTouch = 'ontouchend' in document;
    var scrollEvent = 'touchmove scroll';
    var touchStartEvent = supportTouch ? 'touchstart' : 'mousedown';
    var touchStopEvent = supportTouch ? 'touchend' : 'mouseup';
    var touchMoveEvent = supportTouch ? 'touchmove' : 'mousemove';
    var touchEventsInitialized = false;

    // Declare variables for mouse touch event handling
    var touchToMouse;
    var touchToMouseHandled;
    var defaultUiMouseInit;
    var touchToMouseInitialized = false;

    // Declare virtual mouse event support variables
    var eventInternal = Events.GetInternal();
    var dataPropertyName = 'virtualMouseBindings';
    var touchTargetPropertyName = 'virtualTouchID';
    var virtualEventNames = 'vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel'.split(' ');
    var touchEventProps = 'clientX clientY pageX pageY screenX screenY'.split(' ');
    var mouseHookProps = {
        props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
        filter: function (event, original) {
            var eventDoc, doc, body,
                button = original.button;

            // Calculate pageX/Y if missing and clientX/Y available
            if (event.pageX == null && original.clientX != null) {
                eventDoc = event.target.ownerDocument || document;
                doc = eventDoc.documentElement;
                body = eventDoc.body;

                event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                event.pageY = original.clientY + (doc && doc.scrollTop  || body && body.scrollTop  || 0) - (doc && doc.clientTop  || body && body.clientTop  || 0);
            }

            // Add which for click: 1 === left; 2 === middle; 3 === right
            // Note: button is not normalized, so don't use it
            if (!event.which && button !== undefined) {
                event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
            }
            return event;
        }
    };
    var props = 'altKey bubbles cancelable ctrlKey currentTarget dataTransfer detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' ');
    var mouseEventProps = props.concat(mouseHookProps);
    var activeDocHandlers = {};
    var resetTimerID = 0;
    var startX = 0;
    var startY = 0;
    var didScroll = false;
    var clickBlockList = [];
    var blockMouseTriggers = false;
    var blockTouchTriggers = false;
    var eventCaptureSupported = 'addEventListener' in document;
    var nextTouchID = 1;
    var lastTouchID = 0;
    var threshold;
    var loopIndex;
    var TouchGuid = 0;
    Touch.vmouse = {
        moveDistanceThreshold: 10,
        clickDistanceThreshold: 10,
        resetTimerDuration: 1500
    };

    // Public Methods
    Touch.IsTouchInitialized = function () {

        return touchEventsInitialized;

    };

    Touch.IsTouchToMouseInitialized = function () {

        return touchToMouseInitialized;

    };

    Touch.InitializeVirtualMouseEvents = function () {

        // Expose custom events for jQuery binding
        loopIndex = 0, length = virtualEventNames.length;
        for ( ; loopIndex < length; loopIndex++) {
            eventInternal.special[virtualEventNames[loopIndex]] = getSpecialEventObject(virtualEventNames[loopIndex]);
        }

        // Capture all clicks for mouse event translations and then block them
        if (eventCaptureSupported) {
            document.addEventListener('click',
                function (event) {
                    var clickBlockLength = clickBlockList.length;
                    var target = event.target;
                    var elementClick;
                    var touchID;

                    if (clickBlockLength) {
                        var x = event.clientX;
                        var y = event.clientY;
                        threshold = Touch.vmouse.clickDistanceThreshold;
                        var elements = target;
                        while (elements) {
                            loopIndex = 0;
                            for ( ; loopIndex < clickBlockLength; loopIndex++) {
                                elementClick = clickBlockList[loopIndex];
                                touchID = 0;
                                if ((elements === target && Math.abs(elementClick.x - x) < threshold && Math.abs(elementClick.y - y) < threshold) ||
                                    Cache.Get(elements, touchTargetPropertyName) === elementClick.touchID) {
                                    event.preventDefault();
                                    event.stopPropagation();
                                    return;
                                }
                            }
                            elements = elements.parentNode;
                        }
                    }
                }, true
            );
        }

    };

    Touch.InitializeTouchEvents = function () {

        // Only initialize once
        if (touchEventsInitialized) {
            return;
        }
        touchEventsInitialized = true;

        // Initialize Virtual Mouse Events
        Touch.InitializeVirtualMouseEvents();

        eventInternal.special.scrollstart = {
            enabled: true,
            setup: function () {
                var thisObject = this, scrolling, timer;

                function trigger(event, state) {
                    scrolling = state;
                    triggerCustomEvent(thisObject, scrolling ? 'scrollstart' : 'scrollstop', event);
                }

                // iPhone triggers scroll after a small delay; use touchmove instead
                Events.On(this, scrollEvent,
                    function (event) {
                        if (!eventInternal.special.scrollstart.enabled) {
                            return;
                        }
                        if (!scrolling) {
                            trigger(event, true);
                        }
                        clearTimeout(timer);
                        timer = setTimeout(
                            function () {
                                trigger(event, false);
                            }, 50
                        );
                    }
                );
            }
        };

        eventInternal.special.tap = {
            tapholdThreshold: 750,
            emitTapOnTaphold: true,
            setup: function () {
                var thisObject = this,
                isTaphold = false;
                Events.On(this, 'vmousedown',
                    function (event) {
                        isTaphold = false;
                        if (event.which && event.which !== 1) {
                            return false;
                        }

                        var origTarget = event.target, timer;

                        function clearTapTimer () {
                            clearTimeout(timer);
                        }

                        function clearTapHandlers () {
                            clearTapTimer();
                            Events.Off(thisObject, 'vclick', clickHandler);
                            Events.Off(thisObject, 'vmouseup', clearTapTimer);
                            Events.Off(document, 'vmousecancel', clearTapHandlers);
                        }

                        function clickHandler (event) {
                            clearTapHandlers();
                            if (!isTaphold && origTarget === event.target) {
                                triggerCustomEvent(thisObject, 'tap', event);
                            }
                            else if (isTaphold) {
                                event.stopPropagation();
                            }
                        }

                        Events.On(thisObject, 'vmouseup', clearTapTimer);
                        Events.On(thisObject, 'vclick', clickHandler);
                        Events.On(document, 'vmousecancel', clearTapHandlers);

                        timer = setTimeout(
                            function () {
                                if (!eventInternal.special.tap.emitTapOnTaphold) {
                                    isTaphold = true;
                                }
                                triggerCustomEvent(thisObject, 'taphold', Events.Event('taphold', { target: origTarget }));
                            },
                        eventInternal.special.tap.tapholdThreshold);
                    }
                );
            },
            teardown: function () {
                Events.Off(this, 'vmousedown');
                Events.Off(this, 'vclick');
                Events.Off(this, 'vmouseup');
                Events.Off(document, 'vmousecancel');
            }
        };

        eventInternal.special.swipe = {
            scrollSupressionThreshold: 10, // More than this horizontal displacement, and we will suppress scrolling.
            durationThreshold: 1000, // More time than this, and it isn't a swipe.
            horizontalDistanceThreshold: 420,
            verticalDistanceThreshold: 75,
            getLocation: function (event) {
                var winPageX = window.pageXOffset;
                var winPageY = window.pageYOffset;
                var x = event.clientX;
                var y = event.clientY;

                if (event.pageY === 0 && Math.floor(y) > Math.floor(event.pageY) || event.pageX === 0 && Math.floor(x) > Math.floor(event.pageX)) {
                    x = x - winPageX;
                    y = y - winPageY;
                }
                else if (y < (event.pageY - winPageY) || x < (event.pageX - winPageX)) {
                    x = event.pageX - winPageX;
                    y = event.pageY - winPageY;
                }
                return {
                    x: x,
                    y: y
                };
            },
            start: function (event) {
                var data = event.originalEvent.touches ? event.originalEvent.touches[0] : event;
                var location = eventInternal.special.swipe.getLocation(data);
                return {
                    time: (new Date()).getTime(),
                    coords: [location.x, location.y],
                    origin: event.target
                };
            },
            stop: function (event) {
                var data = event.originalEvent.touches ? event.originalEvent.touches[0] : event;
                var location = eventInternal.special.swipe.getLocation(data);
                return {
                    time: (new Date()).getTime(),
                    coords: [location.x, location.y]
                };
            },
            handleSwipe: function (start, stop, thisObject, origTarget) {
                var x = Math.abs(start.coords[0] - stop.coords[0]);
                var y = Math.abs(start.coords[1] - stop.coords[1]);
                var direction = '';
                if (stop.time - start.time < eventInternal.special.swipe.durationThreshold) {
                    if (x > eventInternal.special.swipe.horizontalDistanceThreshold && y < eventInternal.special.swipe.verticalDistanceThreshold) {
                        direction = start.coords[0] > stop.coords[ 0 ] ? 'swipeleft' : 'swiperight';
                    }
                    else if (y > eventInternal.special.swipe.verticalDistanceThreshold && x < eventInternal.special.swipe.horizontalDistanceThreshold) {
                        direction = start.coords[1] > stop.coords[1] ? 'swipeup' : 'swipedown';
                    }
                    if (Common.IsNotEmptyString(direction)) {
                        triggerCustomEvent(thisObject, 'swipe', Events.Event('swipe',
                            {
                                target: origTarget,
                                swipestart: start,
                                swipestop: stop
                            }
                        ), true);
                        triggerCustomEvent(thisObject, direction, Events.Event(direction,
                            {
                                target: origTarget,
                                swipestart: start,
                                swipestop: stop
                            }
                        ), true);
                        return true;
                    }
                }
                return false;
            },
            eventInProgress: false,
            setup: function () {
                var events;
                var thisObject = this;
                var context = {};
                events = Cache.Get(this, 'mobile-events');
                if (!events) {
                    events = {
                        length: 0
                    };
                    Cache.Set(this, 'mobile-events', events);
                }
                events.length++;
                events.swipe = context;
                context.start = function (event) {
                    if (eventInternal.special.swipe.eventInProgress) {
                        return;
                    }
                    eventInternal.special.swipe.eventInProgress = true;
                    var stop;
                    var start = eventInternal.special.swipe.start(event);
                    var origTarget = event.target;
                    var emitted = false;
                    context.move = function (event) {
                        if (!start) {
                            return;
                        }
                        stop = eventInternal.special.swipe.stop(event);
                        if (!emitted) {
                            emitted = eventInternal.special.swipe.handleSwipe(start, stop, thisObject, origTarget);
                            if (emitted) {
                                eventInternal.special.swipe.eventInProgress = false;
                            }
                        }
                        if (Math.abs(start.coords[0] - stop.coords[0]) > eventInternal.special.swipe.scrollSupressionThreshold) {
                            event.preventDefault();
                        }
                    };
                    context.stop = function () {
                        emitted = true;
                        eventInternal.special.swipe.eventInProgress = false;
                        Events.Off(document, touchMoveEvent, context.move);
                        context.move = null;
                    };
                    Events.On(document, touchMoveEvent, context.move);
                    Events.One(document, touchStopEvent, context.stop);
                };
                Events.On(thisObject, touchStartEvent, context.start);
            },
            teardown: function () {
                var events;
                var context;
                events = Cache.Get(this, 'mobile-events');
                if (events) {
                    context = events.swipe;
                    delete events.swipe;
                    events.length--;
                    if (events.length === 0) {
                        Cache.Remove(this, 'mobile-events');
                    }
                }
                if (context) {
                    if (context.start) {
                        Events.Off(this, touchStartEvent, context.start);
                    }
                    if (context.move) {
                        Events.Off(document, touchMoveEvent, context.move);
                    }
                    if (context.stop) {
                        Events.Off(document, touchStopEvent, context.stop);
                    }
                }
            }
        };

        var property;
        var touchEvents = {
            scrollstop: 'scrollstart',
            taphold: 'tap',
            swipeleft: 'swipe',
            swiperight: 'swipe',
            swipeup: 'swipe',
            swipedown: 'swipe'
        };
        for (property in touchEvents) {
            var value = touchEvents[property];
            (function (property, value) {
                eventInternal.special[property] = {
                    setup: function () {
                        Events.On(this, value, function () {});
                    },
                    teardown: function () {
                        Events.Off(this, value);
                    }
                };
            }(property, value));
        }

    };

    Touch.InitializeTouchToMouseEventHandling = function () {

        // Only initialize once
        if (touchToMouseInitialized) {
            return;
        }
        touchToMouseInitialized = true;

        touchToMouse = WidgetFactory.gtc.mouse.prototype;
        defaultUiMouseInit = touchToMouse._mouseInit;

        // Override default handling of these events
        touchToMouse._mouseInit = function () {

            // Delegate the touch events to element
            Events.On(this.element, 'touchstart', Common.Proxy(this, '_touchStart'));
            Events.On(this.element, 'touchmove', Common.Proxy(this, '_touchMove'));
            Events.On(this.element, 'touchend', Common.Proxy(this, '_touchEnd'));

            // Initialize mouse
            defaultUiMouseInit.call(this);

        };
        touchToMouse._touchStart = function (event) {

            // Exit if another touch to mouse event is running
            if (touchToMouseHandled || !this._mouseCapture(event.originalEvent.changedTouches[0])) {
                return;
            }
            touchToMouseHandled = true;

            // Set to false to see if it was a click attempt
            this._touchMoved = false;

            // Dispatch touch events as custom mouse events
            dispatchCustomMouseEvent(event, 'mouseover');
            dispatchCustomMouseEvent(event, 'mousemove');
            dispatchCustomMouseEvent(event, 'mousedown');

        };
        touchToMouse._touchEnd = function (event) {

            // Exit if this event should not be handled
            if (!touchToMouseHandled) {
                return;
            }

            // Dispatch touch end as custom mouse mouse events
            dispatchCustomMouseEvent(event, 'mouseup');
            dispatchCustomMouseEvent(event, 'mouseout');

            // If we never entered touch move event this will still be false so it was a click
            if (!this._touchMoved) {
                dispatchCustomMouseEvent(event, 'click');
            }
            touchToMouseHandled = false;

        };
        touchToMouse._touchMove = function (event) {

            // Exit if this event should not be handled
            if (!touchToMouseHandled) {
                return;
            }

            // If we got here is was not an attempted click
            this._touchMoved = true;

            // Dispatch touch move as custom mouse mouse event
            dispatchCustomMouseEvent(event, 'mousemove');

        };

    };

    // Private Methods
    function triggerCustomEvent (obj, eventType, event, bubble) {

        var originalType = event.type;
        event.type = eventType;
        if (bubble) {
            eventInternal.trigger(event, undefined, obj);
        }
        else {
            eventInternal.dispatch.call(obj, event);
        }
        event.type = originalType;

    };

    function dispatchCustomMouseEvent (event, eventType) {

        // Ignore multi-touch events
        if (event.originalEvent.touches.length > 1) {
            return;
        }
        event.preventDefault();

        // Get touch coordinates
        var touchData = event.originalEvent.changedTouches[0];

        // Create a custom event
        var customEvent = document.createEvent('MouseEvents');

        // Initialize and dispatch a mouse event using touch data
        customEvent.initMouseEvent(eventType, true, true, window, 1, touchData.screenX, touchData.screenY, touchData.clientX, touchData.clientY, false, false, false, false, 0, null);
        event.target.dispatchEvent(customEvent);

    };

    function getNativeEvent (event) {

        while (Common.IsDefined(event) && Common.IsDefined(event.originalEvent)) {
            event = event.originalEvent;
        }
        return event;

    };

    function createVirtualEvent (event, eventType) {

        var originalEventType = event.type;
        var eventProperty;

        // Create custom jquery event from original event
        event = Events.Event(event);
        event.type = eventType;

        // Copy original event
        var originalEvent = event.originalEvent;
        var eventProperties = props;

        // Copy event properties to new event
        if (originalEventType.search(/^(mouse|click)/) > -1) {
            eventProperties = mouseEventProps;
        }
        if (originalEvent) {
            for (loopIndex = eventProperties.length, eventProperty; loopIndex;) {
                eventProperty = eventProperties[--loopIndex];
                event[eventProperty] = originalEvent[eventProperty];
            }
        }

        // Create which if it doesnt exist
        if (originalEventType.search(/mouse(down|up)|click/) > -1 && !event.which) {
            event.which = 1;
        }

        // Copy touch properties if its a touch event
        if (originalEventType.search(/^touch/) !== -1) {
            var nativeEvent = getNativeEvent(originalEvent);
            originalEventType = nativeEvent.touches;
            var changedTouches = nativeEvent.changedTouches;
            var touch = (originalEventType && originalEventType.length) ? originalEventType[0] : ((changedTouches && changedTouches.length) ? changedTouches[0] : undefined);
            if (touch) {
                var touchPropertiesSize = touchEventProps.length;
                loopIndex = 0;
                for ( ; loopIndex < touchPropertiesSize; loopIndex++) {
                    eventProperty = touchEventProps[loopIndex];
                    event[eventProperty] = touch[eventProperty];
                }
            }
        }
        return event;

    };

    function getVirtualBindingFlags (element) {

        var flags = {};
        var elementData;
        var dataProperty;
        while (element) {
            elementData = Cache.Get(element, dataPropertyName);
            for (dataProperty in elementData) {
                if (elementData[dataProperty]) {
                    flags[dataProperty] = flags.hasVirtualBinding = true;
                }
            }
            element = element.parentNode;
        }
        return flags;

    };

    function getClosestElementWithVirtualBinding (element, eventType) {

        var elementData;
        while (element) {
            elementData = Cache.Get(element, dataPropertyName);
            if (elementData && (!eventType || elementData[eventType])) {
                return element;
            }
            element = element.parentNode;
        }
        return null;

    };

    function enableTouchBindings () {

        blockTouchTriggers = false;

    };

    function disableTouchBindings () {

        blockTouchTriggers = true;

    };

    function enableMouseBindings () {

        lastTouchID = 0;
        clickBlockList.length = 0;
        blockMouseTriggers = false;
        disableTouchBindings();

    };

    function disableMouseBindings () {

        enableTouchBindings();

    };

    function startResetTimer () {

        clearResetTimer();
        resetTimerID = setTimeout(
            function () {
                resetTimerID = 0;
                enableMouseBindings();
            }, Touch.vmouse.resetTimerDuration
        );

    };

    function clearResetTimer () {

        if (resetTimerID) {
            clearTimeout(resetTimerID);
            resetTimerID = 0;
        }

    };

    function triggerVirtualEvent (eventType, event, flags) {

        var virtualEvent;
        if ((flags && flags[eventType]) || (!flags && getClosestElementWithVirtualBinding(event.target, eventType))) {
            virtualEvent = createVirtualEvent(event, eventType);
            Events.Trigger(event.target, virtualEvent);
        }
        return virtualEvent;

    };

    function mouseEventCallback (event) {

        var touchID = Cache.Get(event.target, touchTargetPropertyName);
        var virtualEvent;
        if (!blockMouseTriggers && (!lastTouchID || lastTouchID !== touchID)) {
            virtualEvent = triggerVirtualEvent('v' + event.type, event);
            if (virtualEvent) {
                if (virtualEvent.isDefaultPrevented()) {
                    event.preventDefault();
                }
                if (virtualEvent.isPropagationStopped()) {
                    event.stopPropagation();
                }
                if (virtualEvent.isImmediatePropagationStopped()) {
                    event.stopImmediatePropagation();
                }
            }
        }

    };

    function handleTouchStart (event) {

        var touches = getNativeEvent(event).touches;
        if (touches && touches.length === 1) {
            var target = event.target;
            var flags = getVirtualBindingFlags(target);

            // If vbindings exist, set data, disable mouse and trigger virtual events
            if (flags.hasVirtualBinding) {
                lastTouchID = nextTouchID++;
                Cache.Set(target, touchTargetPropertyName, lastTouchID);
                clearResetTimer();
                disableMouseBindings();
                didScroll = false;
                var touch = getNativeEvent(event).touches[0];
                startX = touch.pageX;
                startY = touch.pageY;
                triggerVirtualEvent('vmouseover', event, flags);
                triggerVirtualEvent('vmousedown', event, flags);
            }
        }

    };

    function handleScroll (event) {

        if (blockTouchTriggers) {
            return;
        }
        if (!didScroll) {
            triggerVirtualEvent('vmousecancel', event, getVirtualBindingFlags(event.target));
        }
        didScroll = true;
        startResetTimer();

    };

    function handleTouchMove (event) {

        if (blockTouchTriggers) {
            return;
        }

        // Intialize
        var touch = getNativeEvent(event).touches[0];
        var didCancel = didScroll,
            moveThreshold = Touch.vmouse.moveDistanceThreshold,
            flags = getVirtualBindingFlags(event.target);

        // Determine if it was really scrolling and canceling is needed
        didScroll = didScroll || (Math.abs(touch.pageX - startX) > moveThreshold || Math.abs(touch.pageY - startY) > moveThreshold);
        if (didScroll && !didCancel) {
            triggerVirtualEvent('vmousecancel', event, flags);
        }
        triggerVirtualEvent('vmousemove', event, flags);
        startResetTimer();

    };

    function handleTouchEnd (event) {

        if (blockTouchTriggers) {
            return;
        }
        disableTouchBindings();
        var flags = getVirtualBindingFlags(event.target);
        triggerVirtualEvent('vmouseup', event, flags);
        if (!didScroll) {
            var virtualEvent = triggerVirtualEvent('vclick', event, flags);
            if (virtualEvent && virtualEvent.isDefaultPrevented()) {
                var touch = getNativeEvent(event).changedTouches[0];
                clickBlockList.push(
                    {
                        touchID: lastTouchID,
                        x: touch.clientX,
                        y: touch.clientY
                    }
                );
                blockMouseTriggers = true;
            }
        }
        triggerVirtualEvent('vmouseout', event, flags);
        didScroll = false;
        startResetTimer();

    };

    function hasVirtualBindings(element) {

        var bindings = Cache.Get(element, dataPropertyName);
        var bindingProperty;
        if (bindings) {
            for (bindingProperty in bindings) {
                if (bindings[bindingProperty]) {
                    return true;
                }
            }
        }
        return false;

    };

    function dummyMouseHandler() {};

    function getSpecialEventObject(eventType) {

        var realType = eventType.substr(1);
        return {
            setup: function () {
                if (!hasVirtualBindings(this)) {
                    Cache.Set(this, dataPropertyName, {});
                }
                var bindings = Cache.Get(this, dataPropertyName);
                bindings[eventType] = true;
                activeDocHandlers[eventType] = (activeDocHandlers[eventType] || 0) + 1;
                if (activeDocHandlers[eventType] === 1) {
                    Events.On(document, realType, mouseEventCallback);
                }
                Events.On(this, realType, dummyMouseHandler);
                if (eventCaptureSupported) {
                    activeDocHandlers['touchstart'] = (activeDocHandlers['touchstart'] || 0) + 1;
                    if (activeDocHandlers['touchstart'] === 1) {
                        Events.On(document, 'touchstart', handleTouchStart);
                        Events.On(document, 'touchend', handleTouchEnd);
                        Events.On(document, 'touchmove', handleTouchMove);
                        Events.On(document, 'scroll', handleScroll);
                    }
                }
            },
            teardown: function () {
                --activeDocHandlers[eventType];
                if (!activeDocHandlers[eventType]) {
                    Events.Off(document, realType, mouseEventCallback);
                }
                if (eventCaptureSupported) {
                    --activeDocHandlers['touchstart'];
                    if (!activeDocHandlers['touchstart']) {
                        Events.Off(document, 'touchstart', handleTouchStart);
                        Events.Off(document, 'touchmove', handleTouchMove);
                        Events.Off(document, 'touchend', handleTouchEnd);
                        Events.Off(document, 'scroll', handleScroll);
                    }
                }
                var bindings = Cache.Get(this, dataPropertyName);
                if (bindings) {
                    bindings[eventType] = false;
                }
                Events.Off(this, realType, dummyMouseHandler);
                if (!hasVirtualBindings(this)) {
                    Cache.Remove(this, dataPropertyName);
                }
            }
        };

    };

} (window.Touch = window.Touch || {}, window, document, Common, Cache, Events, Velocity));
// Validation Namespace
(function (Validation, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Validation.DisplayValidations = function (uiValidation, requestingElement, displayOnLoad) {

        // Set LastViewBehaviorReturnedValidations Session Variable
        Common.SetStorage("LastViewBehaviorReturnedValidations", true);

        // Remove any previous validation events
        Events.Off(document.body, 'click.validationResultEvents');

        // Validation Div: Div<>, Div</>
        var validationHtmlMarkup = '<div data-namespace="Validation" id="ValidationResultsSlideDownArea" class="gtc-validation"';
        if (displayOnLoad == true) {
            validationHtmlMarkup += ' style="display: block;"';
        }
        validationHtmlMarkup += '><div class="gtc-validation-header" id="ValidationIcon"><i class="gtc-icon-styles fa fa-warning"></i>';
        if (Common.IsNotDefined(uiValidation.Title) || Common.IsEmptyString(uiValidation.Title)) {
            uiValidation.Title = 'ValidationDetails';
        }
        validationHtmlMarkup += '&nbsp;<span data-translate="' + uiValidation.Title + '">' + Common.TranslateKey(uiValidation.Title) + '</span><i class="gtc-icon-styles fa fa-times"></i>';
        validationHtmlMarkup += '</div>';

        // Close validation click event
        Events.On(document.body, 'click.validationResultEvents.ValidationIcon', '#ValidationIcon',
            function () {
                Velocity(Common.Get('ValidationResultsSlideDownArea'), 'slideUp', 'slow',
                    function () {
                        if (Common.IsModal()) {
                            Common.ResizeView(true);
                        }
                    }
                );
            }
        );

        // Collect errors/warnings
        var errorValidations = [];
        var warningValidations = [];
        var uiValidationResult, index = 0, length = uiValidation.UiValidationResults.length;
        for ( ; index < length; index++) {
            if (uiValidation.UiValidationResults[index].IsError == 'Yes') {
                errorValidations.push(uiValidation.UiValidationResults[index]);
            }
            else {
                warningValidations.push(uiValidation.UiValidationResults[index]);
            }
        }

        // Display each error validation: Ol</>
        if (errorValidations.length > 0) {
            validationHtmlMarkup += '<div class="gtc-validation-error"><h5 data-translate="ErrorDetails">' + Common.TranslateKey('ErrorDetails') + '</h5>';
            validationHtmlMarkup += '<ol class="gtc-list-unstyled">';
            index = 0, length = errorValidations.length;
            var useMultiSelect = false;
            for ( ; index < length; index++) {
                uiValidationResult = errorValidations[index];
                validationHtmlMarkup += '<li id="' + uiValidationResult.Name + '"';
                if (uiValidationResult.IsOverridable == 'Yes') {
                    useMultiSelect = true;
                    validationHtmlMarkup += ' data-selectableid="' + uiValidationResult.ValidationResultId + '"><div data-selectablename="' + uiValidationResult.Name + '" class="gtc-validation-body">';
                    validationHtmlMarkup += '<label class="gtc-input-checkbox" for="' + uiValidationResult.Name + 'MultiSelectCheckbox"><input data-namespace="CheckboxField"';
                    if (uiValidationResult.IsOverridden == 'Yes') {
                        validationHtmlMarkup += ' value="Yes" checked="checked"';
                    }
                    else {
                        validationHtmlMarkup += ' value="No"';
                    }
                    validationHtmlMarkup += ' data-checkboxgroup="' + uiValidationResult.Name + 'Group" name="' + uiValidationResult.Name + 'MultiSelectCheckbox" tabindex="' + uiValidationResult.FocusIndex + '" class="gtc-validation-multiselect-checkbox" id="' + uiValidationResult.Name + 'MultiSelectCheckbox" type="checkbox" /></label>';
                }
                else {
                    validationHtmlMarkup += '><div data-selectablename="' + uiValidationResult.Name + '" class="gtc-validation-body">';
                }
                validationHtmlMarkup += '<span>' + (index + 1) + '.</span><span data-translate="' + uiValidationResult.Message + '">' + Common.TranslateKey(uiValidationResult.Message) + '</span>';
                if (uiValidationResult.IsOverridden == 'Yes') {
                    validationHtmlMarkup += '<span class="gtc-validations-user">&nbsp;(' + uiValidationResult.OverriddenByFirstName + ' ' + uiValidationResult.OverriddenByLastName + '&nbsp;-&nbsp;' + uiValidationResult.OverriddenBySecurityGroup + ')</span>';
                }
                validationHtmlMarkup += '</div></li>';
            }
            validationHtmlMarkup += '</ol></div>';

            // Update existing event buttons
            if (Common.AreAllDefined([requestingElement, uiValidation.EventDetailId])) {
                AddExistingEventDetailForGroup(requestingElement, uiValidation.EventDetailId);
            }
        }

        // Display each warning validation: Ol</>
        if (warningValidations.length > 0) {
            validationHtmlMarkup += '<div class="gtc-validation-warning"><h5 data-translate="WarningDetails">' + Common.TranslateKey('WarningDetails') + '</h5>';
            validationHtmlMarkup += '<ol class="gtc-list-unstyled">';
            index = 0, length = warningValidations.length;
            for ( ; index < length; index++) {
                uiValidationResult = warningValidations[index];
                validationHtmlMarkup += '<li id="' + uiValidationResult.Name + '"';
                validationHtmlMarkup += '><div class="gtc-validation-body">';
                validationHtmlMarkup += '<span>' + (index + 1) + '.</span><span data-translate="' + uiValidationResult.Message + '">' + Common.TranslateKey(uiValidationResult.Message) + '</span>';
                validationHtmlMarkup += '</div></li>';
            }
            validationHtmlMarkup += '</ol></div>';
        }

        // Close Div: Div/>
        validationHtmlMarkup += '</div>';

        // Remove current validations if they exist and show latest
        var validationSlideDown = Common.Get('ValidationResultsSlideDownArea');
        if (Common.IsDefined(validationSlideDown)) {
            HandleExistingValidations(useMultiSelect, validationHtmlMarkup);
        }
        else {
            validationSlideDown = Common.InsertHTMLString(Common.Get('PageMainContent'), Common.InsertType.Prepend, validationHtmlMarkup, 'ValidationResultsSlideDownArea');
            if (useMultiSelect && Common.IsFunction(Widgets.multiselect)) {
                Widgets.multiselect(validationSlideDown, { IsValidations: true });
                Common.SetAttr(validationSlideDown, 'data-usemultiselect', 'true');
            }
            Velocity(validationSlideDown, 'slideDown', 'slow',
                function () {
                    if (Common.IsModal()) {
                        Common.ResizeView(true);
                    }
                }
            );
        }
        SpinKit.CleanupAll();

    };

    Validation.ShowValidationsModal = function (validationData, isComplete, eventDisplayDetail) {

        // Build Modal: Div</>, Div<
        var divOverlay = '<div id="ValidationResultsModalOverlay" class="gtc-modal-overlay"></div>';
        var divModal = '<div id="ValidationResultsModal" class="gtc-modal-validation gtc-modal-small">';
        divModal += '<a class="gtc-modal-close"></a><div id="ValidationResultsModalInnerDiv" class="gtc-modal-validation-results"><h2><i class="gtc-icon-styles fa fa-warning gtc-validation-icon-error"></i><span data-translate="ErrorDetails">&nbsp;' + Common.TranslateKey('ErrorDetails') + '</span></h2>';
        divModal += '<ol class="gtc-list-unstyled">';

        // Display each validation
        var useMultiSelect = false, uiValidationResult, index = 0, length = validationData.UiValidationResults.length;
        for ( ; index < length; index++) {
            uiValidationResult = validationData.UiValidationResults[index];
            divModal += '<li id="' + uiValidationResult.Name + '"';
            if (uiValidationResult.IsOverridable == 'Yes') {
                useMultiSelect = true;
                divModal += ' data-selectableid="' + uiValidationResult.ValidationResultId + '"><div data-selectablename="' + uiValidationResult.Name + '" class="gtc-validation-body">';
                divModal += '<label class="gtc-input-checkbox" for="' + uiValidationResult.Name + 'MultiSelectCheckbox"><input data-namespace="CheckboxField"';
                if (uiValidationResult.IsOverridden == 'Yes') {
                    divModal += ' value="Yes" checked="checked"';
                }
                else {
                    divModal += ' value="No"';
                }
                divModal += ' data-checkboxgroup="' + uiValidationResult.Name + 'Group" name="' + uiValidationResult.Name + 'MultiSelectCheckbox" tabindex="' + uiValidationResult.FocusIndex + '" class="gtc-validation-multiselect-checkbox" id="' + uiValidationResult.Name + 'MultiSelectCheckbox" type="checkbox" /></label>';
            }
            else {
                divModal += '><div data-selectablename="' + uiValidationResult.Name + '" class="gtc-validation-body">';
            }
            divModal += '<span>' + (index + 1) + '.</span><span data-translate="' + uiValidationResult.Message + '">' + Common.TranslateKey(uiValidationResult.Message) + '</span>';
            if (uiValidationResult.IsOverridden == 'Yes') {
                divModal += '<span class="gtc-validations-user">&nbsp;(' + uiValidationResult.OverriddenByFirstName + ' ' + uiValidationResult.OverriddenByLastName + '&nbsp;-&nbsp;' + uiValidationResult.OverriddenBySecurityGroup + ')</span>';
            }
            divModal += '</div></li>';
        }
        divModal += '</ol>';
        divModal += '</div>';

        // Cancel Button
        divModal += '<button type="button" class="gtc-btn gtc-btn-default gtc-btn-passive" id="ValidationResultsCancelButton"><span data-translate="Cancel">' + Common.TranslateKey('Cancel') + '</span></button>';

        // Save Button
        divModal += '<button type="button" class="gtc-btn gtc-btn-default gtc-btn-active" data-namespace="Button" id="ValidationResultsOKButton"><span data-translate="OK">' + Common.TranslateKey('OK') + '</span></button>';
        divModal += '</div>';

        // Add Modal to Body
        Common.InsertHTMLString(window.parent.document.body, Common.InsertType.Append, divOverlay);
        Common.InsertHTMLString(window.parent.document.body, Common.InsertType.Append, divModal);

        // Add MultiSelect
        var validationModalDiv = Common.Get('ValidationResultsModalInnerDiv');
        if (useMultiSelect && isComplete != 'Yes' && Common.IsFunction(Widgets.multiselect)) {
            Widgets.multiselect(validationModalDiv, { IsValidations: true });
            Common.SetAttr(validationModalDiv, 'data-usemultiselect', 'true');
        }
        else if (useMultiSelect && isComplete == 'Yes') {
            var checkboxes = Common.QueryAll('.gtc-validation-multiselect-checkbox', validationModalDiv);
            Widgets.checkbox(checkboxes,
                {
                    ClassLabelCheckboxUnchecked: 'gtc-classLabelCheckboxUnchecked',
                    ClassLabelCheckboxUncheckedHover: 'gtc-classLabelCheckboxUncheckedHover',
                    ClassLabelCheckboxChecked: 'gtc-input-checkbox-selected',
                    ClassLabelCheckboxCheckedHover: 'gtc-classLabelCheckboxCheckedHover'
                }
            );
            Widgets.checkbox(checkboxes, 'DisableControl');
        }

        // Center
        var resultsModal = Common.Get('ValidationResultsModal', true);
        var resultsModalOverlay = Common.Get('ValidationResultsModalOverlay', true);
        Modals.CenterHiddenDiv(resultsModal);

        // Show Modal
        Velocity(resultsModalOverlay, { opacity: .5 }, { duration: 'slow', display: 'block' });
        Velocity(resultsModal, 'fadeIn', 'slow');

        // Handle OK Click
        var okButton = Common.Get('ValidationResultsOKButton', true);
        var onClickFunction = null;
        if (isComplete != 'Yes') {
            onClickFunction = function () {
                // OnSaveValidations Parameters
                var onSaveValidationsParameters = [
                    {
                        Name: 'OverriddenValidations',
                        Value: null,
                        UiParameters: Validation.SerializeArray(true)
                    },
                    {
                        Name: 'ExistingEventDetail',
                        Value: validationData.EventDetailId,
                        UiParameters: null
                    }
                ];
                EventDisplayDetail.OnSaveValidations(onSaveValidationsParameters, okButton, eventDisplayDetail);
            };
        }
        else {
            onClickFunction = Validation.CloseValidationsModal;
        }
        Events.On(okButton, 'click', onClickFunction);

        // Handle Close Click
        Events.On(Common.QueryAll('.gtc-modal-close, #ValidationResultsCancelButton', window.parent.document), 'click',
            function () {
                Validation.CloseValidationsModal();
            }
        );

    };

    Validation.CloseValidationsModal = function () {

        var resultsModal = Common.Get('ValidationResultsModal', true);
        var resultsModalOverlay = Common.Get('ValidationResultsModalOverlay', true);
        Velocity(resultsModal, 'fadeOut', 'slow',
            function () {
                Common.Remove(resultsModal);
            }
        );
        Velocity(resultsModalOverlay, 'fadeOut', 'slow',
            function () {
                Common.Remove(resultsModalOverlay);
            }
        );

    };

    Validation.RemoveValidations = function () {

		// Parent
		var ctx = window.parent;
        var validationSlideDownParent = ctx.Common.Get('ValidationResultsSlideDownArea');
        if (ctx.Common.IsDefined(validationSlideDownParent)) {
            // Remove any previous validation events
            ctx.Events.Off(ctx.document.body, 'click.validationResultEvents');

            // Remove any displayed validations
            ctx.Velocity(validationSlideDownParent, 'slideUp', 'slow',
                function () {
                    ctx.Common.Remove(validationSlideDownParent);
                }
            );
        }

		// Current
        var validationSlideDown = Common.Get('ValidationResultsSlideDownArea');
        if (Common.IsDefined(validationSlideDown)) {
            // Remove any previous validation events
            Events.Off(document.body, 'click.validationResultEvents');

            // Remove any displayed validations
            Velocity(validationSlideDown, 'slideUp', 'slow',
                function () {
                    Common.Remove(validationSlideDown);
                }
            );
        }

    };

    Validation.SerializeArray = function (fromValidationsModal) {

        var uiParameters = null;
        var element = null;
        if (fromValidationsModal == true) {
            element = Common.Get('ValidationResultsModalInnerDiv');
        }
        else {
            element = Common.Get('ValidationResultsSlideDownArea');
        }
        if (Common.IsDefined(element) && Common.GetAttr(element, 'data-usemultiselect') == 'true') {
            var overriddenValidations = Widgets.multiselect(element, 'GetSelected');
            uiParameters = [];
            var overriddenValidation, index = 0, length = overriddenValidations.length;
            for ( ; index < length; index++) {
                overriddenValidation = overriddenValidations[index];
                uiParameters.push(
                    {
                        Name: 'ValidationResult',
                        Value: null,
                        UiParameters: [
                            {
                                Name: 'Id',
                                Value: Common.GetAttr(overriddenValidation.parentNode, 'data-selectableid'),
                                UiParameters: null
                            }
                        ]
                    }
                );
            }
        }
        return uiParameters;

    };

    // Private Methods
    function HandleExistingValidations(useMultiSelect, validationHtmlMarkup) {

        var validationSlideDown = Common.Get('ValidationResultsSlideDownArea');
        Velocity(validationSlideDown, 'slideUp', 'slow',
            function () {
                Common.Remove(validationSlideDown);
                Common.InsertHTMLString(Common.Get('PageMainContent'), Common.InsertType.Prepend, validationHtmlMarkup);
                validationSlideDown = Common.Get('ValidationResultsSlideDownArea');
                if (useMultiSelect && Common.IsFunction(Widgets.multiselect)) {
                    Widgets.multiselect(validationSlideDown, { IsValidations: true });
                    Common.SetAttr(validationSlideDown, 'data-usemultiselect', 'true');
                }
                Velocity(validationSlideDown, 'slideDown', 'slow',
                    function () {
                        if (Common.IsModal()) {
                            Common.ResizeView(true);
                        }
                    }
                );
            }
        );

    };

    function AddExistingEventDetailForGroup (element, existingEventDetail) {

        // Sanity Checks
        var elementNamespace = Common.GetAttr(element, 'data-namespace');
        if (elementNamespace != 'EventButton') {
            return;
        }

        // Setup Ui Parameter
        var existingEventDetailParameter = [
            {
                Name: 'ExistingEventDetail',
                Value: existingEventDetail,
                UiParameters: null
            }
        ];

        // Add to Ui Parameters
        var groupName = Common.GetAttr(element, 'data-groupname');
        if (Common.IsDefined(groupName)) {
            var eventButtons = Common.QueryAll('[data-groupname="' + groupName + '"]');
            var index = 0, length = eventButtons.length;
            for ( ; index < length; index++) {
                SetUiParametersForExistingEvent(eventButtons[index], existingEventDetailParameter);
            }
        }
        else {
            SetUiParametersForExistingEvent(element, existingEventDetailParameter);
        }

    };

    function SetUiParametersForExistingEvent (button, existingEventDetailParameter) {

        var onClickEvent = Common.GetAttr(button, 'data-click');
        if (Common.IsDefined(onClickEvent)) {
            onClickEvent = JSON.parse(onClickEvent);

            // Check for existing uiParameter else add new uiParameter
            if (Common.IsDefined(onClickEvent.UiParameters)) {
                var eventExists = false, index = 0, length = onClickEvent.UiParameters.length;
                for ( ; index < length; index++) {
                    if (onClickEvent.UiParameters[index].Name == 'ExistingEventDetail') {
                        eventExists = true;
                        onClickEvent.UiParameters[index].Value = existingEventDetailParameter[0].Value;
                        break;
                    }
                }

                // Add new parameter if existing parameter was not found
                if (!eventExists) {
                    onClickEvent.UiParameters = onClickEvent.UiParameters.concat(existingEventDetailParameter);
                }
            }
            else {
                onClickEvent.UiParameters = existingEventDetailParameter;
            }

            // Set attribute
            Common.SetAttr(button, 'data-click', JSON.stringify(onClickEvent));
        }

    };

} (window.Validation = window.Validation || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class Colors
 * @classdesc Supports Color processing
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (Colors, window, document, Common, Cache, Events, Velocity, undefined) {


    /**
     * @member {string} Colors.RGBRegEx
     * @description Regular Expression for RGB color definition
     * @example 
     * // return <i>true</i> or <i>false</i>
     * new RegExp(Colors.RGBRegEx).test(color)
     */
    Colors.RGBRegEx = /rgb(a||[])\(( ||[])(\d+)( ||[]),( ||[])(\d+)( ||[]),( ||[])(\d+)( ||[])(,\d||,.\d||, \d||, .\d||[])( ||[])\)/g;

    /**
     * @member {string} Colors.HexRegEx
     * @description Regular Expression for HEX color definition
     * @example 
     * // return <i>true</i> or <i>false</i>
     * new RegExp(Colors.HexRegEx).test(color)
     */
    Colors.HexRegEx = /(#||[])([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/g;

    /**
     * @member {object} Colors.WebSafe
     * @property {string} Hex HEX color value
     * @property {string} RGB RGB color value
     * @description A list of websafe colors
     * @example 
     * // returns F0F8FF
     * Colors.WebSafe.aliceblue.Hex;
     */
    Colors.WebSafe = {
        'aliceblue': {
            'Hex': 'F0F8FF',
            'RGB': '240,248,255'
        },
        'antiquewhite': {
            'Hex': 'FAEBD7',
            'RGB': '250,235,215'
        },
        'aqua': {
            'Hex': '00FFFF',
            'RGB': '0,255,255'
        },
        'aquamarine': {
            'Hex': '7FFFD4',
            'RGB': '127,255,212'
        },
        'azure': {
            'Hex': 'F0FFFF',
            'RGB': '240,255,255'
        },
        'beige': {
            'Hex': 'F5F5DC',
            'RGB': '245,245,220'
        },
        'bisque': {
            'Hex': 'FFE4C4',
            'RGB': '255,228,196'
        },
        'black': {
            'Hex': '000000',
            'RGB': '0,0,0'
        },
        'blanchedalmond': {
            'Hex': 'FFEBCD',
            'RGB': '255,235,205'
        },
        'blue': {
            'Hex': '0000FF',
            'RGB': '0,0,255'
        },
        'blueviolet': {
            'Hex': '8A2BE2',
            'RGB': '138,43,226'
        },
        'brown': {
            'Hex': 'A52A2A',
            'RGB': '165,42,42'
        },
        'burlywood': {
            'Hex': 'DEB887',
            'RGB': '222,184,135'
        },
        'cadetblue': {
            'Hex': '5F9EA0',
            'RGB': '95,158,160'
        },
        'chartreuse': {
            'Hex': '7FFF00',
            'RGB': '127,255,0'
        },
        'chocolate': {
            'Hex': 'D2691E',
            'RGB': '210,105,30'
        },
        'coral': {
            'Hex': 'FF7F50',
            'RGB': '255,127,80'
        },
        'cornflowerblue': {
            'Hex': '6495ED',
            'RGB': '100,149,237'
        },
        'cornsilk': {
            'Hex': 'FFF8DC',
            'RGB': '255,248,220'
        },
        'crimson': {
            'Hex': 'DC143C',
            'RGB': '220,20,60'
        },
        'cyan': {
            'Hex': '00FFFF',
            'RGB': '0,255,255'
        },
        'darkblue': {
            'Hex': '00008B',
            'RGB': '0,0,139'
        },
        'darkcyan': {
            'Hex': '008B8B',
            'RGB': '0,139,139'
        },
        'darkgoldenrod': {
            'Hex': 'B8860B',
            'RGB': '184,134,11'
        },
        'darkgray': {
            'Hex': 'A9A9A9',
            'RGB': '169,169,169'
        },
        'darkgreen': {
            'Hex': '006400',
            'RGB': '0,100,0'
        },
        'darkkhaki': {
            'Hex': 'BDB76B',
            'RGB': '189,183,107'
        },
        'darkmagenta': {
            'Hex': '8B008B',
            'RGB': '139,0,139'
        },
        'darkolivegreen': {
            'Hex': '556B2F',
            'RGB': '85,107,47'
        },
        'darkorange': {
            'Hex': 'FF8C00',
            'RGB': '255,140,0'
        },
        'darkorchid': {
            'Hex': '9932CC',
            'RGB': '153,50,204'
        },
        'darkred': {
            'Hex': '8B0000',
            'RGB': '139,0,0'
        },
        'darksalmon': {
            'Hex': 'E9967A',
            'RGB': '233,150,122'
        },
        'darkseagreen': {
            'Hex': '8FBC8F',
            'RGB': '143,188,143'
        },
        'darkslateblue': {
            'Hex': '483D8B',
            'RGB': '72,61,139'
        },
        'darkslategray': {
            'Hex': '2F4F4F',
            'RGB': '47,79,79'
        },
        'darkturquoise': {
            'Hex': '00CED1',
            'RGB': '0,206,209'
        },
        'darkviolet': {
            'Hex': '9400D3',
            'RGB': '148,0,211'
        },
        'deeppink': {
            'Hex': 'FF1493',
            'RGB': '255,20,147'
        },
        'deepskyblue': {
            'Hex': '00BFFF',
            'RGB': '0,191,255'
        },
        'dimgray': {
            'Hex': '696969',
            'RGB': '105,105,105'
        },
        'dodgerblue': {
            'Hex': '1E90FF',
            'RGB': '30,144,255'
        },
        'firebrick': {
            'Hex': 'B22222',
            'RGB': '178,34,34'
        },
        'floralwhite': {
            'Hex': 'FFFAF0',
            'RGB': '255,250,240'
        },
        'forestgreen': {
            'Hex': '228B22',
            'RGB': '34,139,34'
        },
        'fuchsia': {
            'Hex': 'FF00FF',
            'RGB': '255,0,255'
        },
        'gainsboro': {
            'Hex': 'DCDCDC',
            'RGB': '220,220,220'
        },
        'ghostwhite': {
            'Hex': 'F8F8FF',
            'RGB': '248,248,255'
        },
        'gold': {
            'Hex': 'FFD700',
            'RGB': '255,215,0'
        },
        'goldenrod': {
            'Hex': 'DAA520',
            'RGB': '218,165,32'
        },
        'gray': {
            'Hex': '808080',
            'RGB': '128,128,128'
        },
        'green': {
            'Hex': '008000',
            'RGB': '0,128,0'
        },
        'greenyellow': {
            'Hex': 'ADFF2F',
            'RGB': '173,255,47'
        },
        'honeydew': {
            'Hex': 'F0FFF0',
            'RGB': '240,255,240'
        },
        'hotpink': {
            'Hex': 'FF69B4',
            'RGB': '255,105,180'
        },
        'indianred': {
            'Hex': 'CD5C5C',
            'RGB': '205,92,92'
        },
        'indigo': {
            'Hex': '4B0082',
            'RGB': '75,0,130'
        },
        'ivory': {
            'Hex': 'FFFFF0',
            'RGB': '255,255,240'
        },
        'khaki': {
            'Hex': 'F0E68C',
            'RGB': '240,230,140'
        },
        'lavender': {
            'Hex': 'E6E6FA',
            'RGB': '230,230,250'
        },
        'lavenderblush': {
            'Hex': 'FFF0F5',
            'RGB': '255,240,245'
        },
        'lawngreen': {
            'Hex': '7CFC00',
            'RGB': '124,252,0'
        },
        'lemonchiffon': {
            'Hex': 'FFFACD',
            'RGB': '255,250,205'
        },
        'lightblue': {
            'Hex': 'ADD8E6',
            'RGB': '173,216,230'
        },
        'lightcoral': {
            'Hex': 'F08080',
            'RGB': '240,128,128'
        },
        'lightcyan': {
            'Hex': 'E0FFFF',
            'RGB': '224,255,255'
        },
        'lightgoldenrodyellow': {
            'Hex': 'FAFAD2',
            'RGB': '250,250,210'
        },
        'lightgray': {
            'Hex': 'D3D3D3',
            'RGB': '211,211,211'
        },
        'lightgreen': {
            'Hex': '90EE90',
            'RGB': '144,238,144'
        },
        'lightpink': {
            'Hex': 'FFB6C1',
            'RGB': '255,182,193'
        },
        'lightsalmon': {
            'Hex': 'FFA07A',
            'RGB': '255,160,122'
        },
        'lightseagreen': {
            'Hex': '20B2AA',
            'RGB': '32,178,170'
        },
        'lightskyblue': {
            'Hex': '87CEFA',
            'RGB': '135,206,250'
        },
        'lightslategray': {
            'Hex': '778899',
            'RGB': '119,136,153'
        },
        'lightsteelblue': {
            'Hex': 'B0C4DE',
            'RGB': '176,196,222'
        },
        'lightyellow': {
            'Hex': 'FFFFE0',
            'RGB': '255,255,224'
        },
        'lime': {
            'Hex': '00FF00',
            'RGB': '0,255,0'
        },
        'limegreen': {
            'Hex': '32CD32',
            'RGB': '50,205,50'
        },
        'linen': {
            'Hex': 'FAF0E6',
            'RGB': '250,240,230'
        },
        'magenta': {
            'Hex': 'FF00FF',
            'RGB': '255,0,255'
        },
        'maroon': {
            'Hex': '800000',
            'RGB': '128,0,0'
        },
        'mediumaquamarine': {
            'Hex': '66CDAA',
            'RGB': '102,205,170'
        },
        'mediumblue': {
            'Hex': '0000CD',
            'RGB': '0,0,205'
        },
        'mediumorchid': {
            'Hex': 'BA55D3',
            'RGB': '186,85,211'
        },
        'mediumpurple': {
            'Hex': '9370DB',
            'RGB': '147,112,219'
        },
        'mediumseagreen': {
            'Hex': '3CB371',
            'RGB': '60,179,113'
        },
        'mediumslateblue': {
            'Hex': '7B68EE',
            'RGB': '123,104,238'
        },
        'mediumspringgreen': {
            'Hex': '00FA9A',
            'RGB': '0,250,154'
        },
        'mediumturquoise': {
            'Hex': '48D1CC',
            'RGB': '72,209,204'
        },
        'mediumvioletred': {
            'Hex': 'C71585',
            'RGB': '199,21,133'
        },
        'midnightblue': {
            'Hex': '191970',
            'RGB': '25,25,112'
        },
        'mintcream': {
            'Hex': 'F5FFFA',
            'RGB': '245,255,250'
        },
        'mistyrose': {
            'Hex': 'FFE4E1',
            'RGB': '255,228,225'
        },
        'moccasin': {
            'Hex': 'FFE4B5',
            'RGB': '255,228,181'
        },
        'navajowhite': {
            'Hex': 'FFDEAD',
            'RGB': '255,222,173'
        },
        'navy': {
            'Hex': '000080',
            'RGB': '0,0,128'
        },
        'oldlace': {
            'Hex': 'FDF5E6',
            'RGB': '253,245,230'
        },
        'olive': {
            'Hex': '808000',
            'RGB': '128,128,0'
        },
        'olivedrab': {
            'Hex': '6B8E23',
            'RGB': '107,142,35'
        },
        'orange': {
            'Hex': 'FFA500',
            'RGB': '255,165,0'
        },
        'orangered': {
            'Hex': 'FF4500',
            'RGB': '255,69,0'
        },
        'orchid': {
            'Hex': 'DA70D6',
            'RGB': '218,112,214'
        },
        'palegoldenrod': {
            'Hex': 'EEE8AA',
            'RGB': '238,232,170'
        },
        'palegreen': {
            'Hex': '98FB98',
            'RGB': '152,251,152'
        },
        'paleturquoise': {
            'Hex': 'AFEEEE',
            'RGB': '175,238,238'
        },
        'palevioletred': {
            'Hex': 'DB7093',
            'RGB': '219,112,147'
        },
        'papayawhip': {
            'Hex': 'FFEFD5',
            'RGB': '255,239,213'
        },
        'peachpuff': {
            'Hex': 'FFDAB9',
            'RGB': '255,218,185'
        },
        'peru': {
            'Hex': 'CD853F',
            'RGB': '205,133,63'
        },
        'pink': {
            'Hex': 'FFC0CB',
            'RGB': '255,192,203'
        },
        'plum': {
            'Hex': 'DDA0DD',
            'RGB': '221,160,221'
        },
        'powderblue': {
            'Hex': 'B0E0E6',
            'RGB': '176,224,230'
        },
        'purple': {
            'Hex': '800080',
            'RGB': '128,0,128'
        },
        'red': {
            'Hex': 'FF0000',
            'RGB': '255,0,0'
        },
        'rosybrown': {
            'Hex': 'BC8F8F',
            'RGB': '188,143,143'
        },
        'royalblue': {
            'Hex': '4169E1',
            'RGB': '65,105,225'
        },
        'saddlebrown': {
            'Hex': '8B4513',
            'RGB': '139,69,19'
        },
        'salmon': {
            'Hex': 'FA8072',
            'RGB': '250,128,114'
        },
        'sandybrown': {
            'Hex': 'F4A460',
            'RGB': '244,164,96'
        },
        'seagreen': {
            'Hex': '2E8B57',
            'RGB': '46,139,87'
        },
        'seashell': {
            'Hex': 'FFF5EE',
            'RGB': '255,245,238'
        },
        'sienna': {
            'Hex': 'A0522D',
            'RGB': '160,82,45'
        },
        'silver': {
            'Hex': 'C0C0C0',
            'RGB': '192,192,192'
        },
        'skyblue': {
            'Hex': '87CEEB',
            'RGB': '135,206,235'
        },
        'slateblue': {
            'Hex': '6A5ACD',
            'RGB': '106,90,205'
        },
        'slategray': {
            'Hex': '708090',
            'RGB': '112,128,144'
        },
        'snow': {
            'Hex': 'FFFAFA',
            'RGB': '255,250,250'
        },
        'springgreen': {
            'Hex': '00FF7F',
            'RGB': '0,255,127'
        },
        'steelblue': {
            'Hex': '4682B4',
            'RGB': '70,130,180'
        },
        'tan': {
            'Hex': 'D2B48C',
            'RGB': '210,180,140'
        },
        'teal': {
            'Hex': '008080',
            'RGB': '0,128,128'
        },
        'thistle': {
            'Hex': 'D8BFD8',
            'RGB': '216,191,216'
        },
        'tomato': {
            'Hex': 'FF6347',
            'RGB': '255,99,71'
        },
        'turquoise': {
            'Hex': '40E0D0',
            'RGB': '64,224,208'
        },
        'violet': {
            'Hex': 'EE82EE',
            'RGB': '238,130,238'
        },
        'wheat': {
            'Hex': 'F5DEB3',
            'RGB': '245,222,179'
        },
        'white': {
            'Hex': 'FFFFFF',
            'RGB': '255,255,255'
        },
        'whitesmoke': {
            'Hex': 'F5F5F5',
            'RGB': '245,245,245'
        },
        'yellow': {
            'Hex': 'FFFF00',
            'RGB': '255,255,0'
        },
        'yellowgreen': {
            'Hex': '9ACD32',
            'RGB': '154,205,50'
        }
    };

    /**
     * @function Colors.ProcessValue
     * @param {string} color - A color in any format
     * @param {boolean} hasOpacity - <i>true</i> if opacity needs to be added to the color
     * @param {number} opacity - An opacity value between 0 and 1
     * @description Converts the color parameter to safe color string
     * @returns {string} A valid color
     */
    Colors.ProcessValue = function (color, hasOpacity, opacity) {

        var processedColor;
        if (Common.IsNotDefined(color)) {
            return '';
        }
        if (Colors.IsGradient(color) === false) {
            processedColor = PrepareColor(color, hasOpacity, opacity);
        }
        else {
            var gradientValues = FindGradientValues(color);
            processedColor = [];
            processedColor.push(PrepareColor(gradientValues[0], hasOpacity, opacity));
            processedColor.push(PrepareColor(gradientValues[1], hasOpacity, opacity));
        }
        return processedColor;

    };

    /**
     * @function Colors.ChangeLuminosity
     * @param {string} color - A color in any format
     * @param {number} luminosity - Luminosity Value
     * @description Applies Luminosity to the color
     * @returns {string} A valid HEX color
     */
    Colors.ChangeLuminosity = function (color, luminosity) {

        // Default luminosity to 0 if it doesnt exist
        luminosity = luminosity || 0;

        // Convert websafe or RGB to hex, strip and validate hex or exit
        if (Common.IsDefined(Colors.WebSafe[color.trim().toLowerCase()])) {
            color = Colors.WebSafe[color.trim().toLowerCase()].Hex;
        }
        else if (new RegExp(Colors.HexRegEx).test(color)) {
            color = StripHexToBase(color);
        }
        else if (new RegExp(Colors.RGBRegEx).test(color)) {
            color = Colors.ConvertRGBToHex(color);
        }
        else {
            return color.toUpperCase();
        }

        // Extract RGB, convert to decimal, apply luminosity change and rebuild hex value
        var newColor = '', extractedPrimary, primaryIndex = 0;
        for ( ; primaryIndex < 3; primaryIndex++) {
            extractedPrimary = parseInt(color.substr(primaryIndex * 2, 2), 16);
            extractedPrimary = Math.round(Math.min(Math.max(0, extractedPrimary + (extractedPrimary * luminosity)), 255)).toString(16);
            newColor += ('00' + extractedPrimary).substr(extractedPrimary.length);
        }
        return '#' + newColor.toUpperCase();

    };

    /**
     * @function Colors.Invert
     * @param {string} color - A color in any format
     * @description Inverts the color
     * @returns {string} A valid HEX color
     */
    Colors.Invert = function (color) {

        // Get color in hex if its not
        if (Common.IsDefined(Colors.WebSafe[color.trim().toLowerCase()])) {
            color = Colors.WebSafe[color.trim().toLowerCase()].Hex;
        }
        else if (new RegExp(Colors.RGBRegEx).test(color)) {
            color = Colors.ConvertRGBToHex(color);
        }
        else {
            color = StripHexToBase(color);
        }

        // Convert to int
        color = parseInt(color, 16);

        // Invert bits
        var invertedColor = 0xFFFFFF ^ color;

        // Back to hex
        invertedColor = invertedColor.toString(16);
        invertedColor = ('000000' + invertedColor).slice(-6);
        return '#' + invertedColor.toUpperCase();

    };

    /**
     * @function Colors.ConvertHexToRGB
     * @param {string} hexColor - A color in HEX format
     * @description Converts a HEX color to a RGB color
     * @returns {string} A valid RGB color
     */
    Colors.ConvertHexToRGB = function (hexColor) {

        if (Common.IsNotDefined(hexColor)) {
            return '';
        }
        hexColor = StripHexToBase(hexColor);
        var redColor, greenColor, blueColor;
        if (hexColor.length == 6) {
            redColor = hexColor.substring(0, 2);
            greenColor = hexColor.substring(2, 4);
            blueColor = hexColor.substring(4, 6);
        }
        else {
            redColor = hexColor.substring(0, 1);
            redColor += redColor;
            greenColor = hexColor.substring(1, 2);
            greenColor += greenColor;
            blueColor = hexColor.substring(2, 3);
            blueColor += blueColor;
        }
        var rgbString = parseInt(redColor, 16) + ',' + parseInt(greenColor, 16) + ',' + parseInt(blueColor, 16);
        return rgbString;

    };

    /**
     * @function Colors.ConvertRGBToHex
     * @param {string} hexColor - A color in RGB format
     * @description Converts a RGB color to a HEX color
     * @returns {string} A valid HEX color
     */
    Colors.ConvertRGBToHex = function (rgbColor) {

        if (Common.IsNotDefined(rgbColor)) {
            return '';
        }
        rgbColor = StripRGBToBase(rgbColor);
        var rgbColorSplit = rgbColor.split(',');
        var hexValue = ((1 << 24) + (parseInt(rgbColorSplit[0]) << 16) + (parseInt(rgbColorSplit[1]) << 8) + parseInt(rgbColorSplit[2]));
        return hexValue.toString(16).slice(1).toUpperCase();

    };

    /**
     * @function Colors.IsGradient
     * @param {string} color - A color array or colors separated by : or RGB/HEX colors with gradient
     * @description Checks to see if color gradients are specified
     * @returns {boolen} <i>true</i> if color gradient is specified, <i>false</i> otherwise
     */
    Colors.IsGradient = function (color) {

        var colorFrom, colorTo, colorSplit;
        if (Common.IsNotDefined(color)) {
            return false;
        }
        else if (Common.IsArray(color) && color.length == 2) {
            colorFrom = color[0];
            colorTo = color[1];
        }
        else if (color.indexOf(':') != -1) {
            colorSplit = color.split(':');
            if (colorSplit.length != 2) {
                return false;
            }
            colorFrom = colorSplit[0];
            colorTo = colorSplit[1];
        }
        else {
            var rgbCheck = color.match(Colors.RGBRegEx);
            var hexCheck = color.match(Colors.HexRegEx);
            if (Common.IsDefined(rgbCheck) && rgbCheck.length == 2 && (Common.IsNotDefined(hexCheck) || hexCheck.length == 0)) {
                colorFrom = rgbCheck[0];
                colorTo = rgbCheck[1];
            }
            else if (Common.IsDefined(hexCheck) && hexCheck.length == 2 && (Common.IsNotDefined(rgbCheck) || rgbCheck.length == 0)) {
                colorFrom = hexCheck[0];
                colorTo = hexCheck[1];
            }
            else if (Common.AreAllDefined([rgbCheck, hexCheck]) && rgbCheck.length == 1 && hexCheck.length == 1) {
                colorFrom = rgbCheck[0];
                colorTo = hexCheck[0];
            }
            else if (color.indexOf(',') != -1) {
                colorSplit = color.split(',');
                var colorTempArray = [];
                var colorIndex = 0, colorLength = colorSplit.length;
                for ( ; colorIndex < colorLength; colorIndex++) {
                    if (Common.IsDefined(Colors.WebSafe[colorSplit[colorIndex].trim().toLowerCase()])) {
                        colorTempArray.push(colorSplit[colorIndex]);
                    }
                }
                if (colorTempArray.length == 2) {
                    colorFrom = colorSplit[0];
                    colorTo = colorSplit[1];
                }
                else if (colorTempArray.length == 1 && ((Common.IsDefined(rgbCheck) && rgbCheck.length == 1) || (Common.IsDefined(hexCheck) && hexCheck.length == 1))) {
                    colorFrom = colorTempArray[0];
                    if (Common.IsDefined(rgbCheck) && rgbCheck.length == 1) {
                        colorTo = rgbCheck[0];
                    }
                    else if (Common.IsDefined(hexCheck) && hexCheck.length == 1) {
                        colorTo = hexCheck[0];
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        var rgbGradientFrom = colorFrom.match(Colors.RGBRegEx);
        var rgbGradientTo = colorTo.match(Colors.RGBRegEx);
        var hexGradientFrom = colorFrom.match(Colors.HexRegEx);
        var hexGradientTo = colorTo.match(Colors.HexRegEx);
        var webSafeFrom = Colors.WebSafe[colorFrom.trim().toLowerCase()];
        var webSafeTo = Colors.WebSafe[colorTo.trim().toLowerCase()];
        var colorCount = 0;
        if (Common.IsDefined(rgbGradientFrom) && rgbGradientFrom.length == 1) {
            colorCount++;
        }
        if (Common.IsDefined(rgbGradientTo) && rgbGradientTo.length == 1) {
            colorCount++;
        }
        if (Common.IsDefined(hexGradientFrom) && hexGradientFrom.length == 1) {
            colorCount++;
        }
        if (Common.IsDefined(hexGradientTo) && hexGradientTo.length == 1) {
            colorCount++;
        }
        if (Common.IsDefined(webSafeFrom)) {
            colorCount++;
        }
        if (Common.IsDefined(webSafeTo)) {
            colorCount++;
        }
        if (colorCount == 2) {
            return true;
        }
        else {
            return false;
        }

    };

    /**
     * @function Colors.GenerateRandomHexColor
     * @description Generates a random HEX color
     * @returns {string} A valid HEX color
     */
    Colors.GenerateRandomHexColor = function () {

        return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);

    };

    /**
     * @function Colors.IsDarkColor
     * @description Checks if the color is a dark color
     * @returns {boolean} <true> if color is dark, <i>false</i> otherwise
     */
    Colors.IsDarkColor = function (color) {

        color = Colors.ProcessValue(color);
        if (Common.IsArray(color)) {
            // If color is a gradient only test the bottom gradient color, top shouldn't affect overlayed colors
            color = color[1];
        }
        if (new RegExp(Colors.RGBRegEx).test(color)) {
            var commaCount = (color.match(/,/g) || []).length;
            if (commaCount == 3) {
                if (commaCount == 3) {
                    opacity = color.substr(color.lastIndexOf(',') + 1).replace(' ', '').replace(')', '');
                }
                if (Common.IsNotDefined(opacity) || isNaN(opacity)) {
                    opacity = 1;
                }
                color = 'rgba(' + StripRGBToBase(color) + ',' + opacity + ')';
            }
        }
        else {
            color = Colors.ConvertHexToRGB(color);
        }
        color = RGBToArray(color);

        // Calculate luminance using coefficients based on the CIE color matching functions and the relevant chromaticities of red, green, and blue
        var luminance = Math.round(((parseInt(color[0], 10) * 299) + (parseInt(color[1], 10) * 587) + (parseInt(color[2], 10) * 114)) / 1000);

        // Was 125, but dark seems to have a larger scale than light so made it 145 to compensate
        if (luminance < 145) {
            // Check for rgba opacity, if less than .5 opacity color should always be considered light
            if (Common.IsDefined(color[3]) && parseFloat(color[3]) < .5) {
                return false;
            }
            return true;
        }
        return false;

    };

    /**
     * @function Colors.IsLightColor
     * @description Checks if the color is a light color
     * @returns {boolean} <true> if color is light, <i>false</i> otherwise
     */
    Colors.IsLightColor = function (color) {

        return !Colors.IsDarkColor(color);

    };

    /**
     * @member {object} Colors.ReturnOnly
     * @property {string} Gradient GradientOnly
     * @property {string} Solid SolidOnly
     * @description Return Type
     */
    Colors.ReturnOnly = {
        Gradient: 'GradientOnly',
        Solid: 'SolidOnly'
    };

    /**
     * @function Colors.ColorCSS
     * @description Generates the CSS markup for a color
     * @param {string} color - A color in any format
     * @param {number} gradientValue - Which gradient part - 0 or 1
     * @param {Colors.ReturnOnly} returnOnly - Gradient or Solid
     * @returns {string} CSS Markup of the color
     */
    Colors.ColorCSS = function (color, gradientValue, returnOnly) {

        var hasReturnOnly = Common.IsDefined(returnOnly);
        var styling = '';
        if (Common.IsArray(color)) {
            if (!hasReturnOnly || returnOnly == Colors.ReturnOnly.Gradient) {
                styling += 'color: ' + (color[gradientValue] || color[0]) + ';';
            }
        }
        else {
            if (!hasReturnOnly || returnOnly == Colors.ReturnOnly.Solid) {
                styling += 'color: ' + color + ';';
            }
        }
        return styling;

    };

    /**
     * @function Colors.BackgroundCSS
     * @description Generates the CSS markup for a background color
     * @param {string} color - A color in any format
     * @param {Colors.ReturnOnly} returnOnly - Gradient or Solid
     * @returns {string} CSS Markup of the background-color
     */
    Colors.BackgroundCSS = function (color, returnOnly) {

        var hasReturnOnly = Common.IsDefined(returnOnly);
        var styling = '';
        if (Common.IsArray(color)) {
            if (!hasReturnOnly || returnOnly == Colors.ReturnOnly.Gradient) {
                styling += 'background: -webkit-linear-gradient(top, ' + color[0] + ' 0%, ' + color[1] + ' 100%);';
                styling += 'background: linear-gradient(to bottom, ' + color[0] + ' 0%, ' + color[1] + ' 100%);';
            }
        }
        else {
            if (!hasReturnOnly || returnOnly == Colors.ReturnOnly.Solid) {
                styling += 'background-color: ' + color + ';';
            }
        }
        return styling;

    };

    /**
     * @function Colors.ShadowCSS
     * @description Generates the CSS markup for a shadow
     * @param {string} color - A color in any format
     * @param {string} customShadow - Shadow CSS string (can be an array)
     * @param {string} customGradientShadow - Gradient Shadow CSS string (can be an array)
     * @param {Colors.ReturnOnly} returnOnly - Gradient or Solid
     * @returns {string} CSS Markup of the box-shadow
     */
    Colors.ShadowCSS = function (color, customShadow, customGradientShadow, returnOnly) {

        var hasReturnOnly = Common.IsDefined(returnOnly);
        var styling = '';
        if (!customShadow) {
            customShadow = '0 0 10px 1px';
        }
        if (!customGradientShadow) {
            customGradientShadow = '0 0 10px 1px';
        }
        if (Common.IsArray(color)) {
            if (!hasReturnOnly || returnOnly == Colors.ReturnOnly.Gradient) {
                if (Common.IsArray(customGradientShadow)) {
                    styling += 'box-shadow: ' + customGradientShadow[0] + ' ' + color[0] + ',' + customGradientShadow[1] + color[1] + ';';
                }
                else {
                    styling += 'box-shadow: ' + customGradientShadow + ' ' + color[0] + ',' + customGradientShadow + color[1] + ';';
                }
            }
        }
        else {
            if (!hasReturnOnly || returnOnly == Colors.ReturnOnly.Solid) {
                styling += 'box-shadow: ' + customShadow + ' ' + color + ';';
            }
        }
        return styling;

    };

    /**
     * @function Colors.ShadowCSS
     * @description Generates the CSS markup for a boder color
     * @param {string} color - A color in any format
     * @param {string} direction - Direction of the shadow OPTIONAL
     * @param {Colors.ReturnOnly} returnOnly - Gradient or Solid
     * @returns {string} CSS Markup of the border-color or border-<i>direction</i>-color
     */ 
    Colors.BorderColorCSS = function (color, direction, returnOnly) {

        var hasReturnOnly = Common.IsDefined(returnOnly);
        var styling = '';
        direction = Common.IsDefined(direction) ? '-' + direction : '';
        if (Common.IsArray(color)) {
            if (!hasReturnOnly || returnOnly == Colors.ReturnOnly.Gradient) {
                styling += '-moz-border-image: -moz-linear-gradient(top, ' + color[0] + ' 0%, ' + color[1] + ' 100%);';
                styling += '-webkit-border-image: -webkit-linear-gradient(top, ' + color[0] + ' 0%, ' + color[1] + ' 100%);';
                styling += 'border-image: linear-gradient(to bottom, ' + color[0] + ' 0%, ' + color[1] + ' 100%);';
                styling += 'border-image-slice: 1;';
            }
        }
        else {
            if (!hasReturnOnly || returnOnly == Colors.ReturnOnly.Solid) {
                styling += 'border' + direction + '-color: ' + color + ';';
            }
        }
        return styling;

    };

    // Private Methods
    function PrepareColor (color, hasOpacity, opacity) {

        var processedColor = '';
        if (Common.IsDefined(Colors.WebSafe[color.trim().toLowerCase()])) {
            if (hasOpacity == true) {
                if (Common.IsNotDefined(opacity) || isNaN(opacity)) {
                    opacity = 1;
                }
                processedColor = 'rgba(' + Colors.WebSafe[color.trim().toLowerCase()].RGB + ',' + opacity + ')';
            }
            else {
                processedColor = '#' + Colors.WebSafe[color.trim().toLowerCase()].Hex;
            }
        }
        else if (new RegExp(Colors.RGBRegEx).test(color)) {
            var commaCount = (color.match(/,/g) || []).length;
            if (hasOpacity == true || commaCount == 3) {
                if (commaCount == 3) {
                    opacity = color.substr(color.lastIndexOf(',') + 1).replace(' ', '').replace(')', '');
                }
                if (Common.IsNotDefined(opacity) || isNaN(opacity)) {
                    opacity = 1;
                }
                processedColor = 'rgba(' + StripRGBToBase(color) + ',' + opacity + ')';
            }
            else {
                processedColor = '#' + Colors.ConvertRGBToHex(color);
            }
        }
        else if (new RegExp(Colors.HexRegEx).test(color)) {
            if (hasOpacity == true) {
                if (Common.IsNotDefined(opacity) || isNaN(opacity)) {
                    opacity = 1;
                }
                processedColor = 'rgba(' + Colors.ConvertHexToRGB(color) + ',' + opacity + ')';
            }
            else {
                processedColor = '#' + StripHexToBase(color);
            }
        }
        return processedColor;

    };

    // Private Methods
    function FindGradientValues (colors) {

        var gradientArray = [];
        var colorSplit, colorOne, colorTwo;
        if (Common.IsArray(colors) && colors.length == 2) {
            gradientArray.push(colors[0]);
            gradientArray.push(colors[1]);
        }
        else if (colors.indexOf(':') != -1) {
            colorSplit = colors.split(':');
            gradientArray.push(colorSplit[0]);
            gradientArray.push(colorSplit[1]);
        }
        else {
            var rgbCheck = colors.match(Colors.RGBRegEx);
            var hexCheck = colors.match(Colors.HexRegEx);
            if (Common.IsDefined(rgbCheck) && rgbCheck.length == 2) {
                gradientArray.push(rgbCheck[0]);
                gradientArray.push(rgbCheck[1]);
            }
            else if (Common.IsDefined(hexCheck) && hexCheck.length == 2) {
                gradientArray.push(hexCheck[0]);
                gradientArray.push(hexCheck[1]);
            }
            else if (Common.AreAllDefined([rgbCheck, hexCheck]) && rgbCheck.length == 1 && hexCheck.length == 1) {
                colorOne = rgbCheck[0];
                colorTwo = hexCheck[0];

                // Order matters!!
                if (colors.indexOf(colorOne) < colors.indexOf(colorTwo)) {
                    gradientArray.push(colorOne);
                    gradientArray.push(colorTwo);
                }
                else {
                    gradientArray.push(colorTwo);
                    gradientArray.push(colorOne);
                }
            }
            else if (colors.indexOf(',') != -1) {
                colorSplit = colors.split(',');
                var colorTempArray = [];
                var colorIndex = 0, colorLength = colorSplit.length;
                for ( ; colorIndex < colorLength; colorIndex++) {
                    if (Common.IsDefined(Colors.WebSafe[colorSplit[colorIndex].trim().toLowerCase()])) {
                        colorTempArray.push(colorSplit[colorIndex]);
                    }
                }
                if (colorTempArray.length == 2) {
                    gradientArray.push(colorSplit[0]);
                    gradientArray.push(colorSplit[1]);
                }
                else if (colorTempArray.length == 1 && (Common.IsDefined(rgbCheck) && rgbCheck.length == 1 || Common.IsDefined(hexCheck) && hexCheck.length == 1)) {
                    colorOne = colorTempArray[0];
                    if (Common.IsDefined(rgbCheck) && rgbCheck.length == 1) {
                        colorTwo = rgbCheck[0];
                    }
                    else if (Common.IsDefined(hexCheck) && hexCheck.length == 1) {
                        colorTwo = hexCheck[0];
                    }

                    // Order matters!!
                    if (colors.indexOf(colorOne) < colors.indexOf(colorTwo)) {
                        gradientArray.push(colorOne);
                        gradientArray.push(colorTwo);
                    }
                    else {
                        gradientArray.push(colorTwo);
                        gradientArray.push(colorOne);
                    }
                }
            }
        }
        return gradientArray;

    };

    function StripHexToBase (hexColor) {

        if (hexColor.charAt(0) == '#') {
            hexColor = hexColor.substring(1);
        }
        if (hexColor.length == 3) {
            hexColor = hexColor[0] + hexColor[0] + hexColor[1] + hexColor[1] + hexColor[2] + hexColor[2];
        }
        return hexColor.toUpperCase();

    };

    function StripRGBToBase (rgbColor) {

        rgbColor = StripRGB(rgbColor);
        var commaCount = (rgbColor.match(/,/g) || []).length;
        if (commaCount > 2) {
            var rgbColorSplit = rgbColor.split(',');
            rgbColor = rgbColorSplit[0] + ',' + rgbColorSplit[1] + ',' + rgbColorSplit[2];
        }
        return rgbColor;

    };

    function RGBToArray (rgbColor) {

        rgbColor = StripRGB(rgbColor);
        var commaCount = (rgbColor.match(/,/g) || []).length;

        // RGB or RGBA
        if (commaCount == 2 || commaCount == 3) {
            return rgbColor.split(',');
        }
        return [];

    };

    function StripRGB (rgbColor) {

        rgbColor = rgbColor.toLowerCase();
        if (rgbColor.indexOf(' ') != -1 || rgbColor.indexOf('r') != -1 || rgbColor.indexOf('g') != -1 || rgbColor.indexOf('b') != -1 || rgbColor.indexOf('a') != -1 || rgbColor.indexOf('(') != -1 || rgbColor.indexOf(')') != -1) {
            rgbColor = rgbColor.replace(' ', '').replace('r', '').replace('g', '').replace('b', '').replace('a', '').replace('(', '').replace(')', '');
        }
        return rgbColor;

    };

} (window.Colors = window.Colors || {}, window, document, Common, Cache, Events, Velocity));
// Query String
(function (QueryString, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    QueryString.Parse = function (queryString) {

        // Define return object
        var parameterObject = {};

        // Was query string passed or do we get it ourselves?
        queryString = (Common.IsDefined(queryString)) ? queryString :  window.location.search;

        // If it exists let start processing
        if (Common.IsString(queryString) && queryString.length > 0) {
            // Remove starting question mark if its there
            if (queryString[0] === '?') {
                queryString = queryString.substring(1);
            }

            // Break up parameters
            queryString = queryString.split('&');

            // Loop over each parameter and process it
            var element, index = 0, length = queryString.length;
            for ( ; index < length; index++) {
                var element = queryString[index];
                var equalPosition = element.indexOf('=');
                var keyValue, elementValue;

                // Get key and value
                if (equalPosition >= 0) {
                    keyValue = element.substr(0, equalPosition);
                    elementValue = element.substr(equalPosition + 1);
                }
                else {
                    keyValue = element;
                    elementValue = '';
                }

                // Decode
                elementValue = decodeURIComponent(elementValue);

                // Don't pass null string to server
                if (elementValue === 'null') {
                    elementValue = null;
                }

                // If we dont have it, set it, if its an existing array handle it, else create new array
                if (Common.IsNotDefined(parameterObject[keyValue])) {
                    parameterObject[keyValue] = elementValue;
                }
                else if (Common.IsArray(parameterObject[keyValue])) {
                    parameterObject[keyValue].push(elementValue);
                }
                else {
                    parameterObject[keyValue] = [parameterObject[keyValue], elementValue];
                }
            }
        }

        // Return query string object
        return parameterObject;

    };

    QueryString.GenerateOnLoad = function (pageName) {

        // Define return array and generated string
        var queryString = '', queryStringArray = [];

        // Object exists and is an object
        if (Common.IsDefined(pageName) && Common.IsNotEmptyString(pageName)) {
            var onLoadObject = JSON.parse(Common.GetStorage(pageName));

            // Loop over each parameter
            if (Common.IsArray(onLoadObject)) {
                var uiParameter, index = 0, length = onLoadObject.length;
                for ( ; index < length; index++) {
                    uiParameter = onLoadObject[index];
                    queryStringArray.push([encodeURIComponent(uiParameter.Name), encodeURIComponent(uiParameter.Value)].join('='));
                }
            }

            // Join on question mark and ampersand
            queryString = '?' + queryStringArray.join('&');
        }

        // return query string
        return queryString;

    };

    QueryString.ParametersExist = function () {

        if (Common.IsDefined(window.location.search) && Common.IsNotEmptyString(window.location.search)) {
            return true;
        }
        else {
            return false;
        }

    };

    QueryString.CreateOnLoadParameters = function (pageName) {

        if (Common.IsDefined(pageName) && Common.IsNotEmptyString(pageName)) {
            var property, uiParameters = [];
            var parameterObject = QueryString.Parse();
            for (property in parameterObject) {
                var uiParameter = {
                    Name: property,
                    Value: parameterObject[property],
                    UiParameters: null
                };
                uiParameters.push(uiParameter);
            }
            Common.SetStorage(pageName, JSON.stringify(uiParameters));
        }

    };

} (window.QueryString = window.QueryString || {}, window, document, Common, Cache, Events, Velocity));
// Header
// Based On: Header -> ContainerElement -> ViewElement
(function (Header, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Header.Render = function (header) {

        // Initialize
        var headerMarkup = '';

        // Sanity Check
        if (Common.IsNotDefined(header.ViewElements) || header.ViewElements.length <= 0) {
            return headerMarkup;
        }

        // Classes for sticky property
        var stickyClass = '';
        var stickyAttribute = '';

        // Check if Footer is sticky
        if (header.Sticky === 'Yes') {
            stickyClass = 'gtc-page-header-sticky';
            stickyAttribute = 'data-header-sticky="true"';
        }

        // Header<, TabIndex@, Class@, Id@, Header>
        headerMarkup = '<header id="PageHeader" data-namespace="Header" class="gtc-page-header ' + stickyClass + '"' + ViewElement.RenderAttributes(header) + ' ' + stickyAttribute + '>';

        // Render Container ViewElements
        headerMarkup += ContainerElement.RenderElements(header);

        // Header</>
        headerMarkup += '</header>';
        return headerMarkup;

    };

} (window.Header = window.Header || {}, window, document, Common, Cache, Events, Velocity));
// Region
// Based On: Region -> ContainerElement -> ViewElement
(function (Region, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Region.Render = function (region) {

        // Attribute for sticky property
        var stickyAttribute = '';

        // Check if region is sticky
        if (region.Sticky === 'Yes') {
            stickyAttribute = 'data-region-sticky="true"';
            Common.AddClass(document.body, 'gtc-body-removescroll');
        }

        // Determine size of region
        var regionSizeClass = "";
        switch (region.Size) {
            case "10":
                regionSizeClass = "gtc-region-10";
                break;
            case "20":
                regionSizeClass = "gtc-region-20";
                break;
            case "30":
                regionSizeClass = "gtc-region-30";
                break;
            case "40":
                regionSizeClass = "gtc-region-40";
                break;
            case "50":
                regionSizeClass = "gtc-region-50";
                break;
            default:
                regionSizeClass = "gtc-region-30";
        }

        // Div<, TabIndex@, Class@, Id@, Div>
        var regionMarkup = '<div id="Page' + region.Side + 'Region" data-namespace="Region" class="gtc-page-' + region.Side.toLowerCase() + 'region ' + regionSizeClass + '" data-side="' + region.Side + '"' + ViewElement.RenderAttributes(region) + ' ' + stickyAttribute + '>';

        // Render Container ViewElements
        regionMarkup += ContainerElement.RenderElements(region);

        // Div</>
        regionMarkup += '</div>';
        return regionMarkup;

    };

} (window.Region = window.Region || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class Content
 * @classdesc Supports the Content View Element<br>
 *            Based On: ViewElement > ContainerElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (Content, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function Content.Render
     * @param {object} content - The Content View Element in JSON format
     * @param {object} region - The Region View Element in JSON format
     * @description Generates the HTML markup for the Content View Element 
     * @returns {string} HTML Markup of the Content View Element
     */
    Content.Render = function (content, region) {

        // Classes for sticky property
        var stickyClass = '';

        // Check if Region is Sticky
        if (Common.IsDefined(region) && region.Sticky === 'Yes') {
            stickyClass = 'gtc-page-content-scrollable';
        }

        // Div<, TabIndex@, Class@, Id@, Div>
        var contentMarkup = '<div data-namespace="Content" class="gtc-page-content ' + stickyClass + '"' + ViewElement.RenderAttributes(content) + '>';

        // Render Container ViewElements
        contentMarkup += '<div id="PageMainContent" class="gtc-page-maincontent">';
        contentMarkup += ContainerElement.RenderElements(content);
        contentMarkup += '</div>';

        // Render Region
        if (Common.IsDefined(region) && Common.IsDefined(region.Side)) {
            contentMarkup += Region.Render(region);
        }

        // Add Back To Top Link
        if (!Common.IsModal()) {
            contentMarkup += BackToTop.Render();
        }

        // Div</>
        contentMarkup += '</div>';
        return contentMarkup;

    };

} (window.Content = window.Content || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class BackToTop
 * @classdesc Create the Back to Top Markup
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (BackToTop, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function BackToTop.Render
     * @description Generates the HTML markup for Back to Top
     * @returns {string} HTML Markup of the Back to Top DOM Element
     * @listens scroll (id = QuickBackToTopDiv)
     * @listens click (id = QuickBackToTopLink)
     */
    BackToTop.Render = function () {

        // Div<, Class@, Div>, Icon, Div</>
        var backToTopMarkup = '<div id="QuickBackToTopDiv" class="gtc-backtotop"><a id="QuickBackToTopLink"><i class="gtc-page-theme-color gtc-icon-styles fa fa-arrow-circle-o-up"></i></a></div>';

        // Configure
        Events.One(document.body, 'configurebacktotop',
            function () {
                var backToTop = Common.Get('QuickBackToTopDiv');
                var hasTimeout = false
                Events.On(document, 'scroll.QuickBackToTopDiv',
                    function () {
                        if (Common.QueryAll('.velocity-animating').length == 0) {
                            HandleBackToTop(backToTop);
                        }
                        else {
                            if (!hasTimeout) {
                                hasTimeout = true;
                                setTimeout(
                                    function () {
                                        HandleBackToTop(backToTop);
                                        hasTimeout = false;
                                    }, 1000
                                );
                            }
                        }
                    }
                );
                Events.On(Common.Get('QuickBackToTopLink'), 'click',
                    function () {
                        Velocity(Common.QueryAll('html'), 'scroll', 400,
                            function () {
                                Velocity(backToTop, 'transition.slideRightOut');
                            }
                        );
                    }
                );
            }
        );

        // Return
        return backToTopMarkup;

    };

    // Private Methods
    function HandleBackToTop (backToTop) {
        var isHidden = Common.IsHidden(backToTop);
        if (window.pageYOffset > 0 && isHidden) {
            Velocity(backToTop, 'transition.slideRightIn');
        }
        else if (window.pageYOffset <= 0 && !isHidden) {
            Velocity(backToTop, 'transition.slideRightOut');
        }
    };

} (window.BackToTop = window.BackToTop || {}, window, document, Common, Cache, Events, Velocity));
// Footer
// Based On: Footer -> ContainerElement -> ViewElement
(function (Footer, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Footer.Render = function (footer) {

        // Initialize
        var footerMarkup = '';

        // Classes for sticky property
        var stickyClass = '';
        var stickyAttribute = '';

        // Check if Footer is sticky
        if (footer.Sticky === 'Yes') {
            stickyClass = 'gtc-page-footer-sticky';
            stickyAttribute = 'data-footer-sticky="true"';
        }

        // Sanity Check
        if (Common.IsNotDefined(footer.ViewElements) || footer.ViewElements.length <= 0) {
            return footerMarkup;
        }

        // Footer<, TabIndex@, Class@, Id@, Div>
        footerMarkup = '<footer id="PageFooter" data-namespace="Footer" class="gtc-page-footer ' + stickyClass + '"' + ViewElement.RenderAttributes(footer) + ' ' + stickyAttribute + '>';

        // Render Container ViewElements
        footerMarkup += ContainerElement.RenderElements(footer);

        // Footer</>
        footerMarkup += '<div class="gtc-page-footer-border gtc-page-theme-border-bottom"></div></footer>';
        return footerMarkup;

    };

} (window.Footer = window.Footer || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class ContainerElement
 * @classdesc Supports the ContainerElement View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (ContainerElement, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function ContainerElement.RenderElements
     * @param {object} containerElement - The ContainerElement View Element in JSON format
     * @param {boolean} disableGridding - Disable Flexbox griding? 
     * @param {boolean} isElementPack - Is this ContainerElement an ElementPack?
     * @param {boolean} isDisplayArea - Is this ContainerElement a DisplayArea?
     * @description Generates the HTML markup for a Container View Element 
     * @returns {string} HTML Markup of the Container View Element
     */
    ContainerElement.RenderElements = function (containerElement, disableGridding, isElementPack, isDisplayArea) {

        // Intitialize
        var containerElementMarkup = '';

        // Do view elements exist?
        if (Common.IsDefined(containerElement.ViewElements)) {

            // Initialize variables for responsive grids
            var currentGridStartingIndex, calculatedGrid, currentIterationMarkup, currentGridType;
            var inGridIteration = false;

            // Iterate over view elements
            var viewElement, viewElementIndex = 0, length = containerElement.ViewElements.length;
            for ( ; viewElementIndex < length; viewElementIndex++) {
                viewElement = containerElement.ViewElements[viewElementIndex];

                // If not in grid iteration reset markup, cache current index, find number of contiguous same typed elements
                if (!inGridIteration) {
                    inGridIteration = true;
                    currentIterationMarkup = '';
                    currentGridStartingIndex = viewElementIndex;

                    // If DisplayArea, grid in line regardless of type else grid by same types
                    if (isDisplayArea == true) {
                        currentGridType = containerElement.Type.toLowerCase() + '-children';
                        calculatedGrid = length;
                    }
                    else {
                        currentGridType = viewElement.Type.toLowerCase();
                        calculatedGrid = CalculateGridSize(containerElement.ViewElements.slice(currentGridStartingIndex), viewElement.Type);
                    }
                }

                // Set element pack children to have same display as element pack (if hidden)
                if (isElementPack == true && containerElement.IsDisplayed == 'No') {
                    viewElement.IsDisplayed = 'No';
                }

                // Get view element namespace and check for existing render
                var viewElementNamespace = window[viewElement.Type];
                ViewElement.TestExists(viewElement.Type, viewElementNamespace);

                // Render Element
                currentIterationMarkup += viewElementNamespace.Render(viewElement);

                // Check if we need to start a new container
                if (inGridIteration && viewElementIndex == currentGridStartingIndex + calculatedGrid - 1) {
                    // Do not wrap an ElementPack base object with grid or when gridding disabled
                    if (viewElement.Type != 'ElementPack' && disableGridding != true) {
                        currentIterationMarkup = '<section class="gtc-grid-container gtc-grid-items-' + calculatedGrid + ' gtc-type-' + currentGridType + '">' + currentIterationMarkup + '</section>';
                    }
                    containerElementMarkup += currentIterationMarkup;
                    inGridIteration = false;
                }
            }

            // Fallback to not lose any generated code
            if (Common.IsEmptyString(containerElementMarkup) && Common.IsDefined(currentIterationMarkup) && Common.IsNotEmptyString(currentIterationMarkup)) {
                containerElementMarkup += currentIterationMarkup;
            }
        }

        // Return markup
        return containerElementMarkup;

    };

    // Private Methods
    function CalculateGridSize (viewElements, viewElementType) {

        // Initialize
        var gridSize = 0;

        // Iterate over items
        var index = 0, length = viewElements.length;
        for ( ; index < length; index++) {
            // Only include matching types in dynamic gridding, new element type starts new grid container
            if (viewElements[index].Type == viewElementType) {
                gridSize++;
            }
            else {
                break;
            }
        }
        return gridSize;

    };

} (window.ContainerElement = window.ContainerElement || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class ElementPack
 * @classdesc Supports the ElementPack View Element<br>
 *            Based On: ViewElement > ContainerElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (ElementPack, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function ElementPack.Render
     * @param {object} elementPack - The ElementPack View Element in JSON format
     * @description Generates the HTML markup for the ElementPack View Element 
     * @returns {string} HTML Markup of the ElementPack View Element
     */
    ElementPack.Render = function (elementPack) {

        var elementPackMarkup = '';
        if (Common.IsDefined(elementPack.ViewElements)) {
            elementPackMarkup += ContainerElement.RenderElements(elementPack, false, true);
        }
        return elementPackMarkup;

    };

} (window.ElementPack = window.ElementPack || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class AppBar
 * @classdesc Supports the AppBar View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (AppBar, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function AppBar.Render
     * @param {object} appBar - The AppBar View Element in JSON format
     * @description Generates the HTML markup for the AppBar View Element 
     * @returns {string} HTML Markup of the AppBar View Element
     * @listens configureappbars (id = <var>appBarName</var>-userprofile)
     * @listens click (id = <var>appBarName</var>-userprofile)
     */
    AppBar.Render = function (appBar) {

        var appBarMarkup = '';
        var extraClassing = '';

        // Check for Background Color and add style
        if (Common.IsDefined(appBar.BackgroundColor)) {
            // Add element specific class name
            extraClassing += ' gtc-appbar-backgroundcolor-' + appBar.Name;

            // Is custom background light or dark color?
            extraClassing += Colors.IsDarkColor(appBar.BackgroundColor) ? ' gtc-theme-dark' : ' gtc-theme-light';

            // Generate color and styling
            var backgroundColor = Colors.ProcessValue(appBar.BackgroundColor, false, null);
            var backgroundCSS = Colors.BackgroundCSS(backgroundColor);
            appBarMarkup += '<style>';
            appBarMarkup += ' .gtc-appbar-backgroundcolor-' + appBar.Name + ' { ';
            appBarMarkup += backgroundCSS;
            appBarMarkup += ' }';
            appBarMarkup += '</style>';
        }

        // Div<, Class@, Div>
        appBarMarkup += '<div class="gtc-appbar' + extraClassing + '" data-namespace="AppBar" data-configure="Pre"' + ViewElement.RenderAttributes(appBar) + '>';

        // Div<, Class@, Div>
        appBarMarkup += '<div class="gtc-appbar-body' + extraClassing + '">';

        // Check for Slide Panel and Render
        if (Common.IsDefined(appBar.SlidePanel)) {
            // Div<, Class@, Div>
            appBarMarkup += '<div class="gtc-appbar-toggle">';

            // Define Slide Panel Button
            var sidePanelButton = {
                FocusIndex: appBar.FocusIndex,
                Icon: {
                    Name: appBar.SlidePanel.Name + 'MenuLinkIcon',
                    Symbol: 'fa-bars',
                    Type: 'Icon'
                },
                Name: appBar.SlidePanel.Name + 'MenuLink',
                Title: null,
                Type: 'Button'
            };
            appBarMarkup += Button.Render(sidePanelButton);

            // Div</>
            appBarMarkup += '</div>';

            // Render Side Panel Itself
            SlidePanel.Render(appBar.SlidePanel, true);
        }

        // Check for Image Link and Render
        if (Common.IsDefined(appBar.ImageLink)) {
            // Div<, Class@, Div>
            appBarMarkup += '<div class="gtc-appbar-logo">';
            appBarMarkup += ImageLink.Render(appBar.ImageLink);

            // Div</>
            appBarMarkup += '</div>';
        }

        // Check for Search Tool and Render
        if (Common.IsDefined(appBar.SearchTool)) {
            // Div<, Class@, Div>
            appBarMarkup += '<div class="gtc-appbar-search">';
            appBarMarkup += SearchTool.Render(appBar.SearchTool);

            // Div</>
            appBarMarkup += '</div>';
        }

        // Check for Links and Render
        if (Common.IsDefined(appBar.Links) && appBar.Links.length > 0) {
            // Div<, Class@, Div>
            appBarMarkup += '<div class="gtc-appbar-actions" id="' + appBar.Name + 'Links">';
            var i = 0;
            for (; i < appBar.Links.length; i++) {
                appBarMarkup += Link.Render(appBar.Links[i]);
            }

            // Div</>
            appBarMarkup += '</div>';
        }

        // Check for User Information
        if (Common.IsDefined(appBar.UserProfileIsDisplayed) && (appBar.UserProfileIsDisplayed == 'Yes')) {
            // Div<, Class@, Id@, Div>
            appBarMarkup += '<div class="gtc-userprofile" id="' + appBar.Name + '-userprofile">';

            // Button<, Class@, Button>
            appBarMarkup += '<button class="gtc-userprofile-button">';

            // Add User Information to Markup
            if (Common.IsDefined(appBar.UserInformation) && appBar.UserInformation.IsDisplayed == 'Yes') {
                appBarMarkup += HtmlText.Render(appBar.UserInformation);
            }

            // Render User Picture Image
            if (Common.IsDefined(appBar.UserPictureThumbnail)) {
                appBarMarkup += Image.Render(appBar.UserPictureThumbnail);
            }
            else {
                var bodyGroupForThumbnail = Common.GetAttr(document.body, 'data-group');
                var thumbnailSource = bodyGroupForThumbnail + ':Common:Profile_Thumbnail.png'
                appBarMarkup += Image.Render(
						{ Dimension: null,
						    FocusIndex: 0,
						    IsDisplayed: null,
						    IsResponsive: 'No',
						    Name: null,
						    Source: thumbnailSource,
						    Title: null,
						    Type: 'Image'
						});
            }

            // Button</>
            appBarMarkup += '</button>';

            // Wire Click Event for nav menu
            Events.One(document.body, 'configureappbars', '#' + appBar.Name + '-userprofile',
                function () {
                    Events.On(this, 'click',
                        function () {
                            var clickedPanel = Common.Query('#' + appBar.Name + '-menu', this);
                            if (Common.HasClass(clickedPanel, 'gtc-userprofile-menu--is-open')) {
                                Common.RemoveClass(clickedPanel, 'gtc-userprofile-menu--is-open');
                            }
                            else {
                                // Check to see if another appbar's profile is on the page and open
                                var currentlyOpenPanel = Common.Query('.gtc-userprofile-menu--is-open');
                                if (Common.IsDefined(currentlyOpenPanel)) {
                                    Common.RemoveClass(currentlyOpenPanel, 'gtc-userprofile-menu--is-open');
                                }
                                Common.AddClass(clickedPanel, 'gtc-userprofile-menu--is-open');
                            }
                        }
                    );
                }
            );

            // Nav<, Class@, Id@, Nav>
            appBarMarkup += '<nav class="gtc-userprofile-menu" id="' + appBar.Name + '-menu">';

            // Check if `UserPicture`, `UserInfo`, or `UserRole` is defined
            // `UserInfo` and `UserRole` checks if string is defined, Graphite GTC defines it to `true` otherwise
            // If true to any, build account markup
            if (Common.IsDefined(appBar.UserPicture) || Common.IsDefined(appBar.UserInformation) || Common.IsDefined(appBar.UserRole)) {
                // Div<, Class@, Div>
                appBarMarkup += '<div class="gtc-userprofile-account">';

                // Img<, Class@, Render Image, Img</>
                if (Common.IsDefined(appBar.UserPicture)) {
                    appBarMarkup += Image.Render(appBar.UserPicture);
                }
                else {
                    var bodyGroupForProfile = Common.GetAttr(document.body, 'data-group');
                    var profileSource = bodyGroupForProfile + ':Common:Profile_Picture.png'
                    appBarMarkup += Image.Render(
						{ Dimension: null,
						    FocusIndex: 0,
						    IsDisplayed: null,
						    IsResponsive: 'No',
						    Name: null,
						    Source: profileSource,
						    Title: null,
						    Type: 'Image'
						});
                }

                // Check if either `UserInfo` or `UserRole` have a value
                // Build `AccountInfo` markup
                if (Common.IsDefined(appBar.UserInformation) || Common.IsDefined(appBar.UserRole)) {
                    // Div<, Class@, Div>
                    appBarMarkup += '<div class="gtc-userprofile-account-info">';

                    // User Information
                    // Checks for `UserInfo` value and if it's displayed
                    if (Common.IsDefined(appBar.UserInformation) && appBar.UserInformation.IsDisplayed == 'Yes') {
                        appBarMarkup += '<span class="gtc-userprofile-name">';
                        appBarMarkup += HtmlText.Render(appBar.UserInformation);
                        appBarMarkup += '</span>';
                    }

                    // User Role
                    // Checks for `UserRole` value and if it's displayed
                    if (Common.IsDefined(appBar.UserRole) && appBar.UserRole.IsDisplayed == 'Yes') {
                        appBarMarkup += '<span class="gtc-userprofile-role">';
                        appBarMarkup += HtmlText.Render(appBar.UserRole);
                        appBarMarkup += '</span>';
                    }

                    // Div</>
                    appBarMarkup += '</div>';
                }

                // Div</>
                appBarMarkup += '</div>';
            }

            // Check for Navigation links and Render them
            if (Common.IsDefined(appBar.UserProfileLinks) && (appBar.UserProfileLinks.length > 0)) {
                // Div<, Class@, Div>
                appBarMarkup += '<div class="gtc-userprofile-menu-items">';
                var i = 0;
                for (; i < appBar.UserProfileLinks.length; i++) {
                    appBarMarkup += Link.Render(appBar.UserProfileLinks[i]);
                }

                // Div</>
                appBarMarkup += '</div>';
            }

            // Div<, Class@, Div>
            appBarMarkup += '<div class="gtc-userprofile-menu-items-common">';

            // 508 Compliance
            if (Common.IsDefined(appBar.Logoff)) {
                if (Common.IsNotDefined(appBar.Logoff.Title)) {
                    appBar.Logoff.Title = 'Logoff';
                    appBar.Logoff.ScreenReaderOnly = true;
                }
            }
            if (Common.IsDefined(appBar.Settings)) {
                if (Common.IsNotDefined(appBar.Settings.Title)) {
                    appBar.Settings.Title = 'Settings';
                    appBar.Settings.ScreenReaderOnly = true;
                }
            }
            if (Common.IsDefined(appBar.Help)) {
                if (Common.IsNotDefined(appBar.Help.Title)) {
                    appBar.Help.Title = 'Help';
                    appBar.Help.ScreenReaderOnly = true;
                }
            }

            // Logoff Hyperlink
            if (Common.IsDefined(appBar.Logoff.Navigation)) {
                appBarMarkup += Hyperlink.Render(appBar.Logoff);
            }

            // Settings Hyperlink
            if (Common.IsDefined(appBar.Settings.IsDisplayed) && appBar.Settings.IsDisplayed == 'Yes') {
                appBarMarkup += ModalLink.Render(appBar.Settings);
            }

            // Help Hyperlink
            if (Common.IsDefined(appBar.Help.IsDisplayed) && appBar.Help.IsDisplayed == 'Yes') {
                appBarMarkup += Hyperlink.Render(appBar.Help);
            }

            // Div</>, Nav</>, Div</>
            appBarMarkup += '</div></nav></div>';
        }

        // Div</>, Div</>
        appBarMarkup += '</div></div>';

        return appBarMarkup;
    };

    /**
     * @function AppBar.Configure
     * @param {object} appBar - The AppBar DOM element
     * @description Configures the AppBar View Element
     * @fires configureappbars (id = <i>appBarName</i>-userprofile)
     */
    AppBar.Configure = function (appBar, configureStage) {

        var userProfile = Common.Query('.gtc-userprofile', appBar);
        if (Common.IsDefined(userProfile)) {
            Events.Trigger(userProfile, 'configureappbars');
        }

    };

} (window.AppBar = window.AppBar || {}, window, document, Common, Cache, Events, Velocity));
// ImageLink
// Based On: ImageLink -> Hyperlink -> Link -> ViewElement
(function (ImageLink, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    ImageLink.Render = function (imageLink) {

        var className = '';
        if (Common.IsDefined(imageLink.Tooltip)) {
            className = ' gtc-tooltip gtc-link-tooltip';
        }

        // Form to send?
        var formToSend = '';
        if (Common.IsDefined(imageLink.FormToSerialize)) {
            formToSend = ' data-formtoserialize="' + imageLink.FormToSerialize + '"';
        }

        // Anchor<, TabIndex@, Class@, Id@, Href@, Data-OnLoad@
        var imageLinkMarkup = '<a data-namespace="ImageLink"' + formToSend + ' class="gtc-link gtc-img-link' + className + '"' + ViewElement.RenderAttributes(imageLink) + Navigation.RenderAttributes(imageLink.Navigation);

        // Data-Translate@, Data-Tooltip@
        if (Common.IsDefined(imageLink.Tooltip)) {
            imageLinkMarkup += ' data-translate="[data-tooltip]' + imageLink.Tooltip + '"';
            imageLinkMarkup += ' data-tooltip="' + Common.TranslateKey(imageLink.Tooltip) + '"';
        }

        // Target@
        if (Common.IsDefined(imageLink.Target)) {
            imageLinkMarkup += ' target="' + imageLink.Target + '"';
        }

        // Anchor>
        imageLinkMarkup += '>';

        // Alt@ and Title
        if (Common.IsNotDefined(imageLink.Title)) {
            // 508 Compliance
            imageLink.Title = imageLink.Name;
        }

        // Build image or add title when no image source
        if (Common.IsDefined(imageLink.ImageSource)) {
            Page.Images++;
            var source = Common.BuildResourcePath(imageLink.ImageSource);
            imageLinkMarkup += '<img id="' + imageLink.Name + 'Image"';
            imageLinkMarkup += ' alt="' + Common.TranslateKey(imageLink.Title) + '"';
            imageLinkMarkup += ' data-translate="[alt]' + imageLink.Title + '"';

            // Image dimension
            if (Common.IsDefined(imageLink.Dimension)) {
                if (Common.IsDefined(imageLink.Dimension.Height)) {
                    imageLinkMarkup += ' height="' + imageLink.Dimension.Height + '"';
                }
                if (Common.IsDefined(imageLink.Dimension.Width)) {
                    imageLinkMarkup += ' width="' + imageLink.Dimension.Width + '"';
                }
            }
            imageLinkMarkup += ' />';

            // Onload images to properly calculate height
            Events.One(document.body, 'configureimages',
                function () {
                    var image = Common.Get(imageLink.Name + 'Image');
                    Events.On(image, 'load',
                        function () {
                            Page.LoadedImages++;
                            if (Page.Images == Page.LoadedImages) {
                                Page.SetPageHeight();
                            }
                        }
                    );
                    image.src = source;
                }
            );
        }
        else {
            // Title
            imageLinkMarkup += '<span';

            // Translations
            imageLinkMarkup += ' data-translate="' + imageLink.Title + '"';

            // Title</>
            imageLinkMarkup += '>' + Common.TranslateKey(imageLink.Title) + '</span>';
        }

        // Wire Click!
        Link.WireClick(imageLink);

        // Anchor</>
        imageLinkMarkup += '</a>';

        // Return markup
        return imageLinkMarkup;

    };

} (window.ImageLink = window.ImageLink || {}, window, document, Common, Cache, Events, Velocity));
// Link
// Based On: Link -> ViewElement
(function (Link, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Link.Render = function (link) {

        var linkNameSpace = window[link.Type];
        ViewElement.TestExists(link.Type, linkNameSpace);
        return linkNameSpace.Render(link);

    };

    Link.WireClick = function(link, subSelector) {

        // Sanity Check
        if (Common.IsNotDefined(subSelector)) {
            subSelector = '';
        }

        // Sanity Check
        if (Common.IsNotDefined(link.Name) || link.Name.length <= 0) {
            if (Common.IsDefined(window.console)) {
                console.log('Warning[' + link.Type + ' - ' + link.Title + ']: Must provide the Name attribute to wire an default action');
            }
        }
        else {
            // Wire Click!
            var eventTrigger = 'click';
            if (Common.CheckMedia('Mobile') || Common.CheckMedia('Tablet')) {
                Touch.InitializeTouchEvents();
                eventTrigger = 'tap';
            }
            Events.On(document.body, eventTrigger + '.' + link.Name, '#' + link.Name + subSelector,
                function (event) {
                    event.preventDefault();
                    var that = this;
                    Common.SetOnLoadEvent(that, false, false);
                    var linkTarget = Common.GetAttr(that, 'target');
                    var linkRef = Common.GetAttr(that, 'href');
                    if (linkTarget == '_blank') {
                        var newWindow = window.open(linkRef, linkTarget);
                    }
                    else {
                        Events.One(document, 'showPinwheelComplete',
                            function () {
                                document.location = linkRef;
                            }
                        );
                        Common.ShowPinwheel(null, true);
                    }
                }
            );
        }

    };

    // Common function used by most elements that inherit from link
    Link.UpdateTitle = function (link, newTitle, promises, context) {

        // Get deferred object for animation
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Initialize
        var onParent = context == 'Parent';
        var title = Common.Get(link.id + 'Title', onParent);
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(newTitle);
            Common.SetAttr(title, 'data-translate', newTitle);
            Common.SetAttr(title, 'alt', newTitle);
        };
        if (Common.IsHidden(link)) {
            updateTitleFunction();
            animationPromise.resolve();
        }
        else {
            // Animate
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    // Common function used by most elements that inherit from link
    Link.Enable = function (link) {

        Common.RemoveClass(link, 'gtc-btn--is-disabled');

    };

    // Common function used by most elements that inherit from link
    Link.Disable = function (link) {

        Common.AddClass(link, 'gtc-btn--is-disabled');

    };

    // Common function used by most elements that inherit from link
    Link.RenderAttributes = function (link) {

        // Initialize
        var linkMarkup = '';
        var translationAttribute = '';

        // Tooltip
        if (Common.IsDefined(link.Tooltip)) {
            translationAttribute += '[data-tooltip]' + link.Tooltip + ';';
            linkMarkup += ' data-tooltip="' + Common.TranslateKey(link.Tooltip) + '"';
        }

        // 508 Compliance
        if (Common.IsDefined(link.Title)) {
            translationAttribute += '[alt]' + link.Title + ';';
            linkMarkup += ' alt="' + Common.TranslateKey(link.Title) + '"';
        }

        // Translations
        if (Common.IsNotEmptyString(translationAttribute)) {
            linkMarkup += ' data-translate="' + translationAttribute + '"';
        }
        return linkMarkup;

    };

    // Common function used by most elements that inherit from button
    Link.RenderClassing = function (link, type) {

        // var className = 'gtc-link';
        var className = 'gtc-' + type;
        if (Common.IsDefined(link.Type)) {
            className += ' gtc-' + type + '-' + link.Type.toLowerCase();
        }
        if (Common.IsDefined(link.ButtonStyle)) {
            className += ' gtc-btn--' + link.ButtonStyle.toLowerCase();
        }
        if (Common.IsDefined(link.ButtonStyle) && Common.IsDefined(link.ButtonType)) {
            className += ' gtc-btn--' + link.ButtonStyle.toLowerCase() + '-' + link.ButtonType.toLowerCase();
        }
        if (Common.IsDefined(link.Size)) {
            className += ' gtc-btn--size-' + link.Size.toLowerCase();
        }
        if (link.IsPill == 'Yes') {
            className += ' gtc-btn--pill';
        }
        if (link.FullWidth == 'Yes') {
            className += ' gtc-btn--size-block';
        }
        if (link.IsWide == 'Yes') {
            className += ' gtc-btn--size-wide';
        }
        if (link.IsDisabled == 'Yes') {
            className += ' gtc-btn--is-disabled';
        }
        if (Common.IsDefined(link.Tooltip)) {
            className += ' gtc-tooltip gtc-link-tooltip';
        }
        return className;

    };

    // Common function used by most elements that inherit from link
    Link.RenderTitle = function (link, type) {

        var linkMarkup = '';
        var linkTitleClass = ' class="gtc-' + type + '-title';
        if (link.ScreenReaderOnly == true) {
            linkTitleClass += ' gtc-sr-only';
        }
        linkTitleClass += '"';
        linkMarkup = '<span id="' + link.Name + 'Title"' + linkTitleClass + ' data-translate="' + link.Title + '">' + Common.TranslateKey(link.Title) + '</span>';
        return linkMarkup;

    };

} (window.Link = window.Link || {}, window, document, Common, Cache, Events, Velocity));
// SearchTool
// Based On: SearchTool -> PlaceholderField -> ValueField -> Field -> ViewElement
(function (SearchTool, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    SearchTool.Render = function (searchTool) {

        // Save/Swap for later
        var searchToolName = searchTool.Name;
        var searchToolOnClick = searchTool.OnChange;
        if (Common.IsEventViewElementDefined(searchToolOnClick)) {
            searchToolOnClick.FormToSerialize = 'Form' + searchToolName;
        }
        searchTool.OnChange = null;

        // Form<, TabIndex@, Class@, Id@, Form>
        searchTool.Name = 'Form' + searchToolName;
        var searchToolMarkup = '<form data-namespace="SearchTool" class="gtc-searchtool"' + ViewElement.RenderAttributes(searchTool) + '>';

        // Display Advanced?
        if (searchTool.IsAdvancedDisplayed == 'Yes') {
            // Advanced Hyperlink: Anchor<, TabIndex@, Id@, Anchor>
            var advancedHyperlink = {
                Name: 'AnchorAdvanced' + searchToolName,
                Navigation: searchTool.AdvancedNavigation,
                Icon: {
                    Symbol: 'fa-cog',
                    Color: '999999',
                    Size: 15
                },
                ScreenReaderOnly: true,
                Title: 'AdvancedSearch'
            };
            searchToolMarkup += Hyperlink.Render(advancedHyperlink);
        }

        Events.On(document.body, 'mouseenter.AnchorAdvanced' + searchToolName, '#AnchorAdvanced' + searchToolName,
            function () {
                Common.AddClass(Common.Query('i', this), 'fa-spin');
            }
        );
        Events.On(document.body, 'mouseleave.AnchorAdvanced' + searchToolName, '#AnchorAdvanced' + searchToolName,
            function () {
                Common.RemoveClass(Common.Query('i', this), 'fa-spin');
            }
        );

        // Render Search TextField
        searchTool.Name = searchToolName;
        searchToolMarkup += TextField.Render(searchTool);

        // Search Button: Anchor<, TabIndex@, Class@, Id@, Anchor>
        var searchButton = {
            Name: 'AnchorSearch' + searchToolName,
            OnClick: searchToolOnClick,
            Icon: {
                Symbol: 'fa-search',
                Color: '999999',
                Size: 15
            },
            ScreenReaderOnly: true,
            Title: 'Search'
        };

        // Attach "Enter" Key
        if (searchTool.SubmitWithEnterKey == "Yes") {
            Events.On(document.body, 'keyup.' + searchToolName,
                function (event) {
                    var pressedKeyCode = (event.keyCode ? event.keyCode : event.which);
                    if (pressedKeyCode == "13") {
                        if (SearchTool.IsInContext()) {
                            if (Common.GetAttr(event.target, "data-namespace") == "TextField") {
                                if (document.activeElement.name == searchToolName) {
                                    var element = Common.Get('AnchorSearch' + searchToolName);
                                    Events.Trigger(element, 'click');
                                }
                            }
                        }
                    }
                }
            );
        }

        // Render "Search" Button
        searchToolMarkup += Button.Render(searchButton);

        // HTML 2.0 specification (Section 8.2):
        // When there is only one single-line text input field in a form,
        // the user agent should accept Enter in that field as a request to submit the form.
        // ------------------------------------------
        // This extra hidden (from screen readers too) field will stop the above from happening.
        searchToolMarkup += '<input class="gtc-hide" id="GTC' + Common.GenerateUniqueID() + '" type="text" />';

        // Form</>
        searchToolMarkup += '</form>';
        searchTool.Name = searchToolName;
        return searchToolMarkup;

    };

    SearchTool.IsInContext = function () {

        var searchForm = Common.Closest("form", document.activeElement);
        if (Common.IsNotDefined(searchForm)) {
            return false;
        }
        var namespace = Common.GetAttr(searchForm, "data-namespace");
        if (namespace == "SearchTool") {
            return true;
        }
        return false;

    };

} (window.SearchTool = window.SearchTool || {}, window, document, Common, Cache, Events, Velocity));
// Text Field
// Based On: TextField -> MaskField -> PlaceholderField -> ValueField -> Field -> ViewElement
(function (TextField, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    TextField.Render = function (textField) {

        // Label Exists (needed for Icon rendering)
        var labelExists = true;
        if (Common.IsNotDefined(textField.Label)) {
            labelExists = false;
        }

        // Label
        var textFieldMarkup = Field.RenderLabel(textField);

        // input<, Data-Mask@, Placeholder@, Name@, Value@, @Data-Serializable, TabIndex@, Class@, Id@, Data-Disabled@
        textFieldMarkup += '<input class="gtc-input-textbox';
        if (Common.IsDefined(textField.Icon)) {
            if (labelExists == false) {
                textFieldMarkup += ' gtc-input__icon-left';
            }
            else {
                textFieldMarkup += ' gtc-input__icon-label-left';
            }
        }
        textFieldMarkup += '"' + MaskField.RenderAttributes(textField) + Field.RenderAttributes(textField);

        // Data-HasChanged@ Event
        if (textField.IsSerializable == 'Yes') {
            Events.On(document.body, 'change.fieldvaluechange.' + textField.Name, '#' + textField.Name,
                function () {
                    Common.SetAttr(this, 'data-haschanged', 'Yes');
                }
            );
        }

        // 508 Compliance
        if (textField.IsRequired == 'Yes') {
            textFieldMarkup += ' aria-required="true"';
        }

        // Data-ControllerPath/ActionName@, Wire OnChange!
        if (Common.IsEventViewElementDefined(textField.OnChange)) {
            textFieldMarkup += Field.AttachOnChange(textField, TextField.OnChange);
        }

        // @Data-NameSpace, @Data-FieldType, Type@, Input/>
        textFieldMarkup += ' data-namespace="TextField" data-configure="Pre" type="text" />';

        // Icon
        if (Common.IsDefined(textField.Icon)) {
            textFieldMarkup += Icon.Render(textField.Icon, true, labelExists);
        }
        return textFieldMarkup;

    };

    TextField.Configure = function (field, configureStage) {

        Widgets.textbox(field);

    };

    TextField.OnChange = function (event) {

        // Remove Prefix_
        var fieldParameterName = Common.RemovePrefix(this.name);

        // Field Value
        var fieldValueUiParameter = [
            {
                Name: fieldParameterName,
                Value:  this.value,
                UiParameters: null
            }
        ];

        // Call OnChange
        Field.OnChange(this, fieldValueUiParameter);

    };

    TextField.HasValue = function (textField) {

        return MaskField.HasValue(textField);

    };

    TextField.IsCompleted = function (field) {

        return MaskField.IsCompleted(field);

    };

    TextField.UpdateValue = function (field, fieldValue) {

        MaskField.UpdateValue(field, Common.Decode(fieldValue));

    };

    TextField.UpdateLabel = function (field, fieldLabel, promises, context) {

        Field.UpdateLabel(field, fieldLabel, promises, context);

    };

    TextField.ShowPinwheel = function (field) {

        Field.ShowPinwheel(field, 'FadingCircle');

    };

    TextField.HidePinwheel = function (field) {

        Field.HidePinwheel(field);

    };

} (window.TextField = window.TextField || {}, window, document, Common, Cache, Events, Velocity));
// Mask Field
// Based On: MaskField -> PlaceholderField -> ValueField -> Field -> ViewElement
(function (MaskField, window, document, Common, Cache, Events, Velocity, undefined) {

    MaskField.MaskingOptions = {};

    // Public Methods
    MaskField.RenderAttributes = function (maskField) {

        // Sanity Check (for Raw value)
        var fieldValue = '';
        if (Common.IsDefined(maskField.Value)) {
            fieldValue = maskField.Value;
        }

        // Data-Mask@
        var maskingOptions;
        var attributeMarkup = '';
        if (Common.IsDefined(maskField.Mask) && Common.IsNotEmptyString(maskField.Mask)) {
            // Mask Options
            maskingOptions = MaskField.MaskingOptions[maskField.Mask];
            if (Common.IsNotDefined(maskingOptions)) {
                maskingOptions = Mask.BuildMaskingOptions(maskField.Mask);
                MaskField.MaskingOptions[maskField.Mask] = maskingOptions;
            }
            attributeMarkup += ' data-mask=\'' + JSON.stringify(maskingOptions) + '\' data-raw="' + fieldValue + '"';

            // Wire Mask Events
            Events.On(document.body, 'keypress.' + maskField.Name, '#' + maskField.Name, Mask.OnKeyPress);
            Events.On(document.body, 'focusout.' + maskField.Name, '#' + maskField.Name, Mask.OnFocusOut);
        }

        // Placeholder@, Name@, Value@, @Data-Serializable, TabIndex@, Class@, Id@
        attributeMarkup += PlaceholderField.RenderAttributesForMask(maskField, maskingOptions);
        return attributeMarkup;

    };

    MaskField.HasValue = function (maskField) {

        return ValueField.HasValue(maskField);

    };

    MaskField.IsCompleted = function (field) {

        return ValueField.IsCompleted(field);

    };

    MaskField.UpdateValue = function (field, fieldValue) {

        var formattedValue = fieldValue;
        var maskingOptions = Common.GetAttr(field, 'data-mask');
        if (Common.IsString(maskingOptions)) {
            if (fieldValue.length > 0) {
                var formatResult = Mask.Format(fieldValue, JSON.parse(maskingOptions));
                if (!formatResult.Valid) {
                    return;
                }
                formattedValue = formatResult.Text;
            }
            Common.SetAttr(field, 'data-raw', fieldValue);
        }
        ValueField.UpdateValueForMask(field, fieldValue, formattedValue);

    };

    MaskField.UpdateMask = function (field, maskString, uiParameters) {

        // Unbind Field
        MaskField.Unbind([field]);

        // Value
        ValueField.UpdateValueForMask(field, '', '');

        // Mask
        if (Common.IsEmptyString(maskString)) {
            Common.RemoveAttr(field, 'data-mask');
        }
        else {
            var maskingOptions = MaskField.MaskingOptions[maskString];
            if (typeof maskingOptions == 'undefined') {
                maskingOptions = Mask.BuildMaskingOptions(maskString);
                MaskField.MaskingOptions[maskString] = maskingOptions;
            }
            Common.SetAttr(field, 'data-mask', JSON.stringify(maskingOptions));

            // Wire Mask Events
            Events.On(document.body, 'keypress.' + field.id, '#' + field.id, Mask.OnKeyPress);
            Events.On(document.body, 'focusout.' + field.id, '#' + field.id, Mask.OnFocusOut);
        }

        // Placeholder
        if (Common.IsDefined(uiParameters) && uiParameters.length > 0 && Common.IsDefined(uiParameters[0].Value)) {
            PlaceholderField.UpdatePlaceholder(field, uiParameters[0].Value);
        }

    };

    MaskField.Unbind = function (fields) {

        if (fields.length > 0) {
            var maskField, index = 0, length = fields.length;
            for ( ; index < length; index++) {
                maskField = fields[index];
                Events.Off(document.body, 'keypress.' + maskField.id, '#' + maskField.id);
                Events.Off(document.body, 'focusout.' + maskField.id, '#' + maskField.id);
            }
        }

    };

} (window.MaskField = window.MaskField || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class Button
 * @classdesc Supports the Button View Element<br>
 *            Based On: ViewElement > Link
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (Button, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function Button.Render
     * @param {object} button - The Button View Element in JSON format
     * @description Generates the HTML markup for the Button View Element 
     * @returns {string} HTML Markup of the Button View Element
     */
    Button.Render = function (button) {

        // 508 Compliance
        if (Common.IsNotDefined(button.Title)) {
            button.Title = button.Name;
            button.ScreenReaderOnly = true;
        }

        // Button<, TabIndex@, Class@, Id@, Data-ControllerPath/ActionName@, Wire OnClick!
        var className = Link.RenderClassing(button, 'btn');
        var buttonMarkup = '<button data-namespace="Button" class="' + className + '"' + ViewElement.RenderAttributes(button) + EventElement.AttachEvent(button.Name, 'click', button.OnClick, Button.OnClick);

        // Translations, Tooltip, 508 Compliance, Confirmation
        buttonMarkup += Button.RenderAttributes(button);

        // Button>
        buttonMarkup += ' type="button">';

        // Icon
        if (Common.IsDefined(button.Icon)) {
            buttonMarkup += Icon.Render(button.Icon, false);
        }

        // Attach Key
        if (Common.IsDefined(button.AttachedKey)) {
            GTC.AttachKey(button.Name, button.AttachedKey);
        }

        // Link Text
        buttonMarkup += Link.RenderTitle(button, 'button');

        // Button</>
        buttonMarkup += '</button>';
        return buttonMarkup;

    };

    /**
     * @function Button.RenderAttributes
     * @param {object} button - The Button View Element in JSON format
     * @description Common function used by elements that inherit from button to render common HTML markup
     */
    Button.RenderAttributes = function (button) {

        // Initialize
        var buttonMarkup = '';

        // Translations, Tooltip, 508 Compliance
        buttonMarkup += Link.RenderAttributes(button);

        // Confirmation
        if (Common.IsDefined(button.Confirmation)) {
            buttonMarkup += ' data-confirmation=\'' + JSON.stringify(button.Confirmation) + '\'';
        }
        return buttonMarkup;

    };

    /**
     * @function Button.OnClick
     * @param {event} event - A DOM click Event
     * @description This method is called when the Button is clicked and subsequently calls Button.CompleteConfirmation
     */
    Button.OnClick = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();
        var onClickParameters = [];

        // Call OnClick
        Button.CompleteConfirmation(this, onClickParameters);

    };

    /**
     * @function Button.CompleteConfirmation
     * @param {object} button - The Button DOM element
     * @param {UiParameter[]} onClickParameters - A list of UiParameters which are Inputs to the OnClick<i>Button</i> Behavior
     * @param {callback} [extraLogic] - Callback function to call before calling the OnClick<i>Button</i> Behavior
     * @description Calls Button.CompleteOnClick
     */
    Button.CompleteConfirmation = function (button, onClickParameters, extraLogic) {

        var confirmationMessage = Common.GetAttr(button, 'data-confirmation');

        // Confirmation?
        if (Common.IsDefined(confirmationMessage)) {
            confirmationMessage = JSON.parse(confirmationMessage);
            confirmationMessage.Type = parseInt(confirmationMessage.Type, 10);
            Modals.ShowMessageDialog(confirmationMessage,
                function (modalResult) {
                    if (modalResult == Modals.ModalResult.Yes || modalResult == Modals.ModalResult.Ok) {
                        Button.CompleteOnClick(button, onClickParameters, extraLogic);
                    }
                }
            );
        }
        else {
            Button.CompleteOnClick(button, onClickParameters, extraLogic);
        }

    };

    /**
     * @function Button.CompleteOnClick
     * @param {object} button - The Button DOM element
     * @param {UiParameter[]} onClickParameters - A list of UiParameters which are Inputs to the OnClick<i>Button</i> Behavior
     * @param {callback} [extraLogic] - Callback function to call before calling the OnClick<i>Button</i> Behavior
     * @description Calls the OnClick<i>Button</i> Behavior of the Button on the View
     */
    Button.CompleteOnClick = function (button, onClickParameters, extraLogic) {

        // Get OnClickEvent object
        var onClickEvent = JSON.parse(Common.GetAttr(button, 'data-click'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickEvent.FormToSerialize)) {
            onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
        }

        // Extra Logic?
        if (Common.IsDefined(extraLogic) && Common.IsFunction(extraLogic)) {
            extraLogic();
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, button);

    };

    /**
     * @function Button.UpdateTitle
     * @param {object} button - The Button DOM element
     * @param {string} newTitle - The new Title of the Button
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Title of the Button
     */
    Button.UpdateTitle = function (button, newTitle, promises, context) {

        Link.UpdateTitle(button, newTitle, promises, context);

    };

    /**
     * @function Button.ShowPinwheel
     * @param {object} button - The Button DOM element
     * @description Shows Pinwheel on the View Element
     */
    Button.ShowPinwheel = function (button) {

        SpinKit.Show(button, 'FadingCircle');

    };

    /**
     * @function Button.HidePinwheel
     * @param {object} button - The Button DOM element
     * @description Hides Pinwheel on the View Element
     */
    Button.HidePinwheel = function (button) {

        SpinKit.Hide(button);

    };

} (window.Button = window.Button || {}, window, document, Common, Cache, Events, Velocity));
// Textbox Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var TextboxWidget = {

        // Options
        options: {
            ClassTextboxLocked: 'gtc-input-locked'
        },

        // Public Methods
        IsDisabled: function () {

            return GTC.IsControlDisabled(this.element);

        },

        EnableControl: function () {

            this._enableControl();

        },

        DisableControl: function () {

            this._disableControl();

        },

        // Private Methods
        _disableControl: function() {

            if (!this.Locked) {
                this.Locked = true;
                Common.SetAttr(this.element, 'disabled', 'disabled');
                Common.SetAttr(this.element, 'data-disabled', 'true');
                Common.AddClass(this.element, this.options.ClassTextboxLocked);
                Common.InsertHTMLString(this.element, Common.InsertType.After, '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
                Common.SetAttr(this.element, 'tabindex', '-1');
            }

        },

        _enableControl: function () {

            if (this.Locked) {
                Common.RemoveAttr(this.element, 'disabled');
                Common.RemoveAttr(this.element, 'data-disabled');
                Common.RemoveClass(this.element, this.options.ClassTextboxLocked);
                Common.Remove(Common.GetSibling(this.element, Common.SiblingType.Next), true);
                Common.SetAttr(this.element, 'tabindex', this.FocusIndex);
                this.Locked = false;
            }

        },

        _init: function () {

        },

        _create: function () {

            this.Locked = false;
            this.FocusIndex = Common.GetAttr(this.element, 'tabindex');

            // Disabled?
            var dataDisabled = Common.GetAttr(this.element, 'data-disabled');
            if (dataDisabled == 'true') {
                this._disableControl();
            }

        }

    };

    WidgetFactory.Register('gtc.textbox', TextboxWidget);

} (window, document, Common, Cache, Events, Velocity));
// Hyperlink
// Based On: Hyperlink -> Link -> ViewElement
(function (Hyperlink, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Hyperlink.Render = function (hyperlink) {

        // 508 Compliance
        if (Common.IsNotDefined(hyperlink.Title)) {
            hyperlink.Title = hyperlink.Name;
            hyperlink.ScreenReaderOnly = true;
        }

        // Form to send?
        var formToSend = '';
        if (Common.IsDefined(hyperlink.FormToSerialize)) {
            formToSend = ' data-formtoserialize="' + hyperlink.FormToSerialize + '"';
        }

        // Anchor<, TabIndex@, Class@, Id@, Href@, Data-OnLoad@, Anchor>
        var className = Link.RenderClassing(hyperlink, 'link');
        var hyperlinkMarkup = '<a data-namespace="Hyperlink"' + formToSend + ' class="' + className + '"' + ViewElement.RenderAttributes(hyperlink) + Navigation.RenderAttributes(hyperlink.Navigation);

        // Translations, Tooltip, 508 Compliance
        hyperlinkMarkup += Link.RenderAttributes(hyperlink);

        // Target
        if (Common.IsDefined(hyperlink.Target)) {
            hyperlinkMarkup += ' target="' + hyperlink.Target + '"';
        }

        // Anchor>
        hyperlinkMarkup += '>';

        // Icon
        if (Common.IsDefined(hyperlink.Icon)) {
            hyperlinkMarkup += Icon.Render(hyperlink.Icon, false);
        }

        // Link Text
        hyperlinkMarkup += Link.RenderTitle(hyperlink, 'link');

        // Wire Click!
        if (Common.IsDefined(hyperlink.Navigation)) {
            Link.WireClick(hyperlink);
        }

        // Anchor</>
        hyperlinkMarkup += '</a>';

        // Return markup
        return hyperlinkMarkup;

    };

    Hyperlink.UpdateTitle = function (hyperlink, newTitle, promises, context) {

        Link.UpdateTitle(hyperlink, newTitle, promises, context);

    };

} (window.Hyperlink = window.Hyperlink || {}, window, document, Common, Cache, Events, Velocity));
// Slide Panel
// Based On: SlidePanel -> ContainerElement -> ViewElement
(function (SlidePanel, window, document, Common, Cache, Events, Velocity, undefined) {

    SlidePanel.Markup = [];

    // Public Methods
    SlidePanel.Render = function (slidePanel, isInToolbarPanel) {

        // Div<, Class@, Id@, Div>, Span<>, Span</>
        var slidePanelMarkup = '<div class="gtc-slidepanel" data-namespace="SlidePanel" data-side="' + slidePanel.Side + '"' + ViewElement.RenderAttributes(slidePanel) + '><span class="gtc-sr-only" data-translate="BeginningOfContent508">' + Common.TranslateKey('BeginningOfContent508') + '</span>';

        // Anchor<, Class@, Id@, Anchor></>
        var menuLinkId = '';
        var menuLinkMarkup = '';
        if (isInToolbarPanel == true) {
            menuLinkId = slidePanel.Name + 'MenuLink';
        }
        else if (Common.IsDefined(slidePanel.MenuLink)) {
            if (Common.IsNotDefined(slidePanel.MenuLink.Name)) {
                slidePanel.MenuLink.Name = slidePanel.Name + 'MenuLink';
            }

            // Tooltip
            if (Common.IsDefined(slidePanel.Tooltip)) {
                slidePanel.MenuLink.Tooltip = slidePanel.Tooltip;
            }
            menuLinkMarkup += '<div>';
            menuLinkMarkup += MenuLink.Render(slidePanel.MenuLink, true);
            menuLinkMarkup += '</div>';
            menuLinkId = slidePanel.MenuLink.Name;
        }
        else {
            menuLinkMarkup += '<div';
            if (slidePanel.HideDefaultButton == 'Yes') {
                menuLinkMarkup += ' style="display:none;"';
            }
            menuLinkMarkup += '>';
            menuLinkMarkup += '<a role="button" aria-haspopup="true" class="gtc-slidepanel-nav-btn';
            var linkMarkup = '';
            var translationAttribute = '';

            // Tooltip
            if (Common.IsDefined(slidePanel.Tooltip)) {
                translationAttribute += '[data-tooltip]' + slidePanel.Tooltip + ';';
                linkMarkup += ' data-tooltip="' + Common.TranslateKey(slidePanel.Tooltip) + '"';
                menuLinkMarkup += ' gtc-tooltip gtc-link-tooltip'
            }

            // Translations
            if (Common.IsNotEmptyString(translationAttribute)) {
                linkMarkup += ' data-translate="' + translationAttribute + '"';
            }
            menuLinkMarkup += '"' + linkMarkup + translationAttribute +  'id="' + slidePanel.Name + 'MenuLink"><i class="gtc-icon-styles fa fa-bars"></i><span class="gtc-sr-only" data-translate="OpensSimulatedDialog508">' + Common.TranslateKey('OpensSimulatedDialog508') + '</span></a>';

            menuLinkMarkup += '</div>';
            menuLinkId = slidePanel.Name + 'MenuLink';
        }

        // Div<, Class@, Id@, Div>
        slidePanelMarkup += '<div aria-expanded="false" data-menulinkid="' + menuLinkId + '" id="' + slidePanel.Name + 'Menu" class="gtc-slidepanel-slide"><div id="' + slidePanel.Name + 'ScrollTarget" class="gtc-scrolltarget gtc-cfscroll-y">';

        // Close Icon
        slidePanelMarkup += '<div class="gtc-slidepanel-close"><a class="gtc-slidepanel-close-btn" id="' + slidePanel.Name + 'ClosePanelLink"><i class="gtc-icon-styles fa fa-times"></i></a></div>';

        // SlidePanel
        slidePanelMarkup += ContainerElement.RenderElements(slidePanel);

        // Attach click event
        var closeOnBodyClick = (slidePanel.CloseOnBodyClick == 'Yes') ? true : false;
        var eventType = 'click';
        if (Common.CheckMedia('Mobile') || Common.CheckMedia('Tablet')) {
            Touch.InitializeTouchEvents();
            eventType = 'tap';
        }
        var scrollTopValue;
        Events.On(document.body, eventType + '.' + menuLinkId, '#' + menuLinkId,
            function () {
                var panelElement = Common.Get(slidePanel.Name);
                if (Common.GetAttr(panelElement, 'data-panelaction') != 'animating') {
                    Common.SetAttr(panelElement, 'data-panelaction', 'animating');
                    var menuElement = Common.Get(slidePanel.Name + 'Menu');
                    var menuLink = this;

                    // If/Hide Else/Show
                    if (Common.HasClass(menuElement, 'gtc-nav-show')) {
                        Events.Trigger(document.body, 'menulinkclose' + menuLinkId);
                        if (closeOnBodyClick) {
                            Events.Off(document.body, eventType + '.closeOnBodyClick.' + slidePanel.Name);
                        }
                        Common.RemoveClass(menuElement, 'gtc-nav-show');
                        Common.RemoveAttr(panelElement, 'data-panelaction');
                        Common.SetAttr(menuElement, 'aria-expanded', 'false');
                        Common.RemoveClass(this, 'gtc-nav-show');

                        // Dont allow page scrolling when over slide panel
                        Events.Off(document.body, 'mouseover.slidepanelscroll');
                        document.body.style.width = '100%';
                        document.body.style.position = '';
                        document.body.style.top = '';
                        window.scrollTo(0, scrollTopValue);
                        Events.Off(window, 'scroll.slidepanelscrollsettop');
                    }
                    else {
                        var scrollTarget = Common.Get(slidePanel.Name + 'ScrollTarget');
                        scrollTarget.style.height = Common.Height(window) + 'px';
                        Events.Trigger(document.body, 'menulinkopen' + menuLinkId);
                        Common.AddClass(menuElement, 'gtc-nav-show');
                        Common.SetAttr(menuElement, 'aria-expanded', 'true');
                        Common.RemoveAttr(panelElement, 'data-panelaction');
                        Common.AddClass(this, 'gtc-nav-show');

                        // Attach body click event
                        if (closeOnBodyClick) {
                            Events.On(document.body, eventType + '.closeOnBodyClick.' + slidePanel.Name,
                                function (event) {
                                    var menuLinkBodyCheck = Common.Get(menuLinkId);
                                    if (Common.IsNotDefined(Common.Closest('#' + slidePanel.Name + 'Menu', event.target)) && (Common.IsNotDefined(menuLinkBodyCheck) || event.target.id != menuLinkBodyCheck.id) && event.target.id != Common.Get(slidePanel.Name + 'Menu').id) {
                                        Events.Off(document.body, eventType + '.closeOnBodyClick.' + slidePanel.Name);
                                        Events.Trigger(menuLink, eventType);
                                    }
                                }
                            );
                        }

                        // Dont allow page scrolling when over slide panel
                        var scrollSet = false;
                        var lastElement = null;
                        Events.On(document.body, 'mouseover.slidepanelscroll.' + slidePanel.Name,
                            function () {
                                lastElement = event.target;
                                Events.On(window, 'scroll.slidepanelscrollsettop.' + slidePanel.Name,
                                    function () {
                                        if (lastElement && Common.IsNotDefined(Common.Closest('.gtc-slidepanel', lastElement)) && !Common.HasClass(lastElement, 'gtc-pinwheel-overlay')) {
                                            // Record last scroll value when scrolling body
                                            scrollTopValue = window.pageYOffset;
                                        }
                                    }
                                );
                                if (Common.IsDefined(Common.Closest('.gtc-slidepanel', event.target)) || Common.HasClass(event.target, 'gtc-pinwheel-overlay')) {
                                    if (!scrollSet) {
                                        scrollTopValue = window.pageYOffset;
                                        scrollSet = true;
                                    }
                                    document.body.style.width = '100%';
                                    document.body.style.position = 'fixed';
                                    document.body.style.top = '-' + scrollTopValue + 'px';
                                }
                                else {
                                    document.body.style.width = '';
                                    document.body.style.position = '';
                                    document.body.style.top = '';
                                    window.scrollTo(0, scrollTopValue);
                                    scrollSet = false;
                                }
                            }
                        );
                    }
                }
            }
        );

        // Attach Close Link Event
        Events.On(document.body, eventType + '.' + slidePanel.Name + 'ClosePanelLink', '#' + slidePanel.Name + 'ClosePanelLink',
            function () {
                if (closeOnBodyClick) {
                    Events.Off(document.body, eventType + '.closeOnBodyClick.' + slidePanel.Name);
                }
                Events.Trigger(Common.Get(menuLinkId), eventType);
            }
        );

        // Div</>, Div</>, Span<>, Span</>, Div</>
        slidePanelMarkup += '</div></div><span class="gtc-sr-only" data-translate="EndOfContent508">' + Common.TranslateKey('EndOfContent508') + '</span></div>';
        SlidePanel.Markup.push(slidePanelMarkup);
        return menuLinkMarkup;

    };

    SlidePanel.ShowHide = function (slidePanel, type) {

        var slidePanelSlide = Common.Query('.gtc-slidepanel-slide', slidePanel);
        var menuLinkId = Common.GetAttr(slidePanelSlide, 'data-menulinkid');
        var menuLink = Common.Get(menuLinkId);
        if (Common.GetAttr(slidePanel, 'data-panelaction') != 'animating') {
            var eventTrigger = 'click';
            if (Common.CheckMedia('Mobile') || Common.CheckMedia('Tablet')) {
                eventTrigger = 'tap';
            }
            var isShowing = Common.HasClass(slidePanelSlide, 'gtc-nav-show');
            if ((isShowing && type == 'Hide') || (!isShowing && type == 'Show')) {
                Events.Trigger(menuLink, eventTrigger);
            }
        }

    };

} (window.SlidePanel = window.SlidePanel || {}, window, document, Common, Cache, Events, Velocity));
// ModalLink
// Based On: ModalLink -> Hyperlink -> Link -> ViewElement
(function (ModalLink, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    ModalLink.Render = function (modalLink) {

        // 508 Compliance
        if (Common.IsNotDefined(modalLink.Title)) {
            modalLink.Title = modalLink.Name;
            modalLink.ScreenReaderOnly = true;
        }

        // Form to send?
        var formToSend = '';
        if (Common.IsDefined(modalLink.FormToSerialize)) {
            formToSend = ' data-formtoserialize="' + modalLink.FormToSerialize + '"';
        }

        // Anchor<, TabIndex@, Class@, Id@, Href@, Data-OnLoad@, Anchor>
        var className = Link.RenderClassing(modalLink, 'link');

        var modalLinkMarkup = '<a aria-haspopup="true"' + formToSend + ' class="' + className + '" data-namespace="ModalLink"' + ViewElement.RenderAttributes(modalLink) + Navigation.RenderAttributes(modalLink.Navigation);

        // Translations, Tooltip, 508 Compliance
        modalLinkMarkup += Link.RenderAttributes(modalLink);

        // Modal Name Attribute
        if (Common.IsDefined(modalLink.ModalName)) {
            modalLinkMarkup += ' data-modalname="' + modalLink.ModalName + '"';
        }
        modalLinkMarkup += '>';

        // Icon
        if (Common.IsDefined(modalLink.Icon)) {
            modalLinkMarkup += Icon.Render(modalLink.Icon, false);
        }

        // Link Text
        modalLinkMarkup += Link.RenderTitle(modalLink, 'link');

        // Wire OnLoad!
        if (Common.IsNotDefined(modalLink.Name) || modalLink.Name.length <= 0) {
            if (Common.IsDefined(window.console)) {
                console.log('Warning[ModalLink - ' + modalLink.Title + ']: Must provide the Name attribute to wire an default action');
            }
        }
        else {

            // Wire
            Events.On(document.body, 'click.' + modalLink.Name, '#' + modalLink.Name,
                function (event) {
                    event.preventDefault();
                    Common.SetOnLoadEvent(this, true, false);
                    var modalName = Common.GetAttr(this, 'data-modalname');
                    Modals.ShowModalDialog(modalName, Common.GetAttr(this, 'href'), modalLink.Name);
                }
            );
        }

        // Status
        if (modalLink.Status == 'Complete' || modalLink.Status == 'Pending' || modalLink.Status == 'Error') {
            modalLinkMarkup += '<span aria-label="' + modalLink.ModalName + ' status: ' + modalLink.Status + '" class="gtc-modallink-status gtc-status-' + modalLink.Status.toLowerCase() + '"></span>';
        }

        // Anchor</>
        modalLinkMarkup += '</a>';
        return modalLinkMarkup;

    };

    ModalLink.UpdateStatus = function (element, status) {

        var modalLinkStatus = Common.Query('.gtc-modallink-status', element);
        if (Common.IsDefined(modalLinkStatus)) {
            Common.RemoveClasses(modalLinkStatus, 'gtc-status-complete gtc-status-pending gtc-status-error');
            Common.AddClass(modalLinkStatus, 'gtc-status-' + status.toLowerCase());
        }
        else {
            Common.InsertHTMLString(element, Common.InsertType.Append, '<div style="display: none;" class="gtc-modallink-status gtc-status-' + status.toLowerCase() + '"></div>');
            Velocity(element.lastChild, 'fadeIn');
        }

    };

    ModalLink.UpdateTitle = function (modalLink, newTitle, promises, context) {

        Link.UpdateTitle(modalLink, newTitle, promises, context);

    };

} (window.ModalLink = window.ModalLink || {}, window, document, Common, Cache, Events, Velocity));
// Html Text
// Based On: HtmlText -> ViewElement
(function (HtmlText, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    HtmlText.Render = function (htmlText) {

        var extraClassing = '';
        if (Common.IsDefined(htmlText.Tooltip)) {
            extraClassing = ' gtc-tooltip gtc-link-tooltip';
        }
        var htmlTextMarkup = '<span data-namespace="HtmlText" class="gtc-htmltext' + extraClassing + '"' + ViewElement.RenderAttributes(htmlText);

        // Data-Mask@
        var maskingOptions;
        if (Common.IsDefined(htmlText.Mask)) {
            // Mask Options
            maskingOptions = MaskField.MaskingOptions[htmlText.Mask];
            if (Common.IsNotDefined(maskingOptions)) {
                maskingOptions = Mask.BuildMaskingOptions(htmlText.Mask);
                MaskField.MaskingOptions[htmlText.Mask] = maskingOptions;
            }
            htmlTextMarkup += ' data-mask=\'' + JSON.stringify(maskingOptions) + '\'';
        }

        // Tooltip
        if (Common.IsDefined(htmlText.Tooltip)) {
            htmlTextMarkup += ' data-translate="[data-tooltip]' + htmlText.Tooltip + ';"';
            htmlTextMarkup += ' data-tooltip="' + Common.TranslateKey(htmlText.Tooltip) + '"';
        }

        // Masking/Translations (Don't translate if masking is defined)
        var htmlTextString = htmlText.TextString || '';
        if (Common.IsDefined(htmlText.Mask)) {
            // Format Value
            if (Common.IsObject(maskingOptions)) {
                var formatResult = Mask.Format(htmlTextString, maskingOptions);
                htmlTextString = formatResult.Text;
            }
        }
        htmlTextMarkup += '>';

        // Color
        if (Common.IsDefined(htmlText.TextColor)) {
            htmlTextMarkup += '<style>';
            htmlTextMarkup += '#' + htmlText.Name + ' { ';
            htmlTextMarkup += 'color: ' + Colors.ProcessValue(htmlText.TextColor, false, null) + ' !important;';
            htmlTextMarkup += ' }';
            htmlTextMarkup += '</style>';
        }
        htmlTextMarkup += '<span data-translate="' + htmlTextString + '">' + Common.TranslateKey(htmlTextString) + '</span></span>';

        // Return markup
        return htmlTextMarkup;

    };

    HtmlText.UpdateValue = function (htmlText, textValue, promises) {

        // Animation hide promise
        var animationHidePromise = Common.Promise();
        promises.push(animationHidePromise.promise);

        // Sanity Check
        textValue = (Common.IsNotDefined(textValue)) ? '' : textValue;

        // Check for Mask
        var maskingOptions = Common.GetAttr(htmlText, 'data-mask');
        if (Common.IsString(maskingOptions)) {
            if (maskingOptions.length > 0 && textValue.length > 0) {
                formatResult = Mask.Format(textValue, JSON.parse(maskingOptions), true);
                textValue = formatResult.Text;
            }
        }

        // Set Value
        Common.SetAttr(htmlText, 'data-translate', textValue);
        Velocity(htmlText, { 'opacity': 0 }, 'slow',
            function () {
                var animationPromise = Common.Promise();
                promises.push(animationPromise.promise);
                htmlText.textContent = Common.TranslateKey(textValue);
                Velocity(htmlText, 'reverse',
                    function () {
                        Common.RemoveOpacity(htmlText);
                        animationHidePromise.resolve();
                        animationPromise.resolve();
                    }
                );
            }
        );

    };

    HtmlText.ReplaceElement = function (htmlText, viewElements, promises) {

        // Animation Promise
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);
        Velocity(htmlText, { 'opacity': 0 }, 'slow',
            function () {
                // Build Markup
                var viewElement = viewElements[0];
                var htmlTextMarkup = HtmlText.Render(viewElement);
                Common.InsertHTMLString(htmlText, Common.InsertType.After, htmlTextMarkup);
                Common.Remove(htmlText);
                htmlText = Common.Get(viewElement.Name);
                htmlText.style.opacity = '0';

                // Show new HtmlText
                Velocity(htmlText, { 'opacity': 1 }, 'slow',
                    function () {
                        Common.RemoveOpacity(htmlText);
                        animationPromise.resolve();
                    }
                );
            }
        );

    };

} (window.HtmlText = window.HtmlText || {}, window, document, Common, Cache, Events, Velocity));
(function (Mask, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Variables
    Mask.Keyboard = {
        Backspace: 8
    };

    Mask.Number = {
        Zero: 48,
        One: 49,
        Two: 50,
        Three: 51,
        Four: 52,
        Five: 53,
        Six: 54,
        Seven: 55,
        Eight: 56,
        Nine: 57
    };

    // Public methods
    Mask.BuildMaskingOptions = function (maskString) {

        // Initialize
        var maskingOptions = {
        };

        // Type
        maskingOptions.Type = maskString.substr(0, maskString.indexOf('('));

        // Definition
        maskingOptions.Definition = maskString.substring(maskString.indexOf('(') + 1, maskString.length - 1);

        // Masking Options by Type
        switch (maskingOptions.Type) {
            case 'Alphanumeric':
                AlphanumericMask.BuildMaskingOptions(maskingOptions);
                break;
            case 'Date':
                DateMask.BuildMaskingOptions(maskingOptions);
                break;
            case 'Feet':
                FeetMask.BuildMaskingOptions(maskingOptions);
                break;
            case 'Name':
                NameMask.BuildMaskingOptions(maskingOptions);
                break;
            case 'Numeric':
                NumericMask.BuildMaskingOptions(maskingOptions);
                break;
            case 'Signed':
                SignedMask.BuildMaskingOptions(maskingOptions);
                break;
        }
        return maskingOptions;

    };

    Mask.Format = function (rawData, maskingOptions, displayOnly) {

        // Initialize
        var formatResult = {
            Text: '',
            Valid: true
        };

        // Sanity Check
        if (Common.IsNotDefined(rawData) || rawData.length <= 0) {
            return formatResult;
        }

        // Format
        switch (maskingOptions.Type) {
            case 'Alphanumeric':
                AlphanumericMask.Format(rawData, maskingOptions, formatResult);
                break;
            case 'Date':
                DateMask.Format(rawData, maskingOptions, formatResult);
                break;
            case 'Feet':
                FeetMask.Format(rawData, maskingOptions, formatResult);
                break;
            case 'Name':
                NameMask.Format(rawData, maskingOptions, formatResult);
                break;
            case 'Numeric':
                NumericMask.Format(rawData, maskingOptions, formatResult, displayOnly);
                break;
            case 'Signed':
                SignedMask.Format(rawData, maskingOptions, formatResult, displayOnly);
                break;
        }
        return formatResult;

    };

    Mask.OnKeyPress = function (event) {

        // Navigation Keys
        if (IsNavigationKey(event)) {
            return;
        }

        // Prevent Default
        event.preventDefault();

        // Field Detail
        var fieldDetail = Mask.FieldDetail(event);
        var eventTarget = event.target;

        // Key Press
        var maskingOptions = JSON.parse(Common.GetAttr(eventTarget, 'data-mask'));
        switch (maskingOptions.Type) {
            case 'Alphanumeric':
                AlphanumericMask.OnKeyPress(fieldDetail, maskingOptions);
                break;
            case 'Date':
                DateMask.OnKeyPress(fieldDetail, maskingOptions);
                break;
            case 'Feet':
                FeetMask.OnKeyPress(fieldDetail, maskingOptions);
                break;
            case 'Name':
                NameMask.OnKeyPress(fieldDetail, maskingOptions);
                break;
            case 'Numeric':
                NumericMask.OnKeyPress(fieldDetail, maskingOptions);
                break;
            case 'Signed':
                SignedMask.OnKeyPress(fieldDetail, maskingOptions);
                break;
        }

    };

    Mask.OnFocusOut = function (event) {

        // Initialize
        var eventTarget = event.target;
        var onFocusOut = {
            EventTarget: eventTarget,
            HasChanged: true,
            GoodData: false,
            RawData: Common.GetAttr(eventTarget, 'data-raw')
        };

        // Process Focus Out
        var maskingOptions = JSON.parse(Common.GetAttr(eventTarget, 'data-mask'));
        switch (maskingOptions.Type) {
            case 'Alphanumeric':
                AlphanumericMask.OnFocusOut(maskingOptions, onFocusOut);
                break;
            case 'Date':
                DateMask.OnFocusOut(maskingOptions, onFocusOut);
                break;
            case 'Feet':
                FeetMask.OnFocusOut(maskingOptions, onFocusOut);
                break;
            case 'Name':
                NameMask.OnFocusOut(maskingOptions, onFocusOut);
                break;
            case 'Numeric':
                NumericMask.OnFocusOut(maskingOptions, onFocusOut);
                break;
            case 'Signed':
                SignedMask.OnFocusOut(maskingOptions, onFocusOut);
                break;
        }
        if (!onFocusOut.HasChanged) {
            return;
        }
        if (!onFocusOut.GoodData) {
            event.preventDefault();
            event.stopPropagation();
            Form.AddMaskingError(eventTarget);

            var browserType = Common.GetBrowser();
            if (browserType.length > 0 && browserType[0] == 'Firefox') {
                setTimeout(
                    function () {
                        eventTarget.focus();
                    }, 10
                );
            }
        }
        else {
            if (Common.HasClass(eventTarget, 'gtc-failed-masking-validation')) {
                Form.RemoveMaskingError(eventTarget);
            }

            // Trigger special change event to (Slider Field)
            if (Common.HasAttr(eventTarget, 'data-specialchange')) {
                Events.Trigger(eventTarget, 'specialchange');
                return;
            }

            // Trigger change event for fields with Mask (if OnChange exists)
            if (Common.HasAttr(eventTarget, 'data-change')) {
                var namespace = Common.GetAttr(eventTarget, 'data-namespace');
                window[namespace].OnChange.call(eventTarget);
                Common.SetAttr(eventTarget, 'data-haschanged', 'Yes');
            }
            else {
                var changeEvent = document.createEvent('HTMLEvents');
                changeEvent.initEvent('change', true, false);
                eventTarget.dispatchEvent(changeEvent);
            }
        }

    };

    // Internal Public Functions
    Mask.GetCaretPosition = function (inputField) {

        var caretPosition = 0;
        if ('selectionStart' in inputField) {
            caretPosition = inputField.selectionStart;
        }
        else {
            if ('selection' in document) {
                inputField.focus();
                var selectionRange = document.selection.createRange();
                var selectionLength = document.selection.createRange().text.length;
                selectionRange.moveStart('character', -inputField.value.length);
                caretPosition = selectionRange.text.length - selectionLength;
            }
        }
        return caretPosition;

    };

    Mask.SetCaretPosition = function (inputField, caretPosition) {

        if (Common.IsFunction(inputField.setSelectionRange)) {
            inputField.setSelectionRange(caretPosition, caretPosition);
        }
        else {
            if (Common.IsFunction(inputField.createTextRange)) {
                var textRange = inputField.createTextRange();
                textRange.collapse(true);
                textRange.moveEnd('character', caretPosition);
                textRange.moveStart('character', caretPosition);
                textRange.select();
            }
        }

    };

    Mask.GetInputText = function (inputField) {

        // Get values
        var thisText = inputField.value;

        // Check for selection
        if (inputField.selectionStart != inputField.selectionEnd) {
            thisText = thisText.substr(0, inputField.selectionStart) + thisText.substring(inputField.selectionEnd);
        }
        return thisText;

    };

    Mask.SetInputText = function (inputField, leftOfCaret, rightOfCaret) {

        inputField.value = leftOfCaret + rightOfCaret;
        Mask.SetCaretPosition(inputField, leftOfCaret.length);

    };

    Mask.FieldDetail = function (event) {

        // Initialize
        var fieldDetail = {};
        fieldDetail.HtmlInputField = event.target;
        fieldDetail.KeyCode = event.which;
        fieldDetail.KeyPressed = String.fromCharCode(event.which);
        fieldDetail.Text = Mask.GetInputText(event.target);
        fieldDetail.TextLength = fieldDetail.Text.length;

        // Left of caret, Right of caret
        fieldDetail.LeftOfCaret = '';
        fieldDetail.RightOfCaret = '';
        fieldDetail.CaretPosition = Mask.GetCaretPosition(event.target);
        if (fieldDetail.CaretPosition == fieldDetail.TextLength) {
            fieldDetail.LeftOfCaret = fieldDetail.Text;
            fieldDetail.RightOfCaret = '';
        }
        else {
            fieldDetail.LeftOfCaret = fieldDetail.Text.slice(0, fieldDetail.CaretPosition);
            fieldDetail.RightOfCaret = fieldDetail.Text.slice(fieldDetail.CaretPosition, fieldDetail.TextLength);
        }
        fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
        fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;
        return fieldDetail;

    };

    Mask.CheckValidation = function (field) {

        // Initialize
        var onFocusOut = {
            EventTarget: field,
            HasChanged: true,
            GoodData: false,
            RawData: Common.GetAttr(field, 'data-raw')
        };

        // Check Validation
        var maskingOptions = JSON.parse(Common.GetAttr(field, 'data-mask'));
        var validationResult = true;
        switch (maskingOptions.Type) {
            case 'Alphanumeric':
                validationResult = AlphanumericMask.CheckValidation(maskingOptions, onFocusOut);
                break;
            case 'Date':
                validationResult = DateMask.CheckValidation(maskingOptions, onFocusOut);
                break;
            case 'Feet':
                validationResult = FeetMask.CheckValidation(maskingOptions, onFocusOut);
                break;
            case 'Name':
                validationResult = NameMask.CheckValidation(maskingOptions, onFocusOut);
                break;
            case 'Numeric':
                validationResult = NumericMask.CheckValidation(maskingOptions, onFocusOut);
                break;
            case 'Signed':
                validationResult = SignedMask.CheckValidation(maskingOptions, onFocusOut);
                break;
        }
        return validationResult;

    };

    // Private Methods
    function IsNavigationKey (event) {

        if (event.which == 0 || event.which == Mask.Keyboard.Backspace) {
            return true;
        }
        if (event.ctrlKey) {
            return true;
        }
        if (event.altKey) {
            return true;
        }
        return false;

    };

} (window.Mask = window.Mask || {}, window, document, Common, Cache, Events, Velocity));

// Alphanumeric Mask
(function (AlphanumericMask, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    AlphanumericMask.BuildMaskingOptions = function (maskingOptions) {

        return maskingOptions;

    };

    AlphanumericMask.Format = function (rawData, maskingOptions, formatResult) {

        formatResult.Text = rawData;
        formatResult.Valid = Validate(formatResult.Text, maskingOptions);

        // Validation failed, attempt to format and retest
        if (!formatResult.Valid) {
            // Raw data length
            var rawDataSize = Common.IsDefined(rawData) ? rawData.length : 0;

            // Initialize array to hold masking definitions that match our raw data length
            var matchingDefinitions = [];

            // Split masking definitions that have mulitple masks within them
            var splitDefinitions = maskingOptions.Definition.split('][');

            // For each masking definition check if it has same character length as raw data
            // If it does remove any extra brackets and add to matching definitions array for later testing
            var index = 0, length = splitDefinitions.length;
            for ( ; index < length; index++) {
                if ((splitDefinitions[index].match(/#|@/g) || []).length == rawDataSize) {
                    splitDefinitions[index] = splitDefinitions[index].replace('[', '').replace(']', '');
                    matchingDefinitions.push(splitDefinitions[index]);
                }
            }

            // For each matching definition attempt to format raw data and test against definition's generated regex
            var currentDefinition;
            index = 0, length = matchingDefinitions.length;
            for ( ; index < length; index++) {
                currentDefinition = matchingDefinitions[index];
                var result = '', customCharacters = 0, definitionIndex = 0, definitionLength = currentDefinition.length;
                for ( ; definitionIndex < definitionLength; definitionIndex++) {
                    var currentCharDefinition = matchingDefinitions[index][definitionIndex];
                    if (currentCharDefinition != '#' && currentCharDefinition != '@') {
                        result += currentCharDefinition;
                        customCharacters++;
                    }
                    else {
                        if (currentCharDefinition == '#') {
                            if (/^[0-9]$/.test(rawData[definitionIndex - customCharacters])) {
                                result += rawData[definitionIndex - customCharacters];
                            }
                        }
                        else if (currentCharDefinition == '@') {
                            if (matchingDefinitions[index][definitionIndex + 1] == '<') {
                                if (/^[a-z]$/.test(rawData[definitionIndex - customCharacters])) {
                                    result += rawData[definitionIndex - customCharacters];
                                }
                            }
                            else if (matchingDefinitions[index][definitionIndex + 1] == '>') {
                                if (/^[A-Z]$/.test(rawData[definitionIndex - customCharacters])) {
                                    result += rawData[definitionIndex - customCharacters];
                                }
                            }
                            else {
                                if (/^[A-Za-z]$/.test(rawData[definitionIndex - customCharacters])) {
                                    result += rawData[definitionIndex - customCharacters];
                                }
                            }
                            if (matchingDefinitions[index][definitionIndex + 1] == '<' || matchingDefinitions[index][definitionIndex + 1] == '>') {
                                definitionIndex++;
                                customCharacters++;
                            }
                        }
                    }
                }

                // Retest output
                formatResult.Text = result;
                formatResult.Valid = Validate(formatResult.Text, maskingOptions);
                if (formatResult.Valid) {
                    break;
                }
            }

            // Reset raw data as value if all validations failed
            if (!formatResult.Valid) {
                formatResult.Text = rawData;
            }
        }

    };

    AlphanumericMask.OnKeyPress = function (fieldDetail, maskingOptions) {

        // Allowed Keys (A-Z, a-z, 0-9)
        if ((fieldDetail.KeyPressed >= 'A' && fieldDetail.KeyPressed <= 'z') || (fieldDetail.KeyCode >= Mask.Number.Zero && fieldDetail.KeyCode <= Mask.Number.Nine)) {
            // RegExp arrays
            var regExpArrays = BuildRegExpArrays(maskingOptions.Definition);

            // Pick matching regExpArray and Compare
            var regExpArrayIndex = 0;
            while (regExpArrayIndex < regExpArrays.length) {
                // Pick RegExpArray
                var regExpArray = PickRegExpArray(regExpArrays, regExpArrayIndex, fieldDetail);
                if (Common.IsNotDefined(regExpArray)) {
                    regExpArrayIndex++;
                    continue;
                }
                var maskLength = regExpArray.length;

                // Mask: Non RegExp characters (before the key pressed)
                while (Common.IsString(regExpArray[fieldDetail.LeftOfCaretLength])) {
                    fieldDetail.LeftOfCaret += regExpArray[fieldDetail.LeftOfCaretLength];
                    fieldDetail.LeftOfCaretLength++;
                    if ((fieldDetail.LeftOfCaretLength + fieldDetail.RightOfCaretLength) >= maskLength) {
                        Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                        return;
                    }
                }

                // Mask: Test RegExp on Key pressed (return if fail)
                if (!regExpArray[fieldDetail.LeftOfCaretLength].test(fieldDetail.KeyPressed)) {
                    if (regExpArray[fieldDetail.LeftOfCaretLength] == '/[A-Z]/') {
                        fieldDetail.KeyPressed = fieldDetail.KeyPressed.toUpperCase();
                        if (!regExpArray[fieldDetail.LeftOfCaretLength].test(fieldDetail.KeyPressed)) {
                            regExpArrayIndex++;
                            continue;
                        }
                    }
                    else if (regExpArray[fieldDetail.LeftOfCaretLength] == '/[a-z]/') {
                        fieldDetail.KeyPressed = fieldDetail.KeyPressed.toLowerCase();
                        if (!regExpArray[fieldDetail.LeftOfCaretLength].test(fieldDetail.KeyPressed)) {
                            regExpArrayIndex++;
                            continue;
                        }
                    }
                    else {
                        regExpArrayIndex++;
                        continue;
                    }
                }

                // Add the key pressed
                fieldDetail.LeftOfCaret += fieldDetail.KeyPressed;
                fieldDetail.LeftOfCaretLength++;
                if ((fieldDetail.LeftOfCaretLength + fieldDetail.RightOfCaretLength) >= maskLength) {
                    Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                    return;
                }

                // Mask: Non RegExp characters (after the key pressed)
                while (Common.IsString(regExpArray[fieldDetail.LeftOfCaretLength])) {
                    fieldDetail.LeftOfCaret += regExpArray[fieldDetail.LeftOfCaretLength];
                    fieldDetail.LeftOfCaretLength++;
                    if ((fieldDetail.LeftOfCaretLength + fieldDetail.RightOfCaretLength) >= maskLength) {
                        Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                        return;
                    }
                }

                // Set Text and Caret
                Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                return;
            }
        }

    };

    AlphanumericMask.OnFocusOut = function (maskingOptions, onFocusOut) {

        // Initialize
        var eventTarget = onFocusOut.EventTarget;
        onFocusOut.GoodData = true;

        // Trim
        var value = eventTarget.value;
        var formattedValue = Common.IsNotDefined(value) ? '' : (value + '').replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

        // Convert to data-raw
        var currentCharDefinition, rawData = formattedValue, index = 0, length = maskingOptions.Definition.length;
        for ( ; index < length; index++) {
            currentCharDefinition = maskingOptions.Definition[index];
            if (currentCharDefinition != '#' && currentCharDefinition != '@') {
                rawData = rawData.replace(currentCharDefinition, '');
            }
        }

        // Has Changed?
        if (onFocusOut.RawData == rawData) {
            onFocusOut.HasChanged = false;
            return;
        }

        // Is Empty?
        if (formattedValue.length <= 0) {
            eventTarget.value = formattedValue;
            Common.SetAttr(eventTarget, 'data-raw', rawData);
            return;
        }

        // Validate and set Text/data-raw
        if (Validate(formattedValue, maskingOptions)) {
            eventTarget.value = formattedValue;
            Common.SetAttr(eventTarget, 'data-raw', rawData);
        }
        else {
            onFocusOut.GoodData = false;
        }

    };

    AlphanumericMask.CheckValidation = function (maskingOptions, onFocusOut) {

        AlphanumericMask.OnFocusOut(maskingOptions, onFocusOut);
        return onFocusOut.GoodData;

    };

    // Private Methods
    function BuildRegExpArrays (maskDefinition) {

        // Initialize and Sanity Check
        var regExpCollection = { '#': '[0-9]', '@': '[A-Za-z]', '@>': '[A-Z]', '@<': '[a-z]' };
        var regExpArrays = [];
        if (Common.IsNotDefined(maskDefinition) || maskDefinition.length <= 0) {
            return regExpArrays;
        }

        // Defintions Array
        var definitionArray = maskDefinition.match(/\[([^\]]+)\]/g);
        if (Common.IsNotDefined(definitionArray)) {
            definitionArray = [];
            definitionArray.push('[' + maskDefinition + ']');
        }

        // Remove Brackets and Convert to RegExp Array
        var defintionValue, index = 0, length = definitionArray.length;
        for ( ; index < length; index++) {
            defintionValue = definitionArray[index];
            var regExpArray = [];
            var thisMaskDefinition = defintionValue.substr(1, defintionValue.length - 2);
            var thisMaskIndex = 0;
            while (thisMaskIndex < thisMaskDefinition.length) {
                var thisMaskKey = thisMaskDefinition.charAt(thisMaskIndex);
                if ((thisMaskIndex + 1) < thisMaskDefinition.length) {
                    var nextChar = thisMaskDefinition.charAt(thisMaskIndex + 1);
                    if (nextChar == '>' || nextChar == '<') {
                        thisMaskKey += nextChar;
                        thisMaskIndex++;
                    }
                }
                var rexExpOrString = (Common.IsNotDefined(regExpCollection[thisMaskKey])) ? thisMaskKey : new RegExp(regExpCollection[thisMaskKey]);
                regExpArray.push(rexExpOrString);
                thisMaskIndex++;
            }
            regExpArrays.push(regExpArray);
        }
        return regExpArrays;

    };

    function PickRegExpArray (regExpArrays, regExpArrayIndex, fieldDetail) {

        // Sanity Check
        if (fieldDetail.TextLength <= 0) {
            return regExpArrays[regExpArrayIndex];
        }

        // Initialize
        var fieldDetailArray = fieldDetail.Text.split('');

        // Pick RegExpArray
        while (regExpArrayIndex < regExpArrays.length) {
            // Pick Masks that are less than the length of the Field Text
            if (fieldDetail.TextLength >= regExpArrays[regExpArrayIndex].length) {
                regExpArrayIndex++;
                continue;
            }
            var regExpMatched = true;
            var fieldDetailChar, fieldDetailIndex = 0, length = fieldDetailArray.length;
            for ( ; fieldDetailIndex < length; fieldDetailIndex++) {
                fieldDetailChar = fieldDetailArray[fieldDetailIndex];
                if (Common.IsString(regExpArrays[regExpArrayIndex][fieldDetailIndex])) {
                    if (regExpArrays[regExpArrayIndex][fieldDetailIndex] != fieldDetailChar) {
                        regExpMatched = false;
                    }
                }
                else if (new RegExp(regExpArrays[regExpArrayIndex][fieldDetailIndex]).test(fieldDetailChar) != true) {
                    regExpMatched = false;
                }
            }
            if (regExpMatched) {
                return regExpArrays[regExpArrayIndex];
            }
            regExpArrayIndex++;
        }
        return null;

    };

    function BuildRegExp (maskDefinition) {

        // Initialize and Sanity Check
        var regExpString = '';
        if (Common.IsNotDefined(maskDefinition) || maskDefinition.length <= 0) {
            return new RegExp(regExpString);
        }

        // Defintions Array
        var definitionArray = maskDefinition.match(/\[([^\]]+)\]/g);
        if (Common.IsNotDefined(definitionArray)) {
            definitionArray = [];
            definitionArray.push('[' + maskDefinition + ']');
        }

        // Convert Mask to RegExp for Validation
        var definitionIndex = 0;
        while (definitionIndex < definitionArray.length) {
            if (regExpString.length > 0) {
                regExpString += '|';
            }
            var thisMaskDefinition = definitionArray[definitionIndex].substr(1, definitionArray[definitionIndex].length - 2);
            regExpString += '^' + thisMaskDefinition.replace(/#/g, '[0-9]').replace(/@>/g, '[A-Z]').replace(/@</g, '[a-z]').replace(/@/g, '[A-Za-z]').replace('(', '\\(').replace(')', '\\)') + '$';
            definitionIndex++;
        }
        return new RegExp(regExpString);

    };

    function Validate (formattedValue, maskingOptions) {

        var regExp = BuildRegExp(maskingOptions.Definition);
        return regExp.test(formattedValue);

    };

} (window.AlphanumericMask = window.AlphanumericMask || {}, window, document, Common, Cache, Events, Velocity));

// Date Mask
(function (DateMask, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var fullDatesRegEx = /(LongDate|longdate|LONGDATE|ShortDate|shortdate|SHORTDATE)/;
    var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    var monthsShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

    DateMask.BuildMaskingOptions = function (maskingOptions) {

        // Is a display only full date?
        maskingOptions.IsDisplayOnlyFullDate = fullDatesRegEx.test(maskingOptions.Definition) ? true : false;
        if (maskingOptions.IsDisplayOnlyFullDate) {
            return maskingOptions;
        }

        // Date Separator
        if (maskingOptions.Definition.indexOf('/') != -1) {
            maskingOptions.DateSeparator = '/';
        }
        else if (maskingOptions.Definition.indexOf('-') != -1) {
            maskingOptions.DateSeparator = '-';
        }
        else if (maskingOptions.Definition.indexOf('.') != -1) {
            maskingOptions.DateSeparator = '.';
        }

        // Check for time
        maskingOptions.IncludeTime = false;
        if (maskingOptions.Definition.indexOf(':') != -1) {
            maskingOptions.IncludeTime = true;
            maskingOptions.TimeSeparator = ':';
            maskingOptions.AllowMeridiem = false;
            maskingOptions.FromUTC = false;
            maskingOptions.TimeType = maskingOptions.Definition.substring(maskingOptions.Definition.indexOf(':') + 1, maskingOptions.Definition.indexOf(':') + 3);
            maskingOptions.DateMaskArray = maskingOptions.Definition.substring(0, maskingOptions.Definition.indexOf(':')).split(maskingOptions.DateSeparator);
            if (maskingOptions.TimeType == '12') {
                maskingOptions.TimeMaskArray = ['Hours', 'Minutes', 'Seconds', 'Meridiem'];
                maskingOptions.AllowMeridiem = true;
            }
            else if (maskingOptions.TimeType == '24') {
                maskingOptions.TimeMaskArray = ['Hours', 'Minutes', 'Seconds'];
            }
            
            // Convert from UTC?
            if (maskingOptions.Definition.indexOf('<') != -1) {
                maskingOptions.FromUTC = (maskingOptions.Definition.substring(maskingOptions.Definition.indexOf('<') + 1) == 'UTC');
            }
        }
        else {
            maskingOptions.DateMaskArray = maskingOptions.Definition.split(maskingOptions.DateSeparator);
        }
        return maskingOptions;

    };

    DateMask.Format = function (rawData, maskingOptions, formatResult) {

        // Sanity Check
        if (rawData.length <= 0) {
            return;
        }

        // Check raw Date string
        if (new RegExp(/\/Date\((-?\d+)\)\//).test(rawData) != true) {
            formatResult.Text = rawData;
            formatResult.Valid = false;
            return;
        }

        // Eval Date
        var evalDateString = rawData.replace(/\/Date\((-?\d+)\)\//, 'new Date($1)');
        var rawDate;
        try {
            rawDate = eval(evalDateString);
            if (maskingOptions.FromUTC) {
                var milliSecondsFrom1970 = Common.RemoveTimezone(rawDate);
                rawDate = new Date(milliSecondsFrom1970);
            }
        }
        catch (evalError) {
            formatResult.Text = rawData;
            formatResult.Valid = false;
            return;
        }

        // Add timezone offset
        rawDate = Common.AddTimezone(rawDate);

        // Is Date?
        if (rawDate.constructor != Date) {
            formatResult.Text = rawData;
            formatResult.Valid = false;
            return;
        }

        // Is display only full date?
        if (maskingOptions.IsDisplayOnlyFullDate) {
            DateMask.FormatFullDate(rawDate, maskingOptions, formatResult);
            return;
        }

        // Build Date Text
        var dateMaskIndex = 0, length = maskingOptions.DateMaskArray.length;
        for ( ; dateMaskIndex < length; dateMaskIndex++) {
            switch (maskingOptions.DateMaskArray[dateMaskIndex]) {
                case 'mm':
                    formatResult.Text += (rawDate.getMonth() + 1).toString();
                    break;
                case 'MM':
                    if ((rawDate.getMonth() + 1) < 10) {
                        formatResult.Text += '0';
                    }
                    formatResult.Text += (rawDate.getMonth() + 1).toString();
                    break;
                case 'dd':
                    formatResult.Text += rawDate.getDate().toString();
                    break;
                case 'DD':
                    if (rawDate.getDate() < 10) {
                        formatResult.Text += '0';
                    }
                    formatResult.Text += rawDate.getDate().toString();
                    break;
                case 'YYYY':
                    formatResult.Text += rawDate.getFullYear().toString();
                    break;
            }
            if (dateMaskIndex < (maskingOptions.DateMaskArray.length - 1)) {
                formatResult.Text += maskingOptions.DateSeparator;
            }
        }

        if (maskingOptions.IncludeTime) {
            var minutes = rawDate.getMinutes();
            var seconds = rawDate.getSeconds();
            var formattedMinutes = (minutes < 10) ? '0' + minutes : minutes;
            var formattedSeconds = (seconds < 10) ? '0' + seconds : seconds;
            if (maskingOptions.TimeType == '12') {
                var hours12 = (rawDate.getHours() + 11) % 12 + 1;
                var formattedHours12 = (hours12 < 10) ? '0' + hours12 : hours12;
                var antePostMeridiem = (rawDate.getHours() >= 12) ? 'PM' : 'AM';
                formatResult.Text += ' ' + formattedHours12 + ':' + formattedMinutes + ':' + formattedSeconds + ' ' + antePostMeridiem;
            }
            else if (maskingOptions.TimeType == '24') {
                var hours24 = rawDate.getHours();
                var formattedHours24 = (hours24 < 10) ? '0' + hours24 : hours24;
                formatResult.Text += ' ' + formattedHours24 + ':' + formattedMinutes + ':' + formattedSeconds;
            }
        }

    };

    DateMask.FormatFullDate = function (rawDate, maskingOptions, formatResult) {

        var dateType = maskingOptions.Definition.replace('Date(', '').replace(')', '');
        switch (dateType) {
            case 'LongDate':
                formatResult.Text = months[rawDate.getMonth()];
                break;
            case 'longdate':
                formatResult.Text = months[rawDate.getMonth()].toLowerCase();
                break;
            case 'LONGDATE':
                formatResult.Text = months[rawDate.getMonth()].toUpperCase();
                break;
            case 'ShortDate':
                formatResult.Text = monthsShort[rawDate.getMonth()];
                break;
            case 'shortdate':
                formatResult.Text = monthsShort[rawDate.getMonth()].toLowerCase();
                break;
            case 'SHORTDATE':
                formatResult.Text = monthsShort[rawDate.getMonth()].toUpperCase();
                break;
        }
        formatResult.Text += ' ' + rawDate.getDate().toString() + ', ' + rawDate.getFullYear().toString();

    };

    DateMask.OnKeyPress = function (fieldDetail, maskingOptions) {

        // Allowed Keys (0-9, Slash/Period/Hyphen/Colon/A/a/P/p/M/m)
        if ((fieldDetail.KeyCode >= Mask.Number.Zero && fieldDetail.KeyCode <= Mask.Number.Nine) || (fieldDetail.KeyPressed == maskingOptions.DateSeparator) || (fieldDetail.KeyPressed == maskingOptions.TimeSeparator) || (maskingOptions.AllowMeridiem && ((fieldDetail.KeyPressed == 'A') || (fieldDetail.KeyPressed == 'a') || (fieldDetail.KeyPressed == 'P') || (fieldDetail.KeyPressed == 'p') || (fieldDetail.KeyPressed == 'M') || (fieldDetail.KeyPressed == 'm')))) {
            // Initialize
            var lastLeftCharacter = fieldDetail.LeftOfCaret.substr(fieldDetail.LeftOfCaret.length - 1, 1);
            var firstRightCharacter = fieldDetail.RightOfCaret.substr(0, 1);
            var dateArray = (fieldDetail.LeftOfCaret + '|' + fieldDetail.RightOfCaret).split(maskingOptions.DateSeparator);

            // Allow Date Separator
            if (fieldDetail.KeyPressed == maskingOptions.DateSeparator) {
                if (fieldDetail.CaretPosition == 0 || lastLeftCharacter == maskingOptions.DateSeparator || firstRightCharacter == maskingOptions.DateSeparator) {
                    return;
                }
                if ((dateArray.length - 1) >= 2) {
                    return;
                }
            }

            // Date Parts
            var datePartEdited = 0, index = 0, length = dateArray.length;
            for ( ; index < length; index++) {
                if ((dateArray[index]).indexOf('|') != -1) {
                    datePartEdited = index;
                }
            }

            // Check if time or date is being masked/formatted
            var dateTimeSplit = fieldDetail.LeftOfCaret.split(' ');
            if (dateArray.length == maskingOptions.DateMaskArray.length && Validate(dateTimeSplit[0], maskingOptions, false) && maskingOptions.IncludeTime) {
                var allowKey = true;
                var addTimeSeparator = false;
                var completeMeridiem = false;
                var timeArray = [];

                // If: hours exist, Else: time just started being typed and need to add index since we split on date separator and not space
                if (dateTimeSplit.length > 1) {
                    // Check if they are editing an existing meridiem and make sure it gets split correctly
                    if (fieldDetail.RightOfCaret == 'M') {
                        timeArray = (dateTimeSplit[1] + maskingOptions.TimeSeparator + '|' + fieldDetail.RightOfCaret).split(maskingOptions.TimeSeparator);
                    }
                    else {
                        timeArray = (dateTimeSplit[1] + '|' + fieldDetail.RightOfCaret).split(maskingOptions.TimeSeparator);
                    }
                }
                else {
                    timeArray.push('|');
                }

                // Time Parts
                var timePartEdited = 0;
                index = 0, length = timeArray.length;
                for ( ; index < length; index++) {
                    if ((timeArray[index]).indexOf('|') != -1) {
                        timePartEdited = index;
                    }
                }

                // Check for complete time and needed meridiem
                if (timeArray.length == 3 && maskingOptions.TimeType == '12' && timeArray[2].length == 3) {
                    timeArray[timePartEdited] = (timeArray[timePartEdited]).replace('|', '');
                    timePartEdited++;
                    timeArray.push('|');
                }

                // Test for valid time section
                switch (maskingOptions.TimeMaskArray[timePartEdited]) {
                    case 'Hours':
                        if (fieldDetail.KeyPressed != maskingOptions.TimeSeparator) {
                            var hour = (timeArray[timePartEdited]).replace('|', fieldDetail.KeyPressed);
                            if (maskingOptions.TimeType == '12') {
                                if (new RegExp(/(^([1-9]|0[1-9]|1[0-2])$)/).test(hour) == false) {
                                    allowKey = false;
                                }
                            }
                            else if (maskingOptions.TimeType == '24') {
                                if (new RegExp(/(^([0-9]|0[0-9]|1[0-9]|2[0-3])$)/).test(hour) == false) {
                                    allowKey = false;
                                }
                            }
                            else {
                                allowKey = false;
                            }
                            if (hour.length == 2 && (timeArray.length - 1) < 2) {
                                addTimeSeparator = true;
                            }
                        }
                        else {
                            if ((timeArray[timePartEdited]).length == 2) {
                                timeArray[timePartEdited] = '0' + timeArray[timePartEdited];
                            }
                        }
                        break;
                    case 'Minutes':
                        if (fieldDetail.KeyPressed != maskingOptions.TimeSeparator) {
                            var minutes = (timeArray[timePartEdited]).replace('|', fieldDetail.KeyPressed);
                            if (new RegExp(/(^([0-9]|0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])$)/).test(minutes) == false) {
                                allowKey = false;
                            }
                            if (minutes.length == 2 && (timeArray.length - 1) < 2) {
                                addTimeSeparator = true;
                            }
                        }
                        else {
                            if ((timeArray[timePartEdited]).length == 2) {
                                timeArray[timePartEdited] = '0' + timeArray[timePartEdited];
                            }
                        }
                        break;
                    case 'Seconds':
                        if (fieldDetail.KeyPressed != maskingOptions.TimeSeparator) {
                            var seconds = (timeArray[timePartEdited]).replace('|', fieldDetail.KeyPressed);

                            // Remove meridiem part if user went back to edit seconds
                            if (seconds.indexOf(' ') != -1) {
                                seconds = seconds.split(' ')[0];
                            }
                            if (new RegExp(/(^([0-9]|0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])$)/).test(seconds) == false) {
                                allowKey = false;
                            }
                        }
                        break;
                    case 'Meridiem':
                        if (maskingOptions.TimeType == '12' && fieldDetail.KeyPressed != maskingOptions.TimeSeparator) {
                            var meridiem = (timeArray[timePartEdited]).replace('|', fieldDetail.KeyPressed);
                            if (new RegExp(/(^(A|a|P|p|M|m|AM|aM|Am|am|PM|pM|Pm|pm)$)/).test(meridiem) == false) {
                                allowKey = false;
                            }
                            else {
                                completeMeridiem = true;
                            }
                        }
                        break;
                }
                if (!allowKey) {
                    return;
                }

                // If adding meridiem remove last index so time separator is not added on array join
                if (completeMeridiem) {
                    timeArray.pop();
                }

                // Split back to LeftCaret and RightCaret
                var dateText = dateTimeSplit[0] + ' ' + timeArray.join(maskingOptions.TimeSeparator);
                fieldDetail.LeftOfCaret = dateText.split('|')[0];
                fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
                fieldDetail.RightOfCaret = dateText.split('|')[1];
                if (!fieldDetail.RightOfCaret) {
                    fieldDetail.RightOfCaret = '';
                }
                fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;

                // Add the key pressed and handle meridiem
                if (completeMeridiem) {
                    fieldDetail.LeftOfCaret += ' ';
                    if (fieldDetail.KeyPressed == 'a' || fieldDetail.KeyPressed == 'A') {
                        fieldDetail.LeftOfCaret += 'AM';
                    }
                    else if (fieldDetail.KeyPressed == 'p' || fieldDetail.KeyPressed == 'P') {
                        fieldDetail.LeftOfCaret += 'PM';
                    }
                    else if (fieldDetail.KeyPressed == 'm' || fieldDetail.KeyPressed == 'M') {
                        if (dateTimeSplit.length == 3) {
                            var meridiemCheck = dateTimeSplit[2].toUpperCase();
                            if (meridiemCheck == 'A') {
                                fieldDetail.LeftOfCaret += 'AM';
                            }
                            else if (meridiemCheck == 'P') {
                                fieldDetail.LeftOfCaret += 'PM';
                            }
                        }
                    }
                    fieldDetail.LeftOfCaretLength += 3;
                }
                else {
                    fieldDetail.LeftOfCaret += fieldDetail.KeyPressed;
                    fieldDetail.LeftOfCaretLength++;
                }

                // Add Time Separator?
                if (addTimeSeparator && fieldDetail.RightOfCaret[0] != maskingOptions.TimeSeparator) {
                    fieldDetail.LeftOfCaret += maskingOptions.TimeSeparator;
                    fieldDetail.LeftOfCaretLength++;
                }

                // Set Text and Caret
                Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
            }
            else {
                var allowKey = true;
                var addDateSeparator = false;
                switch (maskingOptions.DateMaskArray[datePartEdited]) {
                    case 'mm':
                        if (fieldDetail.KeyPressed != maskingOptions.DateSeparator) {
                            var mm = (dateArray[datePartEdited]).replace('|', fieldDetail.KeyPressed);
                            if (new RegExp(/(^[1-9]$|^1[012]$)/).test(mm) == false) {
                                allowKey = false;
                            }
                            if (mm.length == 2 && (dateArray.length - 1) < 2) {
                                addDateSeparator = true;
                            }
                        }
                        break;
                    case 'MM':
                        if (fieldDetail.KeyPressed != maskingOptions.DateSeparator) {
                            var MM = (dateArray[datePartEdited]).replace('|', fieldDetail.KeyPressed);
                            if (new RegExp(/(^[0-9]$|^0[1-9]$|^1[012]$)/).test(MM) == false) {
                                allowKey = false;
                            }
                            if (MM.length == 2 && (dateArray.length - 1) < 2) {
                                addDateSeparator = true;
                            }
                        }
                        else {
                            if ((dateArray[datePartEdited]).length == 2) {
                                dateArray[datePartEdited] = '0' + dateArray[datePartEdited];
                            }
                        }
                        break;
                    case 'dd':
                        if (fieldDetail.KeyPressed != maskingOptions.DateSeparator) {
                            var dd = (dateArray[datePartEdited]).replace('|', fieldDetail.KeyPressed);
                            if (new RegExp(/(^[1-9]$|^1[0-9]$|^2[0-9]$|^3[01]$)/).test(dd) == false) {
                                allowKey = false;
                            }
                            if (dd.length == 2 && (dateArray.length - 1) < 2) {
                                addDateSeparator = true;
                            }
                        }
                        break;
                    case 'DD':
                        if (fieldDetail.KeyPressed != maskingOptions.DateSeparator) {
                            var DD = (dateArray[datePartEdited]).replace('|', fieldDetail.KeyPressed);
                            if (new RegExp(/(^[0-9]$|^0[1-9]$|^1[0-9]$|^2[0-9]$|^3[01]$)/).test(DD) == false) {
                                allowKey = false;
                            }
                            if (DD.length == 2 && (dateArray.length - 1) < 2) {
                                addDateSeparator = true;
                            }
                        }
                        else {
                            if ((dateArray[datePartEdited]).length == 2) {
                                dateArray[datePartEdited] = '0' + dateArray[datePartEdited];
                            }
                        }
                        break;
                    case 'YYYY':
                        if (fieldDetail.KeyPressed != maskingOptions.DateSeparator) {
                            var YYYY = (dateArray[datePartEdited]).replace('|', fieldDetail.KeyPressed);

                            // Remove time part
                            if (maskingOptions.IncludeTime && YYYY.indexOf(' ') != -1) {
                                YYYY = YYYY.split(' ')[0];
                            }
                            if (new RegExp(/(^1$|^2$|^19[0-9]{0,1}[0-9]{0,1}$|^20[0-9]{0,1}[0-9]{0,1}$|^21[0-9]{0,1}[0-9]{0,1}$|^22[0-9]{0,1}[0-9]{0,1}$)/).test(YYYY) == false) {
                                allowKey = false;
                            }
                        }
                        break;
                }
                if (!allowKey) {
                    return;
                }

                // Split back to LeftCaret and RightCaret
                var dateText = dateArray.join(maskingOptions.DateSeparator);
                fieldDetail.LeftOfCaret = dateText.split('|')[0];
                fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
                fieldDetail.RightOfCaret = dateText.split('|')[1];
                fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;

                // Add the key pressed
                fieldDetail.LeftOfCaret += fieldDetail.KeyPressed;
                fieldDetail.LeftOfCaretLength++;

                // Add Date Separator?
                if (addDateSeparator && fieldDetail.RightOfCaret[0] != maskingOptions.DateSeparator) {
                    fieldDetail.LeftOfCaret += maskingOptions.DateSeparator;
                    fieldDetail.LeftOfCaretLength++;
                }

                // Set Text and Caret
                Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
            }
        }

    };

    DateMask.OnFocusOut = function (maskingOptions, onFocusOut) {

        // Initialize
        var eventTarget = onFocusOut.EventTarget;
        var dateText = eventTarget.value;
        onFocusOut.GoodData = true;

        // Is Empty?
        if (dateText.length <= 0) {
            // Has Changed?
            if (onFocusOut.RawData == '') {
                onFocusOut.HasChanged = false;
                return;
            }

            // Clear data-raw
            eventTarget.value = '';
            Common.SetAttr(eventTarget, 'data-raw', '');
            return;
        }

        // Validate
        onFocusOut.GoodData = Validate(dateText, maskingOptions, true);

        // Convert to data-raw
        if (onFocusOut.GoodData) {
            // Set Day for MM/YYYY to 1
            if (maskingOptions.Definition == 'MM/YYYY') {
                dateText = dateText.replace('/', '/1/');
            }
            else if (maskingOptions.Definition == 'DD/MM/YYYY') {
                // TODO: Solve for all date formats
                dateText = dateText.replace(/([0-9]+)\/([0-9]+)/, '$2/$1');
            }

            // Get Milliseonds from 1970
            var milliSecondsFrom1970 = Date.parse(dateText);

            // Compensate for timezone
            milliSecondsFrom1970 = Common.RemoveTimezone(milliSecondsFrom1970);

            // Build data-raw
            var rawData = '/Date(' + milliSecondsFrom1970.toString() + ')/';

            // Has Changed?
            if (onFocusOut.RawData == rawData) {
                onFocusOut.HasChanged = false;
                return;
            }

            // Set data-raw
            Common.SetAttr(eventTarget, 'data-raw', rawData);
        }

    };

    DateMask.CheckValidation = function (maskingOptions, onFocusOut) {

        DateMask.OnFocusOut(maskingOptions, onFocusOut);
        return onFocusOut.GoodData;

    };

    // Private Methods
    function Validate (formattedDate, maskingOptions, doTimeValidation) {

        // Split date and time
        var dateArray, timeArray;
        if (maskingOptions.IncludeTime && doTimeValidation) {
            if (maskingOptions.TimeType == '12') {
                dateArray = formattedDate.substring(0, formattedDate.indexOf(' ')).split(maskingOptions.DateSeparator);
                timeArray = formattedDate.substring(formattedDate.indexOf(' ') + 1).split(':');
                var antePostMeridiemArray = timeArray.pop().split(' ');
                if (antePostMeridiemArray.length == 2) {
                    timeArray.push(antePostMeridiemArray[0]);
                    timeArray.push(antePostMeridiemArray[1]);
                }
            }
            else if (maskingOptions.TimeType == '24') {
                dateArray = formattedDate.substring(0, formattedDate.indexOf(' ')).split(maskingOptions.DateSeparator);
                timeArray = formattedDate.substring(formattedDate.indexOf(' ') + 1).split(':');
            }
        }
        else {
            dateArray = formattedDate.split(maskingOptions.DateSeparator);
        }

        // Number of Date Parts?
        if (dateArray.length != maskingOptions.DateMaskArray.length) {
            return false;
        }

        // Date Parts
        var yearOfDate, monthOfDate, dayOfDate, index = 0, length = maskingOptions.DateMaskArray.length;
        for ( ; index < length; index++) {
            switch (maskingOptions.DateMaskArray[index]) {
                case 'mm':
                    if (new RegExp(/(^[1-9]$|^1[012]$)/).test(dateArray[index]) == false) {
                        return false;
                    }
                    monthOfDate = parseInt(dateArray[index], 10) - 1;
                    break;
                case 'MM':
                    if (new RegExp(/(^0[1-9]$|^1[012]$)/).test(dateArray[index]) == false) {
                        return false;
                    }
                    monthOfDate = parseInt(dateArray[index], 10) - 1;
                    break;
                case 'dd':
                    if (new RegExp(/(^[1-9]$|^1[0-9]$|^2[0-9]$|^3[01]$)/).test(dateArray[index]) == false) {
                        return false;
                    }
                    dayOfDate = parseInt(dateArray[index], 10);
                    break;
                case 'DD':
                    if (new RegExp(/(^0[1-9]$|^1[0-9]$|^2[0-9]$|^3[01]$)/).test(dateArray[index]) == false) {
                        return false;
                    }
                    dayOfDate = parseInt(dateArray[index], 10);
                    break;
                case 'YYYY':
                    if (new RegExp(/(^19[0-9][0-9]$|^20[0-9][0-9]$|^21[0-9][0-9]$|^22[0-9][0-9]$)/).test(dateArray[index]) == false) {
                        return false;
                    }
                    yearOfDate = parseInt(dateArray[index], 10);
                    break;
                default:
                    return false;
            }
        }

        // Set Day for MM/YYYY to 1
        if (maskingOptions.Definition == 'MM/YYYY') {
            dayOfDate = 1;
        }

        // Days of Month/Leap Year (Date object change Days/Month/Year if passed invalid values)
        var presumedDate = new Date(yearOfDate, monthOfDate, dayOfDate);
        if (presumedDate.getDate() != dayOfDate) {
            return false;
        }
        return true;

    };

} (window.DateMask = window.DateMask || {}, window, document, Common, Cache, Events, Velocity));

// Feet Mask
(function (FeetMask, window, document, Common, Cache, Events, Velocity, undefined) {

    FeetMask.BuildMaskingOptions = function (maskingOptions) {

        // Limits
        var regExpDigit = new RegExp(/[0-9]/);
        var feetInchesArray = maskingOptions.Definition.split(',');
        var feetPortion = feetInchesArray[0];
        if (feetPortion.charAt(0) == '#' && feetPortion.charAt(1) == '{') {
            maskingOptions.FeetLowerLimit = feetPortion.substring(feetPortion.indexOf('{') + 1, feetPortion.indexOf('-'));
            if (!regExpDigit.test(maskingOptions.FeetLowerLimit)) {
                maskingOptions.FeetLowerLimit = '*';
            }
            maskingOptions.FeetUpperLimit = feetPortion.substring(feetPortion.indexOf('-') + 1, feetPortion.indexOf('}'));
            if (!regExpDigit.test(maskingOptions.FeetUpperLimit)) {
                maskingOptions.FeetUpperLimit = '*';
            }
        }
        var inchesPortion = feetInchesArray[1];
        if (inchesPortion.charAt(0) == '#' && inchesPortion.charAt(1) == '{') {
            maskingOptions.InchesLowerLimit = inchesPortion.substring(inchesPortion.indexOf('{') + 1, inchesPortion.indexOf('-'));
            if (!regExpDigit.test(maskingOptions.InchesLowerLimit)) {
                maskingOptions.InchesLowerLimit = '0';
                maskingOptions.InchesLowerLimitDefault = true;
            }
            maskingOptions.InchesUpperLimit = inchesPortion.substring(inchesPortion.indexOf('-') + 1, inchesPortion.indexOf('}'));
            if (!regExpDigit.test(maskingOptions.InchesUpperLimit)) {
                maskingOptions.InchesUpperLimit = '11';
                maskingOptions.InchesUpperLimitDefault = true;
            }
        }
        return maskingOptions;

    };

    FeetMask.Format = function (rawData, maskingOptions, formatResult, displayOnly) {

        // Sanity Check
        if (rawData.length <= 0) {
            return;
        }

        // Validate
        if (!Validate(rawData, maskingOptions, displayOnly)) {
            formatResult.Text = rawData;
            formatResult.Valid = false;
            return;
        }

        // Convert to String
        var feetInchesArray = rawData.split('.');
        var feetPart = feetInchesArray[0];
        var inchesPart = feetInchesArray[1];

        // Replace . with ' and add "
        formatResult.Text = feetPart + '\' ' + inchesPart + '&#34;';

        // Decode &#34;
        var domParser = new DOMParser;
        var domObject = domParser.parseFromString('<!doctype html><body>' + formatResult.Text, 'text/html');
        formatResult.Text = domObject.body.textContent;

    };

    FeetMask.OnKeyPress = function (fieldDetail, maskingOptions) {

        // Allowed Keys (0-9, Single Quote, Double Quote)
        if ((fieldDetail.KeyCode >= Mask.Number.Zero && fieldDetail.KeyCode <= Mask.Number.Nine) || (fieldDetail.KeyPressed == '\'') || (fieldDetail.KeyPressed == '"') || (fieldDetail.KeyCode == GTC.Keyboard.Space)) {
            // Initialize
            var lastLeftCharacter = fieldDetail.LeftOfCaret.substr(fieldDetail.LeftOfCaret.length - 1, 1);
            var firstRightCharacter = fieldDetail.RightOfCaret.substr(0, 1);

            // On space of initial entry add '
            if (fieldDetail.KeyCode == GTC.Keyboard.Space && fieldDetail.RightOfCaret == '' && /^\d$/.test(lastLeftCharacter) && fieldDetail.Text.indexOf('\'') == -1) {
                fieldDetail.LeftOfCaret += '\' ';
                Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                return;
            }

            // First Character
            if (fieldDetail.KeyPressed == '\'' || fieldDetail.KeyPressed == '"' || fieldDetail.KeyPressed == '0' || fieldDetail.KeyCode == GTC.Keyboard.Space) {
                if (fieldDetail.CaretPosition == 0) {
                    if (fieldDetail.KeyPressed == '0' || fieldDetail.KeyCode == GTC.Keyboard.Space) {
                        if (fieldDetail.TextLength == 0) {
                            if (maskingOptions.FeetLowerLimit == '*' && maskingOptions.FeetUpperLimit == '*') {
                                if (fieldDetail.KeyCode == GTC.Keyboard.Space) {
                                    fieldDetail.KeyPressed = '0';
                                }
                                fieldDetail.LeftOfCaret += fieldDetail.KeyPressed + '\' ';
                                Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                                return;
                            }
                        }
                        else {
                            if (maskingOptions.FeetLowerLimit == '*' && maskingOptions.FeetUpperLimit == '*' && Common.IsEmptyString(lastLeftCharacter) && firstRightCharacter == '\'') {
                                fieldDetail.LeftOfCaret += fieldDetail.KeyPressed;
                                Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                                return;
                            }
                        }
                    }
                    return;
                }
            }

            // Handle Single Quote
            if (fieldDetail.KeyPressed == '\'') {
                if (fieldDetail.LeftOfCaret.indexOf('\'') != -1 || fieldDetail.RightOfCaret.indexOf('\'') != -1) {
                    return;
                }
                fieldDetail.LeftOfCaret += fieldDetail.KeyPressed + ' ';
                Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                return;
            }

            // Handle Double Quote
            if (fieldDetail.KeyPressed == '"') {
                if (fieldDetail.LeftOfCaret.indexOf('"') != -1 || fieldDetail.RightOfCaret.indexOf('"') != -1) {
                    return;
                }
                else {
                    if (lastLeftCharacter == '\'' || lastLeftCharacter == ' ') {
                        return;
                    }
                    else {
                        if (Common.IsNotEmptyString(firstRightCharacter)) {
                            return;
                        }
                        fieldDetail.LeftOfCaret += fieldDetail.KeyPressed;
                        Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                        return;
                    }
                }
            }

            // Handle Suprious 0s
            if (lastLeftCharacter == '0' && firstRightCharacter == '\'') {
                if (parseFloat(fieldDetail.LeftOfCaret) <= parseFloat(0)) {
                    return;
                }
            }

            // Handle Suprious Inches before Space
            if (lastLeftCharacter == '\'' && firstRightCharacter == ' ') {
                return;
            }

            // Feet and Inches
            var feetAndInches = (fieldDetail.LeftOfCaret + fieldDetail.KeyPressed + fieldDetail.RightOfCaret).replace(' ', '');

            // Inches Lower/Upper Limit Check
            var inchesArray = feetAndInches.replace('"', '').split('\'');
            if (inchesArray.length > 1) {
                if (inchesArray[1].length > 2) {
                    return;
                }
                if (inchesArray[1].length > 1 && inchesArray[1].charAt(0) == '0') {
                    return;
                }
                if (maskingOptions.InchesLowerLimitDefault == true && parseInt(inchesArray[1], 10) < parseFloat(maskingOptions.InchesLowerLimit)) {
                    return;
                }
                else if (maskingOptions.InchesUpperLimitDefault == true && parseInt(inchesArray[1], 10) > parseFloat(maskingOptions.InchesUpperLimit)) {
                    return;
                }
            }

            // Add the key pressed
            fieldDetail.LeftOfCaret += fieldDetail.KeyPressed;
            fieldDetail.LeftOfCaretLength++;

            // Set Text and Caret
            Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
        }

    };

    FeetMask.OnFocusOut = function (maskingOptions, onFocusOut) {

        // Initialize
        var eventTarget = onFocusOut.EventTarget;
        onFocusOut.GoodData = true;

        // Is Empty?
        var rawData = eventTarget.value;
        if (rawData.length <= 0) {
            // Has Changed?
            if (onFocusOut.RawData == '') {
                onFocusOut.HasChanged = false;
                return;
            }

            // Clear data-raw
            eventTarget.value = '';
            Common.SetAttr(eventTarget, 'data-raw', '');
            return;
        }

        // Convert to data-raw
        rawData = rawData.replace('\'', '.');
        if (rawData.indexOf('.') == -1) {
            if (rawData.indexOf('"') != -1) {
                rawData = '0.' + rawData.replace('"', '').replace(' ', '');
            }
            else {
                rawData = rawData.replace(' ', '') + '.0';
            }
        }
        else {
            rawData = rawData.replace('"', '').replace(' ', '');
            if (rawData.charAt(rawData.length - 1) == '.') {
                rawData += '0';
            }
        }

        // Has Changed?
        if (onFocusOut.RawData == rawData) {
            onFocusOut.HasChanged = false;
            return;
        }

        // Validate
        onFocusOut.GoodData = Validate(rawData, maskingOptions);

        // Set Text/data-raw
        if (onFocusOut.GoodData) {
            var formattedValue = rawData.replace('.', '\' ') + '"';
            eventTarget.value = formattedValue;
            Common.SetAttr(eventTarget, 'data-raw', rawData);
        }

    };

    FeetMask.CheckValidation = function (maskingOptions, onFocusOut) {

        FeetMask.OnFocusOut(maskingOptions, onFocusOut);
        return onFocusOut.GoodData;

    };

    // Private Methods
    function Validate (rawData, maskingOptions, displayOnly) {

        // Valid Number?
        if (new RegExp(/^\s*(\+|-)?((\d+(\.\d+)?)|(\.\d+))\s*$/).test(rawData) == false) {
            return false;
        }

        // Initialize
        var feetInchesArray = rawData.split('.');
        var feetPart = feetInchesArray[0];
        var inchesPart = feetInchesArray[1];

        // Valid Number?
        if (inchesPart.length > 0) {
            if (new RegExp(/^\d{0,2}$/).test(inchesPart) != true) {
                return false;
            }
        }

        // Inches Lower/Upper Limit Check
        var inchesValue = parseInt(inchesPart, 10);
        if (maskingOptions.InchesLowerLimit != '*' && inchesValue < parseFloat(maskingOptions.InchesLowerLimit)) {
            return false;
        }
        else if (maskingOptions.InchesUpperLimit != '*' && inchesValue > parseFloat(maskingOptions.InchesUpperLimit)) {
            return false;
        }

        // Feet Lower/Upper Limit Check
        var feetValue = parseInt(feetPart, 10);
        if (maskingOptions.FeetLowerLimit != '*' && feetValue < parseFloat(maskingOptions.FeetLowerLimit)) {
            return false;
        }
        else if (maskingOptions.FeetUpperLimit != '*' && feetValue > parseFloat(maskingOptions.FeetUpperLimit)) {
            return false;
        }
        return true;

    };

} (window.FeetMask = window.FeetMask || {}, window, document, Common, Cache, Events, Velocity));


// Name Mask
(function (NameMask, window, document, Common, Cache, Events, Velocity, undefined) {

    NameMask.BuildMaskingOptions = function (maskingOptions) {

        return maskingOptions;

    };

    NameMask.Format = function (rawData, maskingOptions, formatResult) {

        // Raw data length
        var rawDataSize = Common.IsDefined(rawData) ? rawData.length : 0;
        if (rawDataSize <= 0) {
            formatResult.Text = rawData;
            formatResult.Valid = true;
            return;
        }

        // Format
        var lastLeftCharacter = "";
        formatResult.Text = "";
        var index = 0, length = rawDataSize;
        for ( ; index < length; index++) {
            // Capitalize first letter, Capitalize letter after ', Capitalize letter after Space, Capitalize letter after Mc, Capitalize letter after Mac
            if (index == 0 || lastLeftCharacter == '\'' || lastLeftCharacter == ' ' || lastLeftCharacter == '-' || formatResult.Text == 'Mc' || formatResult.Text == 'Mac') {
                formatResult.Text += rawData[index].toUpperCase();
            }
            else {
                formatResult.Text += rawData[index];
            }
            lastLeftCharacter = rawData[index];
        }
        formatResult.Valid = true;

    };

    NameMask.OnKeyPress = function (fieldDetail, maskingOptions) {

        // Allowed Keys (A-Z, a-z, Quote, Space, Hyphen)
        if ((fieldDetail.KeyPressed >= 'A' && fieldDetail.KeyPressed <= 'z') || fieldDetail.KeyPressed == '\'' || fieldDetail.KeyPressed == ' ' || fieldDetail.KeyPressed == '-') {
            // Initialize
            var lastLeftCharacter = fieldDetail.LeftOfCaret.substr(fieldDetail.LeftOfCaret.length - 1, 1);
            var firstRightCharacter = fieldDetail.RightOfCaret.substr(0, 1);

            // Space
            if (fieldDetail.KeyPressed == ' ') {
                // At the begining
                if (fieldDetail.CaretPosition == 0) {
                    return;
                }

                // Consequtive
                if (lastLeftCharacter == ' ' || firstRightCharacter == ' ') {
                    return;
                }
            }

            // Capitalize first letter, Capitalize letter after ', Capitalize letter after Space, Capitalize letter after Mc, Capitalize letter after Mac
            if (fieldDetail.CaretPosition == 0 || lastLeftCharacter == '\'' || lastLeftCharacter == ' ' || lastLeftCharacter == '-' || fieldDetail.LeftOfCaret == 'Mc' || fieldDetail.LeftOfCaret == 'Mac') {
                fieldDetail.KeyPressed = fieldDetail.KeyPressed.toUpperCase();
                fieldDetail.RightOfCaret = fieldDetail.RightOfCaret.slice(0, 1).toLowerCase() + fieldDetail.RightOfCaret.slice(1, fieldDetail.RightOfCaret.length);
            }

            // Quote
            if (fieldDetail.KeyPressed == '\'' || fieldDetail.KeyPressed == ' ' || fieldDetail.KeyPressed == '-') {
                fieldDetail.RightOfCaret = fieldDetail.RightOfCaret.slice(0, 1).toUpperCase() + fieldDetail.RightOfCaret.slice(1, fieldDetail.RightOfCaret.length);
            }

            // Add the key pressed
            fieldDetail.LeftOfCaret += fieldDetail.KeyPressed;

            // Set Text and Caret
            Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
        }

    };

    NameMask.OnFocusOut = function (maskingOptions, onFocusOut) {

        // Initialize
        var eventTarget = onFocusOut.EventTarget;
        onFocusOut.GoodData = true;

        // Convert to data-raw (formatted value)
        var value = eventTarget.value;
        var formattedValue = Common.IsNotDefined(value) ? '' : (value + '').replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

        // Has Changed?
        if (onFocusOut.RawData == formattedValue) {
            onFocusOut.HasChanged = false;
            return;
        }

        // Set Text/data-raw
        eventTarget.value = formattedValue;
        Common.SetAttr(eventTarget, 'data-raw', formattedValue);

    };

    NameMask.CheckValidation = function (maskingOptions, onFocusOut) {

        return true;

    };

} (window.NameMask = window.NameMask || {}, window, document, Common, Cache, Events, Velocity));

// Numeric Mask
(function (NumericMask, window, document, Common, Cache, Events, Velocity, undefined) {

    NumericMask.BuildMaskingOptions = function (maskingOptions) {

        // Initialize
        var maskDefinitionIndex = 0;

        // Currency/Percent Prefix
        maskingOptions.CurrencyPrefix = '';
        maskingOptions.PercentSuffix = '';
        if (maskingOptions.Definition.charAt(maskDefinitionIndex) == '$') {
            maskingOptions.CurrencyPrefix = maskingOptions.Definition.charAt(maskDefinitionIndex);
            maskDefinitionIndex++;
        }
        else if (maskingOptions.Definition.charAt(maskDefinitionIndex) == '%') {
            maskingOptions.PercentSuffix = maskingOptions.Definition.charAt(maskDefinitionIndex);
            maskDefinitionIndex++;
        }

        // Thousands Separator
        maskingOptions.ThousandsSeparator = '';
        if (maskingOptions.Definition.charAt(maskDefinitionIndex) != '-' && maskingOptions.Definition.charAt(maskDefinitionIndex) != '[') {
            maskingOptions.ThousandsSeparator = maskingOptions.Definition.charAt(maskDefinitionIndex);
            maskDefinitionIndex++;
        }

        // Allow Negative
        maskingOptions.AllowNegative = false;
        if (maskingOptions.Definition.charAt(maskDefinitionIndex) == '-') {
            maskingOptions.AllowNegative = true;
            maskDefinitionIndex++;
        }

        // Decimal Separator
        var indexBeforeDecimal = maskingOptions.Definition.indexOf('[', maskingOptions.Definition.indexOf('[') + 1);
        if (indexBeforeDecimal != -1 && maskingOptions.Definition.substr(indexBeforeDecimal - 1, 1) != ']') {
            maskingOptions.DecimalSeparator = maskingOptions.Definition.substr(indexBeforeDecimal - 1, 1);
        }

        // Thousands Lower/Upper Limit
        var regExpDigit = new RegExp(/[0-9]/);
        var thousandsPortion = maskingOptions.Definition.substring(maskingOptions.Definition.indexOf('['), maskingOptions.Definition.indexOf(']') + 1);
        if (thousandsPortion.charAt(1) == '#' && thousandsPortion.charAt(2) == '{') {
            if (thousandsPortion.charAt(3) == '-') {
                maskingOptions.ThousandsLowerLimit = thousandsPortion.substring(thousandsPortion.indexOf('{') + 1, thousandsPortion.lastIndexOf('-'));
                if (!regExpDigit.test(maskingOptions.ThousandsLowerLimit)) {
                    maskingOptions.ThousandsLowerLimit = '*';
                }
                maskingOptions.ThousandsUpperLimit = thousandsPortion.substring(thousandsPortion.lastIndexOf('-') + 1, thousandsPortion.indexOf('}'));
                if (!regExpDigit.test(maskingOptions.ThousandsUpperLimit)) {
                    maskingOptions.ThousandsUpperLimit = '*';
                }
            }
            else {
                maskingOptions.ThousandsLowerLimit = thousandsPortion.substring(thousandsPortion.indexOf('{') + 1, thousandsPortion.indexOf('-'));
                if (!regExpDigit.test(maskingOptions.ThousandsLowerLimit)) {
                    maskingOptions.ThousandsLowerLimit = '*';
                }
                maskingOptions.ThousandsUpperLimit = thousandsPortion.substring(thousandsPortion.indexOf('-') + 1, thousandsPortion.indexOf('}'));
                if (!regExpDigit.test(maskingOptions.ThousandsUpperLimit)) {
                    maskingOptions.ThousandsUpperLimit = '*';
                }
            }
        }

        // Decimal Limit
        var decimalPortion = maskingOptions.Definition.substring(maskingOptions.Definition.indexOf('[', maskingOptions.Definition.indexOf('[') + 1), maskingOptions.Definition.indexOf(']', maskingOptions.Definition.indexOf(']') + 1) + 1);
        if (decimalPortion.charAt(1) == '#') {
            maskingOptions.DecimalLimit = decimalPortion.substring(decimalPortion.indexOf('[') + 1, decimalPortion.indexOf(']')).length;
        }
        else {
            maskingOptions.DecimalLimit = 0;
        }
        return maskingOptions;

    };

    NumericMask.Format = function (rawData, maskingOptions, formatResult, displayOnly) {

        // Sanity Check
        if (rawData.length <= 0) {
            return;
        }

        // Adjust Raw data if % Mask or decimal rounding a display value
        if (maskingOptions.PercentSuffix.length > 0) {
            var percentDecimal = parseFloat('1' + new Array(maskingOptions.DecimalLimit + 1).join('0'));
            rawData = (Math.round((parseFloat(rawData) * parseFloat(100)) * percentDecimal) / percentDecimal).toString();
        }
        else if (displayOnly && maskingOptions.DecimalLimit > 0) {
            rawData = (parseFloat(rawData).toFixed(maskingOptions.DecimalLimit)).toString();
        }

        // Validate
        if (!Validate(rawData, maskingOptions, displayOnly)) {
            formatResult.Text = rawData;
            formatResult.Valid = false;
            return;
        }

        // Format
        formatResult.Text = AdjustDecimalZeros(rawData, maskingOptions);
        if (maskingOptions.DecimalLimit > 0) {
            formatResult.Text = formatResult.Text.replace('.', maskingOptions.DecimalSeparator);
        }
        formatResult.Text = InsertThousandsSeparator(formatResult.Text, maskingOptions);
        formatResult.Text = maskingOptions.CurrencyPrefix + formatResult.Text.replace('-', '') + maskingOptions.PercentSuffix;
        if (parseFloat(rawData) < parseFloat(0)) {
            formatResult.Text = '(' + formatResult.Text + ')';
        }

    };

    NumericMask.OnKeyPress = function (fieldDetail, maskingOptions) {

        // Allowed Keys (0-9, Period/Comma, Hyphen)
        if ((fieldDetail.KeyCode >= Mask.Number.Zero && fieldDetail.KeyCode <= Mask.Number.Nine) ||
            (maskingOptions.DecimalLimit > 0 && fieldDetail.KeyPressed == maskingOptions.DecimalSeparator) ||
            (maskingOptions.AllowNegative == true && fieldDetail.KeyPressed == '-')) {
            // Initialize
            var lastLeftCharacter = fieldDetail.LeftOfCaret.substr(fieldDetail.LeftOfCaret.length - 1, 1);
            var firstRightCharacter = fieldDetail.RightOfCaret.substr(0, 1);
            var rawLeftOfCaret = fieldDetail.LeftOfCaret.replace(maskingOptions.CurrencyPrefix, '').replace('(', '').replace(')', '');

            // Sanity Check
            if (fieldDetail.LeftOfCaretLength > 0 || fieldDetail.RightOfCaretLength > 0) {
                if ((maskingOptions.CurrencyPrefix.length > 0 && firstRightCharacter == maskingOptions.CurrencyPrefix) || lastLeftCharacter == ')' || firstRightCharacter == '(') {
                    return;
                }
            }
            if (fieldDetail.KeyCode >= Mask.Number.Zero && fieldDetail.KeyCode <= Mask.Number.Nine) {
                if (rawLeftOfCaret == '0') {
                    return;
                }
            }

            // Currency prefix
            if (maskingOptions.CurrencyPrefix.length > 0) {
                if (fieldDetail.CaretPosition == 0 || (fieldDetail.CaretPosition == 1 && lastLeftCharacter == '(')) {
                    fieldDetail.LeftOfCaret += maskingOptions.CurrencyPrefix;
                    fieldDetail.LeftOfCaretLength++;
                }
            }

            // Negative Brackets
            if (fieldDetail.KeyPressed == '-') {
                if (fieldDetail.CaretPosition == 0) {
                    if (firstRightCharacter == '(') {
                        return;
                    }
                    fieldDetail.LeftOfCaret = '(' + fieldDetail.LeftOfCaret.replace(/\(/g, '');
                    fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
                    fieldDetail.RightOfCaret = fieldDetail.RightOfCaret.replace(/\)/g, '') + ')';
                    fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;
                    Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
                }
                return;
            }

            // Remove Spurious Negative Brackets
            if (maskingOptions.AllowNegative) {
                if (fieldDetail.LeftOfCaret.indexOf('(') == -1) {
                    if (fieldDetail.RightOfCaret.indexOf(')') != -1) {
                        fieldDetail.RightOfCaret = fieldDetail.RightOfCaret.replace(/\)/g, '');
                        fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;
                    }
                }
                if (fieldDetail.RightOfCaret.indexOf(')') == -1) {
                    if (fieldDetail.LeftOfCaret.indexOf('(') != -1) {
                        fieldDetail.LeftOfCaret = fieldDetail.LeftOfCaret.replace(/\(/g, '');
                        fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
                    }
                }
            }

            // Preceding Zero
            if (fieldDetail.KeyPressed == '0') {
                if (fieldDetail.LeftOfCaret.indexOf('.') == -1) {
                    if (rawLeftOfCaret == '0' || (Common.IsEmptyString(rawLeftOfCaret) && fieldDetail.RightOfCaretLength > 0 && fieldDetail.RightOfCaret != ')')) {
                        return;
                    }
                }
            }

            // Decimal Separator
            if (fieldDetail.KeyPressed == maskingOptions.DecimalSeparator) {
                if (fieldDetail.LeftOfCaret.indexOf(maskingOptions.DecimalSeparator) != -1 || fieldDetail.RightOfCaret.indexOf(maskingOptions.DecimalSeparator) != -1) {
                    return;
                }
                else {
                    if (fieldDetail.RightOfCaret.length > maskingOptions.DecimalLimit) {
                        return;
                    }
                }
                if (Common.IsEmptyString(lastLeftCharacter) || lastLeftCharacter == maskingOptions.CurrencyPrefix || lastLeftCharacter == '(') {
                    fieldDetail.LeftOfCaret += '0';
                    fieldDetail.LeftOfCaretLength++;
                }
            }

            // Decimal Limit
            if (fieldDetail.LeftOfCaret.indexOf(maskingOptions.DecimalSeparator) != -1) {
                var decimalLength = ((fieldDetail.LeftOfCaret + fieldDetail.RightOfCaret.replace(/\)/g, '').replace('%', '')).split(maskingOptions.DecimalSeparator)[1]).length;
                if (decimalLength >= maskingOptions.DecimalLimit) {
                    return;
                }
            }

            // Add the key pressed
            fieldDetail.LeftOfCaret += fieldDetail.KeyPressed;
            fieldDetail.LeftOfCaretLength++;

            // Thousands Separator
            if (maskingOptions.ThousandsSeparator.length > 0) {
                // Insert Thousands Separator (with caret position indicated by |)
                var thisText = fieldDetail.LeftOfCaret + '|' + fieldDetail.RightOfCaret;
                thisText = InsertThousandsSeparator(thisText, maskingOptions);

                // Split to Left and Right of Caret
                fieldDetail.LeftOfCaret = thisText.split('|')[0];
                fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
                fieldDetail.RightOfCaret = thisText.split('|')[1];
                fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;
            }

            // Set Text and Caret
            Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
        }

    };

    NumericMask.OnFocusOut = function (maskingOptions, onFocusOut) {

        // Initialize
        var eventTarget = onFocusOut.EventTarget;
        onFocusOut.GoodData = true;

        // Convert to data-raw (Strip to Digits)
        var rawData = eventTarget.value;
        if (maskingOptions.CurrencyPrefix.length > 0) {
            rawData = rawData.replace(maskingOptions.CurrencyPrefix, '');
        }
        if (maskingOptions.PercentSuffix.length > 0) {
            rawData = rawData.replace(maskingOptions.PercentSuffix, '');
        }
        if (maskingOptions.ThousandsSeparator.length > 0) {
            rawData = rawData.replace(new RegExp(maskingOptions.ThousandsSeparator.replace(/\./g, '\\.'), 'g'), '');
        }
        if (maskingOptions.AllowNegative) {
            var negativeSign = '';
            if (rawData.substr(0, 1) == '(' && rawData.substr(rawData.length - 1, 1) == ')') {
                negativeSign = '-';
            }
            rawData = rawData.replace(/\(/g, '').replace(/\)/g, '');
            if (rawData.length > 0) {
                rawData = negativeSign + rawData;
            }
        }
        if (maskingOptions.DecimalLimit > 0) {
            rawData = rawData.replace(maskingOptions.DecimalSeparator, '.');
        }

        // Is Empty?
        if (rawData.length <= 0) {
            // Has Changed?
            if (onFocusOut.RawData == '') {
                onFocusOut.HasChanged = false;
                return;
            }

            // Clear data-raw
            eventTarget.value = '';
            Common.SetAttr(eventTarget, 'data-raw', '');
            return;
        }

        // Has Changed?
        if (parseFloat(onFocusOut.RawData) == parseFloat(rawData)) {
            onFocusOut.HasChanged = false;
            return;
        }

        // Validate
        onFocusOut.GoodData = Validate(rawData, maskingOptions);

        // Set data-raw
        if (onFocusOut.GoodData) {
            // Reformat
            var formattedValue = AdjustDecimalZeros(rawData, maskingOptions);
            if (maskingOptions.DecimalLimit > 0) {
                formattedValue = formattedValue.replace('.', maskingOptions.DecimalSeparator);
            }
            formattedValue = InsertThousandsSeparator(formattedValue, maskingOptions);
            formattedValue = maskingOptions.CurrencyPrefix + formattedValue.replace('-', '') + maskingOptions.PercentSuffix;
            if (parseFloat(rawData) < parseFloat(0)) {
                formattedValue = '(' + formattedValue + ')';
            }

            // Divide by 100 (to the right decimal length) if % Mask
            if (maskingOptions.PercentSuffix.length > 0) {
                var percentDecimal;
                if (maskingOptions.DecimalLimit == 0) {
                    // Handles proper conversion of no allowed decimals since any percentage needs decimal to 100th position.
                    percentDecimal = 100;
                }
                else if (maskingOptions.DecimalLimit == 1) {
                    // Handles proper conversion of a single allowed decimal
                    percentDecimal = 1000;
                }
                else {
                    percentDecimal = parseFloat('1' + new Array((maskingOptions.DecimalLimit * 2) + 1).join('0'));
                }
                rawData = (Math.round((parseFloat(rawData) / parseFloat(100)) * percentDecimal) / percentDecimal).toString();
            }

            // Has Changed?
            if (parseFloat(onFocusOut.RawData) == parseFloat(rawData)) {
                onFocusOut.HasChanged = false;
                return;
            }

            // Set Text/data-raw
            eventTarget.value = formattedValue;
            Common.SetAttr(eventTarget, 'data-raw', rawData);
        }

    };

    NumericMask.CheckValidation = function (maskingOptions, onFocusOut) {

        NumericMask.OnFocusOut(maskingOptions, onFocusOut);
        return onFocusOut.GoodData;

    };

    // Private Methods
    function AdjustDecimalZeros (rawData, maskingOptions) {

        // Sanity Check
        if (maskingOptions.DecimalLimit <= 0) {
            if (rawData.indexOf('.') != -1) {
                rawData = rawData.substring(0, rawData.indexOf('.'));
            }
            return rawData;
        }

        // Integer/Decimal Part
        var integerPart = '';
        var decimalPart = '';
        if (rawData.indexOf('.') != -1 && maskingOptions.DecimalLimit > 0) {
            integerPart = rawData.substring(0, rawData.indexOf('.'));
            decimalPart = rawData.substr(rawData.indexOf('.'), rawData.length);
        }
        else {
            integerPart = rawData.substr(0, rawData.length);
            decimalPart = '.';
        }

        // Adjust Zeros
        if ((decimalPart.length - 1) > maskingOptions.DecimalLimit) {
            // Truncate Zeros
            decimalPart = decimalPart.substr(0, maskingOptions.DecimalLimit + 1);
        }
        else {
            // Zeros to Add
            var zerosToAdd = '', decimalIndex = (decimalPart.length - 1);
            for ( ; decimalIndex < maskingOptions.DecimalLimit; decimalIndex++) {
                zerosToAdd += '0';
            }
            decimalPart += zerosToAdd;
        }
        return integerPart + decimalPart;

    };

    function InsertThousandsSeparator (fieldText, maskingOptions) {

        // Integer/Decimal Part
        var integerPart = '';
        var decimalPart = '';
        if (fieldText.indexOf(maskingOptions.DecimalSeparator) != -1 && maskingOptions.DecimalLimit > 0) {
            integerPart = fieldText.substring(0, fieldText.indexOf(maskingOptions.DecimalSeparator));
            decimalPart = fieldText.substr(fieldText.indexOf(maskingOptions.DecimalSeparator), fieldText.length);
        }
        else {
            integerPart = fieldText.substr(0, fieldText.length);
        }

        // Add Thousands Separator
        integerPart = integerPart.replace(new RegExp(maskingOptions.ThousandsSeparator.replace(/\./g, '\\.'), 'g'), '');
        var regExpDigit = new RegExp(/[0-9]/);
        var formattedThousands = '';
        var digitCounter = 0;
        var integerIndex = integerPart.length - 1;
        while (integerIndex >= 0) {
            var currentCharacter = integerPart[integerIndex];
            if (regExpDigit.test(currentCharacter)) {
                if (digitCounter == 3) {
                    currentCharacter += maskingOptions.ThousandsSeparator;
                    digitCounter = 0;
                }
                digitCounter++;
            }
            formattedThousands = currentCharacter + formattedThousands;
            integerIndex--;
        }
        integerPart = formattedThousands;
        return integerPart + decimalPart;

    };

    function Validate (rawData, maskingOptions, displayOnly) {

        // Valid Number?
        if (new RegExp(/^\s*(\+|-)?((\d+(\.\d+)?)|(\.\d+))\s*$/).test(rawData) == false) {
            return false;
        }

        // Initialize
        var numericValue = parseFloat(rawData);

        // Allow Negative?
        if (!maskingOptions.AllowNegative) {
            if (numericValue < parseFloat(0)) {
                return false;
            }
        }

        // Decimals
        if (rawData.indexOf('.') != -1) {
            var decimalPart = rawData.substr(rawData.indexOf('.') + 1, rawData.length);

            // Allow Decimal?
            if (maskingOptions.DecimalLimit <= 0) {
                if (new RegExp(/^0+$/).test(decimalPart) != true) {
                    return false;
                }
            }

            // Decimal Limit
            if (decimalPart.length > maskingOptions.DecimalLimit) {
                if (new RegExp(/^0+$/).test(decimalPart.substr(maskingOptions.DecimalLimit, decimalPart.length)) != true && !displayOnly) {
                    return false;
                }
            }
        }

        // Thousands Lower/Upper Limit Check
        if (maskingOptions.ThousandsLowerLimit != '*' && numericValue < parseFloat(maskingOptions.ThousandsLowerLimit)) {
            return false;
        }
        else if (maskingOptions.ThousandsUpperLimit != '*' && numericValue > parseFloat(maskingOptions.ThousandsUpperLimit)) {
            return false;
        }
        return true;

    };

} (window.NumericMask = window.NumericMask || {}, window, document, Common, Cache, Events, Velocity));

// Signed Mask (Basically does everything Numeric does only forces +/- signs)
(function (SignedMask, window, document, Common, Cache, Events, Velocity, undefined) {

    SignedMask.BuildMaskingOptions = function (maskingOptions) {

        maskingOptions = NumericMask.BuildMaskingOptions(maskingOptions);
        return maskingOptions;

    };

    SignedMask.Format = function (rawData, maskingOptions, formatResult, displayOnly) {

        // Sanity Check
        if (rawData.length <= 0) {
            return;
        }

        // Adjust Raw data if % Mask or decimal rounding a display value
        if (maskingOptions.PercentSuffix.length > 0) {
            var percentDecimal = parseFloat('1' + new Array(maskingOptions.DecimalLimit + 1).join('0'));
            rawData = (Math.round((parseFloat(rawData) * parseFloat(100)) * percentDecimal) / percentDecimal).toString();
        }
        else if (displayOnly && maskingOptions.DecimalLimit > 0) {
            rawData = (parseFloat(rawData).toFixed(maskingOptions.DecimalLimit)).toString();
        }

        // Validate
        if (!Validate(rawData, maskingOptions, displayOnly)) {
            formatResult.Text = rawData;
            formatResult.Valid = false;
            return;
        }

        // Format
        formatResult.Text = AdjustDecimalZeros(rawData, maskingOptions);
        if (maskingOptions.DecimalLimit > 0) {
            formatResult.Text = formatResult.Text.replace('.', maskingOptions.DecimalSeparator);
        }
        formatResult.Text = InsertThousandsSeparator(formatResult.Text, maskingOptions);
        formatResult.Text = maskingOptions.CurrencyPrefix + formatResult.Text.replace('-', '').replace('+', '') + maskingOptions.PercentSuffix;
        if (parseFloat(rawData) < parseFloat(0)) {
            formatResult.Text = '-' + formatResult.Text;
        }
        else {
            formatResult.Text = '+' + formatResult.Text;
        }

    };

    SignedMask.OnKeyPress = function (fieldDetail, maskingOptions) {

        // Allowed Keys (0-9, Period/Comma, Hyphen)
        if ((fieldDetail.KeyCode >= Mask.Number.Zero && fieldDetail.KeyCode <= Mask.Number.Nine) ||
            (maskingOptions.DecimalLimit > 0 && fieldDetail.KeyPressed == maskingOptions.DecimalSeparator) ||
            (maskingOptions.AllowNegative == true && fieldDetail.KeyPressed == '-') ||
            (fieldDetail.KeyPressed == '+')) {
            // Initialize
            var lastLeftCharacter = fieldDetail.LeftOfCaret.substr(fieldDetail.LeftOfCaret.length - 1, 1);
            var firstRightCharacter = fieldDetail.RightOfCaret.substr(0, 1);
            var rawLeftOfCaret = fieldDetail.LeftOfCaret.replace(maskingOptions.CurrencyPrefix, '').replace('+', '').replace('-', '');

            // Sanity Check
            if (fieldDetail.LeftOfCaretLength > 0 || fieldDetail.RightOfCaretLength > 0) {
                if ((maskingOptions.CurrencyPrefix.length > 0 && firstRightCharacter == maskingOptions.CurrencyPrefix) || firstRightCharacter == '+' || firstRightCharacter == '-') {
                    return;
                }
            }
            if (fieldDetail.KeyCode >= Mask.Number.Zero && fieldDetail.KeyCode <= Mask.Number.Nine) {
                if (rawLeftOfCaret == '0') {
                    return;
                }
            }

            // Currency prefix
            if (maskingOptions.CurrencyPrefix.length > 0) {
                if (fieldDetail.CaretPosition == 0 || (fieldDetail.CaretPosition == 1 && (firstRightCharacter == '+' || firstRightCharacter == '-'))) {
                    fieldDetail.LeftOfCaret += maskingOptions.CurrencyPrefix;
                    fieldDetail.LeftOfCaretLength++;
                }
            }

            // +/- Sign
            if (fieldDetail.KeyPressed == '-' || fieldDetail.KeyPressed == '+') {
                if (fieldDetail.CaretPosition != 0) {
                    return;
                }
            }

            // Remove Spurious +/- Signs
            var plusSigns, minusSigns, totalPlusSigns = 0, totalMinusSigns = 0;
            if (maskingOptions.AllowNegative) {
                minusSigns = (fieldDetail.LeftOfCaret.match(/-/g) || []).length;
                totalMinusSigns += minusSigns;
                if (minusSigns > 1) {
                    fieldDetail.LeftOfCaret = fieldDetail.LeftOfCaret.replace(/\-/g, '');
                    fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
                }
                minusSigns = (fieldDetail.RightOfCaret.match(/-/g) || []).length;
                totalMinusSigns += minusSigns;
                if (minusSigns > 1) {
                    fieldDetail.RightOfCaret = fieldDetail.RightOfCaret.replace(/\-/g, '');
                    fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;
                }
            }
            plusSigns = (fieldDetail.LeftOfCaret.match(/\+/g) || []).length;
            totalPlusSigns += plusSigns;
            if (plusSigns > 1) {
                fieldDetail.LeftOfCaret = fieldDetail.LeftOfCaret.replace(/\+/g, '');
                fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
            }
            plusSigns = (fieldDetail.RightOfCaret.match(/\+/g) || []).length;
            totalPlusSigns += plusSigns;
            if (plusSigns > 1) {
                fieldDetail.RightOfCaret = fieldDetail.RightOfCaret.replace(/\+/g, '');
                fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;
            }
            if (totalPlusSigns > 0 && totalMinusSigns > 0) {
                fieldDetail.LeftOfCaret = fieldDetail.LeftOfCaret.replace(/\-/g, '').replace(/\+/g, '');
                fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
                fieldDetail.RightOfCaret = fieldDetail.RightOfCaret.replace(/\-/g, '').replace(/\+/g, '');
                fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;
            }
            else if (totalPlusSigns == 0 && totalMinusSigns == 0 && fieldDetail.KeyCode >= Mask.Number.Zero && fieldDetail.KeyCode <= Mask.Number.Nine) {
                fieldDetail.LeftOfCaret = '+' + fieldDetail.LeftOfCaret;
                fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
            }

            // Preceding Zero
            if (fieldDetail.KeyPressed == '0') {
                if (fieldDetail.LeftOfCaret.indexOf('.') == -1) {
                    if (rawLeftOfCaret == '0' || (Common.IsEmptyString(rawLeftOfCaret) && fieldDetail.RightOfCaretLength > 0)) {
                        return;
                    }
                }
            }

            // Decimal Separator
            if (fieldDetail.KeyPressed == maskingOptions.DecimalSeparator) {
                if (fieldDetail.LeftOfCaret.indexOf(maskingOptions.DecimalSeparator) != -1 || fieldDetail.RightOfCaret.indexOf(maskingOptions.DecimalSeparator) != -1) {
                    return;
                }
                else {
                    if (fieldDetail.RightOfCaret.length > maskingOptions.DecimalLimit) {
                        return;
                    }
                }
                if (Common.IsEmptyString(lastLeftCharacter) || lastLeftCharacter == maskingOptions.CurrencyPrefix || lastLeftCharacter == '+' || lastLeftCharacter == '-') {
                    fieldDetail.LeftOfCaret += '0';
                    fieldDetail.LeftOfCaretLength++;
                }
            }

            // Decimal Limit
            if (fieldDetail.LeftOfCaret.indexOf(maskingOptions.DecimalSeparator) != -1) {
                var decimalLength = ((fieldDetail.LeftOfCaret + fieldDetail.RightOfCaret.replace('%', '')).split(maskingOptions.DecimalSeparator)[1]).length;
                if (decimalLength >= maskingOptions.DecimalLimit) {
                    return;
                }
            }

            // Add the key pressed
            fieldDetail.LeftOfCaret += fieldDetail.KeyPressed;
            fieldDetail.LeftOfCaretLength++;

            // Thousands Separator
            if (maskingOptions.ThousandsSeparator.length > 0) {
                // Insert Thousands Separator (with caret position indicated by |)
                var thisText = fieldDetail.LeftOfCaret + '|' + fieldDetail.RightOfCaret;
                thisText = InsertThousandsSeparator(thisText, maskingOptions);

                // Split to Left and Right of Caret
                fieldDetail.LeftOfCaret = thisText.split('|')[0];
                fieldDetail.LeftOfCaretLength = fieldDetail.LeftOfCaret.length;
                fieldDetail.RightOfCaret = thisText.split('|')[1];
                fieldDetail.RightOfCaretLength = fieldDetail.RightOfCaret.length;
            }

            // Set Text and Caret
            Mask.SetInputText(fieldDetail.HtmlInputField, fieldDetail.LeftOfCaret, fieldDetail.RightOfCaret);
        }

    };

    SignedMask.OnFocusOut = function (maskingOptions, onFocusOut) {

        // Initialize
        var eventTarget = onFocusOut.EventTarget;
        onFocusOut.GoodData = true;

        // Convert to raw-data (Strip to Digits)
        var rawData = eventTarget.value;
        if (maskingOptions.CurrencyPrefix.length > 0) {
            rawData = rawData.replace(maskingOptions.CurrencyPrefix, '');
        }
        if (maskingOptions.PercentSuffix.length > 0) {
            rawData = rawData.replace(maskingOptions.PercentSuffix, '');
        }
        if (maskingOptions.ThousandsSeparator.length > 0) {
            rawData = rawData.replace(new RegExp(maskingOptions.ThousandsSeparator.replace(/\./g, '\\.'), 'g'), '');
        }
        if (maskingOptions.DecimalLimit > 0) {
            rawData = rawData.replace(maskingOptions.DecimalSeparator, '.');
        }

        // Is Empty?
        if (rawData.length <= 0) {
            // Has Changed?
            if (onFocusOut.RawData == '') {
                onFocusOut.HasChanged = false;
                return;
            }

            // Clear data-raw
            eventTarget.value = '';
            Common.SetAttr(eventTarget, 'data-raw', '');
            return;
        }

        // Has Changed?
        if (onFocusOut.RawData == rawData) {
            onFocusOut.HasChanged = false;
            return;
        }

        // Validate
        onFocusOut.GoodData = Validate(rawData, maskingOptions);

        // Set data-raw
        if (onFocusOut.GoodData) {
            // Reformat
            var formattedValue = AdjustDecimalZeros(rawData, maskingOptions);
            if (maskingOptions.DecimalLimit > 0) {
                formattedValue = formattedValue.replace('.', maskingOptions.DecimalSeparator);
            }
            formattedValue = InsertThousandsSeparator(formattedValue, maskingOptions);
            formattedValue = maskingOptions.CurrencyPrefix + formattedValue.replace('-', '').replace('+', '') + maskingOptions.PercentSuffix;
            if (parseFloat(rawData) < parseFloat(0)) {
                formattedValue = '-' + formattedValue;
            }
            else {
                formattedValue = '+' + formattedValue;
            }

            // Divide by 100 (to the right decimal length) if % Mask
            if (maskingOptions.PercentSuffix.length > 0) {
                var percentDecimal = parseFloat('1' + new Array((maskingOptions.DecimalLimit * 2) + 1).join('0'));
                rawData = (Math.round((parseFloat(rawData) / parseFloat(100)) * percentDecimal) / percentDecimal).toString();
            }

            // Has Changed?
            if (onFocusOut.RawData == rawData) {
                onFocusOut.HasChanged = false;
                return;
            }

            // Set Text/data-raw
            eventTarget.value = formattedValue;
            Common.SetAttr(eventTarget, 'data-raw', rawData);
        }

    };

    SignedMask.CheckValidation = function (maskingOptions, onFocusOut) {

        SignedMask.OnFocusOut(maskingOptions, onFocusOut);
        return onFocusOut.GoodData;

    };

    // Private Methods
    function AdjustDecimalZeros (rawData, maskingOptions) {

        // Sanity Check
        if (maskingOptions.DecimalLimit <= 0) {
            if (rawData.indexOf('.') != -1) {
                rawData = rawData.substring(0, rawData.indexOf('.'));
            }
            return rawData;
        }

        // Integer/Decimal Part
        var integerPart = '';
        var decimalPart = '';
        if (rawData.indexOf('.') != -1 && maskingOptions.DecimalLimit > 0) {
            integerPart = rawData.substring(0, rawData.indexOf('.'));
            decimalPart = rawData.substr(rawData.indexOf('.'), rawData.length);
        }
        else {
            integerPart = rawData.substr(0, rawData.length);
            decimalPart = '.';
        }

        // Adjust Zeros
        if ((decimalPart.length - 1) > maskingOptions.DecimalLimit) {
            // Truncate Zeros
            decimalPart = decimalPart.substr(0, maskingOptions.DecimalLimit + 1);
        }
        else {
            // Zeros to Add
            var zerosToAdd = '', decimalIndex = (decimalPart.length - 1);
            for ( ; decimalIndex < maskingOptions.DecimalLimit; decimalIndex++) {
                zerosToAdd += '0';
            }
            decimalPart += zerosToAdd;
        }
        return integerPart + decimalPart;

    };

    function InsertThousandsSeparator (fieldText, maskingOptions) {

        // Integer/Decimal Part
        var integerPart = '';
        var decimalPart = '';
        if (fieldText.indexOf(maskingOptions.DecimalSeparator) != -1 && maskingOptions.DecimalLimit > 0) {
            integerPart = fieldText.substring(0, fieldText.indexOf(maskingOptions.DecimalSeparator));
            decimalPart = fieldText.substr(fieldText.indexOf(maskingOptions.DecimalSeparator), fieldText.length);
        }
        else {
            integerPart = fieldText.substr(0, fieldText.length);
        }

        // Add Thousands Separator
        integerPart = integerPart.replace(new RegExp(maskingOptions.ThousandsSeparator.replace(/\./g, '\\.'), 'g'), '');
        var regExpDigit = new RegExp(/[0-9]/);
        var formattedThousands = '';
        var digitCounter = 0;
        var integerIndex = integerPart.length - 1;
        while (integerIndex >= 0) {
            var currentCharacter = integerPart[integerIndex];
            if (regExpDigit.test(currentCharacter)) {
                if (digitCounter == 3) {
                    currentCharacter += maskingOptions.ThousandsSeparator;
                    digitCounter = 0;
                }
                digitCounter++;
            }
            formattedThousands = currentCharacter + formattedThousands;
            integerIndex--;
        }
        integerPart = formattedThousands;
        return integerPart + decimalPart;

    };

    function Validate (rawData, maskingOptions, displayOnly) {

        // Valid Number?
        if (new RegExp(/^\s*(\+|-)?((\d+(\.\d+)?)|(\.\d+))\s*$/).test(rawData) == false) {
            return false;
        }

        // Initialize
        var numericValue = parseFloat(rawData);

        // Allow Negative?
        if (!maskingOptions.AllowNegative) {
            if (numericValue < parseFloat(0)) {
                return false;
            }
        }

        // Decimals
        if (rawData.indexOf('.') != -1) {
            var decimalPart = rawData.substr(rawData.indexOf('.') + 1, rawData.length);

            // Allow Decimal?
            if (maskingOptions.DecimalLimit <= 0) {
                if (new RegExp(/^0+$/).test(decimalPart) != true) {
                    return false;
                }
            }

            // Decimal Limit
            if (decimalPart.length > maskingOptions.DecimalLimit) {
                if (new RegExp(/^0+$/).test(decimalPart.substr(maskingOptions.DecimalLimit, decimalPart.length)) != true && !displayOnly) {
                    return false;
                }
            }
        }

        // Thousands Lower/Upper Limit Check
        if (maskingOptions.ThousandsLowerLimit != '*' && numericValue < parseFloat(maskingOptions.ThousandsLowerLimit)) {
            return false;
        }
        else if (maskingOptions.ThousandsUpperLimit != '*' && numericValue > parseFloat(maskingOptions.ThousandsUpperLimit)) {
            return false;
        }
        return true;

    };

} (window.SignedMask = window.SignedMask || {}, window, document, Common, Cache, Events, Velocity));
// Image
// Based On: Image -> ViewElement
(function (Image, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Variables
    Image.Status = {
        NotSet: 0,
        Missing: 1,
        Exists: 2
    };

    // Public Methods
    Image.Render = function (image) {

        // Sanity Check
        var imageStatus = null;
        var imageSource = null;
        var dataImage = (Common.IsDefined(image.Source) && image.Source.indexOf('data:') == 0) ? true : false;
        if (!dataImage) {
            if (Common.IsDefined(image.Source)) {
                imageSource = Common.BuildResourcePath(image.Source);
                Events.One(document.body, 'configureimages.' + image.Name, '#' + image.Name,
                    function () {
                        // Make ajax request
                        var requestObject = new XMLHttpRequest();
                        requestObject.open('HEAD', imageSource, true);
                        requestObject.onload = function () {
                            if (this.status >= 200 && this.status < 400) {
                                // Success!
                            }
                            else {
                                Common.AddClass(Common.Get(image.Name), 'gtc-img-missing');
                            }
                        };
                        requestObject.onerror = function () {
                            Common.AddClass(Common.Get(image.Name), 'gtc-img-missing');
                        };
                        requestObject.send();
                    }
                );
            }
            else {
                imageStatus = Image.Status.NotSet;
            }
        }

        // ClassName
        var className = '';
        if (image.IsResponsive == 'Yes') {
            className += ' gtc-img-responsive';
        }
        if (imageStatus == Image.Status.NotSet) {
            className += ' gtc-img-notset';
        }

        // Does Name exist?
        if (Common.IsNotDefined(image.Name)) {
            image.Name = "GTCImage" + Common.GenerateUniqueID();
        }

        // Img<, Class@, Id@
        var imageMarkup = '<img class="gtc-image' + className + '" data-namespace="Image"' + ViewElement.RenderAttributes(image);

        // Alt@
        if (Common.IsNotDefined(image.Title)) {
            // 508 Compliance
            image.Title = image.Name;
        }
        imageMarkup += ' alt="' + Common.TranslateKey(image.Title) + '"';
        imageMarkup += ' data-translate="[alt]' + image.Title + '"';

        // Src@
        var finalSource = "";
        if (dataImage) {
            Page.Images++;
            finalSource = image.Source;
        }
        else if (Common.IsDefined(image.Source)) {
            Page.Images++;
            finalSource = imageSource;
        }

        // Onload images to properly calculate height
        Events.One(document.body, 'configureimages',
            function () {
                var imageElement = Common.Get(image.Name);
                Events.On(imageElement, 'load',
                    function () {
                        Page.LoadedImages++;
                        if (Page.Images == Page.LoadedImages) {
                            Page.SetPageHeight();
                        }
                    }
                );
                imageElement.src = finalSource;
            }
        );

        // Height@, Width@, Img>
        if (Common.IsDefined(image.Dimension)) {
            if (Common.IsDefined(image.Dimension.Height)) {
                imageMarkup += ' height="' + image.Dimension.Height + '"';
            }
            if (Common.IsDefined(image.Dimension.Width)) {
                imageMarkup += ' width="' + image.Dimension.Width + '"';
            }
        }
        imageMarkup += ' />';

        // Return markup
        return imageMarkup;

    };

    Image.UpdateValue = function (image, imageUrl, promises) {

        // Get deferred object for animation
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Update and animate
        Common.Wrap(image, Common.Create('div'));
        var wrapper = image.parentNode;
        if (Common.IsEmptyString(imageUrl)) {
            CleanupValueInstruction(wrapper, image, animationPromise, true);
        }
        else {
            var imageSource = Common.BuildResourcePath(imageUrl);
            Velocity(wrapper, 'slideUp', 'slow',
                function () {
                    Common.RemoveClass(image, 'gtc-img-notset');
                    Common.RemoveClass(image, 'gtc-img-missing');
                    var dataImage = (imageUrl.indexOf('data:') == 0) ? true : false;
                    if (!dataImage) {
                        var requestObject = new XMLHttpRequest();
                        requestObject.open('HEAD', imageSource, true);
                        requestObject.onload = function () {
                            if (this.status >= 200 && this.status < 400) {
                                image.onload = function () {
                                    CleanupValueInstruction(wrapper, image, animationPromise, false);
                                };
                                image.src = imageSource;
                            }
                            else {
                                image.src = '';
                                Common.AddClass(image, 'gtc-img-missing');
                                CleanupValueInstruction(wrapper, image, animationPromise, false);
                            }
                        };
                        requestObject.onerror = function () {
                            image.src = '';
                            Common.AddClass(image, 'gtc-img-missing');
                            CleanupValueInstruction(wrapper, image, animationPromise, false);
                        };
                        requestObject.send();
                    }
                    else {
                        image.src = imageUrl;
                        CleanupValueInstruction(wrapper, image, animationPromise, false);
                    }
                }
            );
        }

    };

    Image.UpdateImage = function (image, imageUrl, promises) {

        Image.UpdateValue(image, imageUrl, promises);

    };

    // Private Methods
    function CleanupValueInstruction (wrapper, image, animationPromise, isEmptyImage) {

        var animationType = isEmptyImage ? 'slideUp' : 'slideDown';
        Velocity(wrapper, animationType, 'slow',
            function () {
                Common.Unwrap(image);
                animationPromise.resolve();
            }
        );

    };

} (window.Image = window.Image || {}, window, document, Common, Cache, Events, Velocity));
// Navigation
(function (Navigation, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Navigation.RenderAttributes = function (navigation) {

        var navigationMarkup = '';
        if (Common.IsDefined(navigation)) {
            // Href@
            if (Common.IsDefined(navigation.View)) {
                navigationMarkup += ' href="' + navigation.View + '"';
            }

            // UiParameters Attribute
            var uiParameters = null;
            if (Common.IsDefined(navigation.UiParameters)) {
                uiParameters = JSON.stringify(navigation.UiParameters);
            }

            // Data-OnLoad@ - Quotes in single since JSON has double quotes
            navigationMarkup += ' data-load=\'' + uiParameters + '\'';
        }
        return navigationMarkup;

    };

} (window.Navigation = window.Navigation || {}, window, document, Common, Cache, Events, Velocity));
// Placeholder Field
// Based On: PlaceholderField -> ValueField -> Field -> ViewElement
(function (PlaceholderField, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    PlaceholderField.RenderAttributes = function (placeholderField) {

        // Placeholder@, Translations
        var attributeMarkup = '';
        if (Common.IsDefined(placeholderField.Placeholder)) {
            attributeMarkup += ' placeholder="' + Common.TranslateKey(placeholderField.Placeholder) + '" data-translate="[placeholder]' + placeholderField.Placeholder + '"';
        }

        // Name@, Value@, @Data-Serializable, TabIndex@, Class@, Id@
        attributeMarkup += ValueField.RenderAttributes(placeholderField);
        return attributeMarkup;

    };

    PlaceholderField.RenderAttributesForMask = function (placeholderField, maskingOptions) {

        // Placeholder@, Translations
        var attributeMarkup = '';
        if (Common.IsDefined(placeholderField.Placeholder)) {
            attributeMarkup += ' placeholder="' + Common.TranslateKey(placeholderField.Placeholder) + '" data-translate="[placeholder]' + placeholderField.Placeholder + '"';
        }

        // Name@, Value@, @Data-Serializable, TabIndex@, Class@, Id@
        attributeMarkup += ValueField.RenderAttributesForMask(placeholderField, maskingOptions);
        return attributeMarkup;

    };

    PlaceholderField.UpdatePlaceholder = function (placeholderField, placeholderText) {

        Common.SetAttr(placeholderField, 'data-translate', '[placeholder]' + placeholderText);
        placeholderField.placeholder = Common.TranslateKey(placeholderText);

    };

} (window.PlaceholderField = window.PlaceholderField || {}, window, document, Common, Cache, Events, Velocity));
// Label
(function (Label, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Label.RenderLabel = function (label, fieldName) {

        var className = '';
        if (Common.IsDefined(label.ExtraClassing)) {
            className += ' ' + label.ExtraClassing;
        }

        // 508 Compliance
        if (label.ScreenReaderOnly == true) {
            className += ' gtc-sr-only';
        }

        // Label<
        var labelMarkup = '<label id="' + fieldName + '-Label" class="gtc-label' + className + '"';

        // For@, Label>, Span<>
        labelMarkup += ' for="' + fieldName + '"><span';

        // Translations
        if (Common.IsDefined(label.TextString)) {
            labelMarkup += ' data-translate="' + label.TextString + '"';
        }

        // Span>, Label, Span</>
        labelMarkup += '>' + Common.TranslateKey(label.TextString) + '</span>';

        // Label</>
        labelMarkup += '</label>';

        // Tooltip
        if (Common.IsDefined(label.Tooltip)) {
            labelMarkup += '<a class="gtc-tooltip gtc-label-tooltip" data-translate="[data-tooltip]' + label.Tooltip + '" data-tooltip="' + Common.TranslateKey(label.Tooltip) + '"></a>';
        }
        return labelMarkup;

    };

    Label.UpdateLabel = function (label, labelValue, promises, context, isHidden) {

        // Get deferred object for animation
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Initialize
        var labelSpan = label.firstChild;
        var updateLabelFunction = function () {
            labelSpan.textContent = Common.TranslateKey(labelValue);
            Common.SetAttr(labelSpan, 'data-translate', labelValue);
        };
        if (isHidden) {
            updateLabelFunction();
            animationPromise.resolve();
        }
        else {
            // Animate
            Velocity(labelSpan, { 'opacity': 0 }, 'slow',
                function () {
                    updateLabelFunction();
                    Velocity(labelSpan, 'reverse',
                        function () {
                            Common.RemoveOpacity(labelSpan);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

} (window.Label = window.Label || {}, window, document, Common, Cache, Events, Velocity));
// Value Field
// Based On: ValueField -> Field -> ViewElement
(function (ValueField, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    ValueField.RenderAttributes = function (valueField) {

        // Sanity Check
        var fieldValue = '';
        if (Common.IsDefined(valueField.Value)) {
            fieldValue = valueField.Value;
        }

        // Name@ (uses ViewElement.Name), Value@
        var attributeMarkup = ' name="' + valueField.Name + '" value="' + fieldValue + '"';

        // Data-Serializable@
        if (valueField.IsSerializable == 'Yes' && valueField.IsEditableDisplayItem != true) {
            attributeMarkup += ' data-serializable';
        }
        else {
            attributeMarkup += ' data-serializabledisplayitem';
        }

        // TabIndex@, Class@, Id@
        attributeMarkup += ViewElement.RenderAttributes(valueField);
        return attributeMarkup;

    };

    ValueField.RenderAttributesForMask = function (valueField, maskingOptions) {

        // Format Value
        var fieldValue = '';
        var formattedValue = '';
        if (Common.IsDefined(valueField.Value)) {
            fieldValue = valueField.Value;
            formattedValue = valueField.Value;
            if (Common.IsObject(maskingOptions)) {
                var formatResult = Mask.Format(valueField.Value, maskingOptions);
                formattedValue = formatResult.Text;
            }
        }

        // Name@ (uses ViewElement.Name), Value@
        var attributeMarkup = ' name="' + valueField.Name + '" value="' + formattedValue + '"';

        // Data-Serializable@
        if (valueField.IsSerializable == 'Yes' && valueField.IsEditableDisplayItem != true) {
            attributeMarkup += ' data-serializable';
        }
        else {
            attributeMarkup += ' data-serializabledisplayitem';
        }

        // TabIndex@, Class@, Id@
        attributeMarkup += ViewElement.RenderAttributes(valueField);
        return attributeMarkup;

    };

    ValueField.HasValue = function (valueField) {

        if (Common.IsDefined(valueField.Value)) {
            return true;
        }
        return false;

    };

    ValueField.IsCompleted = function (field) {

        var fieldValue = field.value;
        if (fieldValue.length > 0) {
            return true;
        }
        return false;

    };

    ValueField.UpdateValue = function (field, fieldValue) {

        field.value = fieldValue;
        if (Common.IsDefined(Common.GetAttr(field, 'data-serializable'))) {
            Common.SetAttr(field, 'data-haschanged', 'Yes');
        }
        Events.Trigger(field, 'focusout');

    };

    ValueField.UpdateValueForMask = function (field, fieldValue, formattedValue) {

        field.value = formattedValue;
        if (Common.IsDefined(Common.GetAttr(field, 'data-serializable'))) {
            Common.SetAttr(field, 'data-haschanged', 'Yes');
        }
        Events.Trigger(field, 'focusout');

    };

} (window.ValueField = window.ValueField || {}, window, document, Common, Cache, Events, Velocity));
// Field
// Based On: Field -> ViewElement
(function (Field, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Field.RenderLabel = function (field, isRadioGroup) {

        // Label
        var labelMarkup = '';

        // 508 Compliance
        if (Common.IsNotDefined(field.Label)) {
            var generatedLabel = {
                TextString: field.Name,
                ScreenReaderOnly: true
            };
            if (Common.IsDefined(field.Placeholder)) {
                generatedLabel.TextString = field.Placeholder;
            }
            field.Label = generatedLabel;
        }
        if (Common.IsNotDefined(isRadioGroup) || isRadioGroup == false) {
            labelMarkup += Label.RenderLabel(field.Label, field.Name);
        }

        // Required?
        if (field.IsRequired == 'Yes') {
            var fieldNamespace = window[field.Type.toString()];
            if (fieldNamespace.HasValue(field)) {
                labelMarkup += '<span id="SpanRequired' + field.Name + '" class="gtc-classSpanRequired gtc-classSpanRequiredCompleted">!</span>';
            }
            else {
                labelMarkup += '<span id="SpanRequired' + field.Name + '" class="gtc-classSpanRequired gtc-classSpanRequiredYes">!</span>';
            }

            // GetFieldIdentifier returns array of ids (RadioFields and CheckboxFields have multiple options/choices)
            var fieldIdentifiers = GetFieldIdentifier(field);

            // Focus Out - Required Update
            // Loop over ids and attach event for required fields
            var index = 0, length = fieldIdentifiers.length;
            for ( ; index < length; index++) {
                AttachUpdateRequiredFieldEvent(fieldIdentifiers[index]);
            }
        }
        else {
            labelMarkup += '<span id="SpanRequired' + field.Name + '" class="gtc-classSpanRequired gtc-classSpanRequiredNo">!</span>';
        }

        // Return
        return labelMarkup;

    };

    Field.RenderAttributes = function (field) {

        // Data-Disabled@
        var attributeMarkup = '';
        if (field.IsLocked == 'Yes') {
            attributeMarkup = ' data-disabled="true"';
        }
        return attributeMarkup;

    };

    Field.IsCompleted = function (field) {

        var fieldType = Common.GetAttr(field, 'data-namespace');
        if (Common.IsDefined(fieldType)) {
            var fieldNamespace = window[fieldType.toString()];
            if (Common.IsDefined(fieldNamespace) && Common.IsFunction(fieldNamespace.IsCompleted)) {
                return fieldNamespace.IsCompleted(field);
            }
        }
        return true;

    };

    Field.UpdateRequiredStatus = function (field) {

        var requiredSpan = Common.Get('SpanRequired' + field.name);
        if (Field.IsCompleted(field)) {
            Common.RemoveClass(requiredSpan, 'gtc-classSpanRequiredYes');
            Common.AddClass(requiredSpan, 'gtc-classSpanRequiredCompleted');
        }
        else {
            Common.RemoveClass(requiredSpan, 'gtc-classSpanRequiredCompleted');
            Common.AddClass(requiredSpan, 'gtc-classSpanRequiredYes');
        }

    };

    Field.UpdateValue = function (field, value, isRadioArray) {

        // Sanity Check
        var fieldValue = "";
        if (Common.IsDefined(value)) {
            fieldValue = value;
        }

        // Field Type and Namespace
        var fieldType, fieldNamespace;
        if (isRadioArray) {
            fieldType = Common.GetAttr(field[0], 'data-namespace');
            fieldNamespace = window[Common.GetAttr(field[0], 'data-namespace')];
        }
        else {
            fieldType = Common.GetAttr(field, 'data-namespace');
            fieldNamespace = window[Common.GetAttr(field, 'data-namespace')];
        }

        // Update
        ViewElement.TestExists(fieldType, fieldNamespace, null, 'UpdateValue');
        fieldNamespace.UpdateValue(field, fieldValue);

    };

    Field.UpdateLabel = function (field, fieldLabel, promises, context) {

        var onParent = context == 'Parent';
        var label = Common.Get(field.id + '-Label', onParent);
        Label.UpdateLabel(label, fieldLabel, promises, context, Common.IsHidden(field));

    };

    Field.AttachOnChange = function (field, onChangeFunction, token) {

        // Initialize
        var eventMarkup = '';

        // No fully defined event?
        if (Common.IsEventViewElementDefined(field.OnChange)) {
            // No Mask?
            if (Common.IsNotDefined(field.Mask) || Common.IsEmptyString(field.Mask)) {
                if (Common.IsNotDefined(token)) {
                    token = '';
                }

                // Attach change event
                eventMarkup += EventElement.AttachEvent(field.Name + token, 'change', field.OnChange, onChangeFunction);
            }
            else {
                // Set data-change (change event is process in Mask.OnFocusOut)
                eventMarkup += ' data-change=\'' + JSON.stringify(field.OnChange) + '\'';
            }
        }
        return eventMarkup;

    };

    // Common function used by most elements that inherit from field
    Field.OnChange = function (field, fieldValueUiParameter) {

        // Initialize
        var onChangeParameters = [];

        // Get Change Event
        var onChangeEvent = JSON.parse(Common.GetAttr(field, 'data-change'));
        if (Common.IsDefined(onChangeEvent.UiParameters)) {
            onChangeParameters = onChangeParameters.concat(onChangeEvent.UiParameters);
        }

        // Change Parameters
        if (Common.IsDefined(onChangeEvent.FormToSerialize)) {
            onChangeParameters = onChangeParameters.concat(Form.SerializeArray(Common.Get(onChangeEvent.FormToSerialize)));
            if (Common.Closest('form', field).id != onChangeEvent.FormToSerialize) {
                onChangeParameters = onChangeParameters.concat(fieldValueUiParameter);
            }
        }
        else {
            onChangeParameters = onChangeParameters.concat(fieldValueUiParameter);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onChangeEvent.ControllerPath + onChangeEvent.ActionName, onChangeParameters, Page.RunInstructions, field);

    };

    Field.ShowPinwheel = function (field, customType) {

        var closestLi = Common.Closest('li', field);
        SpinKit.Show(closestLi, customType || 'FadingCircle');

    };

    Field.HidePinwheel = function (field) {

        var closestLi = Common.Closest('li', field);
        SpinKit.Hide(closestLi);

    };

    function GetFieldIdentifier (field) {

        // Initialize
        var fieldIds = [];
        var index = 0, length;

        // RadioField
        if (field.Type == 'RadioField') {
            if (Common.IsDefined(field.OptionDetail) && Common.IsDefined(field.OptionDetail.Options)) {
                var option;
                length = field.OptionDetail.Options.length;
                for ( ; index < length; index++) {
                    option = field.OptionDetail.Options[index];
                    fieldIds.push(field.Name + Common.SanitizeToken(option.Value));
                }
            }
        }
        else if (field.Type == 'CheckboxField') {
            // CheckboxField
            if (Common.IsDefined(field.ChoiceDetail) && Common.IsDefined(field.ChoiceDetail.Choices)) {
                var choice, convertedToken;
                length = field.ChoiceDetail.Choices.length;
                for ( ; index < length; index++) {
                    choice = field.ChoiceDetail.Choices[index];
                    convertedToken = Common.SanitizeToken(choice.Name);
                    fieldIds.push(convertedToken);
                }
            }
        }
        else {
            // All Fields other fields
            fieldIds.push(field.Name);
        }

        // Return
        return fieldIds;

    };

    function AttachUpdateRequiredFieldEvent (fieldIdentifier) {

        Events.On(document.body, 'focusout.requiredField.' + fieldIdentifier, '#' + fieldIdentifier,
            function (event) {
                event.stopPropagation();
                Field.UpdateRequiredStatus(event.target);
            }
        );

    };

} (window.Field = window.Field || {}, window, document, Common, Cache, Events, Velocity));
// Event Element
(function (EventElement, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    EventElement.AttachEvent = function (elementName, eventName, eventElement, eventProcessFunction, bindingGroup) {

        // Event
        var eventMarkup = '';
        if (Common.IsEventViewElementDefined(eventElement)) {
            // Data-ControllerPath/ActionName
            eventMarkup = ' data-' + eventName + '=\'' + JSON.stringify(eventElement) + '\'';

            // Wire Action!
            var onEvent = eventName;
            if (Common.IsDefined(bindingGroup)) {
                onEvent += '.' + bindingGroup;
            }
            if (Common.IsDefined(eventProcessFunction)) {
                Events.On(document.body, onEvent + '.' + elementName, '#' + elementName, eventProcessFunction);
            }
        }
        return eventMarkup;

    };

    EventElement.UpdateEventParameters = function (element, eventName, uiParameters) {

        if (element.tagName == 'BODY') {
            var pageName = location.pathname.replace('/Content/', '').replace('/', '').replace('.html', '');
            Common.SetStorage(pageName, JSON.stringify(uiParameters));
        }
        else {
            if (eventName == 'load') {
                Common.SetAttr(element, 'data-' + eventName, JSON.stringify(uiParameters));
            }
            else if (eventName == 'upload') {
                var formElement = Common.Get(element.id + 'Form');
                var dataEvent = JSON.parse(Common.GetAttr(formElement, 'data-' + eventName));
                dataEvent.UiParameters = uiParameters;
                Common.SetAttr(formElement, 'data-' + eventName, JSON.stringify(dataEvent));
                Widgets.uploadfiles(formElement, 'SetParameters', uiParameters);
            }
            else {
                var dataEvent = JSON.parse(Common.GetAttr(element, 'data-' + eventName));
                dataEvent.UiParameters = uiParameters;
                Common.SetAttr(element, 'data-' + eventName, JSON.stringify(dataEvent));
            }
        }

    };

    EventElement.UpdateEventPath = function (element, eventName, uiParameters) {

        var dataEvent = JSON.parse(Common.GetAttr(element, 'data-' + eventName));
        var uiParameter, index = 0, length = uiParameters.length;
        for ( ; index < length; index++) {
            uiParameter = uiParameters[index];
            if (uiParameter.Name == 'ControllerPath') {
                dataEvent.ControllerPath = uiParameter.Value;
            }
            if (uiParameter.Name == 'ActionName') {
                dataEvent.ActionName = uiParameter.Value;
                // TODO: Remove? Why reset event?
                Events.Off(element, eventName);
                Events.On(element, eventName, window[uiParameter.Value.toString()]);
            }
        }
        Common.SetAttr(element, 'data-' + eventName, JSON.stringify(dataEvent));

    };

} (window.EventElement = window.EventElement || {}, window, document, Common, Cache, Events, Velocity));
// Menu Link
// Based On: MenuLink -> ViewElement
(function (MenuLink, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var menuLinkStyles = {
        barstox: '.gtc-barstox:before {-webkit-transform: translateY(-180%);-moz-transform: translateY(-180%);-ms-transform: translateY(-180%);transform: translateY(-180%);} .gtc-barstox:after {-webkit-transform: translateY(180%);-moz-transform: translateY(180%);-ms-transform: translateY(180%);transform: translateY(180%);} .gtc-barstox,.gtc-barstox:before,.gtc-barstox:after {-webkit-transform-origin: 0;-moz-transform-origin: 0;-ms-transform-origin: 0;transform-origin: 0;} .gtc-barstox:after {-webkit-transform-origin: 0;-moz-transform-origin: 0;-ms-transform-origin: 0;transform-origin: 0;} .gtc-barstox:before,.gtc-barstox:after {position: absolute;content: ""} .gtc-nav-show-bars .gtc-barstox:before {-webkit-transform: translate3d(6px, 5px, 0) rotate(-45deg);-moz-transform: translate3d(6px, 5px, 0) rotate(-45deg);-ms-transform: translate3d(6px, 5px, 0) rotate(-45deg);transform: translate3d(6px, 5px, 0) rotate(-45deg);} .gtc-nav-show-bars .gtc-barstox:after {-webkit-transform: translate3d(6px, -8px, 0) rotate(45deg);-moz-transform: translate3d(6px, -8px, 0) rotate(45deg);-ms-transform: translate3d(6px, -8px, 0) rotate(45deg);transform: translate3d(6px, -8px, 0) rotate(45deg);}',
        barstoleftarrow: '.gtc-barstoleftarrow:after {-webkit-transform: translateY(-180%);-moz-transform: translateY(-180%);-ms-transform: translateY(-180%);transform: translateY(-180%);}.gtc-barstoleftarrow:before {-webkit-transform: translateY(180%);-moz-transform: translateY(180%);-ms-transform: translateY(180%);transform: translateY(180%);}.gtc-barstoleftarrow,.gtc-barstoleftarrow:before,.gtc-barstoleftarrow:after {-webkit-transform-origin: 0 100%;-moz-transform-origin: 0 100%;-ms-transform-origin: 0 100%;transform-origin: 0 100%;}.gtc-barstoleftarrow:after {-webkit-transform-origin: 0 0;-moz-transform-origin: 0 0;-ms-transform-origin: 0 0;transform-origin: 0 0;}.gtc-barstoleftarrow:before,.gtc-barstoleftarrow:after {position: absolute;content: ""} .gtc-nav-show-bars .gtc-barstoleftarrow:before {-webkit-transform: rotate(-50deg) translate3d(-1px, 0px, 0);-moz-transform: rotate(-50deg) translate3d(-1px, 0px, 0);-ms-transform: rotate(-50deg) translate3d(-1px, 0px, 0);transform: rotate(-50deg) translate3d(-1px, 0px, 0);} .gtc-nav-show-bars .gtc-barstoleftarrow:after {-webkit-transform: rotate(50deg) translate3d(-1px, 0px, 0);-moz-transform: rotate(50deg) translate3d(-1px, 0px, 0);-ms-transform: rotate(50deg) translate3d(-1px, 0px, 0);transform: rotate(50deg) translate3d(-1px, 0px, 0);}',
        barstorightarrow: '.gtc-barstorightarrow:before {-webkit-transform: translateY(-180%);-moz-transform: translateY(-180%);-ms-transform: translateY(-180%);transform: translateY(-180%);} .gtc-barstorightarrow:after {-webkit-transform: translateY(180%);-moz-transform: translateY(180%);-ms-transform: translateY(180%);transform: translateY(180%);} .gtc-barstorightarrow,.gtc-barstorightarrow:before,.gtc-barstorightarrow:after {-webkit-transform-origin: 100% 0;-moz-transform-origin: 100% 0;-ms-transform-origin: 100% 0;transform-origin: 100% 0;}.gtc-barstorightarrow:after {-webkit-transform-origin: 100% 100%;-moz-transform-origin: 100% 100%;-ms-transform-origin: 100% 100%;transform-origin: 100% 100%;}.gtc-barstorightarrow:before,.gtc-barstorightarrow:after {position: absolute;content: ""}.gtc-nav-show-bars .gtc-barstorightarrow:before {-webkit-transform: rotate(-50deg) translate3d(8px, 9px, 0);-moz-transform: rotate(-50deg) translate3d(8px, 9px, 0);-ms-transform: rotate(-50deg) translate3d(8px, 9px, 0);transform: rotate(-50deg) translate3d(8px, 9px, 0);} .gtc-nav-show-bars .gtc-barstorightarrow:after {-webkit-transform: rotate(50deg) translate3d(8px, -9px, 0);-moz-transform: rotate(50deg) translate3d(8px, -9px, 0);-ms-transform: rotate(50deg) translate3d(8px, -9px, 0);transform: rotate(50deg) translate3d(8px, -9px, 0);}'
    };

    var menuLinkClasses = {
        barstox: {
            Base: '.gtc-barstox',
            Before: '.gtc-barstox:before',
            After: '.gtc-barstox:after'
        },
        barstoleftarrow: {
            Base: '.gtc-barstoleftarrow',
            Before: '.gtc-barstoleftarrow:before',
            After: '.gtc-barstoleftarrow:after'
        },
        barstorightarrow: {
            Base: '.gtc-barstorightarrow',
            Before: '.gtc-barstorightarrow:before',
            After: '.gtc-barstorightarrow:after'
        }
    };

    // Public Methods
    MenuLink.Render = function (menuLink, fromSlidePanel) {

        // Initialize
        var transitionTime = parseInt(menuLink.TransitionTime, 10) * 1000;
        var type = menuLink.MenuLinkType.toLowerCase();

        // Styling
        var menuLinkMarkup = '<style>';
        menuLinkMarkup += menuLinkClasses[type].Base + ',' + menuLinkClasses[type].Before + ',' + menuLinkClasses[type].After + '{-webkit-transition: ' + transitionTime + 'ms;-moz-transition: ' + transitionTime + 'ms;-ms-transition: ' + transitionTime + 'ms;transition: ' + transitionTime + 'ms;}';
        menuLinkMarkup += menuLinkClasses[type].Base + ',' + menuLinkClasses[type].Before + ',' + menuLinkClasses[type].After + '{width: 28px;display: block;height: 5px;background: ' + Colors.ProcessValue(menuLink.Color, false, null) + ';border-radius: 1px;}';
        menuLinkMarkup += menuLinkClasses[type].Base + '-anchor {cursor: pointer;display: inline-block;padding: 9px 0 9px 0;margin: 5px}';
        menuLinkMarkup += '.gtc-nav-show-bars ' + menuLinkClasses[type].Before + ',.gtc-nav-show-bars ' + menuLinkClasses[type].After + '{width: 18px;}';
        menuLinkMarkup += menuLinkStyles[type];
        if (menuLink.MenuLinkType == 'BarsToX') {
            menuLinkMarkup += '.gtc-nav-show-bars .gtc-barstox { background: transparent; }';
        }
        menuLinkMarkup += '</style>';

        // Markup
        var linkMarkup = '';
        var translationAttribute = '';
        var extraClassing = '';

        // Tooltip
        if (Common.IsDefined(menuLink.Tooltip)) {
            translationAttribute += '[data-tooltip]' + menuLink.Tooltip + ';';
            linkMarkup += ' data-tooltip="' + Common.TranslateKey(menuLink.Tooltip) + '"';
            extraClassing += ' gtc-tooltip gtc-link-tooltip'
        }

        // Translations
        if (Common.IsNotEmptyString(translationAttribute)) {
            linkMarkup += ' data-translate="' + translationAttribute + '"';
        }

        // Anchor<, TabIndex@, Class@, Id@, Anchor>
        menuLinkMarkup += '<a role="button" class="gtc-' + type + '-anchor' + extraClassing + '"' + translationAttribute + linkMarkup + ' data-namespace="MenuLink"' + ViewElement.RenderAttributes(menuLink);

        // Slide Panel?
        if (fromSlidePanel) {
            menuLinkMarkup += ' aria-haspopup="true"';
        }

        // Attach Events
        if (!fromSlidePanel) {
            Events.On(document.body, 'click.' + menuLink.Name, '#' + menuLink.Name,
                function () {
                    Common.ToggleClass(Common.Get(menuLink.Name), 'gtc-nav-show-bars');
                }
            );
        }
        else {
            Events.On(document.body, 'menulinkopen' + menuLink.Name + '.' + menuLink.Name,
                function () {
                    Common.AddClass(Common.Get(menuLink.Name), 'gtc-nav-show-bars');
                }
            );
            Events.On(document.body, 'menulinkclose' + menuLink.Name + '.' + menuLink.Name,
                function () {
                    Common.RemoveClass(Common.Get(menuLink.Name), 'gtc-nav-show-bars');
                }
            );
        }

        // Anchor</>
        menuLinkMarkup += '><div class="gtc-' + type + '" id="' + menuLink.Name + '-Div"></div></a>';
        return menuLinkMarkup;

    };

} (window.MenuLink = window.MenuLink || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class DisplayArea
 * @classdesc Supports the DisplayArea View Element<br>
 *            Based On: ViewElement > ContainerElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (DisplayArea, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function DisplayArea.Render
     * @param {object} displayArea - The DisplayArea View Element in JSON format
     * @description Generates the HTML markup for the DisplayArea View Element 
     * @returns {string} HTML Markup of the DisplayArea View Element
     */
    DisplayArea.Render = function (displayArea) {

        // Div<, NameSpace@
        var displayAreaMarkup = '<div data-namespace="DisplayArea"';

        // Class@, Id@
        displayAreaMarkup += ' class="gtc-displayarea ' + GenerateClassNames(displayArea) + '"' + ViewElement.RenderAttributes(displayArea) + '>';

        // Base Style
        var displayAreaBaseStyle = BuildDisplayAreaBaseStyle(displayArea);
        displayAreaMarkup += DisplayAreaStyle.RenderStyle(displayAreaBaseStyle, 'base', displayArea.Name);

        // Override Styles
        displayAreaMarkup += DisplayAreaStyle.RenderStyle(displayArea.OverrideForDesktop, 'desktop', displayArea.Name);
        displayAreaMarkup += DisplayAreaStyle.RenderStyle(displayArea.OverrideForLaptop, 'laptop', displayArea.Name);
        displayAreaMarkup += DisplayAreaStyle.RenderStyle(displayArea.OverrideForMobile, 'mobile', displayArea.Name);
        displayAreaMarkup += DisplayAreaStyle.RenderStyle(displayArea.OverrideForTablet, 'tablet', displayArea.Name);

        // DisplayArea
        displayAreaMarkup += ContainerElement.RenderElements(displayArea, (displayArea.DisableAutoGrid == 'Yes'), false, true);

        // Div</>
        displayAreaMarkup += '</div>';
        return displayAreaMarkup;

    };

    // Private Methods
    function GenerateClassNames (displayArea) {

        // Initialize
        var classSuffix = displayArea.Name.toLowerCase();

        // Styling Classes
        var classNames = 'gtc-displayarea-base-' + classSuffix;
        if (Common.IsDefined(displayArea.OverrideForDesktop)) {
            classNames += ' gtc-displayarea-desktop-' + classSuffix;
        }
        if (Common.IsDefined(displayArea.OverrideForLaptop)) {
            classNames += ' gtc-displayarea-laptop-' + classSuffix;
        }
        if (Common.IsDefined(displayArea.OverrideForMobile)) {
            classNames += ' gtc-displayarea-mobile-' + classSuffix;
        }
        if (Common.IsDefined(displayArea.OverrideForTablet)) {
            classNames += ' gtc-displayarea-tablet-' + classSuffix;
        }

        // Gridding Class
        classNames += ' gtc-displayarea-';
        if (displayArea.DisableAutoGrid == 'Yes') {
            classNames += 'nogrid';
        }
        else {
            classNames += 'grid';
        }
        return classNames;

    };

    function BuildDisplayAreaBaseStyle (displayArea) {

        var displayAreaBaseStyle = {
            Background: displayArea.Background,
            Border: displayArea.Border,
            Dimension: displayArea.Dimension,
            DisplayType: displayArea.DisplayType,
            Font: displayArea.Font,
            IsContentCentered: displayArea.IsContentCentered,
            Layer: displayArea.Layer,
            Margin: displayArea.Margin,
            Maximum: displayArea.Maximum,
            Minimum: displayArea.Minimum,
            Opacity: displayArea.Opacity,
            Overflow: displayArea.Overflow,
            Padding: displayArea.Padding,
            Position: displayArea.Position,
            RoundedCorner: displayArea.RoundedCorner,
            Shadow: displayArea.Shadow,
            VerticalAlignment: displayArea.VerticalAlignment
        };
        return displayAreaBaseStyle;

    };

} (window.DisplayArea = window.DisplayArea || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class DisplayAreaStyle
 * @classdesc Supports the DisplayAreaStyle View Element<br>
 *            This is an abstract View Element
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (DisplayAreaStyle, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function DisplayAreaStyle.RenderStyle
     * @param {object} displayAreaStyle - The DisplayArea View Element in JSON format
     * @param {string} styleCategory - desktop, laptop, mobile or tablet
     * @param {string} displayAreaName - Name of the associated DisplayArea
     * @description Generates the HTML markup for the DisplayAreaStyle View Element 
     * @returns {string} HTML Markup of the DisplayAreaStyle View Element
     */
    DisplayAreaStyle.RenderStyle = function (displayAreaStyle, styleCategory, displayAreaName) {

        var displayAreaStyleMarkup = '';
        if (Common.IsDefined(displayAreaStyle)) {
            // Style@<>
            displayAreaStyleMarkup += '<style>' + GenerateMediaQueryAndName(styleCategory, displayAreaName);

            // DisplayType
            if (Common.IsDefined(displayAreaStyle.DisplayType)) {
                displayAreaStyleMarkup += 'display: ' + displayAreaStyle.DisplayType + ';';
            }

            // VerticalAlignment
            if (Common.IsDefined(displayAreaStyle.VerticalAlignment)) {
                displayAreaStyleMarkup += 'vertical-align: ' + displayAreaStyle.VerticalAlignment + ';';
            }

            // Opacity
            if (Common.IsDefined(displayAreaStyle.Opacity)) {
                displayAreaStyleMarkup += 'opacity: ' + displayAreaStyle.Opacity + ';';
            }

            // Background
            displayAreaStyleMarkup += GenerateBackgroundStyle(displayAreaStyle.Background);

            // Border
            if (Common.IsDefined(displayAreaStyle.Border)) {
                (Common.IsDefined(displayAreaStyle.Border.Thickness) ? displayAreaStyleMarkup += 'border-width:' + displayAreaStyle.Border.Thickness + displayAreaStyle.Border.Scale + ';' : displayAreaStyleMarkup += '');
                (Common.IsDefined(displayAreaStyle.Border.BorderType) ? displayAreaStyleMarkup += 'border-style:' + displayAreaStyle.Border.BorderType + ';' : displayAreaStyleMarkup += '');
                (Common.IsDefined(displayAreaStyle.Border.Color) ? displayAreaStyleMarkup += 'border-color:' + Colors.ProcessValue(displayAreaStyle.Border.Color, false, null) + ';' : displayAreaStyleMarkup += '');
            }

            // Dimension
            var dimensionStyle = StyleHelper.BuildDimensionStyle(displayAreaStyle.Dimension);
            if (Common.IsDefined(dimensionStyle)) {
                if (Common.IsDefined(dimensionStyle.Height)) {
                    displayAreaStyleMarkup += 'height: ' + dimensionStyle.Height;
                }
                if (Common.IsDefined(dimensionStyle.Width)) {
                    displayAreaStyleMarkup += 'width: ' + dimensionStyle.Width;
                }
            }

            // Maximum
            var maximumStyle = StyleHelper.BuildDimensionStyle(displayAreaStyle.Maximum);
            if (Common.IsDefined(maximumStyle)) {
                if (Common.IsDefined(maximumStyle.Height)) {
                    displayAreaStyleMarkup += 'max-height: ' + maximumStyle.Height;
                }
                if (Common.IsDefined(maximumStyle.Width)) {
                    displayAreaStyleMarkup += 'max-width: ' + maximumStyle.Width;
                }
            }

            // Minimum
            var minimumStyle = StyleHelper.BuildDimensionStyle(displayAreaStyle.Minimum);
            if (Common.IsDefined(minimumStyle)) {
                if (Common.IsDefined(minimumStyle.Height)) {
                    displayAreaStyleMarkup += 'min-height: ' + minimumStyle.Height + ';';
                }
                if (Common.IsDefined(minimumStyle.Width)) {
                    displayAreaStyleMarkup += 'min-width: ' + minimumStyle.Width + ';';
                }
            }

            // Overflow
            if (Common.IsDefined(displayAreaStyle.Overflow)) {
                displayAreaStyleMarkup += 'overflow: ' + displayAreaStyle.Overflow + ';';
            }

            // IsContentCentered
            if (Common.IsDefined(displayAreaStyle.IsContentCentered)) {
                if (displayAreaStyle.IsContentCentered == 'Yes') {
                    displayAreaStyleMarkup += 'text-align: center;';
                    displayAreaStyleMarkup += '-webkit-justify-content: center;';
                    displayAreaStyleMarkup += '-ms-flex-pack: center;';
                    displayAreaStyleMarkup += 'justify-content: center;';
                }
            }

            // Margin
            var marginStyle = StyleHelper.BuildPositionStyle(displayAreaStyle.Margin);
            if (Common.IsDefined(marginStyle)) {
                if (Common.IsDefined(marginStyle.Top)) {
                    displayAreaStyleMarkup += 'margin-top:' + marginStyle.Top;
                }
                if (Common.IsDefined(marginStyle.Right)) {
                    displayAreaStyleMarkup += 'margin-right:' + marginStyle.Right;
                }
                if (Common.IsDefined(marginStyle.Bottom)) {
                    displayAreaStyleMarkup += 'margin-bottom:' + marginStyle.Bottom;
                }
                if (Common.IsDefined(marginStyle.Left)) {
                    displayAreaStyleMarkup += 'margin-left:' + marginStyle.Left;
                }
            }

            // Padding
            var paddingStyle = StyleHelper.BuildPositionStyle(displayAreaStyle.Padding);
            if (Common.IsDefined(paddingStyle)) {
                if (Common.IsDefined(paddingStyle.Top)) {
                    displayAreaStyleMarkup += 'padding-top:' + paddingStyle.Top;
                }
                if (Common.IsDefined(paddingStyle.Right)) {
                    displayAreaStyleMarkup += 'padding-right:' + paddingStyle.Right;
                }
                if (Common.IsDefined(paddingStyle.Bottom)) {
                    displayAreaStyleMarkup += 'padding-bottom:' + paddingStyle.Bottom;
                }
                if (Common.IsDefined(paddingStyle.Left)) {
                    displayAreaStyleMarkup += 'padding-left:' + paddingStyle.Left;
                }
            }

            // RoundedCorner
            if (Common.IsDefined(displayAreaStyle.RoundedCorner)) {
                (Common.IsDefined(displayAreaStyle.RoundedCorner.TopLeft) ? displayAreaStyleMarkup += 'border-top-left-radius:' + displayAreaStyle.RoundedCorner.TopLeft + 'px;' : displayAreaStyleMarkup += '');
                (Common.IsDefined(displayAreaStyle.RoundedCorner.TopRight) ? displayAreaStyleMarkup += 'border-top-right-radius:' + displayAreaStyle.RoundedCorner.TopRight + 'px;' : displayAreaStyleMarkup += '');
                (Common.IsDefined(displayAreaStyle.RoundedCorner.BottomRight) ? displayAreaStyleMarkup += 'border-bottom-right-radius:' + displayAreaStyle.RoundedCorner.BottomRight + 'px;' : displayAreaStyleMarkup += '');
                (Common.IsDefined(displayAreaStyle.RoundedCorner.BottomLeft) ? displayAreaStyleMarkup += 'border-bottom-left-radius:' + displayAreaStyle.RoundedCorner.BottomLeft + 'px;' : displayAreaStyleMarkup += '');
            }

            // Shadow
            if (Common.IsDefined(displayAreaStyle.Shadow)) {
                displayAreaStyleMarkup += 'box-shadow: ';
                (Common.IsDefined(displayAreaStyle.Shadow.Horizontal) ? displayAreaStyleMarkup += displayAreaStyle.Shadow.Horizontal + 'px ' : displayAreaStyleMarkup += '0 ');
                (Common.IsDefined(displayAreaStyle.Shadow.ShadowType) && displayAreaStyle.Shadow.ShadowType != 'outset' ? displayAreaStyleMarkup += displayAreaStyle.Shadow.ShadowType + ' ' : displayAreaStyleMarkup += '');
                (Common.IsDefined(displayAreaStyle.Shadow.Vertical) ? displayAreaStyleMarkup += displayAreaStyle.Shadow.Vertical + 'px ' : displayAreaStyleMarkup += '0 ');
                (Common.IsDefined(displayAreaStyle.Shadow.Blur) ? displayAreaStyleMarkup += displayAreaStyle.Shadow.Blur + 'px ' : displayAreaStyleMarkup += '0 ');
                (Common.IsDefined(displayAreaStyle.Shadow.Spread) ? displayAreaStyleMarkup += displayAreaStyle.Shadow.Spread + 'px ' : displayAreaStyleMarkup += '0 ');
                (Common.IsDefined(displayAreaStyle.Shadow.Color) ? displayAreaStyleMarkup += Colors.ProcessValue(displayAreaStyle.Shadow.Color, true, displayAreaStyle.Shadow.Opacity) : displayAreaStyleMarkup += 'rgba(0,0,0,.6)');
                displayAreaStyleMarkup += ';';
            }

            // Position
            var positionStyle = StyleHelper.BuildPositionStyle(displayAreaStyle.Position);
            if (Common.IsDefined(positionStyle)) {
                (Common.IsDefined(positionStyle.Setting) ? displayAreaStyleMarkup += 'position: ' + positionStyle.Setting + ';' : displayAreaStyleMarkup += '');
                (Common.IsDefined(positionStyle.Top) ? displayAreaStyleMarkup += 'top: ' + positionStyle.Top + ';' : displayAreaStyleMarkup += '');
                (Common.IsDefined(positionStyle.Right) ? displayAreaStyleMarkup += 'right: ' + positionStyle.Right + ';' : displayAreaStyleMarkup += '');
                (Common.IsDefined(positionStyle.Bottom) ? displayAreaStyleMarkup += 'bottom: ' + positionStyle.Bottom + ';' : displayAreaStyleMarkup += '');
                (Common.IsDefined(positionStyle.Left) ? displayAreaStyleMarkup += 'left: ' + positionStyle.Left + ';' : displayAreaStyleMarkup += '');
            }

            // Font
            if (Common.IsDefined(displayAreaStyle.Font)) {
                if (Common.IsDefined(displayAreaStyle.Font.Color)) {
                    displayAreaStyleMarkup += 'color: ' + Colors.ProcessValue(displayAreaStyle.Font.Color, false, null) + ';';
                }
                if (Common.IsDefined(displayAreaStyle.Font.Size)) {
                    displayAreaStyleMarkup += 'font-size: ' + displayAreaStyle.Font.Size + displayAreaStyle.Font.Scale + ';';
                }
                if (Common.IsDefined(displayAreaStyle.Font.Weight)) {
                    displayAreaStyleMarkup += 'font-weight: ' + displayAreaStyle.Font.Weight.toLowerCase() + ';';
                }
                if (Common.IsDefined(displayAreaStyle.Font.LineSpacing)) {
                    displayAreaStyleMarkup += 'line-height: ' + displayAreaStyle.Font.LineSpacing + 'px;';
                }
                if (Common.IsDefined(displayAreaStyle.Font.LetterSpacing)) {
                    displayAreaStyleMarkup += 'letter-spacing: ' + displayAreaStyle.Font.LetterSpacing + 'px;';
                }
            }

            // Layer
            if (Common.IsDefined(displayAreaStyle.Layer)) {
                displayAreaStyleMarkup += 'z-index: ' + displayAreaStyle.Layer + ';';
            }

            // Style@</>
            displayAreaStyleMarkup += '}}</style>';
        }
        return displayAreaStyleMarkup;

    };

    // Private Methods
    function GenerateMediaQueryAndName (styleCategory, displayAreaName) {

        var mediaQuery = '';
        switch (styleCategory) {
            case 'desktop':
                // Graphite Studio Preview: Width = 1440, Height = 1080
                mediaQuery = '@media screen and (min-device-width: 1440px) and (max-device-width: 1600px)';
                break;
            case 'laptop':
                // Graphite Studio Preview: Width = 1024, Height = 768
                mediaQuery = '@media screen and (min-device-width: 1024px) and (max-device-width: 1439px)';
                break;
            case 'mobile':
                // Graphite Studio Preview: Width = 420, Height = 630
                mediaQuery = '@media only screen and (min-device-width: 320px) and (max-device-width: 767px)';
                break;
            case 'tablet':
                // Graphite Studio Preview: Width = 768, Height = 576
                mediaQuery = '@media only screen and (min-device-width: 768px) and (max-device-width: 1023px)';
                break;
            default:
                mediaQuery = '@media all';
                break;
        }
        mediaQuery += ' {'
        var styleName = '.gtc-displayarea-' + styleCategory + '-' + displayAreaName.toLowerCase() + ' {';
        return mediaQuery + styleName;

    };

    function GenerateBackgroundStyle (areaBackground) {

        var backgroundStyleMarkup = '';
        if (Common.IsDefined(areaBackground) && (Common.IsOneDefined([areaBackground.Color, areaBackground.ImageSource]))) {
            if (Common.IsDefined(areaBackground.Color) && Colors.IsGradient(areaBackground.Color) === true) {
                var gradientValues = Colors.ProcessValue(areaBackground.Color, false, null);
                backgroundStyleMarkup += 'background-image: -moz-linear-gradient(' + gradientValues[0] + ', ' + gradientValues[1] + ');';
                backgroundStyleMarkup += 'background-image: -ms-linear-gradient(' + gradientValues[0] + ', ' + gradientValues[1] + ');';
                backgroundStyleMarkup += 'background-image: -o-linear-gradient(' + gradientValues[0] + ', ' + gradientValues[1] + ');';
                backgroundStyleMarkup += 'background-image: -webkit-gradient(linear, left top, left bottom, from(' + gradientValues[0] + '), to(' + gradientValues[1] + '));';
                backgroundStyleMarkup += 'background-image: -webkit-linear-gradient(' + gradientValues[0] + ', ' + gradientValues[1] + ');';
                backgroundStyleMarkup += 'background-image: linear-gradient(' + gradientValues[0] + ', ' + gradientValues[1] + ');';
                backgroundStyleMarkup += 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\'' + gradientValues[0] + '\', endColorstr=\'' + gradientValues[1] + '\')';
                backgroundStyleMarkup += ';';
            }
            else {
                (Common.IsDefined(areaBackground.Color) ? backgroundStyleMarkup += 'background-color:' + Colors.ProcessValue(areaBackground.Color, false, null) + ';' : backgroundStyleMarkup += '');
                (Common.IsDefined(areaBackground.ImageSource) ? backgroundStyleMarkup += 'background:url(\'' + Common.BuildResourcePath(areaBackground.ImageSource) + '\');' : backgroundStyleMarkup += '');
                (Common.IsDefined(areaBackground.Repeat) ? backgroundStyleMarkup += 'background-repeat:' + areaBackground.Repeat + ';' : backgroundStyleMarkup += '');
                (Common.IsDefined(areaBackground.ImageSize) ? backgroundStyleMarkup += 'background-size:' + areaBackground.ImageSize + ';' : backgroundStyleMarkup += '');
                var positionStyle = StyleHelper.BuildPositionStyle(areaBackground.Position);
                if (Common.IsDefined(positionStyle) && Common.IsOneDefined([positionStyle.Top, positionStyle.Left])) {
                    backgroundStyleMarkup += 'background-position:';
                    if (Common.IsDefined(positionStyle.Left)) {
                        backgroundStyleMarkup += positionStyle.Left;
                    }
                    else {
                        backgroundStyleMarkup += ' initial';
                    }
                    backgroundStyleMarkup += ' ';
                    if (Common.IsDefined(positionStyle.Top)) {
                        backgroundStyleMarkup += positionStyle.Top;
                    }
                    else {
                        backgroundStyleMarkup += 'initial';
                    }
                    backgroundStyleMarkup += ';';
                }
            }
        }
        return backgroundStyleMarkup;

    };

} (window.DisplayAreaStyle = window.DisplayAreaStyle || {}, window, document, Common, Cache, Events, Velocity));
// StyleHelper
// Based On: StyleHelper
(function (StyleHelper, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    StyleHelper.BuildDimensionStyle = function (elementDimension) {

        var dimensionStyle = null;
        if (Common.IsDefined(elementDimension)) {
            dimensionStyle = {
                Height: null,
                Width: null
            };
            if (Common.IsDefined(elementDimension.Height)) {
                dimensionStyle.Height = elementDimension.Height.toLowerCase();
                if (Common.IsNumeric(elementDimension.Height)) {
                    dimensionStyle.Height += elementDimension.Scale;
                }
                dimensionStyle.Height += ';';
            }
            if (Common.IsDefined(elementDimension.Width)) {
                dimensionStyle.Width = elementDimension.Width.toLowerCase();
                if (Common.IsNumeric(elementDimension.Width)) {
                    dimensionStyle.Width += elementDimension.Scale;
                }
                dimensionStyle.Width += ';';
            }
        }
        return dimensionStyle;

    };

    StyleHelper.BuildPositionStyle = function (elementPosition) {

        var positionStyle = null;
        if (Common.IsDefined(elementPosition)) {
            positionStyle = {
                Setting: null,
                Top: null,
                Right: null,
                Bottom: null,
                Left: null
            };
            if (Common.IsDefined(elementPosition.Setting)) {
                positionStyle.Setting = elementPosition.Setting.toLowerCase() + ';';
            }
            if (Common.IsDefined(elementPosition.Top)) {
                positionStyle.Top = elementPosition.Top.toLowerCase();
                if (Common.IsNumeric(elementPosition.Top)) {
                    positionStyle.Top += elementPosition.Scale;
                }
                positionStyle.Top += ';';
            }
            if (Common.IsDefined(elementPosition.Right)) {
                positionStyle.Right = elementPosition.Right.toLowerCase();
                if (Common.IsNumeric(elementPosition.Right)) {
                    positionStyle.Right += elementPosition.Scale;
                }
                positionStyle.Right += ';';
            }
            if (Common.IsDefined(elementPosition.Bottom)) {
                positionStyle.Bottom = elementPosition.Bottom.toLowerCase();
                if (Common.IsNumeric(elementPosition.Bottom)) {
                    positionStyle.Bottom += elementPosition.Scale;
                }
                positionStyle.Bottom += ';';
            }
            if (Common.IsDefined(elementPosition.Left)) {
                positionStyle.Left = elementPosition.Left;
                if (Common.IsNumeric(elementPosition.Left)) {
                    positionStyle.Left += elementPosition.Scale;
                }
                positionStyle.Left += ';';
            }
        }
        return positionStyle;

    };

} (window.StyleHelper = window.StyleHelper || {}, window, document, Common, Cache, Events, Velocity));
// MenuBar
// Based On: MenuBar -> ViewElement
(function (MenuBar, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    MenuBar.Render = function (menuBar) {

        // Initialize
        var menuBarMarkup = '';

        // Initialize extraClassing
        var extraClassing = '';

        // Styled?
        if (menuBar.Styled == 'Yes') {
            extraClassing += ' gtc-menubar-styled';
        }

        // Orientation
        extraClassing += ' gtc-menubar-' + menuBar.Orientation.toLowerCase();

        // Alignment
        extraClassing += ' gtc-menubar-align-' + menuBar.Alignment.toLowerCase();

        // Custom Background Color?
        if (Common.IsDefined(menuBar.BackgroundColor)) {
            // Add element specific class name
            var backgroundClassName = 'gtc-menubar-backgroundcolor-' + menuBar.Name.toLowerCase();
            extraClassing += ' ' + backgroundClassName;

            // Is custom background light or dark color?
            extraClassing += Colors.IsDarkColor(menuBar.BackgroundColor) ? ' gtc-theme-dark' : ' gtc-theme-light';

            // Generate color and styling
            var backgroundColor = Colors.ProcessValue(menuBar.BackgroundColor, false, null);
            var backgroundCSS = Colors.BackgroundCSS(backgroundColor);
            menuBarMarkup += '<style>';
            menuBarMarkup += ' .' + backgroundClassName + ' {';
            menuBarMarkup += backgroundCSS;
            menuBarMarkup += '}';
            menuBarMarkup += '</style>';
        }

        // I<>, Div<>
        var menuBarMobileLinkId = menuBar.Name + 'MobileLink';
        menuBarMarkup += '<i id="' + menuBarMobileLinkId +'" class="gtc-mobile-nav gtc-icon-styles fa fa-bars"></i><div class="gtc-menubar' + extraClassing + '" data-namespace="MenuBar"' + ViewElement.RenderAttributes(menuBar) + '>';

        // Links?
        if (Common.IsDefined(menuBar.Links) && menuBar.Links.length > 0) {
            // Links
            var index = 0, length = menuBar.Links.length;
            for ( ; index < length; index++) {
                // Render Link
                menuBarMarkup += Link.Render(menuBar.Links[index]);
            }
        }

        // Div</>
        menuBarMarkup += '</div>';

        // Attach click event
        var eventType = 'click';
        if (Common.CheckMedia('Mobile') || Common.CheckMedia('Tablet')) {
            Touch.InitializeTouchEvents();
            eventType = 'tap';
        }
        Events.On(document.body, eventType, '#' + menuBarMobileLinkId,
            function (event) {
                var menuNode = Common.Get(event.target.getAttribute('Id'));
                if (menuNode.nextSibling.style.display == 'block') {
                    menuNode.nextSibling.style.display = 'none';
                }
                else {
                    menuNode.nextSibling.style.display = 'block';
                }
            }
        );

        // Return markup
        return menuBarMarkup;

    };

} (window.MenuBar = window.MenuBar || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class Form
 * @classdesc Namespace: ViewElement > ContainerElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 */
(function (Form, window, document, Common, Cache, Events, Velocity, undefined) {

    var formMaskingValidations = [];

    /**
     * @function Form.Render
     * @param {object} form - The Form View Element in JSON format
     * @description Generates the HTML markup for the Form View Element 
     */
    Form.Render = function (form) {

        // Form<, TabIndex@, Class@, Id@, Form>
        var formMarkup = '<form data-namespace="Form" class="gtc-form gtc-form-gallerygrid-' + form.FieldSetsPerLine.toLowerCase() + '"' + ViewElement.RenderAttributes(form) + '>';

        // Lock Down Form Fields
        if (form.IsLocked == 'Yes') {
            LockDescendants(form, ['FieldSet', 'CheckboxField', 'CurrencyField', 'DateField', 'Field', 'FilteredTextField', 'MaskField', 'NoteField', 'NumericField', 'PercentField', 'PlaceholderField', 'RadioField', 'SecureField', 'SelectField', 'SignatureField', 'SwitchField', 'SwitchMaskField', 'TextField', 'ValueField']);
        }

        // Render Container ViewElements
        formMarkup += ContainerElement.RenderElements(form);

        // Form</>
        formMarkup += '</form>';

        // Stop form from submitting by default, we handle that
        Events.On(document.body, 'submit', '#' + form.Name,
            function (event) {
                event.preventDefault();
                event.stopPropagation();
            }
        );

        // Return markup
        return formMarkup;

    };

    /**
     * @function Form.UpdateValues
     * @param {object} form - The Form DOM element
     * @param {UiParameter[]} uiParameters - A list of UiParameters with Field Names and Values
     * @description Updates the values of the fields in a Form 
     */
    Form.UpdateValues = function (form, uiParameters) {

        if (Common.IsDefined(uiParameters)) {
            var uiParameter, index = 0, length = uiParameters.length, field, isRadioArray;
            for ( ; index < length; index++) {
                // Field Parameter
                uiParameter = uiParameters[index];

                // Field
                isRadioArray = false;
                field = Common.Get(uiParameter.Name);
                if (Common.IsNotDefined(field)) {
                    field = Common.QueryAll('input[name="' + uiParameter.Name + '"]', form);
                    if (field.length == 0) {
                        field = undefined;
                    }
                    else {
                        isRadioArray = true;
                    }
                }
                
                // Update Value
                if (Common.IsDefined(field)) {
                    Field.UpdateValue(field, uiParameter.Value, isRadioArray);
                }
            }
        }

    };

    Form.UpdateStatus = function (form, uiParameters) {

        if (Common.IsDefined(uiParameters)) {
            var uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];
                var field = Common.Get(uiParameter.Name);
                var requiredSpan, fieldLabel;
                if (Common.IsNotDefined(field)) {
                    // Radio Field
                    field = Common.QueryAll('input[name="' + uiParameter.Name + '"]', form);
                    if (field.length > 0) {
                        var fieldSet = Common.Closest('fieldset', field[0]);
                        var fieldLabel = Common.GetChildren(fieldSet, '.gtc-label');
                        requiredSpan = Common.GetChildren(fieldLabel[0], '.gtc-classSpanRequired')[0];
                    }
                }
                else {
                    // Other Fields
                    fieldLabel = Common.Get(uiParameter.Name + '-Label');
                    requiredSpan = fieldLabel.nextElementSibling;
                }
                if (uiParameter.Value == 'IsRequired') {
                    if (Common.IsDefined(fieldLabel) && Common.IsDefined(field)) {
                        Common.RemoveClasses(requiredSpan, 'gtc-classSpanRequiredCompleted gtc-classSpanRequiredYes gtc-classSpanRequiredNo');
                        Common.AddClass(requiredSpan, 'gtc-classSpanRequiredYes');

                        // Focus Out - Add Required Update
                        Events.Off(document.body, 'focusout.requiredField', '#' + uiParameter.Name);
                        Events.On(document.body, 'focusout.requiredField.' + uiParameter.Name, '#' + uiParameter.Name,
                            function (event) {
                                Field.UpdateRequiredStatus(event.target);
                            }
                        );
                    }
                }
                else if (uiParameter.Value == 'NotRequired') {
                    if (Common.IsDefined(fieldLabel) && Common.IsDefined(field)) {
                        Common.RemoveClasses(requiredSpan, 'gtc-classSpanRequiredCompleted gtc-classSpanRequiredYes gtc-classSpanRequiredNo');
                        Common.AddClass(requiredSpan, 'gtc-classSpanRequiredNo');

                        // Focus Out - Remove Required Update
                        Events.Off(document.body, 'focusout.requiredField', '#' + uiParameter.Name);
                    }
                }
            }
        }

    };

    Form.SerializeArray = function (form) {

        // Initialize
        var regExpCRLF = /\r?\n/g;
        formMaskingValidations = [];
        var maskExists = (Common.IsDefined(window['Mask']) ? true : false);

        // Serialize Array
        var radioNames = [], serializedForm = [];
        var serializableArray = Common.QueryAll('[data-serializable]', form);
        var serializableIndex = 0, serializableLength = serializableArray.length;
        for ( ; serializableIndex < serializableLength; serializableIndex++) {
            var serializable = serializableArray[serializableIndex];
            var parameterName = Common.RemovePrefix(serializable.name);
            var rawData = null;
            var uiParameters = null;
            var isCustomFunction = false;
            fieldType = Common.GetAttr(serializable, 'data-namespace');
            var namespace = window[fieldType];
            if (!Common.IsObject(namespace)) {
                continue;
            }

            // Check if masking passes
            if ((maskExists && Common.IsDefined(Common.GetAttr(serializable, 'data-mask'))) || fieldType == 'FilteredTextField' || fieldType == 'SwitchMaskField') {
                var maskField = serializable;
                if (fieldType == 'SliderField') {
                    maskField = Common.Query('.gtc-input-textbox', maskField);
                }
                else if (fieldType == 'SwitchMaskField') {
                    maskField = Common.Query('.gtc-switchmask-text', Common.Closest('.gtc-switchmask', maskField));
                }
                var maskCheck = true;
                if (fieldType == 'FilteredTextField') {
                    if (Common.GetAttr(serializable, 'data-isfreeform') == 'No' && Common.IsNotEmptyString(maskField.value)) {
                        var labelValueArray = Cache.Get(maskField, 'labelValueArray');
                        var selectedOption = FilteredTextField.Validate(maskField, labelValueArray);
                        if (!selectedOption) {
                            maskCheck = false;
                        }
                    }
                }
                else {
                    maskCheck = Mask.CheckValidation(maskField);
                }

                // Add or remove displaying masking validations
                if (!maskCheck) {
                    formMaskingValidations.push(maskField);
                    continue;
                }
                else if (maskCheck && Common.HasClass(maskField, 'gtc-failed-masking-validation')) {
                    Form.RemoveMaskingError(maskField, true);
                }
            }

            // Serialize value
            switch (fieldType) {
                case 'DateField':
                    rawData = Common.GetAttr(serializable, 'data-raw');
                    if (rawData.length <= 0) {
                        rawData = null;
                    }
                    else {
                        var serializeAsUtc = Common.GetAttr(serializable, 'data-serializeasutc');
                        if (serializeAsUtc == 'Yes') {
                            var localDateTime = eval(rawData.replace(/\/Date\((-?\d+)\)\//, 'new Date($1)'));
                            rawData = '/Date(' + Common.AddTimezone(localDateTime).getTime() + ')/';
                        }
                    }
                    break;
                case 'CheckboxField':
                    isCustomFunction = true;
                    serializedForm.push(namespace.SerializeArray(serializable));
                    break;
                case 'SwitchField':
                    rawData = 'Yes';
                    if (serializable.checked == false) {
                        rawData = 'No';
                    }
                    break;
                case 'CurrencyField':
                    rawData = Common.GetAttr(serializable, 'data-raw');
                    if (rawData.length <= 0) {
                        rawData = null;
                    }
                    var currencyCode = Common.GetAttr(serializable, 'data-currencycode');
                    if (Common.IsDefined(currencyCode)) {
                        uiParameters = [
                            {
                                Name: 'Code',
                                Value: currencyCode,
                                UiParameters: null
                            }
                        ];
                    }
                    break;
                case 'RadioField':
                    var radioName = serializable.name;
                    if (Common.IsInArray(radioName, radioNames) == -1) {
                        // First of the Radio in the group (Process the whole Radio group)
                        radioNames.push(radioName);
                        var index = 0, radios = Common.GetByName(radioName), radioLength = radios.length;
                        for ( ; index < radioLength; index++) {
                            if (radios[index].checked == true) {
                                rawData = radios[index].value;
                                break;
                            }
                        }
                        if (Common.IsNotDefined(rawData)) {
                            rawData = null;
                        }
                    }
                    else {
                        // TODO Fix: Radio group already processed
                        continue;
                    }
                    break;
                case 'SelectField':
                    rawData = serializable.value;
                    break;
                case 'SignatureField':
                    parameterName = Common.RemovePrefix(serializable.id);
                    rawData = Widgets.signature(serializable, 'ExportSignature');
                    break;
                case 'SliderField':
                    parameterName = Common.RemovePrefix(serializable.id);
                    rawData = Widgets.sliderfield(Common.Query('#' + serializable.id + '-Slider', serializable), 'value');
                    break;
                case 'SwitchMaskField':
                    // Add in checkbox value
                    var switchMaskCheckbox = Common.Get(serializable.id + '-Checkbox');
                    var switchCheckValue = 'Right';
                    if (switchMaskCheckbox.checked == false) {
                        switchCheckValue = 'Left';
                    }
                    serializedForm.push({ Name: serializable.id, Value: switchCheckValue, UiParameters: null });

                    // Then do textbox value
                    var switchMaskTextField = Common.Get(serializable.id + 'Text');
                    parameterName = Common.RemovePrefix(Common.GetAttr(switchMaskTextField, 'data-parametername'));
                    rawData = Common.GetAttr(switchMaskTextField, 'data-raw');
                    if (Common.IsNotDefined(rawData)) {
                        rawData = switchMaskTextField.value;
                    }
                    if (rawData.length <= 0) {
                        rawData = null;
                    }
                    else {
                        rawData = rawData.replace(regExpCRLF, '\r\n');
                    }
                    var currencyCode = Common.GetAttr(switchMaskTextField, 'data-currencycode');
                    if (Common.IsDefined(currencyCode)) {
                        uiParameters = [
                            {
                                Name: 'Code',
                                Value: currencyCode,
                                UiParameters: null
                            }
                        ];
                    }
                    break;
                case 'RichTextEditor':
                    parameterName = Common.RemovePrefix(serializable.id);
                    rawData = CKEDITOR.instances[serializable.id + 'EditableArea'].getData();
                    break;
                default:
                    if (Common.IsFunction(namespace.SerializeArray)) {
                        serializedForm.push(namespace.SerializeArray(serializable));
                        isCustomFunction = true;
                    }
                    else {
                        rawData = Common.GetAttr(serializable, 'data-raw');
                        if (Common.IsNotDefined(rawData)) {
                            rawData = serializable.value;
                        }
                        if (rawData.length <= 0) {
                            rawData = null;
                        }
                        else {
                            rawData = rawData.replace(regExpCRLF, '\r\n');
                        }
                    }
                    break;
            }
            if (!isCustomFunction) {
                serializedForm.push({ Name: parameterName, Value: rawData, UiParameters: uiParameters });
            }
        }
        return serializedForm;

    };

    Form.HasChanged = function (form) {

        // Find all serializable inputs that have changed
        var formInputs = Common.QueryAll('[data-serializable][data-haschanged=Yes]', form);
        var choiceInputs = Common.QueryAll('[data-namespace=Choice][data-haschanged=Yes]', form);
        formInputs = formInputs.concat(choiceInputs);

        // Return
        if (formInputs.length > 0) {
            return true;
        }
        return false;

    };

    Form.ClearHasChanged = function (form) {

        // Find all serializable inputs that have changed
        var formInputs = Common.QueryAll('[data-serializable][data-haschanged=Yes]', form);
        var choiceInputs = Common.QueryAll('[data-namespace=Choice][data-haschanged=Yes]', form);
        formInputs = formInputs.concat(choiceInputs);

        // Clear Flag
        if (formInputs.length > 0) {
            var index = 0, length = formInputs.length;
            for ( ; index < length; index++) {
                Common.RemoveAttr(formInputs[index], 'data-haschanged');
            }
        }

    };

    Form.IsCompleted = function (form) {

        if (Common.QueryAll('.gtc-classSpanRequiredYes', form).length > 0) {
            return false;
        }
        return true;

    };

    Form.AddFormParameters = function (uiParameters, form, ignoreFormParameters) {

        // Form Parameters (and has changed)
        var formParameters = Form.SerializeArray(form);
        var formChanged = 'No';
        if (Form.HasChanged(form, formParameters)) {
            formChanged = 'Yes';
        }

        // Add Form Changed, Form Parameters
        if (ignoreFormParameters) {
            uiParameters = uiParameters.concat([
                {
                    Name: 'FormChanged',
                    Value: formChanged,
                    UiParameters: null
                }],
                formParameters
            );
        }
        else {
            uiParameters = uiParameters.concat([
                {
                    Name: 'FormChanged',
                    Value: formChanged,
                    UiParameters: null
                },
                {
                    Name: 'FormParameters',
                    Value: null,
                    UiParameters: formParameters
                }
            ]);
        }

        // Return
        return uiParameters;

    };

    Form.ForceGalleryGridding = function (form) {

        if (parseInt(form.FieldSetsPerLine, 10) > 0) {
            var perLineObject = {
                Type: 'FieldSet',
                PerLine: form.FieldSetsPerLine
            };
            return perLineObject;
        }
        else {
            return false;
        }

    };

    Form.HasMaskingErrors = function () {

        if (formMaskingValidations.length > 0) {
            return true;
        }
        else {
            return false;
        }

    };

    Form.DisplayMaskingErrors = function () {

        var formValidationsCopy = Common.MergeArray([], formMaskingValidations);
        var field, index = 0, length = formValidationsCopy.length;
        for ( ; index < length; index++) {
            field = formValidationsCopy[index];
            InsertMaskingErrorHTML(field);
        }

    };

    Form.AddMaskingError = function (field) {

        if (Common.IsInArray(field, formMaskingValidations) == -1) {
            formMaskingValidations.push(field);
        }
        InsertMaskingErrorHTML(field);

    };

    Form.RemoveMaskingError = function (field, ignoreRemoval) {

        if (!ignoreRemoval && Common.IsInArray(field, formMaskingValidations) > -1) {
            formMaskingValidations = Common.FilterArray(formMaskingValidations,
                function (element) {
                    return element != field;
                }
            );
        }
        Common.RemoveClass(field, 'gtc-failed-masking-validation');
        Velocity(Common.Get(field.id + 'FailedMaskIcon'), 'fadeOut', 'slow',
            function () {
                Common.Remove(this);
            }
        );

    };

    // Private Methods
    function LockDescendants (jsonObject, lockTypes) {

        // Loop over each object property
        var key;
        for (key in jsonObject) {
            if (jsonObject.hasOwnProperty(key)) {
                var object = jsonObject[key];

                // Set IsLocked if criteria met
                var isDefined = Common.IsDefined(object);
                var isObject = Common.IsObject(object);
                var isArray = Common.IsArray(object);
                if (isDefined && isObject && !isArray && Common.IsInArray(object.Type, lockTypes) != -1 && Common.IsDefined(object.IsLocked)) {
                    object.IsLocked = 'Yes';
                }

                // Recursively call LockDescendants if its array or object
                if (isDefined && (isArray || isObject)) {
                    LockDescendants(object, lockTypes);
                }
            }
        }

    };

    function InsertMaskingErrorHTML (field) {

        if (!Common.HasClass(field, 'gtc-failed-masking-validation')) {
            var iconMarkup = '<span id="' + field.id + 'FailedMaskIcon" style="display:none;" class="gtc-input-system gtc-failed-masking-validation-icon"><i class="gtc-icon-styles fa fa-warning"></i></span>';
            Common.InsertHTMLString(field, Common.InsertType.After, iconMarkup);
            Velocity(field.nextElementSibling, 'fadeIn', 'slow');
            Common.AddClass(field, 'gtc-failed-masking-validation');
        }

    };

} (window.Form = window.Form || {}, window, document, Common, Cache, Events, Velocity));
// Field Set
// Based On: FieldSet -> ViewElement
(function (FieldSet, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    FieldSet.Render = function (fieldSet, fromAccordionForm) {

        // Form<, TabIndex@, Class@, Id@, Form>
        var additionalClass = '';
        if (Common.IsDefined(fieldSet.FieldSetType)) {
            additionalClass += ' gtc-fieldset-' + fieldSet.FieldSetType.toLowerCase();
        }
        var fieldSetMarkup = '<fieldset data-namespace="FieldSet" class="gtc-fieldset' + additionalClass + '"' + ViewElement.RenderAttributes(fieldSet) + '>';

        // Legend<>, Title, Legend</>
        if (Common.IsDefined(fieldSet.Title)) {
            fieldSetMarkup += '<legend id="' + fieldSet.Name + 'Legend" class="gtc-legend gtc-page-theme-color" data-translate="' + fieldSet.Title + '">' + Common.TranslateKey(fieldSet.Title) + '</legend>';
        }

        // Render Fields
        if (Common.IsDefined(fieldSet.Fields)) {

            // Ol<>
            fieldSetMarkup += '<ol class="gtc-fieldset-ol"';

            // Expandable?
            if (fromAccordionForm) {
                fieldSetMarkup += ' aria-expanded="false"';
            }
            fieldSetMarkup += '>';

            // Fields
            var field, index = 0, length = fieldSet.Fields.length;
            for ( ; index < length; index++) {
                field = fieldSet.Fields[index];

                // Li<>
                fieldSetMarkup += '<li class="gtc-field">';

                // Field
                var fieldNamespace = window[field.Type];
                ViewElement.TestExists(field.Type, fieldNamespace);
                fieldSetMarkup += fieldNamespace.Render(field);

                // Li</>
                fieldSetMarkup += '</li>';
            }

            // Ol</>
            fieldSetMarkup += '</ol>';
        }

        // Form</>
        fieldSetMarkup += '</fieldset>';

        // Return markup
        return fieldSetMarkup;

    };

    FieldSet.UpdateTitle = function (fieldSet, updatedTitle, promises, context) {

        // Get deferred object for animation
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);


        // Initialize
        var onParent = context == 'Parent';
        var title = Common.Get(fieldSet.id + 'Legend', onParent);
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(updatedTitle);
            Common.SetAttr(title, 'data-translate', updatedTitle);
        };
        if (Common.IsHidden(fieldSet)) {
            updateTitleFunction();
            animationPromise.resolve();
        }
        else {
            // Animate
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    FieldSet.PostInstructionConfiguration = function (fieldSet) {

        var noteFields = Common.QueryAll('.gtc-input-notefield', fieldSet);
        if (noteFields.length > 0) {
            var index = 0, length = noteFields.length;
            for ( ; index < length; index++) {
                Events.Trigger(document.body, 'reconfiguretextarea-' + noteFields[index].id);
            }
        }

    };

} (window.FieldSet = window.FieldSet || {}, window, document, Common, Cache, Events, Velocity));
// Rich Text Editor
// Based On: RichTextEditor -> ViewElement
(function (RichTextEditor, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    RichTextEditor.Render = function (richTextEditor) {

        // Div<, TabIndex@, Class@, Id@>
        var tabIndex = richTextEditor.FocusIndex;
        richTextEditor.FocusIndex = 0;
        var editorMarkup = '<div data-namespace="RichTextEditor" data-serializable class="gtc-editor-container"' + ViewElement.RenderAttributes(richTextEditor);
        richTextEditor.FocusIndex = tabIndex;

        // On Save Event
        if (Common.IsEventViewElementDefined(richTextEditor.OnSave)) {
            // Data-ControllerPath/ActionName
            editorMarkup += ' data-save=\'' + JSON.stringify(richTextEditor.OnSave) + '\'';
        }

        // Div</>
        editorMarkup += '>';

        // H2<>, Title, H2</>
        if (Common.IsDefined(richTextEditor.Title)) {
            editorMarkup += '<h2 class="gtc-page-theme-color"';

            // Translations
            editorMarkup += ' data-translate="' + richTextEditor.Title + '"';
            editorMarkup += '>' + Common.TranslateKey(richTextEditor.Title) + '</h2>';
        }

        // Required?
        if (richTextEditor.IsRequired == 'Yes') {
            var fieldNamespace = window[richTextEditor.Type.toString()];
            if (Common.IsDefined(richTextEditor.Value) && Common.IsNotEmptyString(richTextEditor.Value)) {
                editorMarkup += '<span id="SpanRequired' + richTextEditor.Name + '" class="gtc-classSpanRequired gtc-classSpanRequiredCompleted">!</span>';
            }
            else {
                editorMarkup += '<span id="SpanRequired' + richTextEditor.Name + '" class="gtc-classSpanRequired gtc-classSpanRequiredYes">!</span>';
            }
        }
        else {
            editorMarkup += '<span id="SpanRequired' + richTextEditor.Name + '" class="gtc-classSpanRequired gtc-classSpanRequiredNo">!</span>';
        }

        // Div<, Id@>
        editorMarkup += '<label id="' + richTextEditor.Name + 'EditableAreaLabel" for="' + richTextEditor.Name + 'EditableArea" class="gtc-sr-only">' + richTextEditor.Name + 'EditableAreaLabel</label><textarea id="' + richTextEditor.Name + 'EditableArea" class="gtc-editor-editablearea" tabindex="' + tabIndex + '">';

        if (Common.IsDefined(richTextEditor.Value)) {
            editorMarkup += richTextEditor.Value;
        }

        // Div</>, Div</>
        editorMarkup += '</textarea></div>';

        // Configure editor once inserted in DOM
        var options = BuildEditorConfiguration(richTextEditor);
        Events.One(document.body, 'configurerichtexteditor',
            function () {
                var editorInstance = CKEDITOR.replace(richTextEditor.Name + 'EditableArea', options);
                editorInstance.on('instanceReady',
                    function () {
                        if (Common.IsEventViewElementDefined(richTextEditor.OnSave)) {
                            ConfigureEditorSaving(editorInstance, richTextEditor.Name);
                        }
                        if (richTextEditor.IsHeightResizable == 'Yes' || richTextEditor.IsWidthResizable == 'Yes') {
                            ConfigureResizeComplete(editorInstance);
                        }
                        if (richTextEditor.IsRequired == 'Yes') {
                            ConfigureRequiredField(editorInstance, richTextEditor.Name);
                        }
                        ConfigureEditorOnChangeValue(editorInstance, richTextEditor.Name);
                        if (Common.IsModal()) {
                            ConfigureEditorModalMaximize(editorInstance);
                        }
                        if (Common.IsModal()) {
                            setTimeout(
                                function () {
                                    Common.ResizeView(true);
                                }, 1000
                            );
                        }
                    }
                );
            }
        );
        return editorMarkup;

    };

    RichTextEditor.OnSave = function (editorId) {

        // Initialize
        var editorObject = CKEDITOR.instances[editorId + 'EditableArea'];
        var fieldParameterName = Common.RemovePrefix(editorId);
        var onSaveParameters = [
            {
                Name: fieldParameterName,
                Value: editorObject.getData(),
                UiParameters: null
            }
        ];

        // Get OnSaveEvent object
        var editorElement = Common.Get(editorId);
        var onSaveEvent = JSON.parse(Common.GetAttr(editorElement, 'data-save'));
        if (Common.IsDefined(onSaveEvent.UiParameters)) {
            onSaveParameters = onSaveParameters.concat(onSaveEvent.UiParameters);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onSaveEvent.ControllerPath + onSaveEvent.ActionName, onSaveParameters, Page.RunInstructions, editorElement);

    };

    RichTextEditor.UpdateValue = function (editor, fieldValue) {

        var editorObject = CKEDITOR.instances[editor.id + 'EditableArea'];
        var decodedHtml = Common.Decode(fieldValue);
        editorObject.setData(decodedHtml);
        if (Common.IsDefined(Common.GetAttr(editor, 'data-serializable'))) {
            Common.SetAttr(editor, 'data-haschanged', 'Yes');
        }
        editorObject.fire('blur');

    };

    RichTextEditor.ShowPinwheel = function (editorElement) {
    };

    RichTextEditor.HidePinwheel = function (editorElement) {
    };

    // Private Methods
    function BuildEditorConfiguration (richTextEditor) {

        // Build options object
        var options = {};
        options.customConfig = '';
        options.skin = 'moono-dark';
        options.language = Common.GetLanguage();
        options.pasteFromWordRemoveFontStyles = false;
        options.pasteFromWordRemoveStyles = false;
        options.removePlugins = 'about';
        options.tabIndex = (richTextEditor.FocusIndex == 0) ? -1 : richTextEditor.FocusIndex;

        // Can resize height/width manually?
        if (richTextEditor.IsHeightResizable == 'No' && richTextEditor.IsWidthResizable == 'No') {
            options.resize_enabled = false;
        }
        else if (richTextEditor.IsHeightResizable == 'Yes' && richTextEditor.IsWidthResizable == 'Yes') {
            options.resize_dir = 'both';
        }
        else if (richTextEditor.IsHeightResizable == 'Yes') {
            options.resize_dir = 'vertical';
        }
        else if (richTextEditor.IsWidthResizable == 'Yes') {
            options.resize_dir = 'horizontal';
        }

        // Manual height or width set?
        var dimensionStyle = StyleHelper.BuildDimensionStyle(richTextEditor.Dimension);
        if (Common.IsDefined(dimensionStyle)) {
            if (Common.IsDefined(dimensionStyle.Height)) {
                options.height = dimensionStyle.Height.replace(';', '');
            }
            if (Common.IsDefined(dimensionStyle.Width)) {
                options.width = dimensionStyle.Width.replace(';', '');
            }
        }

        // Build toolbar configuration
        // Initialization
        options.toolbar = [];
        options.toolbarGroups = [];
        var sectionGroup = {};
        var toolbarGroup = [];
        var section = {};
        var groups = [];
        var items = [];

        // Mode, Document, DocTools Section
        if (richTextEditor.CanViewSource == 'Yes') {
            groups.push('mode');
            items.push('Source');
            items.push('-');
            toolbarGroup.push('mode');
        }
        if (Common.IsDefined(richTextEditor.OnSave)) {
            groups.push('document');
            items.push('Save');
            toolbarGroup.push('document');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',save';
        }
        if (richTextEditor.ShowNewPageButton == 'Yes') {
            if (!Common.IsInArray('document', groups)) {
                groups.push('document');
            }
            items.push('NewPage');
            if (!Common.IsInArray('document', toolbarGroup)) {
                toolbarGroup.push('document');
            }
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',newpage';
        }
        if (richTextEditor.ShowPrintButtons == 'Yes') {
            if (!Common.IsInArray('document', groups)) {
                groups.push('document');
            }
            items.push('Preview');
            items.push('Print');
            if (!Common.IsInArray('document', toolbarGroup)) {
                toolbarGroup.push('document');
            }
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',print,preview';
        }
        if (richTextEditor.CanUseTemplates == 'Yes') {
            groups.push('doctools');
            items.push('-');
            items.push('Templates');
            toolbarGroup.push('doctools');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',templates';
        }
        if (groups.length > 0 && items.length > 0) {
            section.name = 'document';
            section.groups = groups;
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'document';
            sectionGroup.groups = toolbarGroup;
            options.toolbarGroups.push(sectionGroup);
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Clipboard section
        if (richTextEditor.ShowClipboardActions == 'Yes') {
            groups.push('clipboard');
            items.push('Cut');
            items.push('Copy');
            items.push('Paste');
            items.push('PasteText');
            items.push('PasteFromWord');
            toolbarGroup.push('clipboard');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',clipboard,pastetext,pastefromword';
        }
        if (richTextEditor.CanUndoRedo == 'Yes') {
            groups.push('undo');
            if (items.length > 0) {
                items.push('-');
            }
            items.push('Undo');
            items.push('Redo');
            toolbarGroup.push('undo');
        }
        if (groups.length > 0 && items.length > 0) {
            section.name = 'clipboard';
            section.groups = groups;
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'clipboard';
            sectionGroup.groups = toolbarGroup;
            options.toolbarGroups.push(sectionGroup);
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Editing section
        if (richTextEditor.CanFind == 'Yes') {
            groups.push('find');
            items.push('Find');
            toolbarGroup.push('find');
        }
        if (richTextEditor.CanReplace == 'Yes') {
            if (!Common.IsInArray('find', groups)) {
                groups.push('find');
            }
            items.push('Replace');
            if (!Common.IsInArray('find', toolbarGroup)) {
                toolbarGroup.push('find');
            }
        }
        if (richTextEditor.CanFind == 'No' && richTextEditor.CanReplace == 'No') {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',find';
        }
        if (richTextEditor.ShowSelectAllButton == 'Yes') {
            groups.push('selection');
            if (items.length > 0) {
                items.push('-');
            }
            items.push('SelectAll');
            toolbarGroup.push('selection');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',selectall';
        }
        if (richTextEditor.CanSpellCheck == 'Yes') {
            groups.push('spellchecker');
            if (items.length > 0) {
                items.push('-');
            }
            items.push('Scayt');
            toolbarGroup.push('spellchecker');
            options.scayt_autoStartup = true;
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',scayt,wsc';

            // Turn on native browser spell checking
            options.disableNativeSpellChecker = false;
        }
        if (groups.length > 0 && items.length > 0) {
            section.name = 'editing';
            section.groups = groups;
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'editing';
            sectionGroup.groups = toolbarGroup;
            options.toolbarGroups.push(sectionGroup);
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Form Elements section
        if (richTextEditor.CanInsertFormElements == 'Yes') {
            items.push('Form');
            items.push('Checkbox');
            items.push('Radio');
            items.push('TextField');
            items.push('Textarea');
            items.push('Select');
            items.push('Button');
            items.push('ImageButton');
            items.push('HiddenField');
            section.name = 'forms';
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'forms';
            options.toolbarGroups.push(sectionGroup);
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',forms';
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Styling section
        if (richTextEditor.CanDoBasicStyling == 'Yes') {
            groups.push('basicstyles');
            items.push('Bold');
            items.push('Italic');
            items.push('Underline');
            items.push('Strike');
            toolbarGroup.push('basicstyles');
        }
        if (richTextEditor.CanDoSubSuperScripts == 'Yes') {
            if (!Common.IsInArray('basicstyles', groups)) {
                groups.push('basicstyles');
            }
            items.push('Subscript');
            items.push('Superscript');
            if (!Common.IsInArray('basicstyles', toolbarGroup)) {
                toolbarGroup.push('basicstyles');
            }
        }
        if (richTextEditor.CanDoBasicStyling == 'No' && richTextEditor.CanDoSubSuperScripts == 'No') {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',basicstyles';
        }
        if (richTextEditor.ShowRemoveFormatButton == 'Yes') {
            groups.push('cleanup');
            if (items.length > 0) {
                items.push('-');
            }
            items.push('RemoveFormat');
            toolbarGroup.push('cleanup');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',removeformat';
        }
        if (groups.length > 0 && items.length > 0) {
            section.name = 'basicstyles';
            section.groups = groups;
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'basicstyles';
            sectionGroup.groups = toolbarGroup;
            options.toolbarGroups.push(sectionGroup);
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Paragraph section
        if (richTextEditor.CanInsertLists == 'Yes') {
            groups.push('list');
            items.push('NumberedList');
            items.push('BulletedList');
            toolbarGroup.push('list');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',list';
        }
        if (richTextEditor.ShowIndentButtons == 'Yes') {
            groups.push('indent');
            if (items.length > 0) {
                items.push('-');
            }
            items.push('Outdent');
            items.push('Indent');
            toolbarGroup.push('indent');
        }
        if (richTextEditor.CanBlockQuote == 'Yes') {
            groups.push('blocks');
            if (items.length > 0) {
                items.push('-');
            }
            items.push('Blockquote');
            items.push('CreateDiv');
            toolbarGroup.push('blocks');
        }
        if (richTextEditor.CanChangeJustifications == 'Yes') {
            groups.push('align');
            if (items.length > 0) {
                items.push('-');
            }
            items.push('JustifyLeft');
            items.push('JustifyCenter');
            items.push('JustifyRight');
            items.push('JustifyBlock');
            toolbarGroup.push('align');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',justify';
        }
        if (richTextEditor.ShowBiDirectionalTextButtons == 'Yes') {
            groups.push('bidi');
            if (items.length > 0) {
                items.push('-');
            }
            items.push('BidiLtr');
            items.push('BidiRtl');
            items.push('Language');
            toolbarGroup.push('bidi');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',bidi';
        }
        if (groups.length > 0 && items.length > 0) {
            section.name = 'paragraph';
            section.groups = groups;
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'paragraph';
            sectionGroup.groups = toolbarGroup;
            options.toolbarGroups.push(sectionGroup);
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Links section
        if (richTextEditor.CanInsertLinks == 'Yes') {
            items.push('Link');
            items.push('Unlink');
            items.push('Anchor');
            section.name = 'links';
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'links';
            options.toolbarGroups.push(sectionGroup);
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',link';
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Inserts section
        if (richTextEditor.CanInsertImages == 'Yes') {
            items.push('base64image');
            options.extraPlugins = 'base64image';
            options.removePlugins += ',image';
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',image';
        }
        if (richTextEditor.CanInsertTables == 'Yes') {
            items.push('Table');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',table,tabletools';
        }
        if (richTextEditor.CanInsertPageBreaks == 'Yes') {
            items.push('PageBreak');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',pagebreak';
        }
        if (richTextEditor.CanInsertOther == 'Yes') {
            items.push('Flash');
            items.push('HorizontalRule');
            items.push('Smiley');
            items.push('SpecialChar');
            items.push('Iframe');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',smiley,flash,iframe,specialchar,horizontalrule';
        }
        if (items.length > 0) {
            section.name = 'insert';
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'insert';
            options.toolbarGroups.push(sectionGroup);
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Styling dropdown section
        if (richTextEditor.ShowStylesDropdown == 'Yes') {
            items.push('Styles');
        }
        if (richTextEditor.ShowFormatDropdown == 'Yes') {
            items.push('Format');
        }
        if (richTextEditor.ShowFontDropdown == 'Yes') {
            items.push('Font');
        }
        if (richTextEditor.ShowFontSizeDropdown == 'Yes') {
            items.push('FontSize');
        }
        if (items.length > 0) {
            section.name = 'styles';
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'styles';
            options.toolbarGroups.push(sectionGroup);
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Colors section
        if (richTextEditor.CanChangeColors == 'Yes') {
            items.push('TextColor');
            items.push('BGColor');
            section.name = 'colors';
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'colors';
            options.toolbarGroups.push(sectionGroup);
        }

        // Reinitialize
        sectionGroup = {};
        toolbarGroup = [];
        section = {};
        groups = [];
        items = [];

        // Styling dropdown section
        if (richTextEditor.CanMaximize == 'Yes') {
            items.push('Maximize');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',maximize';
        }
        if (richTextEditor.ShowContentBlocksButton == 'Yes') {
            items.push('ShowBlocks');
        }
        else {
            // Stop uneccessary plugins from loading
            options.removePlugins += ',showblocks';
        }
        if (items.length > 0) {
            section.name = 'tools';
            section.items = items;
            options.toolbar.push(section);
            sectionGroup.name = 'tools';
            options.toolbarGroups.push(sectionGroup);
        }

        // Return
        return options;

    };

    function ConfigureEditorSaving (editorObject, editorId) {

        editorObject.commands.save.enable();
        editorObject.on('save',
            function () {
                RichTextEditor.OnSave(editorId);
                return false;
            }
        );

    };

    function ConfigureEditorOnChangeValue (editorObject, editorId) {

        var editorElement = Common.Get(editorId);
        editorObject.on('change',
            function (event) {
                Common.SetAttr(editorElement, 'data-haschanged', 'Yes');
                event.removeListener();
            }
        );

    };

    function ConfigureEditorModalMaximize (editorObject) {

        editorObject.on('maximize',
            function(event) {
                var modalDialog = Common.Query('.gtc-modal-dialog', null, true);
                if (event.data == 1) {
                    // Maximize
                    Common.AddClass(modalDialog, 'gtc-modal-fullscreen');
                }
                else if (event.data == 2) {
                    // Minimize
                    Common.RemoveClass(modalDialog, 'gtc-modal-fullscreen');
                }
            }
        );

    };

    function ConfigureResizeComplete (editorObject) {

        editorObject.on('resized',
            function () {
                Page.SetPageHeight();
                if (Common.IsModal()) {
                    Common.ResizeView(true);
                }
            }
        );

    };

    function ConfigureRequiredField (editorObject, editorId) {

        editorObject.on('blur',
            function () {
                var value = editorObject.getData();
                var requiredSpan = Common.Get('SpanRequired' + editorId);
                if (Common.IsDefined(value) && Common.IsNotEmptyString(value)) {
                    Common.RemoveClass(requiredSpan, 'gtc-classSpanRequiredYes');
                    Common.AddClass(requiredSpan, 'gtc-classSpanRequiredCompleted');
                }
                else {
                    Common.RemoveClass(requiredSpan, 'gtc-classSpanRequiredCompleted');
                    Common.AddClass(requiredSpan, 'gtc-classSpanRequiredYes');
                }
            }
        );

    };

} (window.RichTextEditor = window.RichTextEditor || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class ButtonPanel
 * @classdesc Supports the ButtonPanel View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (ButtonPanel, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function ButtonPanel.Render
     * @param {object} buttonPanel - The ButtonPanel View Element in JSON format
     * @description Generates the HTML markup for the ButtonPanel View Element 
     * @returns {string} HTML Markup of the ButtonPanel View Element
     */
    ButtonPanel.Render = function (buttonPanel) {

        // Div<, TabIndex@, Class@, Id@, Div>
        var buttonPanelMarkup = '<div class="gtc-button-panel gtc-button-panel-' + buttonPanel.Side.toLowerCase() + '" data-namespace="ButtonPanel"' + ViewElement.RenderAttributes(buttonPanel) + '>';

        // Buttons
        if (Common.IsDefined(buttonPanel.Buttons)) {
            var button, index = 0, length = buttonPanel.Buttons.length;
            for ( ; index < length; index++) {
                button = buttonPanel.Buttons[index];

                // Render
                buttonPanelMarkup += Link.Render(button);
            }
        }

        // Div</>
        buttonPanelMarkup += '</div>';

        // Return markup
        return buttonPanelMarkup;

    };

} (window.ButtonPanel = window.ButtonPanel || {}, window, document, Common, Cache, Events, Velocity));
// Tab Header
// Based On: TabHeader -> ViewElement
(function (TabHeader, window, document, Common, Cache, Events, Velocity, undefined) {

    TabHeader.Options = {
        // Common
        TabTransition: 'Default',
        TabType: 'Default',
        Footer: false,
        OnChange: false
    };

    // Public Methods
    TabHeader.Render = function (tabHeader) {

        // Set Options
        SetOptions(tabHeader);

        // Div<, TabIndex@, Class@, Id@
        var tabHeaderMarkup = '<div data-namespace="TabHeader" data-configure="Pre" class="gtc-tabheader"' + ViewElement.RenderAttributes(tabHeader);

        if (Common.IsDefined(tabHeader.OnChange)) {
            // OnChange
            tabHeaderMarkup += EventElement.AttachEvent(tabHeader.Name, 'change', tabHeader.OnChange, TabHeader.OnChange);

            // OnReset
            tabHeaderMarkup += EventElement.AttachEvent(tabHeader.Name, 'reset', tabHeader.OnReset, TabHeader.OnReset);

            // OnSave
            tabHeaderMarkup += EventElement.AttachEvent(tabHeader.Name, 'save', tabHeader.OnSave, TabHeader.OnSave);

            // OnSubmit
            tabHeaderMarkup += EventElement.AttachEvent(tabHeader.Name, 'submit', tabHeader.OnSubmit, TabHeader.OnSubmit);
        }
        else {
            // OnLeaveTab
            Events.On(document.body, 'leavetab.' + tabHeader.Name, '#' + tabHeader.Name, TabHeader.OnLeaveTab);

            // OnEnterTab
            Events.On(document.body, 'entertab.' + tabHeader.Name, '#' + tabHeader.Name, TabHeader.OnEnterTab);
        }

        // Div>
        tabHeaderMarkup += '>';

        // Anchor<, Class@, Id@, Anchor>
        tabHeaderMarkup += '<a class="gtc-mobile-nav-btn gtc-tabheader-nav-btn" id="' + tabHeader.Name + 'MobileMenuLink" data-translate="ChangeTabs">' + Common.TranslateKey('ChangeTabs') + '</a>';

        // Anchor<, Class@, Id@, Anchor>
        tabHeaderMarkup += '<a class="gtc-mobile-nav-close-btn gtc-tabheader-nav-close-btn" id="' + tabHeader.Name + 'MobileMenuClose"><i class="gtc-icon-styles fa fa-times"></i></a>';

        // configuremobilemenu event: Setup configuring of mobile display (triggered from Page.Configure)
        Events.On(document.body, 'configuremobilemenu.' + tabHeader.Name + 'MobileMenuLink', '#' + tabHeader.Name + 'MobileMenuLink',
            function (event) {
                Widgets.mobilemenu(this, { MenuType: 'SideBar', TargetName: tabHeader.Name + 'Menu', ParentName: tabHeader.Name, CloseButton: tabHeader.Name + 'MobileMenuClose' });
            }
        );

        // Check for tab alignments
        var classNames = 'gtc-tabbutton-container';
        if (Common.IsDefined(tabHeader.TabButtonStyle)) {
          classNames += ' gtc-tabbutton-container--' + tabHeader.TabButtonStyle.toLowerCase();
        }

        if (Common.IsDefined(tabHeader.TabButtonAlignment)) {
          classNames += ' gtc-tabbutton-container--align-' + tabHeader.TabButtonAlignment.toLowerCase();
        }

        // Ul<>
        tabHeaderMarkup += '<ul role="tablist" id="' + tabHeader.Name + 'Menu" class="' + classNames + '">';

        // Tab Buttons
        if (Common.IsDefined(tabHeader.TabButtons)) {
            var index = 0, length = tabHeader.TabButtons.length;
            for ( ; index < length; index++) {
                tabHeaderMarkup += TabButton.Render(index, tabHeader.TabButtons[index], TabHeader.Options);
            }
        }

        // Ul</>
        tabHeaderMarkup += '</ul>';

        // Div</>
        tabHeaderMarkup += '</div>';

        // Wire close to TabHeader
        Events.On(document.body, 'close.' + tabHeader.Name, '#' + tabHeader.Name, TabHeader.OnClose);

        // Return
        return tabHeaderMarkup;

    };

    TabHeader.Configure = function (tabHeader, configureStage) {

        // Initialize
        var ulTabHeaders = Common.Get(tabHeader.id + 'Menu');
        Common.Get('PageContent').style.position = 'relative';

        // Hide Tabs
        HideTabs(ulTabHeaders);

        // Configure Tab Swipping
        ConfigureTabSwipping(ulTabHeaders);

        // Configure Footer Buttons
        if (TabHeader.Options.Footer) {
            ConfigureFooterButtons(ulTabHeaders);
        }
        else {
            var tabFooter = Common.Query('[data-namespace="TabFooter"]');
            if (Common.IsDefined(tabFooter)) {
                tabFooter.style.display = 'none';
            }
        }

        // Show selected Tab
        ShowSelectedTab(ulTabHeaders);

        // Click
        BindBadgeTabClick(ulTabHeaders);
        
        // Configure Leave\Enter Handling
        if (!TabHeader.Options.OnChange) {
            ConfigureLeaveEnterHandling(tabHeader);
        }

    };

    TabHeader.OnLeaveTab = function (currentTabSelector, newTabSelector, tabHeaderElement) {

        var currentTab = Common.Query(currentTabSelector);
        var hasEvent = Common.GetAttr(currentTab, 'data-leave');
        if (Common.IsDefined(hasEvent)) {
            GTC.TriggerEvent(currentTab, 'leave',
                {
                    DivTabHeader: tabHeaderElement,
                    FromTab: currentTab.id,
                    ToTab: Common.Query(newTabSelector).id
                }
            );
        }
        else {
            var tabHeaderId = tabHeaderElement.id;
            GTC.TriggerEvent(document.body, 'pageinstructionscomplete.' + tabHeaderId + 'LeaveEnterHandling.' + tabHeaderId);
        }

    };

    TabHeader.OnEnterTab = function (currentTabSelector, newTabSelector, tabHeaderElement) {

        var newTab = Common.Query(newTabSelector);
        var hasEvent = Common.GetAttr(newTab, 'data-enter');
        if (Common.IsDefined(hasEvent)) {
            GTC.TriggerEvent(newTab, 'enter',
                {
                    DivTabHeader: tabHeaderElement,
                    FromTab: Common.Query(currentTabSelector).id,
                    ToTab: newTab.id
                }
            );
        }
        else {
            var tabHeaderId = tabHeaderElement.id;
            GTC.TriggerEvent(document.body, 'pageinstructionscomplete.' + tabHeaderId + 'LeaveEnterHandling.' + tabHeaderId);
        }

    };

    TabHeader.OnChange = function (event) {

        // Event Data from Event
        var tabHeader;
        var fromTab;
        var toTab;
        if (Common.IsDefined(event.EventData)) {
            tabHeader = event.EventData.DivTabHeader;
            fromTab = event.EventData.FromTab;
            toTab = event.EventData.ToTab;
        }
        else {
            tabHeader = event.target;
            fromTab = TabHeader.SelectedTab(tabHeader);
            toTab = fromTab;
        }

        // Check for disabled tab
        if (Common.GetAttr(Common.Query('.gtc-tabbutton-link[href="#' + toTab + '"]', tabHeader).parentNode, 'data-disabled') != 'true') {
            // Setup Tab Parameters
            var onChangeParameters = [
                {
                    Name: 'FromTab',
                    Value: fromTab,
                    UiParameters: null
                },
                {
                    Name: 'ToTab',
                    Value: toTab,
                    UiParameters: null
                }
            ];

            // Merge OnChange Parameters
            var onChangeEvent = JSON.parse(Common.GetAttr(tabHeader, 'data-change'));
            if (Common.IsDefined(onChangeEvent.UiParameters)) {
                onChangeParameters = onChangeParameters.concat(onChangeEvent.UiParameters);
            }

            // Add Form Parameters and clear Changed flag
            var formInContext = Common.Query('.gtc-form', Common.Get(fromTab));
            onChangeParameters = Form.AddFormParameters(onChangeParameters, formInContext);
            Form.ClearHasChanged(formInContext);

            // Execute View Behavior
            Common.ExecuteViewBehavior(onChangeEvent.ControllerPath + onChangeEvent.ActionName, onChangeParameters, Page.RunInstructions, this);
        }

    };

    TabHeader.OnReset = function (event) {

        // Event Data from Event
        var tabHeader = event.target;
        var resetTab = TabHeader.SelectedTab(tabHeader);

        // Tab Reset Parameters
        var onResetParameters = [
            {
                Name: 'ResetTab',
                Value: resetTab,
                UiParameters: null
            }
        ];

        // Get OnResetEvent object
        var onResetEvent = JSON.parse(Common.GetAttr(tabHeader, 'data-reset'));
        if (Common.IsDefined(onResetEvent.UiParameters)) {
            onResetParameters = onResetParameters.concat(onResetEvent.UiParameters);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onResetEvent.ControllerPath + onResetEvent.ActionName, onResetParameters, Page.RunInstructions, this);

    };

    TabHeader.OnSave = function (event) {

        // Event Data from Event
        var tabHeader = event.target;
        var saveTab = TabHeader.SelectedTab(tabHeader);

        // Tab Save Parameters
        var onSaveParameters = [
            {
                Name: 'SaveTab',
                Value: saveTab,
                UiParameters: null
            }
        ];

        // Get OnSaveEvent object
        var onSaveEvent = JSON.parse(Common.GetAttr(tabHeader, 'data-save'));
        if (Common.IsDefined(onSaveEvent.UiParameters)) {
            onSaveParameters = onSaveParameters.concat(onSaveEvent.UiParameters);
        }

        // Add Form Parameters and clear Changed flag
        var formInContext = Common.Query('.gtc-form', Common.Get(saveTab));
        onSaveParameters = Form.AddFormParameters(onSaveParameters, formInContext);
        Form.ClearHasChanged(formInContext);

        // Execute View Behavior
        Common.ExecuteViewBehavior(onSaveEvent.ControllerPath + onSaveEvent.ActionName, onSaveParameters, Page.RunInstructions, this);

    };

    TabHeader.OnSubmit = function (event) {

        // Event Data from Event
        var tabHeader = event.target;
        var submitTab = TabHeader.SelectedTab(tabHeader);

        // Tab Submit Parameters
        var onSubmitParameters = [
            {
                Name: 'SubmitTab',
                Value: submitTab,
                UiParameters: null
            }
        ];

        // Get OnSubmitEvent object
        var onSubmitEvent = JSON.parse(Common.GetAttr(tabHeader, 'data-submit'));
        if (Common.IsDefined(onSubmitEvent.UiParameters)) {
            onSubmitParameters = onSubmitParameters.concat(onSubmitEvent.UiParameters);
        }

        // Add Form Parameters and clear Changed flag
        var formInContext = Common.Query('.gtc-form', Common.Get(submitTab));
        onSubmitParameters = Form.AddFormParameters(onSubmitParameters, formInContext);
        Form.ClearHasChanged(formInContext);

        // Execute View Behavior
        Common.ExecuteViewBehavior(onSubmitEvent.ControllerPath + onSubmitEvent.ActionName, onSubmitParameters, Page.RunInstructions, this);

    };

    TabHeader.OnClose = function (event) {

        // Event Data from Event
        var tabHeader = event.EventData.DivTabHeader;
        var selectedTab = event.EventData.SelectedTab;

        // Form to Check
        var formToCheck = Common.Query('.gtc-form', Common.Get(selectedTab));
        if (Common.IsDefined(formToCheck)) {
            if (formToCheck.length > 0) {
                // Has Form changed?
                var confirmationMessage = JSON.parse(Common.GetAttr(Common.Get('TabFooterCloseButton'), 'data-confirmation'));
                if (Form.HasChanged(formToCheck) && Common.IsDefined(confirmationMessage)) {
                    confirmationMessage.Type = parseInt(confirmationMessage.Type, 10);
                    Modals.ShowMessageDialog(confirmationMessage,
                        function (modalResult) {
                            if (modalResult == Modals.ModalResult.Yes) {
                                Common.CloseView();
                            }
                        }
                    );
                }
                else {
                    Common.CloseView();
                }
            }
            else {
                Common.CloseView();
            }
        }
        else {
            Common.CloseView();
        }

    };

    TabHeader.ShowPinwheel = function (tabHeader) {
        // Show Pinwheel handled internally to TabHeader during tab transition
    };

    TabHeader.HidePinwheel = function (tabHeader) {

        // TabHeader's with OnChange should transition and hide Pinwheel here
        if (TabHeader.Options.OnChange && Common.IsDefined(Common.GetAttr(tabHeader, 'data-clickedtab'))) {
            setTimeout(
                function () {
                    AnimateTabTransition(tabHeader);
                },
                10
            );
        }

        // Note: Tab's with OnLeave/OnEnter Pinwheel handled internally during tab transition
    };

    TabHeader.UpdateStatus = function (tabHeader, uiParameters) {

        var clickedTab = Common.GetAttr(tabHeader, 'data-clickedtab');
        if (Common.IsDefined(uiParameters)) {
            var uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];
                var liTabHeader = Common.Query('.gtc-tabbutton-link[href="#' + uiParameter.Name + '"]', tabHeader).parentNode;
                var oldStatus = Common.GetAttr(liTabHeader, 'data-status');
                if (oldStatus != uiParameter.Value) {
                    var tabSelected = (clickedTab == Common.Query('.gtc-tabbutton-link', liTabHeader).id);
                    Common.SetAttr(liTabHeader, 'data-status', uiParameter.Value);
                }
            }
        }

    };

    TabHeader.IsCompleted = function (tabHeader) {

        var tabButtons = Common.QueryAll('.gtc-tabbutton', tabHeader);
        var index = 0, length = tabButtons.length;
        for ( ; index < length; index++) {
            if (Common.GetAttr(tabButtons[index], 'data-status') != 'Complete') {
                return false;
            }
        }
        return true;

    };

    TabHeader.SelectedTab = function (tabHeader) {

        var selectedTabButton = Common.Query('.gtc-tabbutton[data-selected="true"]', tabHeader);
        return Common.Query(Common.GetAttr(Common.Query('.gtc-tabbutton-link', selectedTabButton), 'href')).id;

    };

    // Private Methods
    function SetOptions (tabHeader) {

        if (Common.IsDefined(tabHeader.TabTransition)) {
            TabHeader.Options.TabTransition = tabHeader.TabTransition;
        }
        if (Common.IsDefined(tabHeader.TabType)) {
            TabHeader.Options.TabType = tabHeader.TabType;
        }
        if (tabHeader.IsFooterEnabled == 'Yes') {
            TabHeader.Options.Footer = true;
        }
        if (Common.IsDefined(tabHeader.OnChange)) {
            TabHeader.Options.OnChange = true;
        }

    };

    function HideTabs (ulTabHeaders) {

        var tabLinks = Common.QueryAll('.gtc-tabbutton-link', ulTabHeaders);
        var tab, tabId, tabStyle, index = 0, length = tabLinks.length;
        for ( ; index < length; index++) {
            tabId = Common.GetAttr(tabLinks[index], 'href');
            tab = Common.Query(tabId);
            if (Common.IsDefined(tab)) {
                tabStyle = tab.style;
                tabStyle.position = 'relative';
                tabStyle.display = 'none';
                Common.SetAttr(tab, 'aria-expanded', 'false');
            }
        }

    };

    function ConfigureTabSwipping (ulTabHeaders) {

        Touch.InitializeTouchEvents();
        var tabButtons = Common.QueryAll('.gtc-tabbutton', ulTabHeaders);
        var tabButton, tab, tabButtonLinks = Common.QueryAll('.gtc-tabbutton-link', ulTabHeaders), index = 0, length = tabButtonLinks.length;
        for ( ; index < length; index++) {
            tabButton = tabButtonLinks[index];
            tab = Common.Query(Common.GetAttr(tabButton, 'href'));

            // Previous
            Events.On(tab, 'swiperight',
                function (event) {
                    event.preventDefault();
                    var currentTabHeader = Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders);
                    var previousTabHeaderIndex = Common.GetIndex(currentTabHeader) - 1;
                    var tabIndex = previousTabHeaderIndex;
                    for ( ; Common.GetAttr(tabButtons[previousTabHeaderIndex], 'data-disabled') == 'true' && tabIndex >= 0; tabIndex--) {
                        previousTabHeaderIndex = tabIndex;
                    }
                    if (previousTabHeaderIndex >= 0 && Common.GetAttr(tabButtons[previousTabHeaderIndex], 'data-disabled') != 'true') {
                        Events.Trigger(Common.Query('.gtc-tabbutton-link', tabButtons[previousTabHeaderIndex]), 'click');
                    }
                }
            );

            // Next
            Events.On(tab, 'swipeleft',
                function (event) {
                    event.preventDefault();
                    var currentTabHeader = Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders);
                    var nextTabHeaderIndex = Common.GetIndex(currentTabHeader) + 1;
                    var tabIndex = nextTabHeaderIndex, length = tabButtons.length;
                    for ( ; Common.GetAttr(tabButtons[nextTabHeaderIndex], 'data-disabled') == 'true' && tabIndex < length; tabIndex++) {
                        nextTabHeaderIndex = tabIndex;
                    }
                    if (nextTabHeaderIndex < length && Common.GetAttr(tabButtons[nextTabHeaderIndex], 'data-disabled') != 'true') {
                        // Next
                        Events.Trigger(Common.Query('.gtc-tabbutton-link', tabButtons[nextTabHeaderIndex]), 'click');
                    }
                }
            );
        }

    };

    function ConfigureFooterButtons (ulTabHeaders) {

        // Initialize
        var tabHeader = ulTabHeaders.parentNode;

        // Close
        var closeButton = Common.Get('TabFooterCloseButton');
        if (Common.IsDefined(closeButton)) {
            Events.On(closeButton, 'click',
                function (event) {
                    event.preventDefault();
                    if (Common.QueryAll('.velocity-animating').length == 0) {
                        // Trigger close event
                        var tabId = Common.GetAttr(Common.Query('.gtc-tabbutton-link', Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders)), 'href');
                        GTC.TriggerEvent(tabHeader, 'close',
                            {
                                DivTabHeader: tabHeader,
                                SelectedTab: Common.Query(tabId).id
                            }
                        );
                    }
                }
            );
        }

        // Save
        var saveButton = Common.Get('TabFooterSaveButton');
        if (Common.IsDefined(saveButton)) {
            Events.On(saveButton, 'click',
                function (event) {
                    event.preventDefault();
                    if (Common.QueryAll('.velocity-animating').length == 0) {
                        // Trigger save event
                        var tabId = Common.GetAttr(Common.Query('.gtc-tabbutton-link', Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders)), 'href');
                        var tab = Common.Query(tabId);
                        if (TabHeader.Options.OnChange) {
                            GTC.TriggerEvent(tabHeader, 'save',
                                {
                                    DivTabHeader: tabHeader,
                                    SelectedTab: tab.id
                                }
                            );
                        }
                        else {
                            GTC.TriggerEvent(tab, 'save',
                                {
                                    DivTabHeader: tabHeader,
                                    SelectedTab: tab.id
                                }
                            );
                        }
                    }
                }
            );
        }

        // Reset
        var resetButton = Common.Get('TabFooterResetButton');
        if (Common.IsDefined(resetButton)) {
            Events.On(resetButton, 'click',
                function (event) {
                    event.preventDefault();
                    if (Common.QueryAll('.velocity-animating').length == 0) {
                        // Trigger reset event
                        var tabId = Common.GetAttr(Common.Query('.gtc-tabbutton-link', Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders)), 'href');
                        var tab = Common.Query(tabId);
                        if (TabHeader.Options.OnChange) {
                            GTC.TriggerEvent(tabHeader, 'reset',
                                {
                                    DivTabHeader: tabHeader,
                                    SelectedTab: tab.id
                                }
                            );
                        }
                        else {
                            GTC.TriggerEvent(tab, 'reset',
                                {
                                    DivTabHeader: tabHeader,
                                    SelectedTab: tab.id
                                }
                            );
                        }
                    }
                }
            );
        }

        // Previous
        Events.On(Common.Get('TabFooterPreviousButton'), 'click',
            function (event) {
                event.preventDefault();
                if (Common.QueryAll('.velocity-animating').length == 0) {
                    var tabButtons = Common.QueryAll('.gtc-tabbutton', ulTabHeaders);
                    var currentTabHeader = Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders);
                    var previousTabHeaderIndex = Common.GetIndex(currentTabHeader) - 1;
                    var tabIndex = previousTabHeaderIndex;
                    for ( ; Common.GetAttr(tabButtons[previousTabHeaderIndex], 'data-disabled') == 'true' && tabIndex >= 0; tabIndex--) {
                        previousTabHeaderIndex = tabIndex;
                    }
                    if (previousTabHeaderIndex >= 0 && Common.GetAttr(tabButtons[previousTabHeaderIndex], 'data-disabled') != 'true') {
                        Events.Trigger(Common.Query('.gtc-tabbutton-link', tabButtons[previousTabHeaderIndex]), 'click');
                    }
                }
            }
        );

        // Next
        Events.On(Common.Get('TabFooterNextButton'), 'click',
            function (event) {
                // Handle Next and Submit
                event.preventDefault();
                if (Common.QueryAll('.velocity-animating').length == 0) {
                    var tabButtons = Common.QueryAll('.gtc-tabbutton', ulTabHeaders);
                    var currentTabHeader = Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders);
                    var nextTabHeaderIndex = Common.GetIndex(currentTabHeader) + 1;
                    var tabIndex = nextTabHeaderIndex, length = tabButtons.length;
                    for ( ; Common.GetAttr(tabButtons[nextTabHeaderIndex], 'data-disabled') == 'true' && tabIndex < length; tabIndex++) {
                        nextTabHeaderIndex = tabIndex;
                    }
                    if (nextTabHeaderIndex < length && Common.GetAttr(tabButtons[nextTabHeaderIndex], 'data-disabled') != 'true') {
                        // Next
                        Events.Trigger(Common.Query('.gtc-tabbutton-link', tabButtons[nextTabHeaderIndex]), 'click');
                    }
                    else if (nextTabHeaderIndex > length || Common.GetAttr(tabButtons[nextTabHeaderIndex], 'data-disabled') == 'true') {
                        return;
                    }
                    else {
                        // Trigger submit event
                        var tabId = Common.GetAttr(Common.Query('.gtc-tabbutton-link', currentTabHeader), 'href');
                        var tab = Common.Query(tabId);
                        if (TabHeader.Options.OnChange) {
                            GTC.TriggerEvent(tabHeader, 'submit',
                                {
                                    DivTabHeader: tabHeader,
                                    SelectedTab: tab.id
                                }
                            );
                        }
                        else {
                            GTC.TriggerEvent(tab, 'submit',
                                {
                                    DivTabHeader: tabHeader,
                                    SelectedTab: tab.id
                                }
                            );
                        }
                    }
                }
            }
        );

    };

    function ShowPinwheel (tabButton) {

        // Show Pinwheel
        SpinKit.Show(tabButton, 'FadingCircle');

    };

    function HidePinwheel (tabHeader, tabButton) {

        // Hide Pinwheel
        SpinKit.Hide(tabButton);

    };

    function ShowSelectedTab (ulTabHeaders) {

        // Selected Tab
        var currentTabHeader = Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders);
        if (Common.IsNotDefined(currentTabHeader)) {
            return;
        }

        // Show Tab
        var currentTabLink = Common.Query('.gtc-tabbutton-link', currentTabHeader);
        var selectedTab = Common.Query(Common.GetAttr(currentTabLink, 'href'));
        if (Common.IsNotDefined(selectedTab)) {
            return;
        }
        var selectedTabStyle = selectedTab.style;
        selectedTabStyle.display = 'block';
        selectedTabStyle.position = 'relative';
        Common.SetAttr(selectedTab, 'aria-expanded', 'true');

        // Set Tab header status
        var selectedTabStatus = Common.GetAttr(currentTabHeader, 'data-status');

        // Update Footer
        if (TabHeader.Options.Footer) {
            var tabButtons = Common.QueryAll('.gtc-tabbutton', ulTabHeaders);
            var currentTabHeaderIndex = Common.GetIndex(currentTabHeader);
            var beginTabHeaderIndex = 0;
            var lastTabHeaderIndex = tabButtons.length - 1;
            if (currentTabHeaderIndex == beginTabHeaderIndex) {
                Common.Get('TabFooterPreviousButton').style.display = 'none';
            }
            else {
                if (currentTabHeaderIndex == lastTabHeaderIndex) {
                    var tabFooterNextButton = Common.Get('TabFooterNextButton');
                    Common.SetAttr(tabFooterNextButton, 'data-translate', 'Submit');
                    tabFooterNextButton.textContent = Common.TranslateKey('Submit');
                }
            }
        }

    };

    function BindBadgeTabClick (ulTabHeaders) {

        // Bind Click to Tab
        var anchorTabHeader = Common.QueryAll('.gtc-tabbutton-link', ulTabHeaders);
        Events.On(anchorTabHeader, 'click',
            function (event) {
                // Prevent Default
                event.preventDefault();

                // Get old tab prior to switch
                var selectedTabButton = Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders);
                ShowPinwheel(selectedTabButton);
                var removePinwheel = true;

                // Switch if not the same Tab
                if (selectedTabButton.firstChild.id != this.id) {
                    if (Common.QueryAll('.velocity-animating').length == 0) {
                        removePinwheel = false;

                        // Scroll to Top
                        Velocity(Common.QueryAll('html'), 'scroll', 500);

                        // Find current and newly selected tab
                        var currentTab = Common.GetAttr(Common.Query('.gtc-tabbutton-link', selectedTabButton), 'href');
                        var newTab = Common.GetAttr(this, 'href');
                        var tabHeader = ulTabHeaders.parentNode;
                        Common.SetAttr(tabHeader, 'data-clickedtab', this.id);

                        // Trigger change event \ Animate
                        if (TabHeader.Options.OnChange) {
                            GTC.TriggerEvent(tabHeader, 'change',
                                {
                                    DivTabHeader: tabHeader,
                                    FromTab: Common.Query(currentTab).id,
                                    ToTab: Common.Query(newTab).id
                                }
                            );
                        }
                        else if (!TabHeader.Options.OnChange) {
                            TabHeader.OnLeaveTab(currentTab, newTab, tabHeader);
                        }
                        else {
                            AnimateTabTransition(tabHeader);
                        }
                    }
                }
                if (removePinwheel) {
                    HidePinwheel(ulTabHeaders.parentNode, selectedTabButton);
                }
            }
        );

    };
    
    function ConfigureLeaveEnterHandling (tabHeaderElement) {

        // pageinstructionscomplete event: Setup triggering next tabs OnEnter after page instructions complete of current tabs OnLeave
        var tabHeaderId = tabHeaderElement.id;
        Cache.Set(tabHeaderElement, 'enterSemaphore', false);
        Events.On(document.body, 'pageinstructionscomplete.' + tabHeaderId + 'LeaveEnterHandling.' + tabHeaderId,
            function (event) {
                // Different Tab?
                var anchorClicked = Common.Get(Common.GetAttr(tabHeaderElement, 'data-clickedtab'));
                if (anchorClicked) {
                    var enterSemaphore = Cache.Get(tabHeaderElement, 'enterSemaphore');
                    if (!enterSemaphore && Common.IsDefined(Common.GetAttr(tabHeaderElement, 'data-clickedtab'))) {
                        Cache.Set(tabHeaderElement, 'enterSemaphore', true);

                        // Find current and newly selected tab
                        var currentTab = Common.GetAttr(Common.Query('.gtc-tabbutton-link', tabHeaderElement), 'href');
                        var anchorClickedParent = anchorClicked.parentNode;
                        var newTab = Common.GetAttr(anchorClicked, 'href');
                        TabHeader.OnEnterTab(currentTab, newTab, tabHeaderElement);
                    }
                    else {
                        Cache.Set(tabHeaderElement, 'enterSemaphore', false);
                        AnimateTabTransition(tabHeaderElement);
                    }
                }
            }
        );

    };

    function AnimateTabTransition (divTabHeader) {

        // Initialize
        var ulTabHeaders = Common.Query('.gtc-tabbutton-container', divTabHeader);
        var currentTabHeader = Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders);

        // Sanity Check
        var lastViewBehaviorReturnedValidations = Common.GetStorage("LastViewBehaviorReturnedValidations");
        if (lastViewBehaviorReturnedValidations) {
            HidePinwheel(divTabHeader, currentTabHeader);
            return;
        }

        // Get deferred object for animation
        var animationPromise = Common.Promise();

        // Deselect current tab header
        Common.RemoveClass(currentTabHeader, 'gtc-tabbutton-selected');
        var currentBadgeStatus = Common.GetAttr(currentTabHeader, 'data-status');
        Common.SetAttr(currentTabHeader, 'data-selected', 'false');
        Common.SetAttr(currentTabHeader, 'aria-selected', 'false');

        // Select new tab header
        var currentTabId = Common.GetAttr(Common.Query('.gtc-tabbutton-link', currentTabHeader), 'href');
        var currentTab = Common.Query(currentTabId);
        Common.SetAttr(currentTab, 'aria-expanded', 'false');
        var anchorClicked = Common.Get(Common.GetAttr(divTabHeader, 'data-clickedtab'));
        var anchorClickedParent = anchorClicked.parentNode;
        var newTabId = Common.GetAttr(anchorClicked, 'href');
        var newTab = Common.Query(newTabId);
        Common.SetAttr(newTab, 'aria-expanded', 'true');
        Common.RemoveAttr(divTabHeader, 'data-clickedtab');
        Common.AddClass(anchorClickedParent, 'gtc-tabbutton-selected');
        var newBadgeStatus = Common.GetAttr(anchorClickedParent, 'data-status');
        Common.SetAttr(anchorClickedParent, 'data-selected', 'true');
        Common.SetAttr(anchorClickedParent, 'aria-selected', 'true');

        // Update mobile menu text
        if (Common.CheckMedia('Mobile')) {
            var newMobileMenuValue = Common.Query('.gtc-tabbutton-title', anchorClicked).textContent;
            Common.Get(divTabHeader.id + 'MobileMenuLink').textContent = newMobileMenuValue;
        }

        // Check for modal tabs, resize and recenter if needed
        var isInIframe = Common.IsModal();
        if (isInIframe) {
            var pageContent = Common.Get('PageContent');
            var currentTab = Common.Query(currentTabId);
            var newTab = Common.Query(newTabId);

            // New tab is most likely hidden so add styling to get real height
            var positionStyle = Common.GetStyle(newTab, 'position');
            if (positionStyle != 'absolute') {
                newTab.style.position = 'absolute';
            }
            newTab.style.zIndex = '-150';
            newTab.style.display = 'block';

            // Get tab heights
            var currentHeight = Common.Height(pageContent, true);
            var oldTabHeight = Common.Height(currentTab, true);
            var newTabHeight = Common.Height(newTab, true);

            // Reset new tabs original styles
            newTab.style.display = 'none';
            newTab.style.zIndex = '';
            if (positionStyle != 'absolute') {
                newTab.style.position = positionStyle;
            }

            // Handle height calculations
            var heightChange = false, heightDifference;
            if (oldTabHeight > newTabHeight) {
                heightDifference = oldTabHeight - newTabHeight;
                Common.Get('PageContent').style.height = (currentHeight - heightDifference) + 'px';
                heightChange = true;
            }
            else if (newTabHeight > oldTabHeight) {
                heightDifference = newTabHeight - oldTabHeight;
                Common.Get('PageContent').style.height = (currentHeight + heightDifference) + 'px';
                heightChange = true;
            }

            // Resize modal if height has changed
            if (heightChange) {
                Common.ResizeView(true);
            }
        }

        // Tab Transaction
        switch (TabHeader.Options.TabTransition) {
            case 'Default':
                ShowTab(currentTab, newTab, animationPromise);
                break;
            case 'Fade':
                FadeTab(currentTab, newTab, animationPromise);
                break;
            case 'Slide':
                var currentTabIndex = Common.GetIndex(currentTabHeader);
                var newTabIndex = Common.GetIndex(anchorClickedParent);
                SlideTab(currentTab, newTab, currentTabIndex, newTabIndex, animationPromise);
                break;
        }

        // Update Footer
        if (TabHeader.Options.Footer) {
            UpdateFooterButtons(ulTabHeaders);
        }

        // Set Page Height (for the new Tab)
        animationPromise.promise.then(
            function () {
                Page.SetPageHeight();
                HidePinwheel(divTabHeader, currentTabHeader);
            }
        );

    };

    function ShowTab (currentTab, newTab, animationPromise) {

        currentTab.style.display = 'none';
        var newTabStyle = newTab.style;
        newTabStyle.display = '';
        newTabStyle.position = 'relative';
        animationPromise.resolve();

    };

    function FadeTab (currentTab, newTab, animationPromise) {

        Velocity(currentTab, 'fadeOut', 700,
            function () {
                Velocity(newTab, 'fadeIn', 700,
                    function () {
                        newTab.style.position = 'relative';
                        animationPromise.resolve();
                    }
                );
            }
        );

    };

    function SlideTab (currentTab, newTab, currentTabIndex, newTabIndex, animationPromise) {

        // Same tab?
        if (newTabIndex == currentTabIndex) {
            return;
        }

        // Slide
        var currentTabParent = Common.Closest(':not(.gtc-grid-container):not(.gtc-tab)', currentTab);
        var contentWidth = Common.Width(currentTabParent);
        currentTabParent.style.overflow = 'hidden';
        var currentTabStyle = currentTab.style;
        currentTabStyle.position = 'absolute';
        var newTabStyle = newTab.style;
        newTabStyle.position = 'absolute';
        if (currentTabIndex < newTabIndex) {
            // Move to new tab right after current tab
            newTabStyle.left = contentWidth + 'px';
            newTabStyle.display = 'block';

            // Animate
            if ((currentTabIndex + 1) != newTabIndex) {
                // Slide and bounce
                Velocity(currentTab, { 'left': '-=' + contentWidth + 'px' }, 'fast',
                    function () {
                        currentTabStyle.display = 'none';
                    }
                );
                Velocity(newTab, { 'left': '-=' + contentWidth + 'px' }, 'fast',
                    function () {
                        Velocity(newTab, 'callout.shake', 'slow',
                            function () {
                                newTabStyle.position = 'relative';
                                newTabStyle.transform = '';
                            }
                        );
                        animationPromise.resolve();
                    }
                );
            }
            else {
                // Slide
                Velocity(currentTab, { 'left': '-=' + contentWidth + 'px' }, 'slow',
                    function () {
                        currentTabStyle.display = 'none';
                    }
                );
                Velocity(newTab, { 'left': '-=' + contentWidth + 'px' }, 'slow',
                    function () {
                        newTabStyle.position = 'relative';
                        animationPromise.resolve();
                    }
                );
            }
        }
        else {
            newTabStyle.left = '-' + contentWidth + 'px';
            newTabStyle.display = 'block';
            if ((newTabIndex + 1) != currentTabIndex) {
                // Slide and bounce
                Velocity(currentTab, { 'left': '+=' + contentWidth + 'px' }, 'fast',
                    function () {
                        currentTabStyle.display = 'none';
                    }
                );
                Velocity(newTab, { 'left': '+=' + contentWidth + 'px' }, 'fast',
                    function () {
                        Velocity(newTab, 'callout.shake', 'slow',
                            function () {
                                newTabStyle.position = 'relative';
                                newTabStyle.transform = '';
                            }
                        );
                        animationPromise.resolve();
                    }
                );
            }
            else {
                // Slide
                Velocity(currentTab, { 'left': '+=' + contentWidth + 'px' }, 'slow',
                    function () {
                        currentTabStyle.display = 'none';
                    }
                );
                Velocity(newTab, { 'left': '+=' + contentWidth + 'px' }, 'slow',
                    function () {
                        newTabStyle.position = 'relative';
                        animationPromise.resolve();
                    }
                );
            }
        }

    };

    function UpdateFooterButtons (ulTabHeaders) {

        var currentTabHeader = Common.Query('.gtc-tabbutton[data-selected="true"]', ulTabHeaders);
        var tabButtons = Common.QueryAll('.gtc-tabbutton', ulTabHeaders);
        var currentTabHeaderIndex = Common.GetIndex(currentTabHeader);
        var beginTabHeaderIndex = 0;
        var lastTabHeaderIndex = tabButtons.length - 1;

        // Show/Hide or Change Buttons
        var previousButton = Common.Get('TabFooterPreviousButton');
        if (currentTabHeaderIndex == beginTabHeaderIndex) {
            // Hide Previous if visible
            if (Common.IsVisible(previousButton)) {
                Velocity(previousButton, 'fadeOut', 700);
            }
        }
        else {
            // Show Previous if hidden
            if (Common.IsHidden(previousButton)) {
                Velocity(previousButton, 'fadeIn', { duration: 700, display: '' });
            }
        }

        // Next/Submit Button
        var nextButton = Common.Get('TabFooterNextButton');
        if (currentTabHeaderIndex < lastTabHeaderIndex) {
            // Change Submit to Next
            if (nextButton.dataset.buttonstate == 'Submit') {
                Velocity(nextButton, { 'opacity': 0 }, 700,
                    function () {
                        Common.SetAttr(nextButton, 'data-buttonstate', 'Next');
                        var nextTitle = Common.GetAttr(nextButton, 'data-nexttitle');
                        Common.SetAttr(nextButton, 'data-translate', nextTitle);
                        nextButton.textContent = Common.TranslateKey(nextTitle);
                        Velocity(nextButton, 'reverse', Common.RemoveOpacity);
                    }
                );
            }
        }
        else {
            // Change Next to Submit
            if (nextButton.dataset.buttonstate == 'Next') {
                Velocity(nextButton, { 'opacity': 0 }, 700,
                    function () {
                        Common.SetAttr(nextButton, 'data-buttonstate', 'Submit');
                        var submitTitle = Common.GetAttr(nextButton, 'data-submittitle');
                        Common.SetAttr(nextButton, 'data-translate', submitTitle);
                        nextButton.textContent = Common.TranslateKey(submitTitle);
                        Velocity(nextButton, 'reverse', Common.RemoveOpacity);
                    }
                );
            }
        }

    };

} (window.TabHeader = window.TabHeader || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class EventButton
 * @classdesc Supports the EventButton View Element<br>
 *            Based On: ViewElement > Link > Button
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (EventButton, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function EventButton.Render
     * @param {object} button - The EventButton View Element in JSON format
     * @description Generates the HTML markup for the EventButton View Element 
     * @returns {string} HTML Markup of the EventButton View Element
     */
    EventButton.Render = function (eventButton) {

        // 508 Compliance
        if (Common.IsNotDefined(eventButton.Title)) {
            eventButton.Title = eventButton.Name;
            eventButton.ScreenReaderOnly = true;
        }

        // Button<, TabIndex@, Class@, Id@, Data-ControllerPath/ActionName@, Wire OnClick!
        var className = Link.RenderClassing(eventButton, 'btn');
        var eventButtonMarkup = '<button class="' + className + '" data-namespace="EventButton"' + ViewElement.RenderAttributes(eventButton) + EventElement.AttachEvent(eventButton.Name, 'click', eventButton.OnClick, EventButton.OnClick);

        // Group Name
        if (Common.IsDefined(eventButton.GroupName)) {
            eventButtonMarkup += ' data-groupname="' + eventButton.GroupName + '"';
        }

        // Translations, Tooltip, 508 Compliance, Confirmation
        eventButtonMarkup += Button.RenderAttributes(eventButton);

        // Button>
        eventButtonMarkup += ' type="button">';

        // Icon
        if (Common.IsDefined(eventButton.Icon)) {
            eventButtonMarkup += Icon.Render(eventButton.Icon, false);
        }

        // Attach Key
        if (Common.IsDefined(eventButton.AttachedKey)) {
            GTC.AttachKey(eventButton.Name, eventButton.AttachedKey);
        }

        // Link Text
        eventButtonMarkup += Link.RenderTitle(eventButton, 'button');

        // Button</>
        eventButtonMarkup += '</button>';
        return eventButtonMarkup;

    };

    /**
     * @function EventButton.OnClick
     * @param {event} event - A DOM click Event
     * @description This method is called when the EventButton is clicked and subsequently calls Button.CompleteConfirmation
     */
    EventButton.OnClick = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();
        var onClickParameters = [
            {
                Name: 'OverriddenValidations',
                Value: null,
                UiParameters: Validation.SerializeArray(false)
            }
        ];

        // Call OnClick
        Button.CompleteConfirmation(this, onClickParameters);

    };

    /**
     * @function EventButton.UpdateTitle
     * @param {object} eventButton - The EventButton DOM element
     * @param {string} newTitle - The new Title of the Button
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Title of the EventButton
     */
    EventButton.UpdateTitle = function (eventButton, newTitle, promises, context) {

        Link.UpdateTitle(eventButton, newTitle, promises, context);

    };

    /**
     * @function EventButton.ShowPinwheel
     * @param {object} eventButton - The EventButton DOM element
     * @description Shows Pinwheel on the View Element
     */
    EventButton.ShowPinwheel = function (eventButton) {

        SpinKit.Show(eventButton, 'FadingCircle');

    };

    /**
     * @function EventButton.HidePinwheel
     * @param {object} eventButton - The EventButton DOM element
     * @description Hides Pinwheel on the View Element
     */
    EventButton.HidePinwheel = function (eventButton) {

        SpinKit.Hide(eventButton);

    };

} (window.EventButton = window.EventButton || {}, window, document, Common, Cache, Events, Velocity));
// Tab Button
// Based On: TabButton -> ViewElement
(function (TabButton, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    TabButton.Render = function (tabButtonIndex, tabButton, tabHeaderOptions) {

        // Convert Yes/No to true/false
        var selectedBoolean = (tabButton.Selected == 'Yes');

        // Li<>
        var tabButtonMarkup = '<li role="tab" data-namespace="TabButton"';

        // Class@
        tabButtonMarkup += ' class="gtc-tabbutton';
        if (selectedBoolean) {
            tabButtonMarkup += ' gtc-tabbutton-selected"';
        }
        tabButtonMarkup += '"';

        // Data-Status@
        if (Common.IsDefined(tabButton.Status)) {
            tabButtonMarkup += ' data-status="' + tabButton.Status + '"';
        }

        // Data-Disabled@
        if (tabButton.IsLocked == 'Yes') {
            tabButtonMarkup += ' data-disabled="true"';
        }

        // Style@ - Display;
        if (tabButton.IsDisplayed == 'No') {
            tabButtonMarkup += ' style="display: none;"';
        }

        // Data-Selected@
        tabButtonMarkup += ' aria-selected="' + selectedBoolean.toString() + '" data-selected="' + selectedBoolean.toString() + '">';

        // Anchor<
        tabButtonMarkup += '<a data-overflowtitle="' + tabButton.Title + '" ' + ViewElement.RenderAttributes(tabButton) + ' class="gtc-tabbutton-link"';

        // Href@, Title, Anchor</>
        tabButtonMarkup += ' href="#' + tabButton.TabName + '">';

        // Translations
        if (Common.IsDefined(tabButton.Title)) {
            tabButtonMarkup += '<span class="gtc-tabbutton-title" data-translate="' + tabButton.Title + '">' + Common.TranslateKey(tabButton.Title) + '</span>';
        }

        // Badges
        if (tabHeaderOptions.TabType == 'Badge') {
            tabButtonMarkup += '<span class="gtc-tabbutton-badge"';
            tabButtonMarkup += ' id="' + tabButton.Name + 'Badge">' + (tabButtonIndex + 1).toString() + '</span>';
        }
        tabButtonMarkup += '</a>';

        // Configure TabButton
        Events.On(document.body, 'configuretabbutton.' + tabButton.Name, '#' + tabButton.Name,
            function () {
                var tabButtonElement = this;
                Events.On(tabButtonElement, 'mouseover',
                    function () {
                        Events.Off(tabButtonElement, 'mouseover');
                        var titleSpan = Common.Query('.gtc-tabbutton-title', this);
                        if (Common.IsTextOverflowing(titleSpan)) {
                            var overflowText = Common.TranslateKey(Common.GetAttr(titleSpan, 'data-translate'));
                            Widgets.tooltip(tabButtonElement, {
                                tooltipClass: 'gtc-label-tooltip-style',
                                items: '[data-overflowtitle]',
                                content: function () {
                                    return overflowText;
                                },
                                position: {
                                    my: 'center bottom-20',
                                    at: 'center top',
                                    using: function (position, positionData) {
                                        var thisStyle = this.style;
                                        thisStyle.left = position.left + 'px';
                                        thisStyle.top = position.top + 'px';
                                        var horizontal = 'center';
                                        if (position.left == 0) {
                                            horizontal = 'left';
                                        }
                                        else if (position.left + Common.Width(this) == Common.Width(window)) {
                                            horizontal = 'right';
                                        }
                                        var newDiv = document.createElement('div');
                                        Common.AddClass(newDiv, 'gtc-tooltip-arrow');
                                        Common.AddClass(newDiv, positionData.vertical);
                                        Common.AddClass(newDiv, horizontal);
                                        this.appendChild(newDiv);
                                    }
                                }
                            });
                            Widgets.tooltip(tabButtonElement, 'open');
                        }
                        else {
                            Common.RemoveAttr(tabButtonElement, 'data-overflowtitle');
                        }
                    }
                );
            }
        );

        // Li</>
        tabButtonMarkup += '</li>';
        return tabButtonMarkup;

    };

    TabButton.DisableControl = function (element) {

        var parentLi = element.parentNode;
        Common.SetAttr(parentLi, 'data-disabled', 'true');

    };

    TabButton.EnableControl = function (element) {

        var parentLi = element.parentNode;
        Common.RemoveAttr(parentLi, 'data-disabled');

    };

} (window.TabButton = window.TabButton || {}, window, document, Common, Cache, Events, Velocity));
// Tab Group
// Based On: TabGroup -> ViewElement
(function (TabGroup, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    TabGroup.Render = function (tabGroup) {

        // Initialize
        var tabGroupMarkup = '';

        // Render Tabs
        if (Common.IsDefined(tabGroup.Tabs)) {
            var index = 0, length = tabGroup.Tabs.length;
            for ( ; index < length; index++) {
                tabGroupMarkup += Tab.Render(tabGroup.Tabs[index]);
            }
        }

        // Return
        return tabGroupMarkup;

    };

} (window.TabGroup = window.TabGroup || {}, window, document, Common, Cache, Events, Velocity));
// Tab
// Based On: Tab -> ContainerElement -> ViewElement
(function (Tab, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Tab.Render = function (tab) {

        // Div<, TabIndex@, Class@, Id@, Div>
        var tabMarkup = '<div role="tabpanel" data-namespace="Tab" class="gtc-tab"' + ViewElement.RenderAttributes(tab);

        // OnEnter
        tabMarkup += EventElement.AttachEvent(tab.Name, 'enter', tab.OnEnter, Tab.OnEnter);

        // OnLeave
        tabMarkup += EventElement.AttachEvent(tab.Name, 'leave', tab.OnLeave, Tab.OnLeave);

        // OnSave
        tabMarkup += EventElement.AttachEvent(tab.Name, 'save', tab.OnSave, Tab.OnSave);

        // OnReset
        tabMarkup += EventElement.AttachEvent(tab.Name, 'reset', tab.OnReset, Tab.OnReset);

        // OnSubmit
        tabMarkup += EventElement.AttachEvent(tab.Name, 'submit', tab.OnSubmit, Tab.OnSubmit);

        // Div>
        tabMarkup += '>';

        // Render Container ViewElements
        tabMarkup += ContainerElement.RenderElements(tab);

        // Div</>
        tabMarkup += '</div>';
        return tabMarkup;

    };

    Tab.OnLeave = function (event) {

        // Event Data from Event
        var tabHeader;
        if (Common.IsDefined(event.EventData)) {
            tabHeader = event.EventData.DivTabHeader;
            fromTab = event.EventData.FromTab;
            toTab = event.EventData.ToTab;
        }
        else {
            tabHeader = event.target;
            fromTab = TabHeader.SelectedTab(tabHeader);
            toTab = fromTab;
        }

        // Check for disabled tab
        if (Common.GetAttr(Common.Query('.gtc-tabbutton-link[href="#' + toTab + '"]', tabHeader).parentNode, 'data-disabled') != 'true') {
            // Initialize
            var onLeaveParameters = [];

            // Merge OnLeave Parameters
            var onLeaveEvent = JSON.parse(Common.GetAttr(this, 'data-leave'));
            if (Common.IsDefined(onLeaveEvent.UiParameters)) {
                onLeaveParameters = onLeaveParameters.concat(onLeaveEvent.UiParameters);
            }

            // Add Form Parameters and clear Changed flag
            var formInContext = Common.Query('.gtc-form', Common.Get(fromTab));
            onLeaveParameters = Form.AddFormParameters(onLeaveParameters, formInContext, true);
            Form.ClearHasChanged(formInContext);

            // Execute View Behavior
            Common.ExecuteViewBehavior(onLeaveEvent.ControllerPath + onLeaveEvent.ActionName, onLeaveParameters, Page.RunInstructions, tabHeader);
        }

    };

    Tab.OnEnter = function (event) {

        // Event Data from Event
        var tabHeader;
        var fromTab;
        var toTab;
        if (Common.IsDefined(event.EventData)) {
            tabHeader = event.EventData.DivTabHeader;
            fromTab = event.EventData.FromTab;
            toTab = event.EventData.ToTab;
        }
        else {
            tabHeader = event.target;
            fromTab = TabHeader.SelectedTab(tabHeader);
            toTab = fromTab;
        }

        // Check for disabled tab
        if (Common.GetAttr(Common.Query('.gtc-tabbutton-link[href="#' + toTab + '"]', tabHeader).parentNode, 'data-disabled') != 'true') {
            // Initialize Tab Parameters
            var onEnterParameters = [
                {
                    Name: 'FromTab',
                    Value: fromTab,
                    UiParameters: null
                }
            ];

            // Merge OnEnter Parameters
            var onEnterEvent = JSON.parse(Common.GetAttr(this, 'data-enter'));
            if (Common.IsDefined(onEnterEvent.UiParameters)) {
                onEnterParameters = onEnterParameters.concat(onEnterEvent.UiParameters);
            }

            // Add Form Parameters and clear Changed flag
            var formInContext = Common.Query('.gtc-form', Common.Get(fromTab));
            onEnterParameters = Form.AddFormParameters(onEnterParameters, formInContext, true);
            Form.ClearHasChanged(formInContext);

            // Execute View Behavior
            Common.ExecuteViewBehavior(onEnterEvent.ControllerPath + onEnterEvent.ActionName, onEnterParameters, Page.RunInstructions, tabHeader);
        }

    };

    Tab.OnReset = function (event) {

        // Get TabHeader
        var tabHeader = event.EventData.DivTabHeader;

        // Initialize Parameters
        var onResetParameters = [];

        // Get OnResetEvent object
        var onResetEvent = JSON.parse(Common.GetAttr(this, 'data-reset'));
        if (Common.IsDefined(onResetEvent.UiParameters)) {
            onResetParameters = onResetParameters.concat(onResetEvent.UiParameters);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onResetEvent.ControllerPath + onResetEvent.ActionName, onResetParameters, Page.RunInstructions, tabHeader);

    };

    Tab.OnSave = function (event) {

        // Get TabHeader
        var tabHeader = event.EventData.DivTabHeader;
        var saveTab = TabHeader.SelectedTab(tabHeader);

        // Initialize Parameters
        var onSaveParameters = [];

        // Get OnSaveEvent object
        var onSaveEvent = JSON.parse(Common.GetAttr(this, 'data-save'));
        if (Common.IsDefined(onSaveEvent.UiParameters)) {
            onSaveParameters = onSaveParameters.concat(onSaveEvent.UiParameters);
        }

        // Add Form Parameters and clear Changed flag
        var formInContext = Common.Query('.gtc-form', Common.Get(saveTab));
        onSaveParameters = Form.AddFormParameters(onSaveParameters, formInContext, true);
        Form.ClearHasChanged(formInContext);

        // Execute View Behavior
        Common.ExecuteViewBehavior(onSaveEvent.ControllerPath + onSaveEvent.ActionName, onSaveParameters, Page.RunInstructions, tabHeader);

    };

    Tab.OnSubmit = function (event) {

        // Event Data from Event
        var tabHeader = event.EventData.DivTabHeader;
        var submitTab = TabHeader.SelectedTab(tabHeader);

        // Initialize Parameters
        var onSubmitParameters = [];

        // Get OnSubmitEvent object
        var onSubmitEvent = JSON.parse(Common.GetAttr(this, 'data-submit'));
        if (Common.IsDefined(onSubmitEvent.UiParameters)) {
            onSubmitParameters = onSubmitParameters.concat(onSubmitEvent.UiParameters);
        }

        // Add Form Parameters and clear Changed flag
        var formInContext = Common.Query('.gtc-form', Common.Get(submitTab));
        onSubmitParameters = Form.AddFormParameters(onSubmitParameters, formInContext, true);
        Form.ClearHasChanged(formInContext);

        // Execute View Behavior
        Common.ExecuteViewBehavior(onSubmitEvent.ControllerPath + onSubmitEvent.ActionName, onSubmitParameters, Page.RunInstructions, tabHeader);

    };

} (window.Tab = window.Tab || {}, window, document, Common, Cache, Events, Velocity));
// Select Field
// Based On: SelectField -> ValueField -> Field -> ViewElement
(function (SelectField, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    SelectField.Render = function (selectField) {

        // Label/Icon Exists (needed for Icon rendering)
        var labelExists = true;
        if (Common.IsNotDefined(selectField.Label)) {
            labelExists = false;
        }
        var iconExists = true;
        if (Common.IsNotDefined(selectField.Icon)) {
            iconExists = false;
        }

        // Sanity Check: IsFirstBlank = Yes
        if (Common.IsDefined(selectField.OptionDetail.Options) && selectField.OptionDetail.Options.length > 0) {
            if (selectField.OptionDetail.IsFirstBlank == 'Yes') {
                var blankOption = {
                    Display: '&nbsp;',
                    Value: ''
                };
                selectField.OptionDetail.Options.unshift(blankOption);
            }
        }

        // Sanity Check: Set default Value
        if (Common.IsNotDefined(selectField.Value)) {
            if (Common.IsDefined(selectField.OptionDetail.Options) && selectField.OptionDetail.Options.length > 0 && Common.IsNotEmptyString(selectField.OptionDetail.Options[0].Value)) {
                selectField.Value = selectField.OptionDetail.Options[0].Value;
            }
        }

        // Label
        var selectFieldMarkup = Field.RenderLabel(selectField);

        // Select<, @Data-NameSpace, @Data-FieldType, Name@, Value@, @Data-Serializable, TabIndex@, Class@, Data-LabelExists@, @Data-TranslateContent, Id@, Data-Disabled@, Select>
        selectFieldMarkup += '<select data-namespace="SelectField" data-configure="Pre" class="gtc-input-selectbox" data-iconexists="' + iconExists + '" data-labelexists="' + labelExists + '" data-translatecontent="' + selectField.TranslateContent + '" ' + ValueField.RenderAttributes(selectField) + Field.RenderAttributes(selectField);

        // Data-HasChanged@ Event
        if (selectField.IsSerializable == 'Yes') {
            Events.On(document.body, 'change.fieldvaluechange.' + selectField.Name, '#' + selectField.Name,
                function () {
                    Common.SetAttr(this, 'data-haschanged', 'Yes');
                }
            );
        }

        // 508 Compliance
        if (selectField.IsRequired == 'Yes') {
            selectFieldMarkup += ' aria-required="true"';
        }

        // @Data-IsFirstBlank
        selectFieldMarkup += ' data-isfirstblank="' + selectField.OptionDetail.IsFirstBlank + '"';

        // Data-ControllerPath/ActionName@, Wire OnChange!
        if (Common.IsEventViewElementDefined(selectField.OnChange)) {
            selectFieldMarkup += Field.AttachOnChange(selectField, SelectField.OnChange);
        }
        selectFieldMarkup += '>';

        // Build Options
        var convertedToken = Common.SanitizeToken(selectField.Value);
        if (Common.IsDefined(selectField.OptionDetail.Options) && selectField.OptionDetail.Options.length > 0) {
            var option, index = 0, length = selectField.OptionDetail.Options.length;
            for ( ; index < length; index++) {
                option = selectField.OptionDetail.Options[index];

                // Option<
                selectFieldMarkup += '<option';

                // @Selected
                if (convertedToken == Common.SanitizeToken(option.Value)) {
                    selectFieldMarkup += ' selected="selected"';
                }

                // @Value, Option>, Display, Option</>
                selectFieldMarkup += ' value="' + option.Value + '">' + option.Display + '</option>';
            }
        }
        else {
            // Empty Default Option
            selectFieldMarkup += '<option value="">&nbsp;</option>';
        }

        // Select</>
        selectFieldMarkup += '</select>';

        // Icon
        if (Common.IsDefined(selectField.Icon)) {
            selectFieldMarkup += Icon.Render(selectField.Icon, true, labelExists);
        }

        // Return
        return selectFieldMarkup;

    };

    SelectField.Configure = function (field, configureStage) {

        Widgets.selectbox(field, { ClassSelectbox: 'gtc-classSpanSelectbox', ClassSelectboxActiveOption: 'gtc-classSelectboxActiveOption', ParentElement: 'PageContent' });

    };

    SelectField.OnChange = function (event) {

        // Remove Prefix_
        var fieldParameterName = Common.RemovePrefix(this.name);

        // Field Value
        var fieldValueUiParameter = [
            {
                Name: fieldParameterName,
                Value:  this.value,
                UiParameters: null
            }
        ];

        // Call OnChange
        Field.OnChange(this, fieldValueUiParameter);

    };

    SelectField.HasValue = function (selectField) {

        if (Common.IsDefined(selectField.Value)) {
            return true;
        }
        return false;

    };

    SelectField.IsCompleted = function (field) {

        var fieldValue = field.value;
        if (Common.IsDefined(fieldValue) && Common.IsNotEmptyString(fieldValue)) {
            return true;
        }
        return false;

    };

    SelectField.UpdateValue = function (field, fieldValue) {

        var found = false, sanitizedValue = Common.SanitizeToken(fieldValue);
        var options = Common.QueryAll('option', field);
        var option, index = 0, length = options.length;
        for ( ; index < length; index++) {
            option = options[index];
            if (Common.SanitizeToken(Common.GetAttr(option, 'value')) == sanitizedValue) {
                Common.SetAttr(option, 'value', fieldValue);
                found = true;
                break;
            }
        }

        // Don't try to update if no option found, will cause widget error
        if (found) {
            ValueField.UpdateValue(field, fieldValue);
            GTC.TriggerEvent(field, 'widgetUpdateValue');
        }
        else {
            console.log('Selectbox: UpdateValue - The value: ' + fieldValue + ' was not found!')
        }

    };

    SelectField.UpdateLabel = function (field, fieldLabel, promises, context) {

        Field.UpdateLabel(field, fieldLabel, promises, context);

    };

    SelectField.UpdateOptions = function (field, optionParameters) {

        // Intialize
        var selectedValue = '';

        // SanityCheck and IsFirstBlank = Yes
        var isFirstBlank = Common.GetAttr(field, 'data-isfirstblank');
        if (Common.IsDefined(optionParameters) && optionParameters.length > 0) {
            if (isFirstBlank == 'Yes') {
                var blankOptionParameter = {
                    Name: '&nbsp;',
                    Value: ''
                };
                optionParameters.unshift(blankOptionParameter);
            }
            else {
                selectedValue = optionParameters[0].Value;
            }
        }
        else {
            optionParameters = [
                {
                    'Name': '&nbsp;',
                    'Value': ''
                }
            ];
        }

        // Set Options
        var optionMarkup = '';
        var option, index = 0, length = optionParameters.length;
        for ( ; index < length; index++) {
            option = optionParameters[index];
            optionMarkup += '<option';
            if (selectedValue == option.Value) {
                optionMarkup += ' selected="selected"';
            }
            optionMarkup += ' value="' + option.Value + '">' + option.Name + '</option>';
        }
        field.innerHTML = optionMarkup;

        // Trigger events for widget
        GTC.TriggerEvent(field, 'widgetUpdateOptions');
        GTC.TriggerEvent(field, 'widgetUpdateValue');
        Field.UpdateRequiredStatus(field);

    };

    SelectField.ShowPinwheel = function (field) {

        Field.ShowPinwheel(field, 'FadingCircle');

    };

    SelectField.HidePinwheel = function (field) {

        Field.HidePinwheel(field);

    };

} (window.SelectField = window.SelectField || {}, window, document, Common, Cache, Events, Velocity));
// Selectbox Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var SelectboxWidget = {

        // Options
        options: {
            ClassSelectbox: 'gtc-classSpanSelectbox',
            ClassSelectboxActiveOption: 'gtc-classSelectboxActiveOption',
            ClassSelectboxPageThemeActiveOption: 'gtc-page-theme-active-select-option',
            ParentElement: 'PageContent',
            ClassSelectboxLocked: 'gtc-input-locked'
        },

        // Public Methods
        IsDisabled: function () {

            return GTC.IsControlDisabled(this.element);

        },

        DisableControl: function () {

            this._disableControl();

        },

        EnableControl: function () {

            this._enableControl();

        },

        // Private Methods
        _createSelectbox: function () {

            // Initialize
            var thisWidget = this;
            var elementStyle = thisWidget.element.style;
            elementStyle.left = '-9999px';
            elementStyle.position = 'absolute';
            elementStyle.visibility = 'hidden';

            // DropDown Markup
            var dropDownMarkup = '<span aria-expanded="false" class="gtc-classControlSpanDropDown" id="' + thisWidget.ElementId + 'DropDownSpan" style="position: absolute; display: none;"><ul id="' + thisWidget.ElementId + 'OptionsUl" aria-labelledby="' + thisWidget.ElementId + '-Label" class="gtc-cfscroll-y" role="menu">';
            var selectedText = '';
            var options = Common.GetChildren(thisWidget.element);
            var option, index = 0, length = options.length;
            for (; index < length; index++) {
                option = options[index];
                var convertedToken = Common.SanitizeToken(option.value);
                dropDownMarkup += '<li role="presentation" data-selectvalue="' + option.value + '" id="' + thisWidget.ElementId + convertedToken + 'OptionLi"';
                if (option.selected) {
                    dropDownMarkup += ' class="' + thisWidget.options.ClassSelectboxPageThemeActiveOption + ' ' + thisWidget.options.ClassSelectboxActiveOption + '"';
                    selectedText = option.text;
                }
                dropDownMarkup += '><a role="option" id="' + thisWidget.ElementId + convertedToken + 'OptionAnchor"';
                if (thisWidget.TranslateContent) {
                    dropDownMarkup += ' data-translate="' + option.text + '">' + Common.TranslateKey(option.text);
                }
                else {
                    dropDownMarkup += '>' + option.text;
                }
                dropDownMarkup += '</a></li>';
            }
            dropDownMarkup += '</ul></span>';

            // SelectSpan Span<>, A</>, Span</>
            var selectboxMarkup = '<span role="listbox" class="' + thisWidget.options.ClassSelectbox + '" id="' + thisWidget.ElementId + 'SelectedSpan">';
            selectboxMarkup += '<a';
            if (thisWidget.IconExists) {
                if (thisWidget.LabelExists == false) {
                    selectboxMarkup += ' class="gtc-input-selectbox-selectedanchor gtc-input__icon-left"';
                }
                else {
                    selectboxMarkup += ' class="gtc-input-selectbox-selectedanchor gtc-input__icon-label-left"';
                }
            }
            selectboxMarkup += ' id="' + thisWidget.ElementId + 'SelectedAnchor" tabindex="' + thisWidget.FocusIndex + '" role="button" contenteditable="true"';
            if (thisWidget.TranslateContent) {
                selectboxMarkup += ' data-translate="' + selectedText + '">' + Common.TranslateKey(selectedText);
            }
            else {
                selectboxMarkup += '>' + selectedText;
            }
            selectboxMarkup += '</a></span>';

            // Append to DOM
            Common.InsertHTMLString(thisWidget.element, Common.InsertType.After, selectboxMarkup + dropDownMarkup);

            // Cache frequently used elements
            thisWidget.SelectedSpan = Common.Get(thisWidget.ElementId + 'SelectedSpan');
            thisWidget.SelectedAnchor = Common.Get(thisWidget.ElementId + 'SelectedAnchor');
            thisWidget.DropDownSpan = Common.Get(thisWidget.ElementId + 'DropDownSpan');
            thisWidget.DropDownUl = Common.Get(thisWidget.ElementId + 'OptionsUl');

        },

        _bindAnchorFocus: function () {

            // Initialize
            var thisWidget = this;

            // Focus In
            Events.On(thisWidget.SelectedAnchor, 'focusin',
                function (event) {
                    if (thisWidget.Locked == false) {
                        if (thisWidget.Focused == false) {
                            Common.AddClass(thisWidget.SelectedSpan, thisWidget.options.ClassSelectbox + 'Hover');
                            Events.Trigger(thisWidget.element, 'focusin');
                            Events.Off(document, 'keydown.selectboxOpenAnchor');
                            Events.On(document, 'keydown.selectboxOpenAnchor', { FocusedAnchor: this, ThisWidget: thisWidget }, thisWidget._bindOpenKeyboardPress);
                            Events.Off(document, 'keydown.keypressAlphanumericSearch');
                            Events.On(document, 'keydown.keypressAlphanumericSearch', { FocusedAnchor: this, ThisWidget: thisWidget }, thisWidget._bindKeypressAlphanumericSearch);
                            var contentEditableElement = document.getElementById(thisWidget.ElementId + 'SelectedAnchor');
                            // Add a keypress event listener to the contenteditable element
                            contentEditableElement.addEventListener('keypress', function (event) {
                                if (event.key === 'Enter') {
                                    event.preventDefault(); // Prevent the default behavior of the Enter key
                                }
                            });
                        }
                    }
                }
            );

            // Focus Out
            Events.On(thisWidget.SelectedAnchor, 'focusout',
                function (event) {
                    if (!thisWidget.IsOpen) {
                        Common.RemoveClass(thisWidget.SelectedSpan, thisWidget.options.ClassSelectbox + 'Hover');
                        Events.Trigger(thisWidget.element, 'focusout');
                        Events.Off(document, 'keydown.selectboxOpenAnchor');
                        Events.Off(document, 'keydown.keypressAlphanumericSearch');
                        thisWidget.OpenedFromAlphanumeric = false;
                        thisWidget.Focused = false;
                    }
                    else {
                        thisWidget.SelectedAnchor.focus();
                    }
                }
            );

        },

        _bindKeypressAlphanumericSearch: function (event) {
            var thisWidget = event.data.ThisWidget;
            var contentEditableField = document.getElementById(thisWidget.ElementId + 'SelectedAnchor');

            contentEditableField.addEventListener('input', function () {
                var searchQuery = contentEditableField.textContent.trim().toLowerCase();

                if (searchQuery.length > 0) {
                    // Display the typed query
                    var searchQueryElement = document.getElementById('searchQuery');
                    if (!searchQueryElement) {
                        searchQueryElement = document.createElement('span');
                        searchQueryElement.id = 'searchQuery';
                        document.body.appendChild(searchQueryElement);
                    }
                    searchQueryElement.textContent = searchQuery;

                    var selectboxLiArray = Common.QueryAll('li', thisWidget.DropDownUl);
                    var index = 0;
                    var length = selectboxLiArray.length;
                    var typedLowerCase = searchQuery.replace(/\s+/g, ''); // Remove spaces
                    for (; index < length; index++) {
                        var currentLi = selectboxLiArray[index];
                        var optionText = currentLi.firstChild.textContent.toLowerCase().replace(/\s+/g, ''); // Remove spaces
                        if (optionText.includes(typedLowerCase)) {
                            currentLi.style.display = 'block';
                        } else {
                            currentLi.style.display = 'none';
                        }
                    }
                } else {
                    // Reset the query and display all options
                    var searchQueryElement = document.getElementById('searchQuery');
                    if (searchQueryElement) {
                        searchQueryElement.textContent = '';
                    }

                    var selectboxLiArray = Common.QueryAll('li', thisWidget.DropDownUl);
                    var index = 0;
                    var length = selectboxLiArray.length;
                    for (; index < length; index++) {
                        var currentLi = selectboxLiArray[index];
                        currentLi.style.display = 'block';
                    }
                }
            });
        },






        _bindOpenKeyboardPress: function (event) {
            switch (event.keyCode) {

                case GTC.Keyboard.Up:
                case GTC.Keyboard.Down:
                case GTC.Keyboard.Space:
                    var thisWidget = event.data.ThisWidget;
                    if (!thisWidget.IsOpen) {
                        Events.Trigger(event.data.FocusedAnchor, 'click');
                        Events.Off(document, 'keydown.selectboxOpenAnchor');
                        Common.RemoveClass(thisWidget.SelectedSpan, thisWidget.options.ClassSelectbox + 'Hover');
                        Common.AddClass(thisWidget.SelectedSpan, thisWidget.options.ClassSelectbox + 'Open');
                    }
                    break;
            }
        },


        _openSelectbox: function (anchorSelectbox) {

            // Check if in modal and if resizing
            if (Common.IsModal() && Common.HasClass(document.body, 'gtc-modal-resizing')) {
                return;
            }

            // Initialize
            var thisWidget = this;
            var spanAnchorDropDown = thisWidget.DropDownSpan;

            // Open
            if (thisWidget.Locked == false) {
                // Close other open Selectboxes
                var spanDropDown = Common.QueryAll('.gtc-classControlSpanDropDown');
                var prevArray = [], prevElement, prevIndex = 0, prevLength = spanDropDown.length;
                for (; prevIndex < prevLength; prevIndex++) {
                    prevElement = spanDropDown[prevIndex];
                    if (prevElement != anchorSelectbox) {
                        prevArray.push(Common.GetSibling(prevElement, Common.SiblingType.Previous));
                    }
                }
                Common.RemoveClassFromElements(prevArray, thisWidget.options.ClassSelectbox + 'Open');
                Events.Off(document, 'keydown.selectboxKeyboardClicks');
                thisWidget._slideUpSpan(thisWidget.DropDownSpan, thisWidget, null);

                // 508 Compliance
                Common.SetAttr(thisWidget.DropDownSpan, 'aria-expanded', 'true');

                // Selectbox Span/Ul Position and Height
                var spanSelectbox = thisWidget.SelectedSpan;
                var spanSelectboxPos = Common.Position(spanSelectbox);
                var posLeft = spanSelectboxPos.left;
                var posTop = spanSelectboxPos.top + Common.Height(spanSelectbox);
                var selectWidth = Common.Width(spanSelectbox);
                var spanAnchorDropDownStyle = spanAnchorDropDown.style;
                spanAnchorDropDownStyle.display = 'block';
                spanAnchorDropDownStyle.zIndex = '-1';
                var selectboxDisplayHeight = Common.Height(spanAnchorDropDown, true);
                var spanAnchorDropDownUl = thisWidget.DropDownUl;
                var totalLis = Common.QueryAll('li', spanAnchorDropDownUl);
                var overflowExists = false;
                if (totalLis.length * Common.Height(totalLis[0], true) > selectboxDisplayHeight) {
                    overflowExists = true;
                    var currentSelectedLi = Common.Query('.' + thisWidget.options.ClassSelectboxActiveOption, spanAnchorDropDown);
                    var currentSelectedLiIndex = Common.GetIndex(currentSelectedLi);
                    spanAnchorDropDownUl.scrollTop = Common.Height(currentSelectedLi, true) * currentSelectedLiIndex;
                }
                spanAnchorDropDownStyle.display = 'none';
                spanAnchorDropDownStyle.zIndex = '';

                // Slide Down
                spanAnchorDropDownStyle.left = posLeft + 'px';
                spanAnchorDropDownStyle.width = selectWidth + 'px';
                spanAnchorDropDownStyle.top = posTop + 'px';
                Velocity(spanAnchorDropDown, 'slideDown', {
                    duration: 400, queue: false,
                    complete: function () {
                        thisWidget.IsOpen = true;
                        spanAnchorDropDownStyle.display = 'block';

                        // Close Selectbox on Body click
                        Events.On(document.body, 'click.selectboxCloseOnBodyClick.' + thisWidget.ElementId,
                            function (event) {
                                var eventTarget = event.target;
                                if (!Common.Closest('#' + thisWidget.ElementId + 'DropDownSpan', eventTarget) && eventTarget.id != thisWidget.ElementId + 'SelectedAnchor') {
                                    Events.Off(document.body, 'click.selectboxCloseOnBodyClick');
                                    Events.Off(document, 'keydown.selectboxKeyboardClicks');
                                    thisWidget._slideUpSpan(thisWidget.DropDownSpan, thisWidget,
                                        function () {
                                            if (thisWidget.IsHeightIncreased) {
                                                thisWidget.IsHeightIncreased = false;
                                                if (Common.IsModal()) {
                                                    var modalSelect = window.parent.Common.Query('.gtc-modal-iframe', null, true);
                                                    var newHeight = Common.Height(modalSelect.parentNode) - thisWidget.HeightIncrease;
                                                    modalSelect.parentNode.style.height = newHeight + 'px';
                                                }
                                                else {
                                                    var parentElement = Common.Get(thisWidget.options.ParentElement);
                                                    var newHeight = Common.Height(parentElement) - thisWidget.HeightIncrease;
                                                    parentElement.style.height = newHeight + 'px';
                                                }
                                            }
                                        }
                                    );
                                    Common.RemoveClass(Common.GetSibling(spanAnchorDropDown, Common.SiblingType.Previous), thisWidget.options.ClassSelectbox + 'Open');

                                    // 508 Compliance
                                    Common.SetAttr(thisWidget.DropDownSpan, 'aria-expanded', 'false');
                                }
                            }
                        );

                        /* // Keyboard access to Selectbox
                        Events.Off(document, 'keydown.selectboxKeyboardClicks');
                        Events.On(document, 'keydown.selectboxKeyboardClicks.' + thisWidget.ElementId,
                            function (event) {
                                event.preventDefault();
                                // Initialize
                                var currentSelectedLi = Common.Query('.' + thisWidget.options.ClassSelectboxActiveOption, spanAnchorDropDown);

                                // Check if nothing is selected and select first option
                                if (Common.IsNotDefined(currentSelectedLi)) {
                                    currentSelectedLi = Common.Query('li:first-child', spanAnchorDropDown);
                                    Common.AddClass(currentSelectedLi, thisWidget.options.ClassSelectboxPageThemeActiveOption);
                                    Common.AddClass(currentSelectedLi, thisWidget.options.ClassSelectboxActiveOption);
                                    return;
                                }

                                // Check overflow
                                var currentSelectedLiIndex;
                                if (overflowExists) {
                                    currentSelectedLiIndex = Common.GetIndex(currentSelectedLi);
                                }

                                // Process Key
                                var switchCaseExecuted = false, newlySelectedLi;
                                switch (event.keyCode) {
                                    case GTC.Keyboard.Down:
                                        newlySelectedLi = Common.GetSibling(currentSelectedLi, Common.SiblingType.Next);
                                        if (Common.IsDefined(newlySelectedLi)) {
                                            Common.RemoveClass(currentSelectedLi, thisWidget.options.ClassSelectboxPageThemeActiveOption);
                                            Common.RemoveClass(currentSelectedLi, thisWidget.options.ClassSelectboxActiveOption);
                                            Common.AddClass(newlySelectedLi, thisWidget.options.ClassSelectboxPageThemeActiveOption);
                                            Common.AddClass(newlySelectedLi, thisWidget.options.ClassSelectboxActiveOption);
                                            if (overflowExists) {
                                                var scrollPosition = thisWidget.DropDownUl.scrollTop;
                                                scrollPosition += Common.Height(currentSelectedLi, true);
                                                thisWidget.DropDownUl.scrollTop = scrollPosition;
                                            }
                                        }
                                        switchCaseExecuted = true;
                                        break;
                                    case GTC.Keyboard.Up:
                                        newlySelectedLi = Common.GetSibling(currentSelectedLi, Common.SiblingType.Previous);
                                        if (Common.IsDefined(newlySelectedLi)) {
                                            Common.RemoveClass(currentSelectedLi, thisWidget.options.ClassSelectboxPageThemeActiveOption);
                                            Common.RemoveClass(currentSelectedLi, thisWidget.options.ClassSelectboxActiveOption);
                                            Common.AddClass(newlySelectedLi, thisWidget.options.ClassSelectboxPageThemeActiveOption);
                                            Common.AddClass(newlySelectedLi, thisWidget.options.ClassSelectboxActiveOption);
                                            if (overflowExists) {
                                                var scrollPosition = thisWidget.DropDownUl.scrollTop;
                                                scrollPosition -= Common.Height(currentSelectedLi, true);
                                                thisWidget.DropDownUl.scrollTop = scrollPosition;
                                            }
                                        }
                                        switchCaseExecuted = true;
                                        break;
                                    case GTC.Keyboard.Enter:
                                    case GTC.Keyboard.Space:
                                    case GTC.Keyboard.Tab:
                                        Events.Trigger(Common.Query(':first-child', currentSelectedLi), 'click');
                                        var prevSpan = thisWidget.SelectedSpan;
                                        Common.RemoveClass(prevSpan, thisWidget.options.ClassSelectbox + 'Open');
                                        Common.AddClass(prevSpan, thisWidget.options.ClassSelectbox + 'Hover');
                                        switchCaseExecuted = true;
                                        break;
                                }
                            }
                        ); */
                    }
                });

                // Adjust Screen Height
                var anchorSelectboxParent = thisWidget.SelectedSpan;
                Common.RemoveClass(anchorSelectboxParent, thisWidget.options.ClassSelectbox + 'Hover');
                Common.AddClass(anchorSelectboxParent, thisWidget.options.ClassSelectbox + 'Open');
                var parentElement = Common.Get(thisWidget.options.ParentElement);
                if (parentElement && !Common.IsModal()) {
                    var parentElementHeight = Common.Height(parentElement);
                    var containerElementHeight = Common.Offset(parentElement).top + parentElementHeight;
                    var selectboxHeight = Common.Offset(spanAnchorDropDown).top + selectboxDisplayHeight + 10;
                    if (selectboxHeight > containerElementHeight && containerElementHeight > 0) {
                        thisWidget.IsHeightIncreased = true;
                        thisWidget.HeightIncrease = selectboxHeight - containerElementHeight;
                        parentElement.style.height = (parentElementHeight + thisWidget.HeightIncrease) + 'px';
                    }
                }
                else if (Common.IsModal()) {
                    var modalParent = window.parent.Common.Query('.gtc-modal-iframe', null, true).parentNode;
                    var modalParentOffset = Common.Offset(modalParent);
                    var modalBottom = Common.Height(modalParent, true) + modalParentOffset.top;
                    var selectBottom = selectboxDisplayHeight + Common.Offset(anchorSelectboxParent).top + posTop + modalParentOffset.top;
                    if (selectBottom > modalBottom) {
                        thisWidget.IsHeightIncreased = true;
                        thisWidget.HeightIncrease = selectBottom - modalBottom + (selectboxDisplayHeight * 2);
                        var modalParentHeight = Common.Height(modalParent);
                        modalParent.style.height = (modalParentHeight + thisWidget.HeightIncrease) + 'px';
                    }
                }
            }

        },

        _closeSelectbox: function (anchorSelectbox) {

            // Initialize
            var thisWidget = this;

            // Close Select Span
            Common.RemoveClass(thisWidget.SelectedSpan, thisWidget.options.ClassSelectbox + 'Open');
            Events.Off(document.body, 'click.selectboxCloseOnBodyClick');
            Events.Off(document, 'keydown.selectboxKeyboardClicks');
            thisWidget.IsOpen = false;
            thisWidget.OpenedFromAlphanumeric = false;

            // 508 Compliance
            Common.SetAttr(thisWidget.DropDownSpan, 'aria-expanded', 'false');

            // Slide Up and Adjust Height
            thisWidget._slideUpSpan(thisWidget.DropDownSpan, thisWidget,
                function () {
                    if (thisWidget.IsHeightIncreased) {
                        thisWidget.IsHeightIncreased = false;
                        if (Common.IsModal()) {
                            var modalSelect = window.parent.Common.Query('.gtc-modal-iframe', null, true);
                            var newHeight = Common.Height(modalSelect.parentNode) - thisWidget.HeightIncrease;
                            modalSelect.parentNode.style.height = newHeight + 'px';
                        }
                        else {
                            var parentElement = Common.Get(thisWidget.options.ParentElement);
                            var newHeight = Common.Height(parentElement) - thisWidget.HeightIncrease;
                            parentElement.style.height = newHeight + 'px';
                        }
                    }
                }
            );

            // Update Keypress events
            Events.Off(document, 'keydown.selectboxOpenAnchor');
            Events.On(document, 'keydown.selectboxOpenAnchor.' + thisWidget.ElementId, { FocusedAnchor: thisWidget.SelectedAnchor, ThisWidget: thisWidget }, thisWidget._bindOpenKeyboardPress);

        },

        _slideUpSpan: function (spanDropDown, thisWidget, callback) {

            Velocity(spanDropDown, 'slideUp', 400, callback);
            thisWidget.IsOpen = false;

        },

        _bindAnchorClick: function () {

            // Initialize
            var thisWidget = this;

            // Click
            Events.On(thisWidget.SelectedAnchor, 'click',
                function (event) {
                    event.preventDefault();
                    if (Common.IsHidden(thisWidget.DropDownSpan)) {
                        thisWidget._openSelectbox(this);
                    }
                    else {
                        thisWidget._closeSelectbox(this);
                    }
                }
            );

        },

        _bindLiClick: function () {

            // Initialize
            var thisWidget = this;
            var selectLis = Common.QueryAll('li', thisWidget.DropDownUl);

            // Click
            Events.On(selectLis, 'click',
                function (event) {
                    // Activate and Show Selected Option(Li)
                    event.preventDefault();
                    Common.RemoveClassFromElements(selectLis, thisWidget.options.ClassSelectboxPageThemeActiveOption);
                    Common.RemoveClassFromElements(selectLis, thisWidget.options.ClassSelectboxActiveOption);
                    Common.AddClass(this, thisWidget.options.ClassSelectboxPageThemeActiveOption);
                    Common.AddClass(this, thisWidget.options.ClassSelectboxActiveOption);
                    thisWidget.SelectedAnchor.textContent = this.textContent;
                    if (thisWidget.TranslateContent) {
                        Common.SetAttr(thisWidget.SelectedAnchor, 'data-translate', Common.GetAttr(this.firstChild, 'data-translate'));
                    }
                    var spanAnchorDropDown = thisWidget.DropDownSpan;
                    var offsetHeight = Common.Offset(spanAnchorDropDown).top + Common.Height(spanAnchorDropDown);
                    Common.RemoveClass(thisWidget.SelectedSpan, thisWidget.options.ClassSelectbox + 'Open');
                    Events.Off(document.body, 'click.selectboxCloseOnBodyClick');
                    Events.Off(document, 'keydown.selectboxKeyboardClicks');
                    thisWidget._slideUpSpan(thisWidget.DropDownSpan, thisWidget,
                        function () {
                            if (thisWidget.IsHeightIncreased) {
                                thisWidget.IsHeightIncreased = false;
                                if (Common.IsModal()) {
                                    var modalSelect = window.parent.Common.Query('.gtc-modal-iframe', null, true);
                                    var newHeight = Common.Height(modalSelect.parentNode) - thisWidget.HeightIncrease;
                                    modalSelect.parentNode.style.height = newHeight + 'px';
                                }
                                else {
                                    var parentElement = Common.Get(thisWidget.options.ParentElement);
                                    var newHeight = Common.Height(parentElement) - thisWidget.HeightIncrease;
                                    parentElement.style.height = newHeight + 'px';
                                }
                            }
                        }
                    );

                    // Update select control
                    // TODO: figure why this is happening! Can't set value of select with a base64?
                    // thisWidget.element.value = Common.GetAttr(this, 'data-selectvalue');
                    var selected = Common.QueryAll('option[selected]', thisWidget.element);
                    var index = 0, length = selected.length;
                    for (; index < length; index++) {
                        Common.RemoveAttr(selected[index], 'selected');
                    }
                    var clickedIndex = Common.GetIndex(this);
                    var options = Common.QueryAll('option', thisWidget.element);
                    Common.SetAttr(options[clickedIndex], 'selected', 'selected');
                    Events.Trigger(thisWidget.element, 'change');

                    // Update Keypress events
                    Events.Off(document, 'keydown.selectboxOpenAnchor');
                    Events.On(document, 'keydown.selectboxOpenAnchor.' + thisWidget.ElementId, { FocusedAnchor: thisWidget.SelectedAnchor, ThisWidget: thisWidget }, thisWidget._bindOpenKeyboardPress);
                }
            );

        },

        _bindChange: function () {

            // Initialize
            var thisWidget = this;
            var spanAnchorDropDown = thisWidget.DropDownSpan;

            // Click
            Events.On(thisWidget.element, 'widgetUpdateValue',
                function () {
                    Common.RemoveClass(Common.Query('.' + thisWidget.options.ClassSelectboxPageThemeActiveOption, spanAnchorDropDown), thisWidget.options.ClassSelectboxPageThemeActiveOption);
                    Common.RemoveClass(Common.Query('.' + thisWidget.options.ClassSelectboxActiveOption, spanAnchorDropDown), thisWidget.options.ClassSelectboxActiveOption);
                    var convertedToken = Common.SanitizeToken(this.value);
                    var selectedLiOption = Common.Get(thisWidget.ElementId + convertedToken + 'OptionLi');
                    Common.AddClass(selectedLiOption, thisWidget.options.ClassSelectboxPageThemeActiveOption);
                    Common.AddClass(selectedLiOption, thisWidget.options.ClassSelectboxActiveOption);
                    var selectedLiAnchor = Common.GetChildren(selectedLiOption, 'a')[0];
                    thisWidget.SelectedAnchor.textContent = selectedLiAnchor.textContent;
                    if (thisWidget.TranslateContent) {
                        Common.SetAttr(thisWidget.SelectedAnchor, 'data-translate', Common.GetAttr(selectedLiAnchor, 'data-translate'));
                    }
                }
            );

        },

        _bindUpdateOptions: function () {

            // Initialize
            var thisWidget = this;
            var selectboxUl = thisWidget.DropDownUl;

            // Click
            Events.On(thisWidget.element, 'widgetUpdateOptions',
                function () {
                    Common.Remove(Common.QueryAll('li', selectboxUl));
                    var customDropDownMarkup = '';
                    var options = Common.GetChildren(thisWidget.element);
                    var option, index = 0, length = options.length;
                    for (; index < length; index++) {
                        option = options[index];
                        var convertedToken = Common.SanitizeToken(option.value);
                        customDropDownMarkup += '<li role="presentation" data-selectvalue="' + option.value + '" id="' + thisWidget.ElementId + convertedToken + 'OptionLi"';
                        customDropDownMarkup += '><a role="option" id="' + thisWidget.ElementId + convertedToken + 'OptionAnchor"';
                        if (thisWidget.TranslateContent) {
                            customDropDownMarkup += ' data-translate="' + option.text + '">' + Common.TranslateKey(option.text);
                        }
                        else {
                            customDropDownMarkup += '>' + option.text;
                        }
                        customDropDownMarkup += '</a></li>';
                    }
                    selectboxUl.innerHTML = customDropDownMarkup;
                    thisWidget._bindLiClick();
                    thisWidget._bindChange();
                }
            );

        },

        _disableControl: function () {

            // Initialize
            var thisWidget = this;

            // Lock
            if (!thisWidget.Locked) {
                thisWidget.Locked = true;
                Common.SetAttr(thisWidget.element, 'disabled', 'disabled');
                Common.SetAttr(thisWidget.element, 'data-disabled', 'true');
                Common.SetAttr(thisWidget.SelectedAnchor, 'tabindex', '-1');
                Common.AddClass(thisWidget.SelectedSpan, thisWidget.options.ClassSelectboxLocked);
                Common.InsertHTMLString(thisWidget.SelectedSpan, Common.InsertType.After, '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
            }

        },

        _enableControl: function () {

            // Initialize
            var thisWidget = this;

            // Unlock
            if (thisWidget.Locked) {
                Common.RemoveClass(thisWidget.SelectedSpan, thisWidget.options.ClassSelectboxLocked);
                Common.Remove(Common.GetSibling(thisWidget.SelectedSpan, Common.SiblingType.Next, '.gtc-input-system'), true);
                Common.SetAttr(thisWidget.SelectedAnchor, 'tabindex', thisWidget.FocusIndex);
                Common.RemoveAttr(thisWidget.element, 'data-disabled');
                Common.RemoveAttr(thisWidget.element, 'disabled');
                thisWidget.Locked = false;
            }

        },

        _init: function () {

        },

        _create: function () {

            // Create local properties
            this.ElementId = this.element.id;
            this.Locked = false;
            this.Focused = false;
            this.IsHeightIncreased = false;
            this.HeightIncrease = 0;
            this.IsOpen = false;
            this.FocusIndex = Common.GetAttr(this.element, 'tabindex');
            Common.SetAttr(this.element, 'tabindex', '-1');
            this.TypedKeystrokes = '';
            this.LabelExists = (Common.GetAttr(this.element, 'data-labelexists') === 'true');
            this.IconExists = (Common.GetAttr(this.element, 'data-iconexists') === 'true');
            this.TranslateContent = false;
            if (Common.GetAttr(this.element, 'data-translatecontent') == 'Yes') {
                this.TranslateContent = true;
            }

            // Create selectbox
            this._createSelectbox();
            this._bindAnchorFocus();
            this._bindAnchorClick();
            this._bindLiClick();
            this._bindChange();
            this._bindUpdateOptions();

            // Check if field is disabled
            var dataDisabled = Common.GetAttr(this.element, 'data-disabled');
            if (dataDisabled == 'true') {
                this._disableControl();
            }

        }

    };

    WidgetFactory.Register('gtc.selectbox', SelectboxWidget);

}(window, document, Common, Cache, Events, Velocity));/** 
 * @class DisplayPanel
 * @classdesc Supports the DisplayPanel View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (DisplayPanel, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var scrollSemaphore = false;

    /**
     * @function DisplayPanel.Render
     * @param {object} displayPanel - The DisplayPanel View Element in JSON format
     * @description Generates the HTML markup for the DisplayPanel View Element 
     * @returns {string} HTML Markup of the DisplayPanel View Element
     */
    DisplayPanel.Render = function (displayPanel) {

        // Build class name
        var className = '';
        if (displayPanel.StackDisplayDetails == 'Yes') {
            className += ' gtc-displaypanel-stacked';
        }
        if (displayPanel.DisplayNoItems == 'Yes') {
            className += ' gtc-displaypanel-displaynoitems';
        }

        // Div<, TabIndex@, Class@, Id@, Div>
        var displayPanelMarkup = '<div data-namespace="DisplayPanel" data-configure="Pre" class="gtc-displaypanel' + className + '"' + ViewElement.RenderAttributes(displayPanel);

        // Serializable?
        if (displayPanel.IsSerializable == 'Yes') {
            // Data-Serializable@
            displayPanelMarkup += ' data-serializable';
        }

        // List Name
        if (Common.IsDefined(displayPanel.ListName)) {
            displayPanelMarkup += ' data-listname="' + displayPanel.ListName + '"';
        }

        // Paging On Scroll?
        if (Common.IsEventViewElementDefined(displayPanel.OnScroll)) {
            if (Common.IsDefined(displayPanel.FormToSerialize)) {
                displayPanel.OnScroll.FormToSerialize = displayPanel.FormToSerialize;
            }
            displayPanelMarkup += ' data-onscroll=\'' + JSON.stringify(displayPanel.OnScroll) + '\' data-pagenumber="1"';

            // Attach configure event
            Events.One(document.body, 'configuredisplaypanelonscroll',
                function () {
                    SetScrolling(displayPanel.Name);
                }
            );
        }

        // Div>
        displayPanelMarkup += '>';

        // Header Area
        displayPanelMarkup += '<div class="gtc-displaypanel-header">';

        // H2<>, Title, H2</>
        if (Common.IsDefined(displayPanel.Title)) {
            displayPanelMarkup += '<h2 id="' + displayPanel.Name + 'Title" class="gtc-displaypanel-title gtc-page-theme-color"';

            // Translations
            displayPanelMarkup += ' data-translate="' + displayPanel.Title + '"';
            displayPanelMarkup += '>' + Common.TranslateKey(displayPanel.Title) + '</h2>';
        }

        // Links
        if (Common.IsDefined(displayPanel.Links) && displayPanel.Links.length > 0) {
            displayPanelMarkup += '<div class="gtc-displaypanel-links">';

            // Links
            var link, index = 0, length = displayPanel.Links.length;
            for ( ; index < length; index++) {
                link = displayPanel.Links[index];

                // Id?
                if (Common.IsDefined(displayPanel.Id)) {
                    // Update name to be unique
                    link.Name += Common.SanitizeToken(displayPanel.Id);
                }

                // Li<>, Anchor, Li</>
                displayPanelMarkup += Link.Render(link);
            }
            displayPanelMarkup += '</div>';
        }

        // Close Header Area
        displayPanelMarkup += '</div>';

        // Display details container
        displayPanelMarkup += '<div id="' + displayPanel.Name + '-container" class="gtc-displaypanel-body">';

        // Display Details
        if (Common.IsDefined(displayPanel.DisplayDetails) && displayPanel.DisplayDetails.length > 0) {
            // Initialize
            var displayDetailCount = displayPanel.DisplayDetails.length;

            // Display Details
            var displayDetail, displayDetailIndex = 0;
            for ( ; displayDetailIndex < displayDetailCount; displayDetailIndex++) {
                displayDetail = displayPanel.DisplayDetails[displayDetailIndex];
                var displayDetailNamespace = window[displayDetail.Type.toString()];
                displayPanelMarkup += displayDetailNamespace.Render(displayDetail);
            }
        }
        else if (displayPanel.DisplayNoItems == 'Yes') {
            displayPanelMarkup += NoItemsToDisplay();
        }

        // Div</>, Div</>
        displayPanelMarkup += '</div></div>';
        return displayPanelMarkup;

    };

    /**
     * @function DisplayPanel.Configure
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @param {string} configureStage - Pre for Configuration before Translations or Post for Configuration after Translations
     * @description Called by Page.Configure after the dynamic HTML markup is added to the DOM
     */
    DisplayPanel.Configure = function (displayPanel, configureStage) {

        if (Common.IsDefined(displayPanel.dataset.onscroll)) {
            Events.Trigger(displayPanel, 'configuredisplaypanelonscroll');
        }

    };

    /**
     * @function DisplayPanel.SerializeArray
     * @param {object} element - The DisplayPanel DOM element
     * @description Serializes all the serializable inputs in an DisplayPanel
     * @returns {UiParameter[]} A list of UiParameters with Name, Value and in some cases also UiParameters
     */
    DisplayPanel.SerializeArray = function (element) {

        var regExpCRLF = /\r?\n/g;
        var uiParameters = {
            Name: Common.GetAttr(element, 'data-listname'),
            Value: null,
            UiParameters: []
        };
        var displayDetails = Common.QueryAll('.gtc-displaydetail', element);
        if (displayDetails.length > 0) {
            var displayDetail, index = 0, length = displayDetails.length;
            for (; index < length; index++) {
                displayDetail = displayDetails[index];

                // Initialize
                var propertiesUiParameters = [];

                // View Model
                var viewModel = JSON.parse(Common.GetAttr(displayDetail, 'data-viewmodel'));
                var viewModelId = null;
                if (Common.IsDefined(viewModel) && Common.IsDefined(viewModel.Value) && Common.IsNotEmptyString(viewModel.Value)) {
                    viewModelId = viewModel.Value;
                }
                else {
                    viewModel = {
                        Name: displayDetail.id
                    };
                }

                // Id
                propertiesUiParameters.push(
                    {
                        Name: 'Id',
                        Value: viewModelId,
                        UiParameters: null
                    }
                );

                // Ui Parameters
                var extraUiParameters = JSON.parse(Common.GetAttr(displayDetail, 'data-uiparameters'));
                if (Common.IsDefined(extraUiParameters)) {
                    var uiParameter, extraUiParametersIndex = 0, extraUiParametersLength = extraUiParameters.length;
                    for (; extraUiParametersIndex < extraUiParametersLength; extraUiParametersIndex++) {
                        uiParameter = extraUiParameters[extraUiParametersIndex];
                        propertiesUiParameters.push(
                            {
                                Name: uiParameter.Name,
                                Value: uiParameter.Value,
                                UiParameters: null
                            }
                        );
                    }
                }

                // Other (Editable) Properties
                var radioNames = [];
                var editableDisplayItems = Common.QueryAll('.gtc-editabledisplayitem', displayDetail);
                if (editableDisplayItems.length > 0) {
                    var editableDisplayItem, editableDisplayItemIndex = 0, editableDisplayItemLength = editableDisplayItems.length;
                    for ( ; editableDisplayItemIndex < editableDisplayItemLength; editableDisplayItemIndex++) {
                        editableDisplayItem = editableDisplayItems[editableDisplayItemIndex];
                        var dataName = Common.GetAttr(editableDisplayItem, 'data-name');
                        var propertyUiParameter = {
                            Name: dataName,
                            Value: null,
                            UiParameters: null
                        };
                        var field = Common.Query('[data-serializabledisplayitem]', editableDisplayItem);
                        var fieldType = Common.GetAttr(field, 'data-namespace');
                        var rawData = null;
                        switch (fieldType) {
                            case 'DateField':
                                rawData = Common.GetAttr(field, 'data-raw');
                                if (rawData.length <= 0) {
                                    rawData = null;
                                }
                                else {
                                    var serializeAsUtc = Common.GetAttr(field, 'data-serializeasutc');
                                    if (serializeAsUtc == 'Yes') {
                                        var localDateTime = eval(rawData.replace(/\/Date\((-?\d+)\)\//, 'new Date($1)'));
                                        rawData = '/Date(' + Common.AddTimezone(localDateTime).getTime() + ')/';
                                    }
                                }
                                break;
                            case 'CurrencyField':
                                rawData = Common.GetAttr(field, 'data-raw');
                                if (rawData.length <= 0) {
                                    rawData = null;
                                }
                                var currencyCode = Common.GetAttr(field, 'data-currencycode');
                                if (Common.IsDefined(currencyCode)) {
                                    propertyUiParameter.UiParameters = [
                                        {
                                            Name: 'Code',
                                            Value: currencyCode,
                                            UiParameters: null
                                        }
                                    ];
                                }
                                break;
                            case 'SelectField':
                                rawData = field.value;
                                break;
                            default:
                                rawData = Common.GetAttr(field, 'data-raw');
                                if (Common.IsNotDefined(rawData)) {
                                    rawData = field.value;
                                }
                                if (rawData.length <= 0) {
                                    rawData = null;
                                }
                                else {
                                    rawData = rawData.replace(regExpCRLF, '\r\n');
                                }
                                break;
                        }
                        propertyUiParameter.Value = rawData;
                        propertiesUiParameters.push(propertyUiParameter);
                    }
                }

                // Entity
                entityUiParameter = {
                    Name: viewModel.Name,
                    Value: null,
                    UiParameters: null
                };
                entityUiParameter.UiParameters = propertiesUiParameters;
                uiParameters.UiParameters.push(entityUiParameter);
            }
        }
        return uiParameters;

    };

    /**
     * @function DisplayPanel.OnScroll
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @param {integer} pageNumber - Page Number needed to load
     * @description This method is called when the DisplayPanel is scrolled
     */
    DisplayPanel.OnScroll = function (displayPanel, pageNumber) {

        // Initialize
        var onScrollParameters = [];

        // Get OnScrollEvent object
        var onScrollEvent = JSON.parse(Common.GetAttr(displayPanel, 'data-onscroll'));
        if (Common.IsDefined(onScrollEvent.UiParameters)) {
            onScrollParameters = onScrollParameters.concat(onScrollEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onScrollEvent.FormToSerialize)) {
            onScrollParameters = onScrollParameters.concat(Form.SerializeArray(Common.Get(onScrollEvent.FormToSerialize)));
        }

        // Page Number
        var newPageNumber = parseInt(pageNumber, 10) + 1;
        onScrollParameters.push(
            {
                Name: 'PageNumber',
                Value: newPageNumber,
                UiParameters: null
            }
        );

        // Execute View Behavior
        Common.ExecuteViewBehavior(onScrollEvent.ControllerPath + onScrollEvent.ActionName, onScrollParameters,
            function (pageInstructionData) {
                // Return if no page instructions
                if (Common.IsNotDefined(pageInstructionData.PageInstructions) || pageInstructionData.PageInstructions.length == 0) {
                    RemoveOnScrollLoader(0);
                    return;
                }

                // Remove instruction from list
                var pagingInstruction = null;
                pageInstructionData.PageInstructions = Common.FilterArray(pageInstructionData.PageInstructions,
                    function(pageInstruction) {
                        if (pageInstruction.Instruction != 'Page') {
                            return true;
                        }
                        else {
                            pagingInstruction = pageInstruction;
                            return false;
                        }
                    }
                );

                // Insert new paging data if there are view elements
                var delayValue = 300;
                if (Common.IsDefined(pagingInstruction.ViewElements) && pagingInstruction.ViewElements.length > 0) {
                    Common.SetAttr(displayPanel, 'data-pagenumber', newPageNumber);
                    var displayPanelMarkup = BuildContent(displayPanel, pagingInstruction.ViewElements, true);
                    var displayPanelBody = Common.Query('.gtc-displaypanel-body', displayPanel);
                    displayPanelBody.appendChild(Common.GenerateFragment(displayPanelMarkup));
                    window.Events.Trigger(Common.QueryAll('body'), 'configureprogressdisplayitem');
                    Page.SetPageHeight();
                    Common.RetranslatePage();
                }
                else {
                    delayValue = 0;
                }

                // Remove loader
                RemoveOnScrollLoader(delayValue);

                // Run remaining instructions if they exist
                if (pageInstructionData.PageInstructions.length > 0) {
                    Page.RunInstructions(pageInstructionData);
                }
            }, displayPanel
        );

    };

    /**
     * @function DisplayPanel.UpdateTitle
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @param {string} updatedTitle - The new Title of the DisplayPanel
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Title of the DisplayPanel
     */
    DisplayPanel.UpdateTitle = function (displayPanel, updatedTitle, promises, context) {

        var onParent = context == 'Parent';
        var title = Common.Get(displayPanel.id + 'Title', onParent);
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(updatedTitle);
            Common.SetAttr(title, 'data-translate', updatedTitle);
        };
        if (Common.IsHidden(displayPanel)) {
            updateTitleFunction();
        }
        else {
            // Get deferred object for animation
            var animationPromise = Common.Promise();
            promises.push(animationPromise.promise);

            // Animate
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    /**
     * @function DisplayPanel.ReplaceContent
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @param {object[]} viewElements -  An array that contains one or more DisplayDetail View Elements in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Replaces a set of DisplayDetails in the DisplayPanel
     */
    DisplayPanel.ReplaceContent = function (displayPanel, viewElements, promises, context) {

        // Get Display Panel body
        var body = Common.Query('.gtc-displaypanel-body', displayPanel);

        // Get a promise
        var animationHidePromise = Common.Promise();
        promises.push(animationHidePromise.promise);

        // Remove delegated events before building HTML which will attach delegated events with same id!
        // INFO: Only remove delegated events from content that is being replaced, e.g. not the panel links!
        Cache.CleanDelegatedElementsData(body);

        // Has paging?
        if (Common.IsDefined(Common.GetAttr(displayPanel, 'data-pagenumber'))) {
            Common.SetAttr(displayPanel, 'data-pagenumber', '1');
        }

        // Replace content
        var panelChildren = Common.QueryAll('.gtc-displaydetail', body);
        if (panelChildren.length > 0) {
            Velocity(panelChildren, 'slideUp', 'slow').then(
                function (event) {
                    ReplaceDisplayDetails(displayPanel, body, viewElements, promises, animationHidePromise, context);
                }
            );
        }
        else {
            ReplaceDisplayDetails(displayPanel, body, viewElements, promises, animationHidePromise, context);
        }

    };

    /**
     * @function DisplayPanel.AppendContent
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @param {object[]} viewElements -  An array that contains one or more DisplayDetails View Elements in JSON format
     * @description Appends a set of DisplayDetails in the DisplayPanel
     */
    DisplayPanel.AppendContent = function (displayPanel, viewElements) {

        // Get Display Panel body
        var body = Common.Query('.gtc-displaypanel-body', displayPanel);

        // Build Content
        var displayPanelMarkup = BuildContent(displayPanel, viewElements);

        // Append
        Common.InsertHTMLString(body, Common.InsertType.Append, displayPanelMarkup);
        Common.RetranslatePage();
        var panelChildren = Common.QueryAll('.gtc-displaydetail', body);
        Velocity(panelChildren, 'slideDown', 'slow');

    };

    /**
     * @function DisplayPanel.PrependContent
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @param {object[]} viewElements -  An array that contains one or more DisplayDetail View Elements in JSON format
     * @description Prepends a set of DisplayDetails in the DisplayPanel
     */
    DisplayPanel.PrependContent = function (displayPanel, viewElements) {

        // Get Display Panel body
        var body = Common.Query('.gtc-displaypanel-body', displayPanel);

        // Build Content
        var displayPanelMarkup = BuildContent(displayPanel, viewElements);

        // Prepend
        Common.InsertHTMLString(body, Common.InsertType.Prepend, displayPanelMarkup);
        Common.RetranslatePage();
        var panelChildren = Common.QueryAll('.gtc-displaydetail', body);
        Velocity(panelChildren, 'slideDown', 'slow');

    };

    /**
     * @function DisplayPanel.RemoveContent
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @param {object[]} viewElements -  An array that contains one or more DisplayDetail View Elements in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @description Removes a set of DisplayDetails from the DisplayPanel
     */
    DisplayPanel.RemoveContent = function (displayPanel, viewElements, promises) {

        var displayDetail, index = 0, length;
        if (Common.IsDefined(viewElements) && viewElements.length > 0) {
            length = viewElements.length;
            for ( ; index < length; index++) {
                displayDetail = viewElements[index];
                var displayDetailId = displayDetail.Name;
                if (Common.IsDefined(displayDetail.Id)) {
                    displayDetailId += Common.SanitizeToken(displayDetail.Id);
                }
                DisplayDetail.RemoveElement(Common.Query('#' + displayDetailId, displayPanel), promises);
            }
        }
        else {
            var displayDetails = Common.QueryAll('.gtc-displaydetail', displayPanel);
            length = displayDetails.length;
            for ( ; index < length; index++) {
                displayDetail = displayDetails[index];
                DisplayDetail.RemoveElement(displayDetail, promises);
            }
        }

    };

    /**
     * @function DisplayPanel.UpdateDisplayNoItems
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Displays "No Items to Display" in the DisplayPanel
     */
    DisplayPanel.UpdateDisplayNoItems = function (displayPanel, promises, context) {

        if (Common.HasClass(displayPanel, 'gtc-displaypanel-displaynoitems') && Common.QueryAll('.gtc-displaydetail', displayPanel).length == 0) {
            var animationPromise = Common.Promise();
            promises.push(animationPromise.promise);

            // Get Display Panel body
            var body = Common.Query('.gtc-displaypanel-body', displayPanel);

            // Build and insert no items to display
            var displayPanelMarkup = NoItemsToDisplay(true);
            Common.InsertHTMLString(body, Common.InsertType.Append, displayPanelMarkup);
            Velocity(Common.Query('.gtc-displaydetail-noitems', displayPanel), 'slideDown', 'slow',
                function () {
                    animationPromise.resolve();
                }
            );
            Common.RetranslatePage();
        }

    };

    /**
     * @function DisplayPanel.ShowPinwheel
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @description Shows Pinwheel on the View Element
     */
    DisplayPanel.ShowPinwheel = function (displayPanel) {
    };

    /**
     * @function DisplayPanel.HidePinwheel
     * @param {object} displayPanel - The DisplayPanel DOM element
     * @description Hides Pinwheel on the View Element
     */
    DisplayPanel.HidePinwheel = function (displayPanel) {
    };

    // Private Methods
    function ReplaceDisplayDetails (displayPanel, body, viewElements, promises, animationHidePromise, context) {

        // Remove all display details
        var displayDetails = Common.QueryAll('.gtc-displaydetail', body);
        Common.Remove(displayDetails);

        // Render new display details and append
        if (Common.IsDefined(viewElements) && viewElements.length > 0) {
            var displayDetail, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                displayDetail = viewElements[index];
                var animationPromise = Common.Promise();
                promises.push(animationPromise.promise);
                var displayDetailNamespace = window[displayDetail.Type.toString()];
                displayDetail.IsDisplayed = 'No';
                var displayPanelMarkup = displayDetailNamespace.Render(displayDetail);
                var insertedMarkup = Common.InsertHTMLString(body, Common.InsertType.Append, displayPanelMarkup, displayDetail.Name);

                // For loops have no scope! Give it some. (IIFE)
                (function (insertedMarkup, animationPromise) {

                    Velocity(insertedMarkup, 'slideDown', 'slow',
                        function () {
                            animationPromise.resolve();
                        }
                    );

                }(insertedMarkup, animationPromise));
            }
            animationHidePromise.resolve();
            Common.RetranslatePage();
        }
        else {
            DisplayPanel.UpdateDisplayNoItems(displayPanel, promises, context);
            animationHidePromise.resolve();
        }

    };

    function NoItemsToDisplay (isHidden) {

        var hiddenStyle = '';
        if (isHidden == true) {
            hiddenStyle = ' style="display: none;"';
        }
        return '<div class="gtc-displaydetail gtc-displaydetail-noitems"' + hiddenStyle + '><p data-translate="NoItemsToDisplay">' + Common.TranslateKey('NoItemsToDisplay') + '</p></div>';

    };

    function BuildContent (displayPanel, viewElements, isPaging) {

        // Remove no items if it exists
        var noItemsDetail = Common.Query('.gtc-displaydetail-noitems', displayPanel);
        if (Common.IsDefined(noItemsDetail)) {
            Velocity(noItemsDetail, 'slideUp', 'slow',
                function () {
                    Common.Remove(noItemsDetail);
                }
            );
        }

        // Build Markup
        var displayPanelMarkup = '';
        if (Common.IsDefined(viewElements)) {
            var displayDetail, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                displayDetail = viewElements[index];
                if (isPaging != true) {
                    displayDetail.IsDisplayed = 'No';
                }
                var displayDetailNamespace = window[displayDetail.Type.toString()];
                displayPanelMarkup += displayDetailNamespace.Render(displayDetail);
            }
        }
        return displayPanelMarkup;

    };

    function SetScrolling (displayPanelName) {

        var displayPanelElement = Common.Get(displayPanelName);
        var hasStickyRegion = Common.QueryAll('[data-region-sticky="true"]').length > 0 ? true : false;
        var spinHtml = '<div class="gtc-loader" id="' + displayPanelName + 'LoadingOnScroll"><i class="gtc-icon-styles fa fa-circle-o-notch fa-spin"></i></div>';

        // Attach scroll event
        Events.On(window, 'scroll.paging' + displayPanelName + '.' + displayPanelName,
            function (event) {
                HandleScrollEvent(displayPanelElement, hasStickyRegion, spinHtml);
            }
        );

        // Attach wheel event
        Events.On(displayPanelElement, 'wheel.paging' + displayPanelName + '.' + displayPanelName,
            function (event) {
                if (event.originalEvent.deltaY < 0) {
                    return;
                }
                HandleScrollEvent(displayPanelElement, hasStickyRegion, spinHtml);
            }
        );

    };

    function HandleScrollEvent (displayPanelElement, hasStickyRegion, spinHtml) {

        if (!scrollSemaphore) {
            if (hasStickyRegion) {
                var scrollHeight = this.scrollHeight;
                var offset = this.scrollTop + this.offsetHeight;
                if (offset >= scrollHeight) {
                    scrollSemaphore = true;
                    Common.InsertHTMLString(displayPanelElement, Common.InsertType.Append, spinHtml);
                    DisplayPanel.OnScroll(displayPanelElement, Common.GetAttr(displayPanelElement, 'data-pagenumber'));
                }
            }
            else {
                if (Math.round(window.pageYOffset) == Common.Height(document) - Common.Height(window)) {
                    scrollSemaphore = true;
                    Common.InsertHTMLString(displayPanelElement, Common.InsertType.Append, spinHtml);
                    DisplayPanel.OnScroll(displayPanelElement, Common.GetAttr(displayPanelElement, 'data-pagenumber'));
                }
            }
        }

    };

    function RemoveOnScrollLoader (delayValue) {

        // Remove loader
        var loaders = Common.QueryAll('.gtc-loader');
        if (loaders.length > 0) {
            Velocity(loaders, 'slideUp',
                {
                    delay: delayValue,
                    duration: 'slow',
                    complete: function () {
                        Common.Remove(this);
                        scrollSemaphore = false;
                    }
                }
            );
        }
        else {
            scrollSemaphore = false;
        }

    };

} (window.DisplayPanel = window.DisplayPanel || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class DisplayDetail
 * @classdesc Supports the DisplayDetail View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (DisplayDetail, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function DisplayDetail.Render
     * @param {object} displayDetail - The DisplayDetail View Element in JSON format
     * @description Generates the HTML markup for the DisplayDetail View Element 
     * @returns {string} HTML Markup of the DisplayDetail View Element
     * @listens click (id = <var>displayDetailName</var>Image)
     * @listens click (id = <var>displayDetailName</var>)
     * @listens focucin (id = <var>displayDetailName</var>)
     * @listens focusout (id = <var>displayDetailName</var>)
     * @fires click (DisplayDetail) 
     */
    DisplayDetail.Render = function (displayDetail) {

        // Build class name
        var className = 'gtc-displaydetail';
        if (Common.IsDefined(displayDetail.ImageSource)) {
            className += ' gtc-displaydetail-image';
        }
        if (displayDetail.DisplayDetailType == 'SingleItem') {
            displayDetail.DisplayItemsPerLine = 1;
            displayDetail.IsExpandable = 'No';
            className += ' gtc-displaydetail-inline';
        }
        else if (displayDetail.IsExpandable == 'Yes') {
            className += ' gtc-displaydetail-expands';
        }

        // Is Open?
        var expanded = 'false';
        var displayStyle = '';
        var expandedClass = '';
        var rotateClass = '';
        if (displayDetail.IsExpandable == 'Yes' && displayDetail.IsOpen == 'Yes') {
            expanded = 'true';
            displayStyle = ' style="display:block;"';
            expandedClass = ' gtc-displaydetail-expandable-open';
            rotateClass = ' fa-rotate-270';
        }

        // Div@, TabIndex@, Class@, Id@, Div>
        var displayDetailMarkup = '<div data-namespace="DisplayDetail" class="' + className + ' gtc-columns-' + displayDetail.DisplayItemsPerLine;
        if (Common.IsDefined(displayDetail.DisplayDetailType)) {
            displayDetailMarkup += ' gtc-displaydetail-' + displayDetail.DisplayDetailType.toLowerCase();
        }
        displayDetailMarkup += expandedClass + '"';

        // Image Click
        if (Common.IsDefined(displayDetail.ImageSource) && Common.IsDefined(displayDetail.OnImageClick)) {
            displayDetailMarkup += ' data-imageclick=\'' + JSON.stringify(displayDetail.OnImageClick) + '\'';
        }

        // UiParameters
        if (Common.IsDefined(displayDetail.UiParameters)) {
            displayDetailMarkup += ' data-uiparameters=\'' + JSON.stringify(displayDetail.UiParameters) + '\'';
        }

        // Display Items Per Line
        displayDetailMarkup += ' data-displayitemsperline="' + displayDetail.DisplayItemsPerLine + '"';

        // Id?
        var viewModelId = null;
        if (Common.IsDefined(displayDetail.Id)) {
            // View Model
            var viewModel = {
                Name: displayDetail.Name,
                Value: displayDetail.Id
            };

            // Update name to be unique
            viewModelId = Common.SanitizeToken(displayDetail.Id);
            displayDetail.Name += viewModelId;

            // Data-ViewModel@
            displayDetailMarkup += ' data-viewmodel=\'' + JSON.stringify(viewModel) + '\'';
        }
        displayDetailMarkup += ViewElement.RenderAttributes(displayDetail) + '>';

        // Title
        if (Common.IsDefined(displayDetail.Title)) {
            displayDetailMarkup += '<h3 id="' + displayDetail.Name + 'Title" class="gtc-page-theme-color" data-translate="' + displayDetail.Title + '">' + Common.TranslateKey(displayDetail.Title) + '</h3>';
        }

        // Div<>
        displayDetailMarkup += '<div class="gtc-displaydetail-body">';

        // Image Source
        if (Common.IsDefined(displayDetail.ImageSource)) {
            var imageSource = "";
            var dataImage = (Common.IsDefined(displayDetail.ImageSource) && displayDetail.ImageSource.indexOf('data:') == 0) ? true : false;
            if (dataImage) {
                imageSource = displayDetail.ImageSource;
            }
            else {
                imageSource = Common.BuildResourcePath(displayDetail.ImageSource);
            }
            displayDetailMarkup += '<img class="gtc-displaydetail-image" id="' + displayDetail.Name + 'Image" src="' + imageSource + '"';

            // Image Click
            if (Common.IsEventViewElementDefined(displayDetail.OnImageClick)) {
                Events.On(document.body, 'click.' + displayDetail.Name + 'Image', '#' + displayDetail.Name + 'Image', DisplayDetail.OnImageClick);
                displayDetailMarkup += ' style="cursor:pointer"';
            }
            displayDetailMarkup += ' />';
        }

        // Display Items
        if (Common.IsDefined(displayDetail.DisplayItems)) {
            // Find length of items
            var displayItemCount = displayDetail.DisplayItems.length;
            var itemsPerLineInt = parseInt(displayDetail.DisplayItemsPerLine, 10);
            var itemSpanInt = 0;

            // Count spans and cache index
            var itemSpanCount = 0;
            var lastUnrenderedIndex = null;

            // Ol<>
            displayDetailMarkup += '<div class="gtc-displaydetail-content"><ol class="gtc-displaydetail-row">';

            // Display Fields
            var displayItem, displayItemIndex = 0, displayItemNamespace;
            for ( ; displayItemIndex < displayItemCount; displayItemIndex++) {
                displayItem = displayDetail.DisplayItems[displayItemIndex];
                itemSpanInt = parseInt(displayItem.ItemSpan, 10);

                // Expandable?
                if (displayDetail.IsExpandable == 'Yes' && itemSpanCount >= itemsPerLineInt) {
                    lastUnrenderedIndex = displayItemIndex;
                    break;
                }

                // Stop item spans greater than items per line or apply row spans
                if (displayItem.SpanRow == 'Yes' || displayDetail.DisplayDetailType == 'SingleItem' || itemSpanInt > itemsPerLineInt) {
                    displayItem.ItemSpan = displayDetail.DisplayItemsPerLine;
                }

                // Give Rich Text Display Items unique ids for initialization
                if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                    // Update name to be unique
                    displayItem.Name += viewModelId;
                }

                // Build Display Item
                displayItemNamespace = window[displayItem.Type.toString()];
                displayDetailMarkup += displayItemNamespace.Render(displayItem, displayDetail);

                // Add to item span count
                itemSpanCount += itemSpanInt;

                // Append Line?
                if (displayItem.AppendLine == 'Yes' && displayItemCount != displayItemIndex + 1) {
                    displayDetailMarkup += '</ol><ol class="gtc-displaydetail-row">';
                }
            }

            // Ol</>, Div</>
            displayDetailMarkup += '</ol></div>';

            // Add expandable section and wire slide
            if (displayDetail.IsExpandable == 'Yes') {
                displayDetailMarkup += '<div aria-expanded="' + expanded + '" class="gtc-displaydetail-expandable"' + displayStyle + '><ol class="gtc-displaydetail-row">';
                if (Common.IsDefined(lastUnrenderedIndex)) {
                    var index = lastUnrenderedIndex, length = displayDetail.DisplayItems.length;
                    for ( ; index < length; index++) {
                        displayItem = displayDetail.DisplayItems[index];
                        displayItemNamespace = window[displayItem.Type.toString()];

                        // Stop item spans greater than items per line or apply row spans
                        if (displayItem.SpanRow == 'Yes' || itemSpanInt > itemsPerLineInt) {
                            displayItem.ItemSpan = displayDetail.DisplayItemsPerLine;
                        }

                        // Give Rich Text Display Items unique ids for initialization
                        if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                            // Update name to be unique
                            displayItem.Name += viewModelId;
                        }

                        // Render
                        displayDetailMarkup += displayItemNamespace.Render(displayItem, displayDetail);

                        // Append Line?
                        if (displayItem.AppendLine == 'Yes' && displayDetail.DisplayItems.length != index + 1) {
                            displayDetailMarkup += '</ol><ol class="gtc-displaydetail-row">';
                        }
                    }
                }
                displayDetailMarkup += '</ol></div>';

                Events.On(document.body, 'click.' + displayDetail.Name, '#' + displayDetail.Name,
                    function (event) {
                        var eventTarget = event.target;
                        if (!Common.HasClass(eventTarget, 'gtc-displaydetail-footer') && !Common.HasClass(eventTarget, 'gtc-displaydetail-image') && Common.IsNotDefined(Common.Closest('.gtc-displaydetail-footer', eventTarget))) {
                            event.preventDefault();
                            var displayDetailExpandable = Common.Query('.gtc-displaydetail-expandable', this);
                            if (Common.IsDefined(Common.QueryAll('.gtc-displaydetail-column', displayDetailExpandable))) {
                                if (Common.IsHidden(displayDetailExpandable)) {
                                    Velocity(displayDetailExpandable, 'slideDown', 'slow',
                                        function () {
                                            Page.SetPageHeight();
                                        }
                                    );
                                    Common.AddClass(Common.Query('.gtc-displaydetail-expandable-icon', this), 'fa-rotate-270');
                                    Common.AddClass(this, 'gtc-displaydetail-expandable-open');
                                    Common.SetAttr(displayDetailExpandable, 'aria-expanded', 'true');
                                }
                                else {
                                    Velocity(displayDetailExpandable, 'slideUp', 'slow',
                                        function () {
                                            Page.SetPageHeight();
                                        }
                                    );
                                    Common.RemoveClass(Common.Query('.gtc-displaydetail-expandable-icon', this), 'fa-rotate-270');
                                    Common.RemoveClass(this, 'gtc-displaydetail-expandable-open');
                                    Common.SetAttr(displayDetailExpandable, 'aria-expanded', 'false');
                                }
                            }
                        }
                    }
                );

                // 508 Compliance - Focus In/Focus Out
                Events.On(document.body, 'focusin.' + displayDetail.Name, '#' + displayDetail.Name,
                    function (event) {
                        Events.On(document, 'keyup.' + displayDetail.Name,
                            function (keyupEvent) {
                                var pressedKeyCode = (keyupEvent.keyCode ? keyupEvent.keyCode : keyupEvent.which);
                                if (pressedKeyCode == GTC.Keyboard.Enter) {
                                    var element = Common.Get(displayDetail.Name);
                                    Events.Trigger(element, 'click');
                                }
                            }
                        );
                    }
                );
                Events.On(document.body, 'focusout.' + displayDetail.Name, '#' + displayDetail.Name,
                    function (event) {
                        Events.Off(document, 'keyup.' + displayDetail.Name);
                    }
                );
            }
        }

        // Div</>
        if (displayDetail.IsExpandable == 'Yes') {
            displayDetailMarkup += '<i class="gtc-displaydetail-expandable-icon gtc-icon-styles fa fa-share fa-rotate-90' + rotateClass + '"></i>';
        }
        displayDetailMarkup += '</div>';

        // Links
        if (Common.IsDefined(displayDetail.Links) && displayDetail.Links.length > 0) {
            // Div<>
            displayDetailMarkup += '<div class="gtc-displaydetail-footer">';

            // Links
            var link, index = 0, length = displayDetail.Links.length;
            for ( ; index < length; index++) {
                link = displayDetail.Links[index];

                // Id?
                if (Common.IsDefined(displayDetail.Id)) {
                    // Update name to be unique
                    link.Name += Common.SanitizeToken(displayDetail.Id);
                }

                // Li<>, Anchor, Li</>
                displayDetailMarkup += Link.Render(link);
            }

            // Div</>
            displayDetailMarkup += '</div>';
        }

        // Div</>
        displayDetailMarkup += '</div>';

        // Return markup
        return displayDetailMarkup;

    };

    /**
     * @function DisplayDetail.OnImageClick
     * @param {event} event - A DOM click Event
     * @description This method is called when the Image on the DisplayDetail is clicked
     */
    DisplayDetail.OnImageClick = function (event) {

        // Initialize
        var displayDetail = Common.Closest('.gtc-displaydetail', this);
        var onClickParameters = [];

        // Get OnClickEvent object
        var onClickEvent = JSON.parse(Common.GetAttr(displayDetail, 'data-imageclick'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickEvent.FormToSerialize)) {
            onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, displayDetail);

    };

    /**
     * @function DisplayDetail.UpdateImage
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @param {string} value - Image Resource (URL or RFC 2379 Data)
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Image of the DisplayDetail
     */
    DisplayDetail.UpdateImage = function (displayDetail, value, promises, context) {

        // Initialize
        var onParent = context == 'Parent';
        var displayDetailId = displayDetail.id;
        var image = Common.Get(displayDetailId + 'Image', onParent);
        var imageResource;
        var dataImage = (value.indexOf('data:') == 0) ? true : false;
        if (!dataImage) {
            imageResource = Common.BuildResourcePath(value);
        }
        else {
            imageResource = value;
        }

        // Update Image
        Velocity(image, { 'opacity': 0 }, 'slow',
            function () {
                image.src = imageResource;
                Velocity(image, 'reverse', Common.RemoveOpacity);
            }
        );

    };

    /**
     * @function DisplayDetail.UpdateValues
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @param {UiParameter[]} uiParameters - An array of UiParameters with DisplayItem names and values in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Image of the DisplayDetail
     */
    DisplayDetail.UpdateValues = function (displayDetail, uiParameters, promises, context) {

        if (Common.IsDefined(uiParameters)) {
            var displayItem, uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];

                // DisplayItem
                displayItem = Common.Query('#' + uiParameter.Name, displayDetail);

                // Dynamic Rich Text?
                if (Common.IsNotDefined(displayItem)) {
                    // Build display detail object
                    var viewModel = JSON.parse(Common.GetAttr(displayDetail, 'data-viewmodel'));
                    if (Common.IsDefined(viewModel)) {
                        var viewModelId = Common.SanitizeToken(viewModel.Value);
                        displayItem = Common.Query('#' + uiParameter.Name + viewModelId, displayDetail);
                    }
                }

                // Namespace (DisplayItem, CurrencyDisplayItem or EditableDisplayItem)
                var namespace = window[Common.GetAttr(displayItem, 'data-namespace')];
                namespace.UpdateValue(displayItem, uiParameter.Value, promises, context);
            }
        }

    };

    /**
     * @function DisplayDetail.UpdateColors
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @param {UiParameter[]} uiParameters - An array of UiParameters with DisplayItem names and colors in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Image of the DisplayDetail
     */
    DisplayDetail.UpdateColors = function (displayDetail, uiParameters, promises) {

        if (Common.IsDefined(uiParameters)) {
            var displayItem, uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];

                // DisplayItem
                displayItem = Common.Query('#' + uiParameter.Name, displayDetail);

                // Dynamic Rich Text?
                if (Common.IsDefined(displayItem)) {
                    // Build display detail object
                    var viewModel = JSON.parse(Common.GetAttr(displayDetail, 'data-viewmodel'));
                    if (Common.IsDefined(viewModel)) {
                        var viewModelId = Common.SanitizeToken(viewModel.Value);
                        displayItem = Common.Query('#' + uiParameter.Name + viewModelId, displayDetail);
                    }
                }

                // Namespace (DisplayItem, CurrencyDisplayItem or EditableDisplayItem)
                var namespace = window[Common.GetAttr(displayItem, 'data-namespace')];
                namespace.UpdateColor(displayItem, uiParameter.Value, promises);
            }
        }

    };

    /**
     * @function DisplayDetail.ReplaceContent
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @param {object[]} viewElements -  An array that contains one or more DisplayItems View Elements in JSON format
     * @description Replaces a set of DisplayItems in the DisplayDetail
     */
    DisplayDetail.ReplaceContent = function (displayDetail, viewElements) {

        // Build Markup
        var displayDetailVisibleMarkup = '';
        var displayDetailExpandableMarkup = '';
        var displayItemsPerLine = parseInt(Common.GetAttr(displayDetail, 'data-displayitemsperline'), 10);

        // Build display detail object
        var viewModelId = null;
        var displayDetailObj = {
            Name: displayDetail.id
        };
        var viewModel = JSON.parse(Common.GetAttr(displayDetail, 'data-viewmodel'));
        if (Common.IsDefined(viewModel)) {
            displayDetailObj.Id = viewModel.Value;
            viewModelId = Common.SanitizeToken(viewModel.Value);
        }

        // Clean delegated events on elements being removed before building HTML which will attach delegated events with same id!
        // Only on children elements since this is replace content.
        var displayDetailContent = Common.Query('.gtc-displaydetail-content', displayDetail);
        var displayDetailExpandable = Common.Query('.gtc-displaydetail-expandable', displayDetail);
        Cache.CleanDelegatedElementsData(displayDetailContent, true);
        if (Common.IsDefined(displayDetailExpandable)) {
            Cache.CleanDelegatedElementsData(displayDetailExpandable, true);
        }

        // Display Items
        if (Common.IsDefined(viewElements) && viewElements.length > 0) {
            // Find length of items
            var displayItemCount = viewElements.length;

            // Count spans and cache index
            var itemSpanCount = 0;
            var lastUnrenderedIndex = null;

            // Ol<>
            displayDetailVisibleMarkup += '<ol class="gtc-displaydetail-row">';

            // Display Fields
            var displayItem, displayItemIndex = 0, itemSpanInt, displayItemNamespace;
            for ( ; displayItemIndex < displayItemCount; displayItemIndex++) {
                displayItem = viewElements[displayItemIndex];
                itemSpanInt = parseInt(displayItem.ItemSpan, 10);

                // Expandable?
                if (Common.HasClass(displayDetail, 'gtc-displaydetail-expands') && itemSpanCount >= displayItemsPerLine) {
                    lastUnrenderedIndex = displayItemIndex;
                    break;
                }

                // Stop item spans greater than items per line or apply row spans
                if (displayItem.SpanRow == 'Yes' || Common.HasClass(displayDetail, 'gtc-displaydetail-inline') || itemSpanInt > displayItemsPerLine) {
                    displayItem.ItemSpan = displayItemsPerLine;
                }

                // Give Rich Text Display Items unique ids
                if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                    // Update name to be unique
                    displayItem.Name += viewModelId;
                }

                // Build Display Item
                displayItemNamespace = window[displayItem.Type.toString()];
                displayDetailVisibleMarkup += displayItemNamespace.Render(displayItem, displayDetailObj);

                // Add to item span count
                itemSpanCount += itemSpanInt;

                // Append Line?
                if (displayItem.AppendLine == 'Yes' && displayItemCount != displayItemIndex + 1) {
                    displayDetailVisibleMarkup += '</ol><ol class="gtc-displaydetail-row">';
                }
            }

            // Ol</>
            displayDetailVisibleMarkup += '</ol>';

            // Add expandable section and wire slide
            if (Common.HasClass(displayDetail, 'gtc-displaydetail-expands')) {
                displayDetailExpandableMarkup += '<ol class="gtc-displaydetail-row">';
                if (Common.IsDefined(lastUnrenderedIndex)) {
                    var index = lastUnrenderedIndex, length = viewElements.length;
                    for ( ; index < length; index++) {
                        displayItem = viewElements[index];
                        displayItemNamespace = window[displayItem.Type.toString()];
                        itemSpanInt = parseInt(displayItem.ItemSpan, 10);

                        // Stop item spans greater than items per line or apply row spans
                        if (displayItem.SpanRow == 'Yes' || itemSpanInt > displayItemsPerLine) {
                            displayItem.ItemSpan = displayItemsPerLine;
                        }

                        // Give Rich Text Display Items unique ids
                        if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                            // Update name to be unique
                            displayItem.Name += viewModelId;
                        }

                        // Render
                        displayDetailExpandableMarkup += displayItemNamespace.Render(displayItem, displayDetailObj);

                        // Append Line?
                        if (displayItem.AppendLine == 'Yes' && viewElements.length != index + 1) {
                            displayDetailExpandableMarkup += '</ol><ol class="gtc-displaydetail-row">';
                        }
                    }
                }
                displayDetailExpandableMarkup += '</ol>';
            }
        }

        // Replace Content
        if (Common.IsDefined(displayDetailContent)) {
            Common.Remove(displayDetailContent.children);
        }
        if (Common.IsDefined(displayDetailExpandable)) {
            Common.Remove(displayDetailExpandable.children);
        }
        displayDetailContent.appendChild(Common.GenerateFragment(displayDetailVisibleMarkup));
        if (Common.HasClass(displayDetail, 'gtc-displaydetail-expands')) {
            displayDetailExpandable.appendChild(Common.GenerateFragment(displayDetailExpandableMarkup));
        }

    };

    /**
     * @function DisplayDetail.ReplaceElement
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @param {object[]} viewElements - An array that contains one DisplayDetail View Element in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @description Replaces the DisplayDetail
     */
    DisplayDetail.ReplaceElement = function (displayDetail, viewElements, promises) {

        // Animation Promise
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Remove delegated events before building HTML which will attach delegated events with same id!
        Cache.CleanDelegatedElementsData(displayDetail);

        // Build Markup
        var displayDetailMarkup = '';
        if (Common.IsDefined(viewElements)) {
            var viewElement = viewElements[0];
            viewElement.IsDisplayed = 'No';
            var displayDetailNamespace = window[viewElement.Type.toString()];
            displayDetailMarkup += displayDetailNamespace.Render(viewElement);
        }

        // Replace
        Velocity(displayDetail, 'slideUp', 'slow',
            function () {
                Common.InsertHTMLString(displayDetail, Common.InsertType.After, displayDetailMarkup);
                var insertedDetail = displayDetail.nextElementSibling;
                Velocity(insertedDetail, 'slideDown', 'slow',
                    function () {
                        animationPromise.resolve();
                    }
                );

                // Remove display detail and cleanup cache but ignore delegated events since they were already removed and reattached with same id!
                Common.Remove(displayDetail, false, true);
            }
        );

    };

    /**
     * @function DisplayDetail.AppendContent
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @param {object[]} viewElements -  An array that contains one or more DisplayItems View Elements in JSON format
     * @description Appends a set of DisplayItems to the DisplayDetail
     */
    DisplayDetail.AppendContent = function (displayDetail, viewElements) {

        // Build Content
        var displayDetailMarkup = BuildContent(displayDetail, viewElements);

        // Append Content
        Common.InsertHTMLString(Common.Query('.gtc-displaydetail-content', displayDetail).lastChild, Common.InsertType.Append, displayDetailMarkup);

    };

    /**
     * @function DisplayDetail.PrependContent
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @param {object[]} viewElements -  An array that contains one or more DisplayItems View Elements in JSON format
     * @description Prepends a set of DisplayItems to the DisplayDetail
     */
    DisplayDetail.PrependContent = function (displayDetail, viewElements) {

        // Build Content
        var displayDetailMarkup = BuildContent(displayDetail, viewElements);

        // Prepend Content
        Common.InsertHTMLString(Common.Query('.gtc-displaydetail-content', displayDetail).lastChild, Common.InsertType.Prepend, displayDetailMarkup);

    };

    /**
     * @function DisplayDetail.RemoveElement
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @description Removes the DisplayDetail
     */
    DisplayDetail.RemoveElement = function (displayDetail, promises) {

        // Get deferred object for animation
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Parent Panel?
        var displayPanel = Common.Closest('.gtc-displaypanel', displayDetail);

        // Animate
        Velocity(displayDetail, 'slideUp', 600,
            function () {
                Common.Remove(displayDetail);
                DisplayPanel.UpdateDisplayNoItems(displayPanel, promises);
                animationPromise.resolve();
            }
        );

    };

    /**
     * @function DisplayDetail.UpdateTitle
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @param {string} updatedTitle - The new Title of the DisplayDetail
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Title of the DisplayDetail
     */
    DisplayDetail.UpdateTitle = function (displayDetail, updatedTitle, promises, context) {

        var onParent = context == 'Parent';
        var title = Common.Get(displayDetail.id + 'Title', onParent);
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(updatedTitle);
            Common.SetAttr(title, 'data-translate', updatedTitle);
        };
        if (Common.IsHidden(displayDetail)) {
            updateTitleFunction();
        }
        else {
            // Get deferred object for animation
            var animationPromise = Common.Promise();
            promises.push(animationPromise.promise);

            // Animate
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    /**
     * @function DisplayDetail.ShowPinwheel
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @description Shows Pinwheel on the View Element
     */
    DisplayDetail.ShowPinwheel = function (displayDetail) {
    };

    /**
     * @function DisplayDetail.HidePinwheel
     * @param {object} displayDetail - The DisplayDetail DOM element
     * @description Hides Pinwheel on the View Element
     */
    DisplayDetail.HidePinwheel = function (displayDetail) {
    };

    // Private Methods
    function BuildContent (displayDetail, viewElements) {

        // Build display detail object
        var viewModelId = null;
        var detailObject = {
            Name: displayDetail.id
        };
        var viewModel = JSON.parse(Common.GetAttr(displayDetail, 'data-viewmodel'));
        if (Common.IsDefined(viewModel)) {
            detailObject.Id = viewModel.Value;
            viewModelId = Common.SanitizeToken(viewModel.Value);
        }

        // Build Markup
        var displayDetailMarkup = '';
        var displayItem, displayItemIndex = 0, length = viewElements.length;
        for ( ; displayItemIndex < length; displayItemIndex++) {
            displayItem = viewElements[displayItemIndex];

            // Give Rich Text Display Items unique ids
            if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                // Update name to be unique
                displayItem.Name += viewModelId;
            }

            // Display Item
            var displayItemNamespace = window[displayItem.Type.toString()];
            displayDetailMarkup += displayItemNamespace.Render(displayItem, detailObject);
            if (displayItem.AppendLine == 'Yes' && viewElements.length != displayItemIndex + 1) {
                displayDetailMarkup += '</ol><ol class="gtc-displaydetail-row">';
            }
        }
        return displayDetailMarkup;

    };

} (window.DisplayDetail = window.DisplayDetail || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class DisplayItem
 * @classdesc Supports the DisplayItem View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (DisplayItem, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function DisplayItem.Render
     * @param {object} displayItem - The DisplayItem View Element in JSON format
     * @param {object} displayDetail - A DisplayDetail View Element in JSON format
     * @description Generates the HTML markup for the DisplayItem View Element 
     * @returns {string} HTML Markup of the DisplayItem View Element
     */
    DisplayItem.Render = function (displayItem, displayDetail) {

        var className = '';
        if (Common.IsDefined(displayItem.ItemSpan)) {
            className = ' gtc-columns-' + displayItem.ItemSpan;
        }

        // Li<, TabIndex@, Class@, @Data-TranslateContent, Id@
        var displayItemMarkup = '<li data-namespace="DisplayItem" class="gtc-displaydetail-column' + className + '" data-translatecontent="' + displayItem.TranslateContent + '"' + ViewElement.RenderAttributes(displayItem);

        // Data-Mask@
        if (Common.IsDefined(displayItem.Mask)) {
            displayItemMarkup += ' data-mask="' + displayItem.Mask + '"';
        }

        // Li>
        displayItemMarkup += '>';

        // Color
        if (Common.IsDefined(displayItem.TextColor)) {
            displayItemMarkup += '<style>';
            displayItemMarkup += '#' + displayDetail.Name + ' #' + displayItem.Name + ' > .gtc-displaydetail-item { ';
            if (Common.IsDefined(displayItem.TextColor)) {
                displayItemMarkup += 'color: ' + Colors.ProcessValue(displayItem.TextColor, false, null) + ';';
            }
            displayItemMarkup += ' }';
            displayItemMarkup += '</style>';
        }

        if (Common.IsDefined(displayItem.Label) && displayItem.Label.length > 0) {
            // Span<>, Label, Span</>
            displayItemMarkup += '<span class="gtc-displaydetail-item-head"';

            // Translations and Label masking
            var dateRegex = new RegExp(/\/Date\((-?\d+)\)\//gi);
            var isDate = dateRegex.test(displayItem.Label);
            if (!isDate) {
                displayItemMarkup += ' data-translate="' + displayItem.Label + '"';
            }

            if (isDate && Common.IsDefined(displayItem.Mask)) {
                var formatResult = Mask.Format(displayItem.Label, Mask.BuildMaskingOptions(displayItem.Mask));
                displayItemMarkup += '>' + formatResult.Text + '</span>';
            }
            else {
                displayItemMarkup += '>' + Common.TranslateKey(displayItem.Label) + '</span>';
            }
        }

        // Sanity Check
        displayItem.Value = (Common.IsNotDefined(displayItem.Value)) ? '' : displayItem.Value;

        // Mask
        var displayValue = Common.Decode(displayItem.Value);
        if (Common.IsDefined(displayItem.Mask) && displayItem.Value.length > 0) {
            var formatResult = Mask.Format(displayItem.Value, Mask.BuildMaskingOptions(displayItem.Mask), true);
            displayValue = formatResult.Text;
        }

        // Span<>, Value, Span</>
        displayItemMarkup += '<span class="gtc-displaydetail-item"';
        if (displayItem.TranslateContent == 'Yes') {
            displayItemMarkup += ' data-translate="' + displayValue + '">' + Common.TranslateKey(displayValue) + '</span>';
        }
        else {
            displayItemMarkup += '>' + displayValue + '</span>';
        }

        // Li</>
        displayItemMarkup += '</li>';
        return displayItemMarkup;

    };

    /**
     * @function DisplayItem.UpdateValue
     * @param {object} displayItem - The DisplayItem DOM element
     * @param {string} fieldValue - The new Value of the DisplayItem
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @description Updates the Value of the DisplayItem
     */
    DisplayItem.UpdateValue = function (displayItem, fieldValue, promises) {

        // Animation hide promise
        var animationHidePromise = Common.Promise();
        promises.push(animationHidePromise.promise);

        // Sanity Check
        fieldValue = (Common.IsNotDefined(fieldValue)) ? '' : fieldValue;

        // Initialize
        var spanValue = Common.Query('.gtc-displaydetail-item', displayItem);
        if (!spanValue.GTCDisplayItemUpdatingColor) {
            spanValue.GTCDisplayItemUpdatingValue = true;
        }

        // Check for Mask, Set data-translate (for value), or Decode Value
        var maskString = Common.GetAttr(displayItem, 'data-mask');
        if (Common.IsString(maskString) && maskString.length > 0 && fieldValue.length > 0) {
            formatResult = Mask.Format(fieldValue, Mask.BuildMaskingOptions(maskString), true);
            fieldValue = formatResult.Text;
        }
        else {
            if (Common.GetAttr(displayItem, 'data-translatecontent') == 'Yes') {
                Common.SetAttr(spanValue, 'data-translate', fieldValue);
                fieldValue = Common.Decode(Common.TranslateKey(fieldValue));
            }
            else {
                fieldValue = Common.Decode(fieldValue);
            }
        }

        // Set Value
        if (spanValue.GTCDisplayItemUpdatingValue) {
            Velocity(spanValue, { 'opacity': 0 }, 'slow',
                function () {
                    var animationPromise = Common.Promise();
                    promises.push(animationPromise.promise);
                    spanValue.textContent = fieldValue;
                    Velocity(spanValue, 'reverse',
                        function () {
                            Common.RemoveOpacity(spanValue);
                            animationHidePromise.resolve();
                            animationPromise.resolve();
                            spanValue.GTCDisplayItemUpdatingValue = false;
                        }
                    );
                }
            );
        }
        else {
            spanValue.textContent = fieldValue;
            spanValue.GTCDisplayItemUpdatingValue = false;
            animationHidePromise.resolve();
        }

    };

    /**
     * @function DisplayItem.UpdateColor
     * @param {object} displayItem - The DisplayItem DOM element
     * @param {string} colorValue - The new color of the Value in the DisplayItem
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @description Updates the color of the Value of the DisplayItem
     */
    DisplayItem.UpdateColor = function (displayItem, colorValue, promises) {

        // Animation hide promise
        var animationHidePromise = Common.Promise();
        promises.push(animationHidePromise.promise);

        // Set Color
        var spanValue = Common.Query('.gtc-displaydetail-item', displayItem);
        if (!spanValue.GTCDisplayItemUpdatingValue) {
            spanValue.GTCDisplayItemUpdatingColor = true;
        }
        if (spanValue.GTCDisplayItemUpdatingColor) {
            Velocity(spanValue, { 'opacity': 0 }, 'slow',
                function () {
                    var animationPromise = Common.Promise();
                    promises.push(animationPromise.promise);
                    spanValue.style.color = Colors.ProcessValue(colorValue, false, null);
                    Velocity(spanValue, 'reverse',
                        function () {
                            Common.RemoveOpacity(spanValue);
                            animationHidePromise.resolve();
                            animationPromise.resolve();
                            spanValue.GTCDisplayItemUpdatingColor = false;
                        }
                    );
                }
            );
        }
        else {
            spanValue.style.color = Colors.ProcessValue(colorValue, false, null);
            spanValue.GTCDisplayItemUpdatingColor = false;
            animationHidePromise.resolve();
        }

    };

} (window.DisplayItem = window.DisplayItem || {}, window, document, Common, Cache, Events, Velocity));
// Rich Text Display Item
// Based On: RichTextDisplayItem -> DisplayItem -> ViewElement
(function (RichTextDisplayItem, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var defaultSanitizationPolicy;

    // Public Methods
    RichTextDisplayItem.Render = function (richTextDisplayItem, displayDetail) {

        var className = '';
        if (Common.IsDefined(richTextDisplayItem.ItemSpan)) {
            className = ' gtc-columns-' + richTextDisplayItem.ItemSpan;
        }

        // Li<, TabIndex@, Class@, Id@, </li>
        var displayItemMarkup = '<li data-namespace="RichTextDisplayItem" class="gtc-displaydetail-column' + className + ' gtc-richtextdisplayitem"' + ViewElement.RenderAttributes(richTextDisplayItem) + '>';

        if (Common.IsDefined(richTextDisplayItem.Label) && richTextDisplayItem.Label.length > 0) {
            // Span<>, Label, Span</>
            displayItemMarkup += '<span class="gtc-displaydetail-item-head"';

            // Translations and Label masking
            var dateRegex = new RegExp(/\/Date\((-?\d+)\)\//gi);
            var isDate = dateRegex.test(richTextDisplayItem.Label);
            if (!isDate) {
                displayItemMarkup += ' data-translate="' + richTextDisplayItem.Label + '"';
            }

            if (isDate && Common.IsDefined(richTextDisplayItem.Mask)) {
                var formatResult = Mask.Format(richTextDisplayItem.Label, Mask.BuildMaskingOptions(richTextDisplayItem.Mask));
                displayItemMarkup += '>' + formatResult.Text + '</span>';
            }
            else {
                displayItemMarkup += '>' + Common.TranslateKey(richTextDisplayItem.Label) + '</span>';
            }
        }

        // Sanity Check
        richTextDisplayItem.Value = (Common.IsNotDefined(richTextDisplayItem.Value)) ? '' : richTextDisplayItem.Value;

        // Span<>, Value, Span</>
        displayItemMarkup += '<span id="' + richTextDisplayItem.Name + 'DisplayArea" class="gtc-displaydetail-item">';
        var decodedHtml = '';
        if (Common.IsDefined(window['html'])) {
            defaultSanitizationPolicy = html.makeTagPolicy();
            decodedHtml = html.sanitizeWithPolicy(Common.Decode(richTextDisplayItem.Value), CustomSanitizationPolicy);
        }
        else if (Common.IsDefined(window.parent['html'])) {
            defaultSanitizationPolicy = window.parent.html.makeTagPolicy();
            decodedHtml = window.parent.html.sanitizeWithPolicy(Common.Decode(richTextDisplayItem.Value), CustomSanitizationPolicy);
        }
        displayItemMarkup += decodedHtml;
        displayItemMarkup += '</span>';

        // Li</>
        displayItemMarkup += '</li>';
        return displayItemMarkup;

    };

    RichTextDisplayItem.UpdateValue = function (displayItem, richTextValue, promises) {

        // Animation hide promise
        var animationHidePromise = Common.Promise();
        promises.push(animationHidePromise.promise);

        // Sanity Check
        richTextValue = (Common.IsNotDefined(richTextValue)) ? '' : richTextValue;

        // Set Value
        var displayItemId = displayItem.id;
        var displayArea = Common.Get(displayItemId + 'DisplayArea');
        if (Common.IsNotDefined(displayArea)) {
            displayArea = Common.Query('#' + displayItemId + 'DisplayArea', displayItem);
        }
        Velocity(displayArea, { 'opacity': 0 }, 'slow',
            function () {
                var animationPromise = Common.Promise();
                promises.push(animationPromise.promise);
                var decodedHtml = '';
                if (Common.IsDefined(window['html'])) {
                    defaultSanitizationPolicy = html.makeTagPolicy();
                    decodedHtml = html.sanitizeWithPolicy(Common.Decode(richTextValue), CustomSanitizationPolicy);
                }
                else if (Common.IsDefined(window.parent['html'])) {
                    defaultSanitizationPolicy = window.parent.html.makeTagPolicy();
                    decodedHtml = window.parent.html.sanitizeWithPolicy(Common.Decode(richTextValue), CustomSanitizationPolicy);
                }
                displayArea.innerHTML = decodedHtml;

                // Show updated content
                Velocity(displayArea, 'reverse',
                    function () {
                        Common.RemoveOpacity(displayArea);
                        animationHidePromise.resolve();
                        animationPromise.resolve();
                    }
                );
            }
        );

    };

    // Private Methods
    function CustomSanitizationPolicy (tagName, attribs) {

        // Check for imgs with a base64 data string
        if (tagName == 'img') {
            var srcIndex = attribs.indexOf('src');
            if (srcIndex != -1) {
                var dataValue = attribs[srcIndex + 1];
                if (dataValue.indexOf('data:image/') != -1) {
                    // Still scrub img tag for anything extra
                    var returnObject = defaultSanitizationPolicy(tagName, attribs);

                    // Then put base64 data back
                    returnObject.attribs[srcIndex + 1] = dataValue;
                    return returnObject;
                }
            }
        }

        // Always fall back to the default policy
        return defaultSanitizationPolicy(tagName, attribs);

    };

} (window.RichTextDisplayItem = window.RichTextDisplayItem || {}, window, document, Common, Cache, Events, Velocity));
// File Upload
// Based On: FileUpload -> ViewElement
(function (FileUpload, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods (Note: Some deprecated items are still processed, removal will require Parser changes)
    FileUpload.Render = function (fileUpload) {

        // Div<>
        var fileUploadMarkup = '<div data-namespace="FileUpload" data-configure="Pre" class="gtc-fileupload"' + ViewElement.RenderAttributes(fileUpload) + '>';

        // Title
        if (Common.IsDefined(fileUpload.Title)) {
            fileUploadMarkup += '<h3 class="gtc-page-theme-color" data-translate="' + fileUpload.Title + '">' + Common.TranslateKey(fileUpload.Title) + '</h3>';
        }

        // Div<>, Form<>, Class@, Id@
        fileUploadMarkup += '<div><form class="gtc-classDivFileUpload" id="' + fileUpload.Name + 'Form"' + EventElement.AttachEvent(fileUpload.Name + 'Form', 'upload', fileUpload.OnUpload, FileUpload.OnUpload) + ' data-uploaddirectory="' + fileUpload.SaveDirectory + '"';

        // Upload Tip
        if (Common.IsDefined(fileUpload.UploadTip)) {
            fileUploadMarkup += ' data-uploadtip="' + fileUpload.UploadTip + '"';
        }

        // Save to Disk?
        if (Common.IsDefined(fileUpload.SaveToDisk)) {
            fileUploadMarkup += ' data-savetodisk="' + fileUpload.SaveToDisk + '"';
        }

        // Append Guid to file name on upload?
        if (Common.IsDefined(fileUpload.AppendGuid)) {
            fileUploadMarkup += ' data-appendguid="' + fileUpload.AppendGuid + '"';
        }

        // Serialize Form?
        if (Common.IsDefined(fileUpload.FormToSerialize)) {
            fileUploadMarkup += ' data-formtoserialize="' + fileUpload.FormToSerialize + '"';
        }

        // On Add Event
        if (Common.IsEventViewElementDefined(fileUpload.OnAdd)) {
            // Data-ControllerPath/ActionName
            fileUploadMarkup += ' data-onadd=\'' + JSON.stringify(fileUpload.OnAdd) + '\'';
        }

        // On Remove Event
        if (Common.IsEventViewElementDefined(fileUpload.OnRemove)) {
            // Data-ControllerPath/ActionName
            fileUploadMarkup += ' data-onremove=\'' + JSON.stringify(fileUpload.OnRemove) + '\'';
        }

        // Build options and Attach event for configuring upload
        var options = {};
        if (fileUpload.SelectMultipleFiles == 'Yes') {
            options.UploadMultiple = true;
        }
        if (Common.IsDefined(fileUpload.MaximumParallelUploads) && !isNaN(fileUpload.MaximumParallelUploads) && parseInt(fileUpload.MaximumParallelUploads, 10) > 0) {
            options.ParallelUploads = fileUpload.MaximumParallelUploads;
        }
        Events.One(document.body, 'configurefileupload',
            function (event) {
                Widgets.uploadfiles(Common.Get(fileUpload.Name + 'Form'), options);
            }
        );

        // Form</>, Div</>, Div</>
        fileUploadMarkup += '></form></div></div>';
        return fileUploadMarkup;

    };

    FileUpload.Configure = function (fileUpload, configureStage) {

        Events.Trigger(fileUpload, 'configurefileupload');

    };

    FileUpload.OnUpload = function (event) {
    };

    FileUpload.OnAdd = function (element, file) {

        var onAddEvent = JSON.parse(Common.GetAttr(element, 'data-onadd'));
        if (Common.IsDefined(onAddEvent)) {
            // File Values
            var fileValuesUiParameters = [
                {
                    Name: 'FileName',
                    Value: file.name,
                    UiParameters: null
                },
                {
                    Name: 'FileSize',
                    Value: file.size,
                    UiParameters: null
                },
                {
                    Name: 'FileType',
                    Value: file.type,
                    UiParameters: null
                }
            ];

            // Initialize
            var onAddParameters = [];

            // Get Add Event
            if (Common.IsDefined(onAddEvent.UiParameters)) {
                onAddParameters = onAddParameters.concat(onAddEvent.UiParameters);
            }

            // Add Parameters
            onAddEvent.FormToSerialize = Common.GetAttr(element, 'data-formtoserialize');
            if (Common.IsDefined(onAddEvent.FormToSerialize)) {
                onAddParameters = onAddParameters.concat(Form.SerializeArray(Common.Get(onAddEvent.FormToSerialize)));
                if (Common.Closest('form', element).id != onAddEvent.FormToSerialize) {
                    onAddParameters = onAddParameters.concat(fileValuesUiParameters);
                }
            }
            else {
                onAddParameters = onAddParameters.concat(fileValuesUiParameters);
            }

            // Execute View Behavior
            Common.ExecuteViewBehavior(onAddEvent.ControllerPath + onAddEvent.ActionName, onAddParameters, Page.RunInstructions, element);
        }

    };

    FileUpload.OnRemove = function (element, file) {

        var onRemoveEvent = JSON.parse(Common.GetAttr(element, 'data-onremove'));
        if (Common.IsDefined(onRemoveEvent)) {
            // File Values
            var fileValuesUiParameters = [
                {
                    Name: 'FileName',
                    Value: file.name,
                    UiParameters: null
                },
                {
                    Name: 'FileSize',
                    Value: file.size,
                    UiParameters: null
                },
                {
                    Name: 'FileType',
                    Value: file.type,
                    UiParameters: null
                }
            ];

            // Initialize
            var onRemoveParameters = [];

            // Get Remove Event
            if (Common.IsDefined(onRemoveEvent.UiParameters)) {
                onRemoveParameters = onRemoveParameters.concat(onRemoveEvent.UiParameters);
            }

            // Add Parameters
            onRemoveEvent.FormToSerialize = Common.GetAttr(element, 'data-formtoserialize');
            if (Common.IsDefined(onRemoveEvent.FormToSerialize)) {
                onRemoveParameters = onRemoveParameters.concat(Form.SerializeArray(Common.Get(onRemoveEvent.FormToSerialize)));
                if (Common.Closest('form', element).id != onRemoveEvent.FormToSerialize) {
                    onRemoveParameters = onRemoveParameters.concat(fileValuesUiParameters);
                }
            }
            else {
                onRemoveParameters = onRemoveParameters.concat(fileValuesUiParameters);
            }

            // Execute View Behavior
            Common.ExecuteViewBehavior(onRemoveEvent.ControllerPath + onRemoveEvent.ActionName, onRemoveParameters, Page.RunInstructions, element);
        }

    };

} (window.FileUpload = window.FileUpload || {}, window, document, Common, Cache, Events, Velocity));
// File Upload Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var UploadFilesWidget = {

        // Options
        options: {
            Url: null,
            Method: 'post',
            WithCredentials: false,
            ParallelUploads: 10,
            UploadMultiple: false,
            MaxFilesize: 256,
            ParameterName: 'file',
            CreateImageThumbnails: true,
            MaxThumbnailFilesize: 10,
            ThumbnailWidth: 100,
            ThumbnailHeight: 100,
            Parameters: {},
            IgnoreHiddenFiles: true,
            AcceptedFiles: null,
            AcceptedMimeTypes: null,
            AutoProcessQueue: false,
            AddRemoveLinks: true,
            Files: [],
            DefaultMessage: '',
            FileTooBig: 'File is too big ({{filesize}}MB). Max filesize: {{maxFilesize}}MB.',
            InvalidFileType: 'You can\'t upload files of this type.',
            CancelUpload: 'CancelUpload',
            ConfirmOnCancelUpload: true,
            RemoveFile: 'RemoveFile',
            ConfirmOnRemoveFile: true,
            PreviewTemplate: '<div class="gtc-classDivPreview gtc-classDivFilePreview" style="display: none;"><div class="gtc-classDivDetails"><div class="gtc-classDivFileName"><span class="gtc-classSpanFileName"></span></div><div class="gtc-classDivFileSize"></div><img class="gtc-classImgThumbnail"/></div><div class="gtc-classDivProgress"><span class="gtc-classDivUploadProgress"></span></div><div class="gtc-classDivSuccess"><span></span></div><div class="gtc-classDivFileUploadError"><span></span></div><div class="gtc-classDivFileUploadErrorMessage"><span class="gtc-classSpanErrorMessage"></span></div></div>',
            UploadButtonHidden: true
        },

        // Semaphores
        semaphores: {
            Added: 'Added',
            Queued: 'Queued',
            Uploading: 'Uploading',
            Canceled: 'Canceled',
            Error: 'Error',
            Success: 'Success'
        },

        // Public Methods
        ProcessQueue: function () {

            var thisWidget = this;
            thisWidget._processQueue();

        },

        SetParameters: function (uiParameters) {

            var thisWidget = this;
            thisWidget._setParameters(uiParameters, thisWidget);

        },

        // Private Methods
        _initializeInputElement: function () {

            var thisWidget = this;

            // Add file upload input field
            var inputFileHtmlMarkup = '<input class="gtc-classInputFileUpload" type="file" id="' + thisWidget.element.id + 'FileInput" name="' + thisWidget.element.id + 'FileInput"';
            if (Common.IsDefined(thisWidget.options.AcceptedFiles)) {
                inputFileHtmlMarkup += ' accept="' + thisWidget.options.AcceptedFiles + '"';
            }

            // Add multi file flag
            if (thisWidget.options.UploadMultiple) {
                inputFileHtmlMarkup += ' multiple';
            }
            inputFileHtmlMarkup += '>';

            // Insert file input
            Common.InsertHTMLString(thisWidget.element, Common.InsertType.After, inputFileHtmlMarkup);

            // Attach file handler
            Events.On(Common.Get(thisWidget.element.id + 'FileInput'), 'change',
                function () {
                    var files = this.files;
                    if (files.length) {
                        thisWidget._selectedFiles(files, thisWidget);
                        thisWidget._handleFiles(files);
                    }
                    this.value = null;
                }
            );

        },

        _initializeEvents: function () {

            var thisWidget = this;
            Events.On(thisWidget.element, 'uploadprogress',
                function () {
                    thisWidget._updateTotalUploadProgress();
                }
            );
            Events.On(thisWidget.element, 'uploadprogress', thisWidget._uploadProgress);
            Events.On(thisWidget.element, 'removedfile',
                function () {
                    thisWidget._updateTotalUploadProgress();
                }
            );
            Events.On(thisWidget.element, 'canceled',
                function (event, file) {
                    Events.Trigger(thisWidget.element, 'complete', file);
                }
            );
            Events.On(thisWidget.element, 'dragenter',
                function (event) {
                    event.stopPropagation();
                    event.preventDefault();
                    thisWidget._dragenter(event);
                }
            );
            Events.On(thisWidget.element, 'dragover',
                function (event) {
                    event.stopPropagation();
                    event.preventDefault();
                    thisWidget._dragover(event);
                }
            );
            Events.On(thisWidget.element, 'dragleave',
                function (event) {
                    thisWidget._dragleave(event);
                }
            );
            Events.On(thisWidget.element, 'drop',
                function (event) {
                    event.stopPropagation();
                    event.preventDefault();
                    thisWidget._actionOnDrop(event, thisWidget);
                }
            );
            Events.On(thisWidget.element, 'drop',
                function (event) {
                    event.stopPropagation();
                    event.preventDefault();
                    thisWidget._dropFile(event);
                }
            );
            Events.On(thisWidget.element, 'dragend',
                function (event) {
                    thisWidget._dragend(event);
                }
            );
            Events.On(thisWidget.element, 'thumbnail',
                function (event) {
                    thisWidget._thumbnail(event);
                }
            );
            Events.On(thisWidget.element, 'processing',
                function (event, file) {
                    thisWidget._processing(event, file);
                }
            );
            Events.On(thisWidget.element, 'canceled',
                function (event, file) {
                    thisWidget._canceled(event, file);
                }
            );
            Events.On(thisWidget.element, 'complete',
                function (event, file) {
                    thisWidget._complete(event, file);
                }
            );
            Events.On(thisWidget.element, 'reset',
                function (event) {
                    thisWidget._reset(event);
                }
            );
            Events.On(thisWidget.element, 'click',
                function (event) {
                    event.stopPropagation();
                    event.preventDefault();
                    Events.Trigger(Common.Get(thisWidget.element.id + 'FileInput'), 'click');
                }
            );

        },

        _updateTotalUploadProgress: function () {

            var thisWidget = this;
            var totalBytesSent = 0;
            var totalBytes = 0;
            var totalUploadProgress = 0;
            var acceptedFiles = thisWidget._getAcceptedFiles();
            if (acceptedFiles.length) {
                var file, acceptedTypesCount = 0, length = acceptedFiles.length;
                for (; acceptedTypesCount < length; acceptedTypesCount++) {
                    file = acceptedFiles[acceptedTypesCount];
                    totalBytesSent += file.upload.bytesSent;
                    totalBytes += file.upload.total;
                }
                totalUploadProgress = 100 * totalBytesSent / totalBytes;
            }
            else {
                totalUploadProgress = 100;
            }

        },

        _actionOnDrop: function (event, thisWidget) {

            if (!event.originalEvent.dataTransfer) {
                return false;
            }
            var files = event.originalEvent.dataTransfer.files;
            thisWidget._selectedFiles(files, thisWidget);
            if (files.length) {
                var items = event.originalEvent.dataTransfer.items;
                if (Common.IsDefined(items) && items.length && (Common.IsDefined(items[0].webkitGetAsEntry) || Common.IsDefined(items[0].getAsEntry))) {
                    thisWidget._handleFoldersAndFiles(items);
                }
                else {
                    thisWidget._handleFiles(files);
                }
            }

        },

        _handleFiles: function (files) {

            var thisWidget = this;
            var file, fileCount = 0, length = files.length;
            for (; fileCount < length; fileCount++) {
                file = files[fileCount];
                thisWidget._addFile(file);
            }

        },

        _handleFoldersAndFiles: function (items) {

            var thisWidget = this;
            var item, itemCount = 0, length = items.length, entry;
            for (; itemCount < length; itemCount++) {
                item = items[itemCount];
                if (Common.IsDefined(item.webkitGetAsEntry)) {
                    entry = item.webkitGetAsEntry();
                    if (entry.isFile) {
                        thisWidget._addFile(item.getAsFile());
                    }
                    else if (entry.isDirectory) {
                        thisWidget._addDirectory(entry, entry.name);
                    }
                }
                else if (Common.IsDefined(item.getAsEntry)) {
                    entry = item.getAsEntry();
                    if (entry.isFile) {
                        thisWidget._addFile(item.getAsFile());
                    }
                    else if (entry.isDirectory) {
                        thisWidget._addDirectory(entry, entry.name);
                    }
                }
                else {
                    thisWidget._addFile(item.getAsFile());
                }
            }

        },

        _acceptFileForUpload: function (file, callbackFunction) {

            var thisWidget = this;
            if (thisWidget.options.MaxFilesize && file.size > thisWidget.options.MaxFilesize * 1024 * 1024) {
                callbackFunction(thisWidget.options.FileTooBig.replace('{{filesize}}', Math.round(file.size / 1024 / 10.24) / 100).replace('{{maxFilesize}}', thisWidget.options.MaxFilesize), file);
            }
            else if (!thisWidget._isValidFileType(file, thisWidget.options.AcceptedFiles)) {
                callbackFunction(thisWidget.options.InvalidFileType, file);
            }
            else {
                callbackFunction(null, file);
            }

        },

        _addFile: function (file) {

            var thisWidget = this;
            file.upload = {
                progress: 0,
                total: file.size,
                bytesSent: 0
            };
            thisWidget.options.Files.push(file);
            file.status = thisWidget.semaphores.Added;
            thisWidget._createFilePreview(file);

            // If image add thumbnail preview
            if (thisWidget.options.CreateImageThumbnails && file.type.match(/image.*/) && file.size <= thisWidget.options.MaxThumbnailFilesize * 1024 * 1024) {
                thisWidget._createThumbnail(file);
            }

            // Check for valid file and size then queue or throw error
            thisWidget._acceptFileForUpload(file,
                function (error, file) {
                    if (error) {
                        file.accepted = false;
                        thisWidget._processErrors([file], error, null);
                    }
                    else {
                        FileUpload.OnAdd(thisWidget.element, file);
                        thisWidget._queueFileForUpload(file);
                        thisWidget._showUploadButton();
                    }
                }
            );

        },

        _queueFileForUpload: function (file) {

            var thisWidget = this;
            file.accepted = true;
            if (file.status === thisWidget.semaphores.Added) {
                file.status = thisWidget.semaphores.Queued;
                if (thisWidget.options.AutoProcessQueue) {
                    setTimeout(
                        function () {
                            thisWidget._processQueue();
                        }, 1
                    );
                }
            }
            else {
                throw new Error('This file can\'t be queued because it has already been processed or was rejected.');
            }

        },

        _errorHandler: function (event) {
            var errorMessage = '';
            switch (event.code) {
                case FileError.QUOTA_EXCEEDED_ERR:
                    errorMessage = 'QUOTA_EXCEEDED_ERR';
                    break;
                case FileError.NOT_FOUND_ERR:
                    errorMessage = 'NOT_FOUND_ERR';
                    break;
                case FileError.SECURITY_ERR:
                    errorMessage = 'SECURITY_ERR';
                    break;
                case FileError.INVALID_MODIFICATION_ERR:
                    errorMessage = 'INVALID_MODIFICATION_ERR';
                    break;
                case FileError.INVALID_STATE_ERR:
                    errorMessage = 'INVALID_STATE_ERR';
                    break;
                default:
                    errorMessage = 'Unknown Error';
                    break;
            };
            if (Common.IsDefined(window.console)) {
                console.log('Error: ' + errorMessage);
            }
            else {
                throw new Error('Error: ' + errorMessage);
            }
        },

        _addDirectory: function (entry, path) {

            var thisWidget = this;

            // Define function locally for scope reasons of widget
            var readDirectoryEntriesFunction = function (entries) {
                var entriesCount = 0, length = entries.length;
                for (; entriesCount < length; entriesCount++) {
                    entry = entries[entriesCount];
                    if (entry.isFile) {
                        entry.file(
                            function (file) {
                                if (thisWidget.options.IgnoreHiddenFiles && file.name.substring(0, 1) === '.') {
                                    return;
                                }
                                file.fullPath = '' + path + '/' + file.name;
                                thisWidget._addFile(file);
                            }
                        );
                    }
                    else if (entry.isDirectory) {
                        thisWidget._addDirectory(entry, '' + path + '/' + entry.name);
                    }
                }

            };
            var dirReader = entry.createReader();
            dirReader.readEntries(readDirectoryEntriesFunction, thisWidget._errorHandler);

        },

        _removeFile: function (file) {

            var thisWidget = this;
            if (file.status === thisWidget.semaphores.Uploading) {
                thisWidget._cancelUpload(file);
            }
            thisWidget.options.Files = thisWidget._removeQueuedFiles(thisWidget.options.Files, file);
            thisWidget._removeFilePreview(file);
            FileUpload.OnRemove(thisWidget.element, file);
            if (thisWidget.options.Files.length === 0) {
                Events.Trigger(thisWidget.element, 'reset');
            }

        },

        _attachThumbnail: function (file, dataUrl) {

            var previewElement = file.previewElement;
            Common.RemoveClass(previewElement, 'gtc-classDivFilePreview');
            Common.AddClass(previewElement, 'gtc-classImagePreview');
            var thumbnailElement = Common.Query('.gtc-classImgThumbnail', previewElement);
            Common.SetAttr(thumbnailElement, 'alt', file.name);
            Common.SetAttr(thumbnailElement, 'src', dataUrl);

        },

        _createThumbnail: function (file) {

            var thisWidget = this;
            var fileReader = new FileReader;
            fileReader.onload = function () {
                var img = new Image;
                img.onload = function () {
                    file.width = img.width;
                    file.height = img.height;
                    var resizeData = thisWidget._resizeImageForThumbnail(file);
                    var canvas = Common.GenerateHTML('<canvas></canvas>');
                    var canvasContext = canvas.getContext('2d');
                    canvas.width = resizeData.targetWidth;
                    canvas.height = resizeData.targetHeight;
                    canvasContext.drawImage(img, resizeData.sourceX ? resizeData.sourceX : 0, resizeData.sourceY ? resizeData.sourceY : 0, resizeData.sourceWidth, resizeData.sourceHeight, resizeData.trgX ? resizeData.trgX : 0, resizeData.trgY ? resizeData.trgY : 0, resizeData.targetWidth, resizeData.targetHeight);
                    var thumbnail = canvas.toDataURL('image/png');
                    thisWidget._attachThumbnail(file, thumbnail);
                };
                img.src = fileReader.result;
            };
            fileReader.readAsDataURL(file);

        },

        _resizeImageForThumbnail: function (file) {

            var thisWidget = this;
            var resizeData = {
                sourceX: 0,
                sourceY: 0,
                sourceWidth: file.width,
                sourceHeight: file.height
            };
            var sourceRatio = file.width / file.height;
            var targetRatio = thisWidget.options.ThumbnailWidth / thisWidget.options.ThumbnailHeight;
            if (file.height < thisWidget.options.ThumbnailHeight || file.width < thisWidget.options.ThumbnailWidth) {
                resizeData.targetHeight = resizeData.sourceHeight;
                resizeData.targetWidth = resizeData.sourceWidth;
            }
            else {
                if (sourceRatio > targetRatio) {
                    resizeData.sourceHeight = file.height;
                    resizeData.sourceWidth = resizeData.sourceHeight * targetRatio;
                }
                else {
                    resizeData.sourceWidth = file.width;
                    resizeData.sourceHeight = resizeData.sourceWidth / targetRatio;
                }
            }
            resizeData.sourceX = (file.width - resizeData.sourceWidth) / 2;
            resizeData.sourceY = (file.height - resizeData.sourceHeight) / 2;
            if (!resizeData.targetWidth) {
                resizeData.targetWidth = thisWidget.options.ThumbnailWidth;
            }
            if (!resizeData.targetHeight) {
                resizeData.targetHeight = thisWidget.options.ThumbnailHeight;
            }
            return resizeData;

        },

        _getAcceptedFiles: function () {

            var thisWidget = this;
            var results = [];
            var file, acceptedFilesCount = 0, length = thisWidget.options.Files.length;
            for (; acceptedFilesCount < length; acceptedFilesCount++) {
                file = thisWidget.options.Files[acceptedFilesCount];
                if (file.accepted) {
                    results.push(file);
                }
            }
            return results;

        },

        _getRejectedFiles: function () {

            var thisWidget = this;
            var results = [];
            var file, rejectedFilesCount = 0, length = thisWidget.options.Files.length;
            for (; rejectedFilesCount < length; rejectedFilesCount++) {
                file = thisWidget.options.Files[rejectedFilesCount];
                if (!file.accepted) {
                    results.push(file);
                }
            }
            return results;

        },

        _getQueuedFiles: function () {

            var thisWidget = this;
            var results = [];
            var file, queuedFilesCount = 0, length = thisWidget.options.Files.length;
            for (; queuedFilesCount < length; queuedFilesCount++) {
                file = thisWidget.options.Files[queuedFilesCount];
                if (file.status === thisWidget.semaphores.Queued) {
                    results.push(file);
                }
            }
            return results;

        },

        _getUploadingFiles: function () {

            var thisWidget = this;
            var results = [];
            var file, uploadingFilesCount = 0, length = thisWidget.options.Files.length;
            for (; uploadingFilesCount < length; uploadingFilesCount++) {
                file = thisWidget.options.Files[uploadingFilesCount];
                if (file.status === thisWidget.semaphores.Uploading) {
                    results.push(file);
                }
            }
            return results;

        },

        _processQueue: function () {

            var thisWidget = this;
            var parallelUploads = thisWidget.options.ParallelUploads;
            var processingLength = thisWidget._getUploadingFiles().length;
            var processingCount = processingLength;
            if (processingLength >= parallelUploads) {
                return false;
            }
            var queuedFiles = thisWidget._getQueuedFiles();
            if (!(queuedFiles.length > 0)) {
                var messageType = Modals.ModalTypes.Error;
                var messageTitle = 'Error';
                var messageBody = 'There are no files in your upload queue.';
                Modals.ShowModalMessageDialog(messageType, messageTitle, messageBody, null);
                return false;
            }
            if (thisWidget.options.UploadMultiple) {
                return thisWidget._processFiles(queuedFiles.slice(0, parallelUploads - processingLength), thisWidget);
            }
            else {
                while (processingCount < parallelUploads) {
                    if (!queuedFiles.length) {
                        return false;
                    }
                    thisWidget._processFile(queuedFiles.shift(), thisWidget);
                    processingCount++;
                }
            }

        },

        _setParameters: function (uiParameters, thisWidget) {

            thisWidget.options.Parameters['UiParameters'] = JSON.stringify(uiParameters);

        },

        _processFile: function (file, thisWidget) {

            thisWidget._processFiles([file], thisWidget);

        },

        _processFiles: function (files, thisWidget) {

            var thisWidget = this;
            var file, fileCounter = 0, length = files.length;
            for (; fileCounter < length; fileCounter++) {
                file = files[fileCounter];
                file.processing = true;
                file.status = thisWidget.semaphores.Uploading;
                Events.Trigger(thisWidget.element, 'processing', file);
            }
            thisWidget._uploadFiles(files);

        },

        _getFilesWithXmlHttpRequest: function (xmlHttpRequest) {

            var thisWidget = this;
            var currentFilesReference = thisWidget.options.Files;
            var results = [];
            var file, fileCounter = 0, length = currentFilesReference.length;
            for (; fileCounter < length; fileCounter++) {
                file = currentFilesReference[fileCounter];
                if (file.xmlHttpRequest === xmlHttpRequest) {
                    results.push(file);
                }
            }
            return results;

        },

        _cancelUpload: function (file) {

            var thisWidget = this;
            if (file.status === thisWidget.semaphores.Uploading) {
                var groupedFiles = thisWidget._getFilesWithXmlHttpRequest(file.xmlHttpRequest);
                var groupedFile, fileCounter = 0, length = groupedFiles.length;
                for (; fileCounter < length; fileCounter++) {
                    groupedFile = groupedFiles[fileCounter];
                    groupedFile.status = thisWidget.semaphores.Canceled;
                }
                file.xmlHttpRequest.abort();
                fileCounter = 0, length = groupedFiles.length;
                for (; fileCounter < length; fileCounter++) {
                    groupedFile = groupedFiles[fileCounter];
                    Events.Trigger(thisWidget.element, 'canceled', groupedFile);
                }
            }
            else if (file.status === thisWidget.semaphores.Added || file.status === thisWidget.semaphores.Queued) {
                file.status = thisWidget.semaphores.Canceled;
                Events.Trigger(thisWidget.element, 'canceled', file);
            }
            if (thisWidget.options.AutoProcessQueue) {
                thisWidget._processQueue();
            }

        },

        _uploadFiles: function (files) {

            var thisWidget = this;

            // Create request
            var xmlHttpRequest = new XMLHttpRequest();

            // Add request to each file
            var file, fileCounter = 0, length = files.length;
            for (; fileCounter < length; fileCounter++) {
                file = files[fileCounter];
                file.xmlHttpRequest = xmlHttpRequest;
            }

            //  Set method, url and asynch
            xmlHttpRequest.open(thisWidget.options.Method, thisWidget.options.Url, true);

            // set credentials attribute if needed
            xmlHttpRequest.withCredentials = thisWidget.options.WithCredentials;

            // Variable for server response
            var serverResponse = null;

            // Local function for updating progress
            var updateProgressFunction = function (event) {
                var allFilesFinished;
                var progress, file, fileCounter = 0, length = files.length;
                if (Common.IsDefined(event)) {
                    progress = 100 * event.loaded / event.total;
                    for (; fileCounter < length; fileCounter++) {
                        file = files[fileCounter];
                        file.upload = {
                            progress: progress,
                            total: event.total,
                            bytesSent: event.loaded
                        };
                    }
                }
                else {
                    allFilesFinished = true;
                    progress = 100;
                    for (; fileCounter < length; fileCounter++) {
                        file = files[fileCounter];
                        if (!(file.upload.progress === 100 && file.upload.bytesSent === file.upload.total)) {
                            allFilesFinished = false;
                        }
                        file.upload.progress = progress;
                        file.upload.bytesSent = file.upload.total;
                    }
                    if (allFilesFinished) {
                        return true;
                    }
                }
                var results = [];
                fileCounter = 0, length = files.length;
                for (; fileCounter < length; fileCounter++) {
                    file = files[fileCounter];
                    results.push(Events.Trigger(thisWidget.element, 'uploadprogress', [file, progress, file.upload.bytesSent]));
                }
                return results;
            };

            // Request onload
            xmlHttpRequest.onload = function (event) {
                var statusScopeReference;
                if (files[0].status === thisWidget.semaphores.Canceled) {
                    return false;
                }
                if (xmlHttpRequest.readyState !== 4) {
                    return false;
                }
                serverResponse = xmlHttpRequest.responseText;
                if (xmlHttpRequest.getResponseHeader('content-type') && ~xmlHttpRequest.getResponseHeader('content-type').indexOf('application/json')) {
                    try {
                        serverResponse = JSON.parse(serverResponse);
                    }
                    catch (error) {
                        serverResponse = 'Invalid JSON response from server.';
                    }
                }
                updateProgressFunction(event);
                if (!((200 <= (statusScopeReference = xmlHttpRequest.status) && statusScopeReference < 300)) || serverResponse.success == false) {
                    if (statusScopeReference == 404) {
                        serverResponse = 'URL not found or File Size is more than server limit.';
                    }
                    thisWidget._processErrors(files, serverResponse, xmlHttpRequest);
                }
                else {
                    thisWidget._finishedUploadingCleanup(files, serverResponse, event);
                }
            };

            // Set progress function
            var progressObject = (statusScopeReference = xmlHttpRequest.upload) != null ? statusScopeReference : xmlHttpRequest;
            progressObject.onprogress = updateProgressFunction;

            // Request onerror
            xmlHttpRequest.onerror = function () {
                if (files[0].status === thisWidget.semaphores.Canceled) {
                    return false;
                }
                thisWidget._processErrors(files, serverResponse, xmlHttpRequest);
            };

            // Create headers and add to request
            var headers = {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache',
                'X-Requested-With': 'XMLHttpRequest'
            };
            for (var headerName in headers) {
                var headerValue = headers[headerName];
                xmlHttpRequest.setRequestHeader(headerName, headerValue);
            }

            // Create FormData variable and uiParamters
            var formData = new FormData();
            var parameters = Common.MergeObjects(true, {}, thisWidget.options.Parameters);

            // Add CurrentUser to BehaviorParameters
            var sessionToken = Common.GetSessionToken();
            if (Common.IsDefined(sessionToken)) {
                var uiParameters = [];
                if (parameters && parameters.UiParameters) {
                    uiParameters = JSON.parse(parameters.UiParameters);
                }
                uiParameters.push({
                    Name: 'CurrentUser',
                    Value: sessionToken,
                    UiParameters: null
                });
                parameters.UiParameters = JSON.stringify(uiParameters);
            }

            // Form to serialize?
            var formToSerialize = Common.GetAttr(thisWidget.element, 'data-formtoserialize');
            if (Common.IsDefined(formToSerialize)) {
                var uiParameters = [];
                if (parameters && parameters.UiParameters) {
                    uiParameters = JSON.parse(parameters.UiParameters);
                }
                uiParameters = uiParameters.concat(Form.SerializeArray(Common.Get(formToSerialize)));
                parameters.UiParameters = JSON.stringify(uiParameters);
            }

            // Add SaveToDisk to BehaviorParameters
            var saveToDisk = Common.GetAttr(thisWidget.element, 'data-savetodisk');
            if (Common.IsDefined(saveToDisk)) {
                formData.append('SaveToDisk', saveToDisk);
            }

            // Add AppendGuid to BehaviorParameters
            var appendGuid = Common.GetAttr(thisWidget.element, 'data-appendguid');
            if (Common.IsDefined(appendGuid)) {
                formData.append('AppendGuid', appendGuid);
            }

            // Add optional parameters from user if they exist (TODO: Put in UiParameters?)
            if (parameters) {
                for (var key in parameters) {
                    value = parameters[key];
                    formData.append(key, value);
                }
            }

            // Find any extra fields in form and add to request (TODO: Put in UiParameters?)
            if (Common.CheckNodeType(this.element, 'form')) {
                var additionalFields = Common.QueryAll('input, textarea, select, button', thisWidget.element);
                var input, additionFieldCounter = 0, length = additionalFields.length;
                for (; additionFieldCounter < length; additionFieldCounter++) {
                    input = additionalFields[additionFieldCounter];
                    var inputName = input.name;
                    formData.append(inputName, input.value);
                }
            }

            // Add each file for upload to request
            var file, fileCounter = 0, length = files.length;
            for (; fileCounter < length; fileCounter++) {
                file = files[fileCounter];
                var parameterName = thisWidget.options.ParameterName;
                if (thisWidget.options.UploadMultiple) {
                    parameterName += '[]';
                }
                formData.append(parameterName, file, file.name);
            }

            // Send request to server
            xmlHttpRequest.send(formData);

        },

        _finishedUploadingCleanup: function (files, serverResponse, event) {

            var thisWidget = this;
            var file, fileCounter = 0, length = files.length;
            for (; fileCounter < length; fileCounter++) {
                file = files[fileCounter];
                if (Common.IsDefined(serverResponse.UiValidation) && serverResponse.UiValidation.ContainsError == 'Yes') {
                    file.status = thisWidget.semaphores.Error;
                    thisWidget._canceled(event, file);
                }
                else {
                    file.status = thisWidget.semaphores.Success;
                    thisWidget._success(file);
                }
                Events.Trigger(thisWidget.element, 'complete', file);
            }
            if (thisWidget.options.AutoProcessQueue) {
                thisWidget._processQueue();
            }
            Page.RunInstructions(serverResponse, thisWidget.element);

        },

        _processErrors: function (files, message, xmlHttpRequest) {

            var thisWidget = this;
            var file, fileCounter = 0, length = files.length;
            for (; fileCounter < length; fileCounter++) {
                file = files[fileCounter];
                file.status = thisWidget.semaphores.Error;
                thisWidget._showErrorDetails(file, message);
                Events.Trigger(thisWidget.element, 'complete', file);
            }
            var errorObject = {
                ErrorDisplayDetails: [
                    {
                        FullName: '',
                        Message: message,
                        Name: '',
                        Source: '',
                        StackTrace: ''
                    }
                ]
            };
            Modals.ShowModalErrorDialog(JSON.stringify(errorObject));
            if (thisWidget.options.AutoProcessQueue) {
                thisWidget._processQueue();
            }

        },

        _showErrorDetails: function (file, message) {

            var previewElement = file.previewElement;
            Velocity(Common.Query('.gtc-classDivFileUploadError', previewElement), 'fadeIn', 'slow');
            if (message && message.length < 100) {
                Common.Query('.gtc-classSpanErrorMessage', previewElement).textContent = message;
            }
            else {
                Common.Query('.gtc-classSpanErrorMessage', previewElement).textContent = file.status;
            }
            Velocity(Common.Query('.gtc-classDivFileUploadErrorMessage', previewElement), 'fadeIn', 'slow');

        },

        _dropFile: function (event) {

            var thisWidget = this;
            Common.RemoveClass(thisWidget.element, 'gtc-classDragHover');

        },

        _dragend: function (event) {

            var thisWidget = this;
            Common.RemoveClass(thisWidget.element, 'gtc-classDragHover');

        },

        _dragenter: function (event) {

            var thisWidget = this;
            Common.AddClass(thisWidget.element, 'gtc-classDragHover');

        },

        _dragover: function (event) {

            var thisWidget = this;
            Common.AddClass(thisWidget.element, 'gtc-classDragHover');

        },

        _dragleave: function (event) {

            var thisWidget = this;
            Common.RemoveClass(thisWidget.element, 'gtc-classDragHover');

        },

        _selectedFiles: function (files, thisWidget) {

            Common.AddClass(thisWidget.element, 'gtc-classUploadedStarted');

        },

        _reset: function () {

            var thisWidget = this;
            Common.RemoveClass(thisWidget.element, 'gtc-classUploadedStarted');

        },

        _createFilePreview: function (file) {

            var thisWidget = this;

            // Create DOM reference for use later
            var insertHtmlReference = Common.GenerateHTML(thisWidget.options.PreviewTemplate);
            thisWidget.element.appendChild(insertHtmlReference);
            file.previewElement = insertHtmlReference;
            file.previewTemplate = insertHtmlReference;
            var previewElement = file.previewElement;
            Common.Query('.gtc-classSpanFileName', previewElement).textContent = file.name;
            Common.Query('.gtc-classDivFileSize', previewElement).innerHTML = thisWidget._buildFilesizeHtml(file.size);

            // Add remove links to remove a file for queued upload
            if (thisWidget.options.AddRemoveLinks) {
                file.removeLink = Common.GenerateHTML('<a class="gtc-classAnchorRemoveFile" href="javascript:undefined;" data-translate="' + thisWidget.options.RemoveFile + '">' + Common.TranslateKey(thisWidget.options.RemoveFile) + '</a>');

                // Attach click event
                Events.On(file.removeLink, 'click',
                    function (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        if (file.status === thisWidget.semaphores.Uploading) {
                            if (thisWidget.options.ConfirmOnCancelUpload) {
                                var messageTitle = 'Are you sure you want to cancel?';
                                var messageBody = 'Canceling this upload will stop the file from being saved.<br><br>Are you sure you want to?';
                                thisWidget._getUserConfirmation(messageTitle, messageBody,
                                    function () {
                                        thisWidget._removeFile(file);
                                        thisWidget._hideUploadButton();
                                    }, null
                                );
                            }
                        }
                        else {
                            if (thisWidget.options.ConfirmOnRemoveFile) {
                                var messageTitle = 'Are you sure you want to remove this file?';
                                var messageBody = 'Removing this file will stop it from being saved.<br><br>Do you want to remove it anyway?';
                                thisWidget._getUserConfirmation(messageTitle, messageBody,
                                    function () {
                                        thisWidget._removeFile(file);
                                        thisWidget._hideUploadButton();
                                    }, null
                                );
                            }
                            else {
                                thisWidget._removeFile(file);
                                thisWidget._hideUploadButton();
                            }
                        }
                    }
                );

                // Add preview to form
                previewElement.appendChild(file.removeLink);
            }

            // Translate page
            Common.RetranslatePage();

            // Show preview
            Velocity(previewElement, 'fadeIn', { duration: 'slow', display: 'inline-block' });

            // Calculate page height
            Page.SetPageHeight();

        },

        _removeFilePreview: function (file) {

            var thisWidget = this;
            if (Common.IsDefined(file.previewElement)) {
                var previewElement = file.previewElement;
                Velocity(previewElement, 'fadeOut', 'slow',
                    function () {
                        Common.Remove(previewElement);
                    }
                );
            }

        },

        _removeQueuedFiles: function (files, rejectedFile) {

            var results = [];
            var file, fileCounter = 0, length = files.length;
            for (; fileCounter < length; fileCounter++) {
                file = files[fileCounter];
                if (file !== rejectedFile) {
                    results.push(file);
                }
            }
            return results;

        },

        _processing: function (event, file) {

            var thisWidget = this;
            Common.AddClass(file.previewElement, 'gtc-classUploadProcessing');
            if (Common.IsDefined(file.removeLink)) {
                var removeLink = file.removeLink;
                removeLink.textContent = Common.TranslateKey(thisWidget.options.CancelUpload);
                Common.SetAttr(removeLink, 'data-translate', thisWidget.options.CancelUpload);
            }

        },

        _uploadProgress: function (event, file, progress, bytesSent) {

            Common.Query('.gtc-classDivUploadProgress', file.previewElement).style.width = progress + '%';

        },

        _success: function (file) {

            Velocity(Common.Query('.gtc-classDivSuccess', file.previewElement), 'fadeIn', 'slow');
            var removeLink = file.removeLink;
            if (Common.IsDefined(removeLink)) {
                Velocity(removeLink, 'slideUp', 'slow',
                    function () {
                        Common.Remove(removeLink);
                    }
                );
            }

        },

        _canceled: function (event, file) {

            var thisWidget = this;
            thisWidget._showErrorDetails(file, 'Upload canceled.');

        },

        _complete: function (event, file) {

            var thisWidget = this;
            var removeLink = file.removeLink;
            if (Common.IsDefined(removeLink)) {
                removeLink.textContent = Common.TranslateKey(thisWidget.options.RemoveFile);
                Common.SetAttr(removeLink, 'data-translate', thisWidget.options.RemoveFile);
            }

        },

        _buildFilesizeHtml: function (size) {

            var fileSizeMarkup;
            if (size >= 100000000000) {
                size = size / 100000000000;
                fileSizeMarkup = 'TB';
            }
            else if (size >= 100000000) {
                size = size / 100000000;
                fileSizeMarkup = 'GB';
            }
            else if (size >= 100000) {
                size = size / 100000;
                fileSizeMarkup = 'MB';
            }
            else if (size >= 100) {
                size = size / 100;
                fileSizeMarkup = 'KB';
            }
            else {
                size = size * 10;
                fileSizeMarkup = 'b';
            }
            return '<strong>' + (Math.round(size) / 10) + '</strong> ' + fileSizeMarkup;

        },

        _isValidFileType: function (file, acceptedFiles) {

            if (!acceptedFiles) {
                return true;
            }
            acceptedFiles = acceptedFiles.split(',');
            var mimeType = file.type;
            var baseMimeType = mimeType.replace(/\/.*$/, '');
            var validType, validTypeCounter = 0, length = acceptedFiles.length;
            for (; validTypeCounter < length; validTypeCounter++) {
                validType = acceptedFiles[validTypeCounter];
                validType = validType.trim();
                if (validType.charAt(0) === '.') {
                    if (file.name.indexOf(validType, file.name.length - validType.length) !== -1) {
                        return true;
                    }
                }
                else if (/\/\*$/.test(validType)) {
                    if (baseMimeType === validType.replace(/\/.*$/, '')) {
                        return true;
                    }
                }
                else {
                    if (mimeType === validType) {
                        return true;
                    }
                }
            }
            return false;

        },

        _getUserConfirmation: function (messageTitle, messageBody, onAccept, onReject) {

            // Show Modal for user input
            var messageType = Modals.ModalTypes.Confirmation;
            Modals.ShowModalMessageDialog(messageType, messageTitle, messageBody,
                function (modalResult) {
                    if (modalResult == Modals.ModalResult.Yes) {
                        if (Common.IsFunction(onAccept)) {
                            onAccept();
                        }
                    }
                    else {
                        if (Common.IsFunction(onReject)) {
                            onReject();
                        }
                    }
                }
            );

        },

        _initializeUploadButton: function () {

            var thisWidget = this;

            // Anchor<, TabIndex@, Class@, Id@, Data-ControllerPath/ActionName@, Wire OnClick!, Anchor>
            var buttonMarkup = '<a data-namespace="Button" class="gtc-btn gtc-btn-button gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default" id="' + thisWidget.element.id + 'UploadButton"';
            buttonMarkup += '><i class="gtc-icon-styles fa fa-cloud-upload"></i><span data-translate="Upload">' + Common.TranslateKey('Upload') + '</span></a>';
            Common.InsertHTMLString(thisWidget.element, Common.InsertType.After, buttonMarkup);

            // Make nice button
            if (Common.IsFunction(thisWidget.element.uibutton)) {
                Widgets.uibutton(Common.Get(thisWidget.element.id + 'UploadButton'));
            }

            // Attach upload event
            Events.On(Common.Get(thisWidget.element.id + 'UploadButton'), 'click',
                function () {
                    thisWidget._processQueue();
                }
            );

        },

        _showUploadButton: function () {

            var thisWidget = this;
            if (!thisWidget.options.AutoProcessQueue) {
                var queuedFiles = thisWidget._getQueuedFiles();
                if (queuedFiles.length > 0) {
					if (thisWidget.options.UploadButtonHidden) {
						thisWidget.options.UploadButtonHidden = false;
						Velocity(Common.Get(thisWidget.element.id + 'UploadButton'), 'fadeIn', { duration: 'slow', display: 'inline-block',
							complete: function () {
								Common.ResizeView();
							}
						});
					}
					else {
						Common.ResizeView();
					}
                }
            }

        },

        _hideUploadButton: function () {

            var thisWidget = this;
            if (!thisWidget.options.AutoProcessQueue) {
                var queuedFiles = thisWidget._getQueuedFiles();
                if (queuedFiles.length == 0) {
					if (!thisWidget.options.UploadButtonHidden) {
						thisWidget.options.UploadButtonHidden = true;
						Velocity(Common.Get(thisWidget.element.id + 'UploadButton'), 'fadeOut', 'slow',
							function () {
								Common.ResizeView();
							}
						);
					}
					else {
						Common.ResizeView();
					}
                }
            }

        },

        _init: function () {
        },

        _create: function () {

            var thisWidget = this;
            if (Common.CheckNodeType(thisWidget.element, 'form')) {
                Common.SetAttr(thisWidget.element, 'enctype', 'multipart/form-data');
            }
            if (Common.IsDefined(Common.GetAttr(thisWidget.element, 'data-upload'))) {
                var onUploadEvent = JSON.parse(Common.GetAttr(thisWidget.element, 'data-upload'));
                thisWidget.options.Url = onUploadEvent.ControllerPath + onUploadEvent.ActionName;
                if (Common.IsDefined(onUploadEvent.UiParameters)) {
                    thisWidget.options.Parameters['UiParameters'] = JSON.stringify(onUploadEvent.UiParameters);
                }
                thisWidget.options.Parameters['UploadDirectory'] = Common.GetAttr(thisWidget.element, 'data-uploaddirectory');
            }
            var uploadTip = Common.GetAttr(thisWidget.element, 'data-uploadtip');
            if (Common.IsDefined(uploadTip)) {
                thisWidget.options.DefaultMessage = uploadTip;
                Common.InsertHTMLString(thisWidget.element, Common.InsertType.Append, '<div class="gtc-classDivPreviewDefault gtc-classDivPreviewMessage"><span data-translate="' + thisWidget.options.DefaultMessage + '">' + Common.TranslateKey(thisWidget.options.DefaultMessage) + '</span></div>');
            }

            // Create input
            thisWidget._initializeInputElement();

            // Attach events
            thisWidget._initializeEvents();

            // Add button
            if (!thisWidget.options.AutoProcessQueue) {
                thisWidget._initializeUploadButton();
            }

        }
    };

    WidgetFactory.Register('gtc.uploadfiles', UploadFilesWidget);

} (window, document, Common, Cache, Events, Velocity));
// Document Scan
// Based On: DocumentScan -> ViewElement
(function (DocumentScan, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var DWObject;
    var DocumentScanCount = 0;
    var DocumentScanHeight = "100vh";

    // Public Methods
    DocumentScan.Render = function (documentScan) {

        // Only one per page
        if (DocumentScanCount > 0) {
            return '';
        }
        DocumentScanCount++;

        // Set height
        if (Common.IsDefined(documentScan.Height)) {
            DocumentScanHeight = parseInt(documentScan.Height, 10);
        }

        //TestContentField
        var ContentFieldTest = documentScan.Content;
        var AllowScan = documentScan.AllowScan;
        var AllowEdit = documentScan.AllowEdit;
        var AllowSave = documentScan.AllowSave;
        var AllowUpload = documentScan.AllowUpload;
        var LanguagePreference = documentScan.LanguagePreference;
        var TooltipEdit = documentScan.TooltipEdit;
        var TooltipSave = documentScan.TooltipSave;
        var TooltipScan = documentScan.TooltipScan;
        var TooltipUpload = documentScan.TooltipUpload;
        var TooltipFullScreen = documentScan.TooltipFullScreen;
        var TooltipRemoveImage = documentScan.TooltipRemoveImage;
        var TooltipRemoveAllImage = documentScan.TooltipRemoveAllImage;
        var TooltipRotate = documentScan.TooltipRotate;
        var AllowRemoveImage = documentScan.AllowRemoveImage;
        var AllowRemoveAllImage = documentScan.AllowRemoveAllImage;
        var AllowRotate = documentScan.AllowRotate;
        var AllowExport = documentScan.AllowExport;
        var AllowPrint = documentScan.AllowPrint;
        var Fullscreen = documentScan.Fullscreen;
       

        //FullScreen
        var clickFullScreen = false;


        // Initialize
        var documentScanMarkup = '<div data-namespace="DocumentScan" data-configure="Pre" class="gtc-documentscan"' + ViewElement.RenderAttributes(documentScan);

        // On Click Save Event
        if (Common.IsEventViewElementDefined(documentScan.OnClickSave)) {
            // Data-ControllerPath/ActionName
            documentScanMarkup += ' data-clicksave=\'' + JSON.stringify(documentScan.OnClickSave) + '\'';
        }
        documentScanMarkup += '>';

        // Controls
        documentScanMarkup += '<div class="gtc-documentscan-controls"><div class="gtc-documentscan-control-item">';
        documentScanMarkup += '<fieldset style="display:none;" class="gtc-fieldset" id="' + documentScan.Name + 'FieldSet"><ol class="gtc-fieldset-ol">';
        documentScanMarkup += '<li class="gtc-field"><label id="ScanSource-Label" class="gtc-label" for="ScanSource"><span data-translate="SelectSource">' + Common.TranslateKey('SelectSource') + '</span></label>';
        documentScanMarkup += '<span id="SpanRequiredScanSource" class="gtc-classSpanRequired gtc-classSpanRequiredYes">!</span>';
        documentScanMarkup += '<select data-namespace="SelectField" class="gtc-classSpanSelectbox" name="ScanSource" value="" tabindex="1" id="ScanSource" aria-required="true" data-isfirstblank="Yes"><option selected="selected" value="">&nbsp;</option></select>';
        documentScanMarkup += '</li></ol></fieldset>';
        documentScanMarkup += '</div><div class="gtc-documentscan-control-item1 gtc-button-panel-right">';
        documentScanMarkup += '<select data-namespace="SelectField" class="gtc-classSpanSelectbox" name="ScanType" id="ScanType"><option value="0">ADF Single</option><option value="1">Flatbed</option><option value="2">ADF duplex</option></optgroup></select>';
        documentScanMarkup += '<select data-namespace="SelectField" class="gtc-classSpanSelectbox" name="ScanColor" id="ScanColor"><option value="2">Color</option><option value="0">B/W</option><option value="1">Gray</option></optgroup></select>';
        documentScanMarkup += '<div class="scandiv"><input class="inputscan" type="text" size="2" id="pageNumber"/><button type="submit" class="SearchImage scans" id="' + documentScan.Name + 'SearchImage"><i class="fa fa-search"></i></button></div>';
        //documentScanMarkup += '<div class="pagenum"><h3 style=" margin-bottom: 0; border: 1px solid; margin-top: 1.6em; width: 3.5em; text-align: center; "><span  id="DW_CurrentImage">0</span>/<span id="DW_TotalImage">0</span></h3></div>';
         documentScanMarkup += '<div class="pagenum"><h3 style=" margin-bottom: 0; border: 1px solid; margin-top: -0.3em; width:auto; text-algn: center; "><span  id="DW_CurrentImage">0</span>/<span id="DW_TotalImage">0</span></h3></div>';
        // documentScanMarkup += '<div style="width:35px;line-height: 17px;"><input type="text" size="2" id="DW_CurrentImage" readonly="readonly" /><b>/</b><input type="text" size="2" id="DW_TotalImage" readonly="readonly" /></div>'
       /* documentScanMarkup += '<button id="' + documentScan.Name + 'ScanButton" class="gtc-btn tooltip gtc-btn-button mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default tooltip " style=" Display: ' + AllowScan + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-scan" style="font-size: 30px;"></i><span id="' + documentScan.Name + 'ScanButtonTitle" class=" gtc-button-title gtc-sr-only" data-translate="Scan">' + Common.TranslateKey('Scan') + '</span><span class="tooltiptext">' + 'Scan' + ' </ span ></button > ';
        documentScanMarkup += '<button disabled="disabled" id="' + documentScan.Name + 'FullScreen" class="gtc-btn tooltip gtc-btn-button mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default" style="Display: ' + Fullscreen + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles  material-icon material-icon-fullscreen" id="ZoomOut" style="font-size: 30px; " ></i><i id="Zoomin" class="gtc-icon-styles  material-icon material-icon-exit" style="font-size: 30px; display:none;" ></i><span id="' + documentScan.Name + 'FullScreen" class="gtc-button-title gtc-sr-only" data-translate="FullScreen">' + Common.TranslateKey('FullScreen') + '</span><span class="tooltiptext" >' + 'FullScreen' + '</span></button>';
        documentScanMarkup += '<button disabled="disabled" id="' + documentScan.Name + 'Edit" class="gtc-btn tooltip gtc-btn-button mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default" style=" Display: ' + AllowEdit + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles  material-icon  material-icon-editdoc" style="font-size: 30px;" ></i><span id="' + documentScan.Name + 'Edit" class="gtc-button-title gtc-sr-only" data-translate="Edit">' + Common.TranslateKey('Edit') + '</span><span class="tooltiptext">' + 'Edit' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Remove" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style= "Display: ' + AllowRemoveImage + ' ;padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon material-icon-removeimg" style="font-size: 30px;" ></i><span id="' + documentScan.Name + 'Remove" class="gtc-button-title gtc-sr-only " data-translate="Remove">' + Common.TranslateKey('Remove') + '</span><span class="tooltiptext" >' + 'Remove' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'RemovAll" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowRemoveAllImage + '; padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon material-icon-removeallimg" style="font-size: 30px;" ></i><span id="' + documentScan.Name + 'RemoveAll" class="gtc-button-title gtc-sr-only " data-translate="RemoveAll">' + Common.TranslateKey('RemoveAll') + '</span><span class="tooltiptext">' + 'Remove All Image' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Rotate" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowRotate + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-rotate" style="font-size: 30px;" ></i><span id="' + documentScan.Name + 'Rotate" class="gtc-button-title gtc-sr-only " data-translate="Rotate">' + Common.TranslateKey('Rotate') + '</span><span class="tooltiptext">' + 'Rotate' + '</span></button>';
        // documentScanMarkup += '<button id="' + documentScan.Name + 'Crop" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-crop" style="font-size: 30px;" ></i><span id="' + documentScan.Name + 'Crop" class="gtc-button-title gtc-sr-only " data-translate="Upload">' + Common.TranslateKey('Upload') + '</span><span class="tooltiptext">' + TooltipUpload + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Upload" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowUpload + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-fileupload" style="font-size: 30px;" ></i><span id="' + documentScan.Name + 'Upload" class="gtc-button-title gtc-sr-only " data-translate="Upload">' + Common.TranslateKey('Upload') + '</span><span class="tooltiptext">' + 'Upload' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Export" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowExport + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles fa fa-download" style="font-size: 30px; " ></i><span id="' + documentScan.Name + 'Export" class="gtc-button-title gtc-sr-only " data-translate="Export">' + Common.TranslateKey('Export') + '</span><span class="tooltiptext">' + 'Export' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Print" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowPrint + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-scanindexingdocument" style="font-size: 30px;" ></i><span id="' + documentScan.Name + 'Print" class="gtc-button-title gtc-sr-only " data-translate="Print">' + Common.TranslateKey('Print') + '</span><span class="tooltiptext">' + 'Print' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Save" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowSave + '; margin-top:3em; padding: 4px 10px; border-radius: 20%; font-size: 1em; margin-bottom: 10%; margin-right:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-msave"style="font-size: 30px;" ></i><span id="' + documentScan.Name + 'Save" class="gtc-button-title gtc-sr-only " data-translate="Save">' + Common.TranslateKey('Save') + '</span><span class="tooltiptext">' + 'Save' + '</span></button>';*/

        //Remove Icon Font Size
        documentScanMarkup += '<button id="' + documentScan.Name + 'ScanButton" class="gtc-btn tooltip gtc-btn-button mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default tooltip " style=" Display: ' + AllowScan + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-scan"></i><span id="' + documentScan.Name + 'ScanButtonTitle" class=" gtc-button-title gtc-sr-only" data-translate="Scan">' + Common.TranslateKey('Scan') + '</span><span class="tooltiptext">' + 'Scan' + ' </ span ></button > ';
        documentScanMarkup += '<button disabled="disabled" id="' + documentScan.Name + 'FullScreen" class="gtc-btn tooltip gtc-btn-button mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default" style="Display: ' + Fullscreen + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles  material-icon material-icon-fullscreen" id="ZoomOut"></i><i id="Zoomin" class="gtc-icon-styles  material-icon material-icon-exit" display:none;" ></i><span id="' + documentScan.Name + 'FullScreen" class="gtc-button-title gtc-sr-only" data-translate="FullScreen">' + Common.TranslateKey('FullScreen') + '</span><span class="tooltiptext" >' + 'FullScreen' + '</span></button>';
        documentScanMarkup += '<button disabled="disabled" id="' + documentScan.Name + 'Edit" class="gtc-btn tooltip gtc-btn-button mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default" style=" Display: ' + AllowEdit + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles  material-icon  material-icon-editdoc" ></i><span id="' + documentScan.Name + 'Edit" class="gtc-button-title gtc-sr-only" data-translate="Edit">' + Common.TranslateKey('Edit') + '</span><span class="tooltiptext">' + 'Edit' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Remove" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style= "Display: ' + AllowRemoveImage + ' ;padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon material-icon-removeimg" ></i><span id="' + documentScan.Name + 'Remove" class="gtc-button-title gtc-sr-only " data-translate="Remove">' + Common.TranslateKey('Remove') + '</span><span class="tooltiptext" >' + 'Remove' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'RemovAll" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowRemoveAllImage + '; padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon material-icon-removeallimg" ></i><span id="' + documentScan.Name + 'RemoveAll" class="gtc-button-title gtc-sr-only " data-translate="RemoveAll">' + Common.TranslateKey('RemoveAll') + '</span><span class="tooltiptext">' + 'Remove All Image' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Rotate" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowRotate + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-rotate" ></i><span id="' + documentScan.Name + 'Rotate" class="gtc-button-title gtc-sr-only " data-translate="Rotate">' + Common.TranslateKey('Rotate') + '</span><span class="tooltiptext">' + 'Rotate' + '</span></button>';
        // documentScanMarkup += '<button id="' + documentScan.Name + 'Crop" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-crop" style="font-size: 30px;" ></i><span id="' + documentScan.Name + 'Crop" class="gtc-button-title gtc-sr-only " data-translate="Upload">' + Common.TranslateKey('Upload') + '</span><span class="tooltiptext">' + TooltipUpload + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Upload" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowUpload + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-fileupload" ></i><span id="' + documentScan.Name + 'Upload" class="gtc-button-title gtc-sr-only " data-translate="Upload">' + Common.TranslateKey('Upload') + '</span><span class="tooltiptext">' + 'Upload' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Export" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowExport + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles fa fa-download" ></i><span id="' + documentScan.Name + 'Export" class="gtc-button-title gtc-sr-only " data-translate="Export">' + Common.TranslateKey('Export') + '</span><span class="tooltiptext">' + 'Export' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Print" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowPrint + ';padding: 4px 10px; border-radius: 20%; font-size: 1em; margin:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-scanindexingdocument" ></i><span id="' + documentScan.Name + 'Print" class="gtc-button-title gtc-sr-only " data-translate="Print">' + Common.TranslateKey('Print') + '</span><span class="tooltiptext">' + 'Print' + '</span></button>';
        documentScanMarkup += '<button id="' + documentScan.Name + 'Save" class="gtc-btn gtc-btn-button tooltip mi-padding gtc-btn--basic gtc-btn--basic-active gtc-btn--size-default "  style="Display: ' + AllowSave + '; margin-top:3em; padding: 4px 10px; border-radius: 20%; font-size: 1em; margin-bottom: 10%; margin-right:10%; margin-left: 0px; border: 1px solid #032E9199; box-shadow: inset 0 -3em 3em rgb(0 0 0 / 10%), 0 0 0 1px #eee, 0.3em 0.3em 1em rgb(0 0 0 / 30%);"><i class="gtc-icon-styles material-icon  material-icon-msave"></i><span id="' + documentScan.Name + 'Save" class="gtc-button-title gtc-sr-only " data-translate="Save">' + Common.TranslateKey('Save') + '</span><span class="tooltiptext">' + 'Save' + '</span></button>';








        documentScanMarkup += '</div></div>';
        documentScanMarkup += '<div id="dwtcontrolContainer"></div>';
        documentScanMarkup += '</div>';

        // Attach init event
        Events.One(document.body, 'configuredocumentscan', '#' + documentScan.Name,
            function () {
                var that = this;
                var isModal = Common.IsModal();

                // Scan Button
                Events.On(Common.Get(documentScan.Name + 'ScanButton'), 'click',
                    function () {
                        DocumentScan.AcquireImage();
                    }
                );

                // SearchImage Button
                Events.On(Common.Get(documentScan.Name + 'SearchImage'), 'click',
                    function () {
                        if (DWObject) {
                            var searchImage = Common.Get('pageNumber')
                            DWObject.SelectImages(indices = [searchImage.value - 1]);
                            DocumentScan.updatePageInfo();
                        }
                    }
                );

                // Upload Button
                Events.On(Common.Get(documentScan.Name + 'Upload'), 'click',
                    function () {

                        DocumentScan.UploadImage();
                        Common.RemoveAttr(Common.Get(documentScan.Name + 'FullScreen'), 'disabled');
                        Common.RemoveAttr(Common.Get(documentScan.Name + 'Edit'), 'disabled');
                        Common.RemoveAttr(Common.Get(documentScan.Name + 'Save'), 'disabled');
                    }
                );

                // Remove Button
                Events.On(Common.Get(documentScan.Name + 'Remove'), 'click',
                    function () {
                        if (DWObject) {
                            DWObject.RemoveImage(DWObject.CurrentImageIndexInBuffer,
                                function () {
                                    console.log('Remove Image successfull');
                                    //DocumentScan.TotalImage();
                                },
                                function (errorCode, errorString) {
                                    //console.log('Remove Image:' + errorString);
                                });
                            DocumentScan.updatePageInfo();
                        }
                    }
                );

                // RemoveAll Button
                Events.On(Common.Get(documentScan.Name + 'RemovAll'), 'click',
                    function () {
                        if (DWObject) {
                            DWObject.RemoveAllImages();
                            DocumentScan.updatePageInfo();
                        }
                    }
                );
                // Rotate Button
                Events.On(Common.Get(documentScan.Name + 'Rotate'), 'click',
                    function () {
                        if (DWObject) {
                            DWObject.RotateLeft(DWObject.CurrentImageIndexInBuffer);
                            DocumentScan.updatePageInfo();
                        }
                    }
                );
                // Load Dynamic Web Twain
                // Wait for modal to show before loading twain
                if (Common.IsModal()) {
                    Common.AttachVisibilityEvent(that.id,
                        function (event, eventData) {
                            if (eventData.Visible == true) {
                                DocumentScan.LoadDWObject(documentScan.Name, ContentFieldTest);
                            }
                        }, null, null, 'No'
                    );
                }
                else {
                    DocumentScan.LoadDWObject(documentScan.Name, ContentFieldTest);
                }

                // Full Screen
                Events.On(Common.Get(documentScan.Name + 'FullScreen'), 'click',
                    function () {
                        // Determine function call
                        var functionCall = "AddClass";
                        if (Common.HasClass(that, 'gtc-documentscan-fullscreen')) {
                            functionCall = "RemoveClass";
                        }

                        // Add/Remove necessary classes
                        Common[functionCall](that, 'gtc-documentscan-fullscreen');
                        if (isModal) {
                            Common[functionCall](Common.Query('.gtc-modal-dialog', null, true), 'gtc-modal-fullscreen');
                        }
                        else {
                            Common[functionCall](document.body, 'gtc-body-fullscreen');
                        }

                        //FullSreen onclickButton
                        if (clickFullScreen) {
                            document.getElementById('ZoomOut').style.display = 'block';
                            document.getElementById('Zoomin').style.display = 'none';
                            DWObject.Viewer.width = 800;
                            clickFullScreen = false;
                        } else {
                            document.getElementById('ZoomOut').style.display = 'none';
                            document.getElementById('Zoomin').style.display = 'block';
                            DWObject.Viewer.width = 1270;
                            clickFullScreen = true;
                        }

                        // Resize
                        var waitTime = 0;
                        if (isModal) {
                            waitTime = 500;
                        }
                        setTimeout(
                            function () {
                                Events.Trigger(window, 'resize.onDocumentScanResize');
                            }, waitTime
                        );
                        DocumentScan.updatePageInfo();
                    }
                );
                // Edit
                Events.On(Common.Get(documentScan.Name + 'Edit'), 'click',
                    function () {
                        if (DWObject) {
                            if (DWObject.HowManyImagesInBuffer > 0) {
                                var imageEditor = DWObject.Viewer.createImageEditor();
                                imageEditor.show();
                                DocumentScan.updatePageInfo();
                            }
                        }
                    }
                );
                // Export Button
                Events.On(Common.Get(documentScan.Name + 'Export'), 'click',
                    function () {
                        if (DWObject) {
                            DWObject.IfShowFileDialog = true;
                            var strFilePath = "scanDocument" + Date.now() + ".pdf";

                            var OnSuccess = function () {
                                alert("Export Successful.");
                            };
                            var OnFailure = function (errorCode, errorString) {
                                alert("There is no file to export.");
                            };
                            DWObject.SaveAllAsPDF(strFilePath, OnSuccess, OnFailure);
                        }
                    }
                );
                // Print Button
                Events.On(Common.Get(documentScan.Name + 'Print'), 'click',
                    function () {

                        if (DWObject) {
                            DWObject.Print();
                        }
                    }
                );
                // Save
                Events.On(Common.Get(documentScan.Name + 'Save'), 'click',
                    function () {
                        if (DWObject) {
                            if (DWObject.HowManyImagesInBuffer > 0 && DWObject.SelectAllImages()) {
                                DWObject.SelectAllImages()
                                var fileSize = 0; //DWObject.GetSelectedImagesSize(Dynamsoft.DWT.EnumDWT_ImageType.IT_PDF) / 1000000;
                                var get = DWObject.GetSelectedImagesSize(Dynamsoft.DWT.EnumDWT_ImageType.IT_PDF);
                                var maxSize = 5120;
                                if (fileSize < maxSize) {
                                    DWObject.IfShowCancelDialogWhenImageTransfer = true;
                                    var imagedata = DWObject.SaveSelectedImagesToBase64Binary();
                                    DocumentScan.OnClickSave(Common.Get(documentScan.Name), imagedata);
                                } else {
                                    alert("The file you are trying to save is " + Math.round(fileSize) + "MB .Please save a file less than 5 MB");
                                }

                            } else {
                                console.log("please select image");
                                DocumentScan.OnClickSave(Common.Get(documentScan.Name), "");
                            }
                        } else {
                            DocumentScan.OnClickSave(Common.Get(documentScan.Name), "");
                        }
                    }
                );

                // On window resize
                var onResizeEndFunction = function (event) {
                    if (DWObject) {
                        DWObject.Width = Common.Width(Common.Get('dwtcontrolContainer'));
                    }
                };
                Common.AttachWindowResizingEvent(onResizeEndFunction, 'onDocumentScanResize');
            }
        );

        // Return markup
        return documentScanMarkup;

    };

    DocumentScan.Configure = function (documentScan, configureStage) {

        Events.Trigger(documentScan, 'configuredocumentscan');

    };

    DocumentScan.OnClickSave = function (documentScan, base64Document) {

        // Initialize
        var onClickSaveParameters = [];

        // Get OnNodeSelectEvent object
        var onClickSaveEvent = JSON.parse(Common.GetAttr(documentScan, 'data-clicksave'));
        if (Common.IsDefined(onClickSaveEvent.UiParameters)) {
            onClickSaveParameters = onClickSaveParameters.concat(onClickSaveEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickSaveEvent.FormToSerialize)) {
            onClickSaveParameters = onClickSaveParameters.concat(Form.SerializeArray(Common.Get(onClickSaveEvent.FormToSerialize)));
        }

        // Add base64 document
        var base64DocumentParameter = {
            Name: 'Base64Scan',
            Value: base64Document,
            UiParameters: null
        };
        onClickSaveParameters = onClickSaveParameters.concat(base64DocumentParameter);

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickSaveEvent.ControllerPath + onClickSaveEvent.ActionName, onClickSaveParameters, Page.RunInstructions, documentScan);

    };

    DocumentScan.LoadDWObject = function (documentScanName, ContentFieldTest) {

        Dynamsoft.DWT.RegisterEvent('OnWebTwainReady',
            function () {
                DWObject = Dynamsoft.DWT.GetWebTwain('dwtcontrolContainer');
                if (DWObject) {

                    //responce view in scan document
                    var windowSize = window.innerWidth;
                    if (windowSize < 1367) DWObject.Width = 525;
                    else DWObject.Width = Common.Width(Common.Get('dwtcontrolContainer'));
                    
                    //DWObject.Width = Common.Width(Common.Get('dwtcontrolContainer'));
                    DWObject.Height = DocumentScanHeight;
                    var sourceDropdown = Common.Get('ScanSource');
                    var index = 0, sourceCount = DWObject.SourceCount;
                    for (; index < sourceCount; index++) {
                        sourceDropdown.options.add(new Option(DWObject.GetSourceNameItems(index), index));
                    }

                    // Setup required field event
                    Events.On(document.body, 'focusout.requiredField.' + documentScanName, '#ScanSource',
                        function (event) {
                            event.stopPropagation();
                            Field.UpdateRequiredStatus(event.target);
                        }
                    );

                    // Setup on change
                    Events.On(document.body, 'change.' + documentScanName, '#ScanSource',
                        function (event) {
                            var scanButton = Common.Get(documentScanName + 'ScanButton');
                            if (sourceDropdown.selectedIndex != 0) {
                                Common.RemoveAttr(scanButton, 'disabled');
                            }
                            else {
                                Common.SetAttr(scanButton, 'disabled', 'disabled');
                            }
                        }
                    );

                    // Trigger events for widget
                    GTC.TriggerEvent(sourceDropdown, 'widgetUpdateOptions');
                    GTC.TriggerEvent(sourceDropdown, 'widgetUpdateValue');
                    Field.UpdateRequiredStatus(sourceDropdown);


                    // Enable controls after scan
                    DWObject.RegisterEvent('OnPostAllTransfers',
                        function () {
                            if (DWObject) {
                                DWObject.CloseSource();
                                if (DWObject.HowManyImagesInBuffer > 0) {
                                    Common.RemoveAttr(Common.Get(documentScanName + 'Edit'), 'disabled');
                                    Common.RemoveAttr(Common.Get(documentScanName + 'FullScreen'), 'disabled');
                                }
                            }
                        }
                    );

                    // Enable controls after scan
                    DWObject.RegisterEvent('OnTopImageInTheViewChanged',
                        function (sImageIndex) {
                            if (DWObject) {
                                DWObject.CurrentImageIndexInBuffer = sImageIndex;
                            }
                        }
                    );

                    //thumbnail control
                    DocumentScan.thumbnail();


                    //base64 onload file
                    if (ContentFieldTest) {
                        DocumentScan.Base64PDF(ContentFieldTest);
                        Common.RemoveAttr(Common.Get(documentScanName + 'Edit'), 'disabled');
                        Common.RemoveAttr(Common.Get(documentScanName + 'FullScreen'), 'disabled');

                    }
                }
            }
        );
        var osType;

        if (navigator.appVersion.indexOf("Win") != -1) {
            osType = "Windows";


            Dynamsoft.DWT.Load();
        }

    };

    /*DocumentScan.AcquireImage = function () {

        if (DWObject) {
            var sourceDropdownScanType = Common.Get('ScanType');
            var tADFSingle = false;
            var tADFDuplex = false;
            if (sourceDropdownScanType.value == '0') {
                tADFSingle = true;
            } else if (sourceDropdownScanType.value == '2') {
                tADFSingle = true;
                tADFDuplex = true;
            }
            var sourceDropdownColor = Common.Get('ScanColor');
            var sourceDropdown = Common.Get('ScanSource');
            if (sourceDropdown.selectedIndex != 0) {
                sourceDropdown.focus();
            }
            else {

                if (sourceDropdownColor.value < 2) {
                    DWObject.SelectSource();
                }
                DWObject.IfDisableSourceAfterAcquire = true;
                DWObject.OpenSource();
                DWObject.IfShowUI = false;
                DWObject.IfShowIndicator = false;
                DWObject.IfAutomaticDeskew = true;
                DWObject.SetViewMode(1, 1);
                DWObject.PixelType = sourceDropdownColor.value;
                DWObject.Resolution = 300;
                DWObject.IfFeederEnabled = tADFSingle;
                DWObject.IfDuplexEnabled = tADFDuplex;
                DWObject.IfAutoDiscardBlankpages = false;
                if (sourceDropdownColor.value == 2) {
                    DWObject.SelectSource();
                }
                DWObject.AcquireImage();
                DocumentScan.thumbnail();
                /*DWObject.IfShowUI = false;
                DWObject.PixelType = sourceDropdownColor.value;
                DWObject.Resolution = 100;
                DWObject.IfFeederEnabled = false;
                DWObject.IfDuplexEnabled = false;
                DWObject.IfAutoDiscardBlankpages = false;
                DWObject.IfDisableSourceAfterAcquire = true;
                DWObject.SelectSource(
                    function () {
                        DWObject.OpenSource();
                        DWObject.AcquireImage();
                    }, function (errorCode, errorString) {
                        //console.log(errorString);
                    }
                );
                DocumentScan.thumbnail();
            }
        }

    };*/
    DocumentScan.AcquireImage = function () {
        if (DWObject) {
            var sourceDropdownScanType = Common.Get('ScanType');
            var tADFSingle = false;
            var tADFDuplex = false;
            if (sourceDropdownScanType.value == '0') {
                tADFSingle = true;
            } else if (sourceDropdownScanType.value == '2') {
                tADFSingle = true;
                tADFDuplex = true;
            }
            //DWObject.CloseSource();
            //DWObject.OpenSource();
            var sourceDropdownColor = Common.Get('ScanColor');
            var deviceConfiguration = {
                IfShowUI: false,
                PixelType: sourceDropdownColor.value,
                Resolution: 300,
                IfFeederEnabled: tADFSingle,
                IfDuplexEnabled: tADFDuplex,
                IfAutoDiscardBlankpages: false,
                IfDisableSourceAfterAcquire: true
            };
            console.log(deviceConfiguration)
            DWObject.SetViewMode(1, 1);
            DWObject.SelectSource();
            DWObject.AcquireImage(deviceConfiguration, function () {
                //console.log('Successful');
                DocumentScan.updatePageInfo();
            }, function (obj, errorCode, errorString) {
                console.log("err");
            });
            DocumentScan.thumbnail();
        }
    };

    DocumentScan.UploadImage = function () {
        if (DWObject) {

            DWObject.SelectAllImages();
            var fileSize = 0; //DWObject.GetSelectedImagesSize(Dynamsoft.DWT.EnumDWT_ImageType.IT_PDF) / 1000000;
            var maxSize = 5021;
            if (fileSize < maxSize) {
                DWObject.LoadImageEx('', Dynamsoft.DWT.EnumDWT_ImageType.IT_ALL,
                    function () {
                        //console.log('Load Image successfull')
                        DWObject.SelectImages([0]);
                        DocumentScan.updatePageInfo();
                    },
                    function (errorCode, errorString) {
                        //console.log('Load Image:' + errorString);
                    });
            } else {
                alert("The Upload file size is " + Math.round(fileSize) + "MB .Please upload a file less than 5 MB");
            }

        }

    };


    DocumentScan.updatePageInfo = function () {
        if (document.getElementById("DW_TotalImage"))
            document.getElementById("DW_TotalImage").textContent = DWObject.HowManyImagesInBuffer;
        if (document.getElementById("DW_CurrentImage"))
            document.getElementById("DW_CurrentImage").textContent = DWObject.CurrentImageIndexInBuffer + 1;
    }

    DocumentScan.Base64PDF = async function (base64string) {
        if (DWObject) {
            DWObject.IfShowCancelDialogWhenImageTransfer = false;


            await DWObject.LoadImageFromBase64Binary(base64string, Dynamsoft.DWT.EnumDWT_ImageType.IT_PDF);

            DWObject.SelectImages([0]);
            DocumentScan.updatePageInfo();

            /*function () {
               DWObject.SelectImages([0]);
   	
               DocumentScan.updatePageInfo();
           	
           	
           },
           function (errorCode, errorString) {
               //console.log('Load Image:' + errorString);
           }); */

        }

    };
    //thumbnail
    DocumentScan.thumbnail = function () {
        if (DWObject) {
            var objThumbnailViewer = DWObject.Viewer.createThumbnailViewer();
            objThumbnailViewer.background = "rgb(255,255,255)";
            objThumbnailViewer.showPageNumber = true;
            objThumbnailViewer.size = "10%";
            objThumbnailViewer.show();
            objThumbnailViewer.pageMargin = 1;
        }

    };


}(window.DocumentScan = window.DocumentScan || {}, window, document, Common, Cache, Events, Velocity));// Filtered Text Field
// Based On: FilteredTextField -> TextField -> MaskField -> PlaceholderField -> ValueField -> Field -> ViewElement
(function (FilteredTextField, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    FilteredTextField.Render = function (filteredTextField) {

        // Label Exists (needed for Icon rendering)
        var labelExists = true;
        if (Common.IsNotDefined(filteredTextField.Label)) {
            labelExists = false;
        }

        // Label
        var filteredTextFieldMarkup = Field.RenderLabel(filteredTextField);

        // input<, Data-Mask@, Placeholder@, Name@, Value@, @Data-Serializable, TabIndex@, Class@, Id@, Data-Disabled@
        filteredTextFieldMarkup += '<input class="gtc-input-filteredtextfield';
        if (Common.IsDefined(filteredTextField.Icon)) {
            if (labelExists == false) {
                filteredTextFieldMarkup += ' gtc-input__icon-left';
            }
            else {
                filteredTextFieldMarkup += ' gtc-input__icon-label-left';
            }
        }
        filteredTextFieldMarkup += '"' + MaskField.RenderAttributes(filteredTextField) + Field.RenderAttributes(filteredTextField);

        // Data-HasChanged@ Event
        if (filteredTextField.IsSerializable == 'Yes') {
            Events.On(document.body, 'change.fieldvaluechange.' + filteredTextField.Name, '#' + filteredTextField.Name,
                function () {
                    Common.SetAttr(this, 'data-haschanged', 'Yes');
                }
            );
        }

        // 508 Compliance
        if (filteredTextField.IsRequired == 'Yes') {
            filteredTextFieldMarkup += ' aria-required="true"';
        }

        // Free Form?
        filteredTextFieldMarkup += ' data-isfreeform="' + filteredTextField.IsFreeForm + '"';

        // Data-ControllerPath/ActionName@, Wire OnChange!
        var hasOnChange = false;
        if (Common.IsEventViewElementDefined(filteredTextField.OnChange)) {
            hasOnChange = true;
            filteredTextFieldMarkup += ' data-change=\'' + JSON.stringify(filteredTextField.OnChange) + '\'';
        }

        // OnKeyUp?
        if (Common.IsEventViewElementDefined(filteredTextField.OnKeyUp)) {
            filteredTextFieldMarkup += ' data-keyup=\'' + JSON.stringify(filteredTextField.OnKeyUp) + '\'';
        }

        // Create Filtered Text Array
        var currentValue = null;
        var convertedToken;
        if (filteredTextField.IsFreeForm == 'Yes') {
            convertedToken = Common.Decode(filteredTextField.Value);
        }
        else {
            convertedToken = Common.SanitizeToken(filteredTextField.Value);
        }
        var labelValueArray = [];
        if (Common.IsDefined(filteredTextField.OptionDetail.Options)) {
            var option, decodedValue, decodedLabel, index = 0, length = filteredTextField.OptionDetail.Options.length;
            for ( ; index < length; index++) {
                option = filteredTextField.OptionDetail.Options[index];
                decodedLabel = Common.Decode(option.Display);
                if (filteredTextField.IsFreeForm == 'Yes') {
                    decodedValue = Common.Decode(option.Value);
                }
                else {
                    decodedValue = option.Value;
                }
                var labelValueObject = {
                    label: decodedLabel,
                    value: decodedValue
                };
                labelValueArray.push(labelValueObject);

                // @Selected
                if (convertedToken == Common.SanitizeToken(decodedValue)) {
                    filteredTextFieldMarkup += ' data-raw="' + option.Value + '"';
                    currentValue = decodedLabel;
                }
            }
        }
        else if (filteredTextField.IsFreeForm == 'Yes') {
            currentValue = convertedToken;
        }

        // Call event once element is rendered
        Events.On(document.body, 'filteredtextfieldcreate.' + filteredTextField.Name, '#' + filteredTextField.Name,
            function (event) {
                var filteredTextFieldObj = Common.Get(filteredTextField.Name);
                var filteredTextFieldOption = Common.Get(filteredTextField.Name + 'OptionsSpan');

                // Store label\Values for lookups later
                Cache.Set(filteredTextFieldObj, 'labelValueArray', labelValueArray);

                // Set current display value
                filteredTextFieldObj.value = currentValue;

                // Attach focusin event for updating values correctly
                Events.On(filteredTextFieldObj, 'focusin',
                    function () {
                        Events.Off(this, 'keyup.filteredTextField');
                        Events.On(this, 'keyup.filteredTextField',
                            function (event) {
                                if (Common.IsEmptyString(this.value)) {
                                    Common.RemoveAttr(this, 'data-raw');
                                    return true;
                                }
                                var labelValueArray = Cache.Get(this, 'labelValueArray');
                                var selectedOption = FilteredTextField.Validate(this, labelValueArray);
                                if (!selectedOption) {
                                    Common.RemoveAttr(this, 'data-raw');
                                }
                                else {
                                    Common.SetAttr(this, 'data-raw', selectedOption.value);
                                    this.value = selectedOption.label;
                                }
                            }
                        );
                    }
                );

                // Attach focusout event for updating values correctly
                Events.On(filteredTextFieldObj, 'focusout',
                    function () {
                        Events.Off(filteredTextFieldObj, 'keyup.filteredTextField');
                    }
                );

                // Attach blur event for updating values correctly
                Events.On(filteredTextFieldObj, 'blur',
                    function (event) {
                        if (Common.IsEmptyString(this.value)) {
                            if (Common.HasClass(this, 'gtc-failed-masking-validation')) {
                                Form.RemoveMaskingError(this);
                            }
                            Common.RemoveAttr(this, 'data-raw');
                            return true;
                        }
                        var labelValueArray = Cache.Get(this, 'labelValueArray');
                        var selectedOption = FilteredTextField.Validate(this, labelValueArray);
                        if (filteredTextField.IsFreeForm == 'No' && !selectedOption) {
                            Common.RemoveAttr(this, 'data-raw');
                            this.select();
                            this.focus();
                            return false;
                        }
                        else if (filteredTextField.IsFreeForm == 'Yes' && !selectedOption) {
                            Common.SetAttr(this, 'data-raw', this.value);
                            return true;
                        }
                        else {
                            if (Common.HasClass(this, 'gtc-failed-masking-validation')) {
                                Form.RemoveMaskingError(this);
                            }
                            Common.SetAttr(this, 'data-raw', selectedOption.value);
                            this.value = selectedOption.label;
                            return true;
                        }
                    }
                );

                // Minimum Characters?
                var minimumCharacters = 1;
                if (filteredTextField.MinimumCharacters > 0) {
                    minimumCharacters = filteredTextField.MinimumCharacters;
                }

                var dataSource = null;
                // OnKeyUp?
                if (Common.IsEventViewElementDefined(filteredTextField.OnKeyUp)) {
                    dataSource = FilteredTextField.OnKeyUp;
                }
                else {
                    dataSource = labelValueArray;
                }

                // Initialize autocomplete
                Widgets.filteredtextfield(filteredTextFieldObj,
                    {
                        appendTo: filteredTextFieldOption,
                        minLength: minimumCharacters,
                        source: dataSource,
                        focus:
                            function (event, ui) {
                                Common.SetAttr(this, 'data-raw', ui.item.value);
                                this.value = ui.item.label;
                                return false;
                            },
                        change:
                            function (event, ui) {
                                if (filteredTextField.IsFreeForm == 'No' && Common.IsNotDefined(ui.item) && Common.IsNotEmptyString(event.target.value)) {
                                    Common.RemoveAttr(this, 'data-raw');
                                    this.select();
                                    this.focus();
                                    return false;
                                }
                                if (hasOnChange) {
                                    FilteredTextField.OnChange(event);
                                }
                            },
                        select:
                            function (event, ui) {
                                if (Common.HasClass(this, 'gtc-failed-masking-validation')) {
                                    Form.RemoveMaskingError(this);
                                }
                                Common.SetAttr(this, 'data-raw', ui.item.value);
                                this.value = ui.item.label;
                                return false;
                            },
                        response:
                            function (event, ui) {
                                var pos = Common.Position(filteredTextFieldObj);
                                var posLeft = pos.left;
                                var posTop = pos.top + Common.Height(filteredTextFieldObj, true);
                                var filteredTextFieldOptionStyle = filteredTextFieldOption.style;
                                filteredTextFieldOptionStyle.left = posLeft + 'px';
                                filteredTextFieldOptionStyle.top = posTop + 'px';
                                filteredTextFieldOptionStyle.width = Common.Height(this, true) + 'px';
                                filteredTextFieldOptionStyle.display = 'block';
                            },
                        close:
                            function (event, ui) {
                                filteredTextFieldOption.style.display = 'none';
                            },
                        position:
                            {
                                my: 'left top',
                                at: 'left top',
                                of: filteredTextFieldOption,
                                collision: 'fit',
                                within: filteredTextFieldOption
                            }
                    }
                );
            }
        );

        // @Data-NameSpace, @Data-FieldType, Type@, Input/>
        filteredTextFieldMarkup += ' data-namespace="FilteredTextField" data-configure="Pre" type="text" /><span class="gtc-input-system"><i class="gtc-icon-styles fa fa-filter"></i></span>';
        filteredTextFieldMarkup += '<span id="' + filteredTextField.Name + 'OptionsSpan" class="gtc-ui-autocomplete-span" style="display: none;"></span>';

        // Icon
        if (Common.IsDefined(filteredTextField.Icon)) {
            filteredTextFieldMarkup += Icon.Render(filteredTextField.Icon, true, labelExists);
        }
        return filteredTextFieldMarkup;

    };

    FilteredTextField.Configure = function (field, configureStage) {

        Events.Trigger(field, 'filteredtextfieldcreate');
        Widgets.textbox(field);

    };

    FilteredTextField.OnChange = function (event) {

        // Initialize
        var eventTarget = event.target;

        // Remove Prefix_
        var fieldParameterName = Common.RemovePrefix(eventTarget.name);

        // Get Field Value
        if (Common.GetAttr(eventTarget, 'data-isfreeform') == 'No' && Common.IsNotEmptyString(eventTarget.value)) {
            rawData = Common.GetAttr(eventTarget, 'data-raw');
            if (rawData.length <= 0) {
                rawData = null;
            }
        }
        else {
            rawData = eventTarget.value;
        }

        // Field Value
        var fieldValueUiParameter = [
            {
                Name: fieldParameterName,
                Value: rawData,
                UiParameters: null
            }
        ];

        // Call OnChange
        Field.OnChange(eventTarget, fieldValueUiParameter);

    };

    FilteredTextField.OnKeyUp = function (request, response) {

        // Initialize
        var field = this.element;
        var fieldId = Common.RemovePrefix(field.name);
        var onKeyUpParameters = [];

        // Get Change Event
        var onKeyUpEvent = JSON.parse(Common.GetAttr(field, 'data-keyup'));
        if (Common.IsDefined(onKeyUpEvent.UiParameters)) {
            onKeyUpParameters = onKeyUpParameters.concat(onKeyUpEvent.UiParameters);
        }

        // Change Parameters
        if (Common.IsDefined(onKeyUpEvent.FormToSerialize)) {
            var addAttr = false;
            if (Common.Closest('form', field).id == onKeyUpEvent.FormToSerialize && Common.HasAttr(field, 'data-serializable')) {
                addAttr = true;

                // Removing and adding back after form is serialized avoids failing mask validations
                Common.RemoveAttr(field, 'data-serializable');
            }
            onKeyUpParameters = onKeyUpParameters.concat(Form.SerializeArray(Common.Get(onKeyUpEvent.FormToSerialize)));
            if (addAttr) {
                Common.SetAttr(field, 'data-serializable', '');
            }
        }

        // Create and Add Field Value
        var fieldValueUiParameter = [
            {
                Name: fieldId,
                Value: request.term,
                UiParameters: null
            }
        ];
        onKeyUpParameters = onKeyUpParameters.concat(fieldValueUiParameter);

        // Response Handler
        var callback = function (pageInstructionData, requestingElement) {
            if (Common.IsDefined(pageInstructionData.PageInstructions) && pageInstructionData.PageInstructions.length == 1) {
                var updateInstruction = pageInstructionData.PageInstructions[0];
                var labelValueArray = [];
                var option, decodedDisplayValue, decodedValue, index = 0, length = updateInstruction.UiParameters.length;
                for ( ; index < length; index++) {
                    option = updateInstruction.UiParameters[index];
                    decodedDisplayValue = Common.Decode(option.Name.replace("&amp;", "&"));
                    decodedValue = Common.Decode(option.Value.replace("&amp;", "&"));
                    var labelValueObject = {
                        label: decodedDisplayValue,
                        value: decodedValue
                    };
                    labelValueArray.push(labelValueObject);
                }
                Cache.Set(field, 'labelValueArray', labelValueArray);
                response(labelValueArray);
            }
        };

        // Execute View Behavior
        Common.ExecuteViewBehavior(onKeyUpEvent.ControllerPath + onKeyUpEvent.ActionName, onKeyUpParameters, callback, field, true);

    };

    FilteredTextField.Validate = function (field, labelValueArray) {

        var selectedValue = Common.GetAttr(field, 'data-raw');
        var selectedLabel = field.value;
        var selectedOption;
        if (Common.IsDefined(labelValueArray)) {
            Common.FilterArray(labelValueArray,
                function (item) {
                    if (item.label == selectedLabel) {
                        selectedOption = item;
                    }
                }
            );
        }
        return selectedOption;

    };

    FilteredTextField.HasValue = function (filteredTextField) {

        if (Common.IsDefined(filteredTextField.Value)) {
            return true;
        }
        return false;

    };

    FilteredTextField.IsCompleted = function (filteredTextField) {

        var fieldValue = filteredTextField.value;
        if (fieldValue.length > 0) {
            return true;
        }
        return false;

    };

    FilteredTextField.UpdateOptions = function (field, optionParameters) {

        var labelValueArray = [];
        var option, decodedDisplayValue, decodedValue, index = 0, length = optionParameters.length;
        for ( ; index < length; index++) {
            option = optionParameters[index];
            decodedDisplayValue = Common.Decode(option.Name.replace("&amp;", "&"));
            decodedValue = Common.Decode(option.Value.replace("&amp;", "&"));
            var labelValueObject = {
                label: decodedDisplayValue,
                value: decodedValue
            };
            labelValueArray.push(labelValueObject);
        }
        Cache.Set(field, 'labelValueArray', labelValueArray);
        Widgets.filteredtextfield(field, 'updateOptionsForOnKeyUp', labelValueArray);

    };

    FilteredTextField.UpdateValue = function (field, fieldValue) {

        Common.SetAttr(field, 'data-raw', fieldValue);
        var isFreeForm = Common.GetAttr(field, 'data-isfreeform');
        if (Common.IsDefined(Common.GetAttr(field, 'data-serializable'))) {
            Common.SetAttr(field, 'data-haschanged', 'Yes');
        }
        if (Common.IsDefined(fieldValue) && Common.IsNotEmptyString(fieldValue)) {
            var matchingOption = FilteredTextField.FindMatchingOption(field, fieldValue);
            if (isFreeForm == 'Yes' && !matchingOption) {
                field.value = Common.Decode(fieldValue);
                Common.SetAttr(field, 'data-raw', Common.Decode(fieldValue));
            }
            else {
                if (matchingOption) {
                    field.value = matchingOption.label;
                    matchingOption.value = fieldValue;
                }
            }
        }
        else {
            field.value = '';
        }

    };

    FilteredTextField.UpdateLabel = function (field, fieldLabel, promises, context) {

        Field.UpdateLabel(field, fieldLabel, promises, context);

    };

    FilteredTextField.FindMatchingOption = function (field, fieldValue) {

        var labelValueArray = Cache.Get(field, 'labelValueArray');
        var matchingOption;
        var convertedToken = Common.SanitizeToken(fieldValue);
        var option, index = 0, length = labelValueArray.length;
        for ( ; index < length; index++) {
            option = labelValueArray[index];
            if (Common.SanitizeToken(option.value) == convertedToken) {
                matchingOption = option;
                break;
            }
        }
        return matchingOption;

    };

    FilteredTextField.ShowPinwheel = function (field) {

        Field.ShowPinwheel(field, 'FadingCircle');

    };

    FilteredTextField.HidePinwheel = function (field) {

        Field.HidePinwheel(field);

    };

} (window.FilteredTextField = window.FilteredTextField || {}, window, document, Common, Cache, Events, Velocity));
// Menu Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var MenuWidget = {

        // Private Variables
        defaultElement: '<ul>',
        delay: 300,

        // Options
        options: {
            items: '> *',
            menus: 'ul',
            position: {
                my: 'left-1 top',
                at: 'right top'
            },
            role: 'menu',

            // callbacks
            blur: null,
            focus: null,
            select: null
        },

        // Public Methods
        refresh: function () {

            var items = [], thisWidget = this;
            var submenus = Common.QueryAll(thisWidget.options.menus, thisWidget.element);

            // Initialize nested menus
            var filteredSubMenus = Common.FilterElementArray(submenus, ':not(.gtc-ui-menu)');
            Common.AddClassesToElements(filteredSubMenus, 'gtc-ui-menu gtc-ui-widget gtc-ui-widget-content gtc-ui-front');
            var element, item, submenuCarat, index = 0, length = filteredSubMenus.length;
            for ( ; index < length; index++) {
                element = filteredSubMenus[index];
                element.style.display = 'none';
                Common.SetAttr(element, 'role', thisWidget.options.role);
                Common.SetAttr(element, 'aria-hidden', 'true');
                Common.SetAttr(element, 'aria-expanded', 'false');
                item = menu.parentNode;
                submenuCarat = Common.Create('span');
                Cache.Set(submenuCarat, 'gtc-ui-menu-submenu-carat', true);
                Common.SetAttr(item, 'aria-haspopup', 'true');
                item.insertBefore(submenuCarat, item.firstChild);
                Common.SetAttr(element, 'aria-labelledby', item.id);
            }

            submenus.push(thisWidget.element);
            var menuItems;
            index = 0, length = submenus.length;
            for ( ; index < length; index++) {
                var itemSelector = thisWidget.options.items;
                if (itemSelector == '> *') {
                    itemSelector = '[id="' + submenus[index].id + '"] ' + itemSelector;
                }
                menuItems = Common.QueryAll(itemSelector, submenus[index]);
                menuItems = Common.GetChildren(submenus[index]);
                if (menuItems.length > 0) {
                    Array.prototype.push.apply(items, menuItems);
                }
            }

            // Initialize menu-items containing spaces and/or dashes only as dividers
            var itemsNotMenuItem = Common.FilterElementArray(items, ':not(.gtc-ui-menu-item)');
            index = 0, length = itemsNotMenuItem.length;
            for ( ; index < length; index++) {
                if (thisWidget._isDivider(itemsNotMenuItem[index])) {
                    Common.AddClasses(itemsNotMenuItem[index], 'gtc-ui-widget-content gtc-ui-menu-divider');
                }
            }

            // Don't refresh list items that are already adapted
            var itemsNotMenuItemOrDivider = Common.FilterElementArray(itemsNotMenuItem, ':not(.gtc-ui-menu-divider)');
            index = 0, length = itemsNotMenuItemOrDivider.length;
            for ( ; index < length; index++) {
                Common.AddClass(itemsNotMenuItemOrDivider[index], 'gtc-ui-menu-item');
                if (!itemsNotMenuItemOrDivider[index].id) {
                    itemsNotMenuItemOrDivider[index].id = 'GTC' + Common.GenerateUniqueID();
                }
                Common.SetAttr(itemsNotMenuItemOrDivider[index], 'tabIndex', '-1');
                Common.SetAttr(itemsNotMenuItemOrDivider[index], 'role', thisWidget._itemRole());
            }

            // Add aria-disabled attribute to any disabled menu item
            var stateDisabled = Common.FilterElementArray(items, '.gtc-ui-state-disabled');
            index = 0, length = stateDisabled.length;
            for ( ; index < length; index++) {
                Common.SetAttr(stateDisabled[index], 'aria-disabled', 'true');
            }

            // If the active item has been removed, blur the menu
            if (thisWidget.active && !thisWidget.element.contains(thisWidget.active)) {
                thisWidget.blur();
            }

        },

        focus: function (event, item) {

            var nested, focused, thisWidget = this;
            thisWidget.blur(event, event && event.type === 'focus');

            thisWidget._scrollIntoView(item);

            thisWidget.active = item;
            Common.AddClass(thisWidget.active, 'gtc-ui-state-focus');
            Common.RemoveClass(thisWidget.active, 'gtc-ui-state-active');
            focused = thisWidget.active;

            // Only update aria-activedescendant if there's a role
            // otherwise we assume focus is managed elsewhere
            if (thisWidget.options.role) {
                Common.SetAttr(thisWidget.element, 'aria-activedescendant', focused.id);
            }

            // Highlight active parent menu item, if any
            var closestMenuItem = Common.Closest('.gtc-ui-menu-item', thisWidget.active.parentNode);
            if (closestMenuItem) {
                Common.AddClass(closestMenuItem, 'gtc-ui-state-active');
            }
            if (event && event.type === 'keydown') {
                thisWidget._close();
            }
            else {
                thisWidget.timer = setTimeout(
                    function () {
                        thisWidget._close();
                    }, thisWidget.delay
                );
            }
            nested = Common.GetChildren(item, '.gtc-ui-menu');
            if (nested.length && event && (/^mouse/.test(event.type))) {
                thisWidget._startOpening(nested);
            }
            thisWidget.activeMenu = item.parentNode;
            thisWidget._trigger('focus', event, { item: item });

        },

        blur: function (event, fromFocus) {

            var thisWidget = this;
            if (!fromFocus) {
                clearTimeout(thisWidget.timer);
            }

            if (!thisWidget.active) {
                return;
            }

            Common.RemoveClass(thisWidget.active, 'gtc-ui-state-focus');
            thisWidget.active = null;

            thisWidget._trigger('blur', event, { item: thisWidget.active });

        },

        collapseAll: function (event, all) {

            var thisWidget = this;
            clearTimeout(thisWidget.timer);
            thisWidget.timer = setTimeout(
                function () {
                    // If we were passed an event, look for the submenu that contains the event
                    var currentMenu = all ? thisWidget.element : Common.Closest('.gtc-ui-menu', event && event.target);

                    // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
                    if (!currentMenu) {
                        currentMenu = thisWidget.element;
                    }

                    thisWidget._close(currentMenu);

                    thisWidget.blur(event);
                    thisWidget.activeMenu = currentMenu;
                }, thisWidget.delay
            );

        },

        collapse: function (event) {

            var thisWidget = this;
            var newItem = thisWidget.active && Common.Closest('.gtc-ui-menu-item', thisWidget.active.parentNode);
            if (newItem && newItem.length) {
                thisWidget._close();
                thisWidget.focus(event, newItem);
            }

        },

        expand: function (event) {

            var thisWidget = this;
            var children = Common.GetChildren(thisWidget.active, '.gtc-ui-menu');
            var match = [], child, items, index = 0, length = children.length;
            for ( ; index < length; index++) {
                child = children[index];
                var itemSelector = thisWidget.options.items;
                if (itemSelector == '> *') {
                    itemSelector = '[id="' + child.id + '"] ' + itemSelector;
                }
                items = Common.QueryAll(itemSelector, child);
                if (items.length > 0) {
                    Array.prototype.push.apply(match, items);
                }
            }
            var newItem = thisWidget.active && match[0];

            if (newItem) {
                thisWidget._open(newItem.parentNode);

                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
                setTimeout(
                    function () {
                        thisWidget.focus(event, newItem);
                    }, 0
                );
            }

        },

        next: function (event) {

            var thisWidget = this;
            thisWidget._move('Next', 'first', event);

        },

        previous: function (event) {

            var thisWidget = this;
            thisWidget._move('Previous', 'last', event);

        },

        isFirstItem: function () {

            var thisWidget = this;
            return thisWidget.active && !Common.GetAllSibling(thisWidget.active, Common.SiblingType.Previous, '.gtc-ui-menu-item').length;

        },

        isLastItem: function () {

            var thisWidget = this;
            return thisWidget.active && !Common.GetAllSibling(thisWidget.active, Common.SiblingType.Next, '.gtc-ui-menu-item').length;

        },

        nextPage: function (event) {

            var thisWidget = this;
            var item, base, height;

            if (!thisWidget.active) {
                thisWidget.next(event);
                return;
            }
            if (thisWidget.isLastItem()) {
                return;
            }
            if (thisWidget._hasScroll()) {
                base = Common.Offset(thisWidget.active).top;
                height = Common.Height(thisWidget.element);
                var nextSiblings = Common.GetAllSibling(thisWidget.active, Common.SiblingType.Next, '.gtc-ui-menu-item');
                var index = 0, length = nextSiblings.length;
                for ( ; index < length; index++) {
                    item = nextSiblings[index];
                    if (!Common.Offset(item).top - base - height < 0) {
                        break;
                    }
                }
                thisWidget.focus(event, item);
            }
            else {
                var itemSelector = thisWidget.options.items;
                if (itemSelector == '> *') {
                    itemSelector = '[id="' + thisWidget.activeMenu.id + '"] ' + itemSelector;
                }
                var allItems = Common.QueryAll(itemSelector, thisWidget.activeMenu);
                var filterInt;
                if (!thisWidget.active) {
                    filterInt = 0;
                }
                else {
                    filterInt = allItems.length - 1;
                }
                thisWidget.focus(event, allItems[filterInt]);
            }

        },

        previousPage: function (event) {

            var thisWidget = this;
            var item, base, height;
            if (!thisWidget.active) {
                thisWidget.next(event);
                return;
            }
            if (thisWidget.isFirstItem()) {
                return;
            }
            if (thisWidget._hasScroll()) {
                base = Common.Offset(thisWidget.active).top;
                height = Common.Height(thisWidget.element);
                var prevSiblings = Common.GetAllSibling(thisWidget.active, Common.SiblingType.Previous, '.gtc-ui-menu-item');
                var index = 0, length = prevSiblings.length;
                for ( ; index < length; index++) {
                    item = prevSiblings[index];
                    if (!Common.Offset(item).top - base + height > 0) {
                        break;
                    }
                }

                thisWidget.focus(event, item);
            }
            else {
                var itemSelector = thisWidget.options.items;
                if (itemSelector == '> *') {
                    itemSelector = '[id="' + thisWidget.activeMenu.id + '"] ' + itemSelector;
                }
                var allItems = Common.QueryAll(itemSelector, thisWidget.activeMenu);
                thisWidget.focus(event, allItems[0]);
            }

        },

        select: function (event) {

            var thisWidget = this;

            // TODO: It should never be possible to not have an active item at this
            // point, but the tests don't trigger mouseenter before click.
            thisWidget.active = thisWidget.active || Common.Closest('.gtc-ui-menu-item', event.target);
            var ui = { item: thisWidget.active };
            if (!Common.HasClass(thisWidget.active, '.gtc-ui-menu' )) {
                thisWidget.collapseAll(event, true);
            }
            thisWidget._trigger('select', event, ui);

        },

        // Private Methods
        _destroy: function() {

            var thisWidget = this;

            // Destroy (sub)menus
            Common.RemoveAttr(thisWidget.element, 'aria-activedescendant');
            var allMenuElements = Common.QueryAll('.gtc-ui-menu', thisWidget.element);
            allMenuElements.push(thisWidget.element);
            Common.RemoveClassesFromElements(allMenuElements, 'gtc-ui-menu gtc-ui-widget gtc-ui-widget-content gtc-ui-menu-icons gtc-ui-front');
            var element, index = 0, length = allMenuElements.length;
            for ( ; index < length; index++) {
                element = allMenuElements[index];
                Common.RemoveAttr(element, 'role');
                Common.RemoveAttr(element, 'tabIndex');
                Common.RemoveAttr(element, 'aria-labelledby');
                Common.RemoveAttr(element, 'aria-expanded');
                Common.RemoveAttr(element, 'aria-hidden');
                Common.RemoveAttr(element, 'aria-disabled');
                if (/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(element.id)) {
                    Common.RemoveAttr(element, 'id');
                }
                element.style.display = '';
            }

            // Destroy menu items
            var allMenuItems = Common.QueryAll('.gtc-ui-menu-item'. thisWidget.element);
            Common.RemoveClassesFromElements(allMenuItems, 'gtc-ui-menu-item gtc-ui-state-hover');
            index = 0, length = allMenuItems.length;
            for ( ; index < length; index++) {
                Common.RemoveAttr(element, 'role');
                Common.RemoveAttr(element, 'aria-disabled');
                Common.RemoveAttr(element, 'tabIndex');
                Common.RemoveAttr(element, 'aria-haspopup');
                if (/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(element.id)) {
                    Common.RemoveAttr(element, 'id');
                }
                var children = GetChildren(element);
                var child, childIndex = 0, childLength = children.length;
                for ( ; childIndex < childLength; childIndex++) {
                    child = children[index];
                    if (Cache.Get(child, 'gtc-ui-menu-submenu-carat')) {
                        Common.Remove(child);
                    }
                }
            }

            // Destroy menu dividers
            var allDividers = Common.QueryAll('.gtc-ui-menu-divider', thisWidget.element);
            Common.RemoveClassesFromElements(allDividers, 'gtc-ui-menu-divider gtc-ui-widget-content');

        },

        _keydown: function (event) {

            var thisWidget = this;
            var match, prev, character, skip, preventDefault = true;

            switch (event.keyCode) {
                case GTC.Keyboard.PageUp:
                    thisWidget.previousPage(event);
                    break;
                case GTC.Keyboard.PageDown:
                    thisWidget.nextPage(event);
                    break;
                case GTC.Keyboard.Home:
                    thisWidget._move('first', 'first', event);
                    break;
                case GTC.Keyboard.End:
                    thisWidget._move('last', 'last', event);
                    break;
                case GTC.Keyboard.Up:
                    thisWidget.previous(event);
                    break;
                case GTC.Keyboard.Down:
                    thisWidget.next(event);
                    break;
                case GTC.Keyboard.Left:
                    thisWidget.collapse(event);
                    break;
                case GTC.Keyboard.Right:
                    if (thisWidget.active && !Common.HasClass(thisWidget.active, 'gtc-ui-state-disabled')) {
                        thisWidget.expand(event);
                    }
                    break;
                case GTC.Keyboard.Enter:
                case GTC.Keyboard.Space:
                    thisWidget._activate(event);
                    break;
                case GTC.Keyboard.Escape:
                    thisWidget.collapse(event);
                    break;
                default:
                    preventDefault = false;
                    prev = thisWidget.previousFilter || '';
                    character = String.fromCharCode(event.keyCode);
                    skip = false;

                    clearTimeout(thisWidget.filterTimer);

                    if (character === prev) {
                        skip = true;
                    }
                    else {
                        character = prev + character;
                    }

                    match = thisWidget._filterMenuItems(character);
                    var activeIndex = Common.GetIndex(Common.GetSibling(thisWidget.active, Common.SiblingType.Next));
                    match = skip && match.index(activeIndex) !== -1 ? Common.GetAllSibling(thisWidget.active, Common.SiblingType.Next, '.gtc-ui-menu-item') : match;

                    // If no matches on the current filter, reset to the last character pressed
                    // to move down the menu to the first item that starts with that character
                    if (!match.length) {
                        character = String.fromCharCode(event.keyCode);
                        match = thisWidget._filterMenuItems(character);
                    }

                    if (match.length) {
                        thisWidget.focus(event, match);
                        thisWidget.previousFilter = character;
                        thisWidget.filterTimer = setTimeout(
                            function () {
                                delete that.previousFilter;
                            }, 1000
                        );
                    }
                    else {
                        delete thisWidget.previousFilter;
                    }
            }

            if (preventDefault) {
                event.preventDefault();
            }

        },

        _activate: function (event) {

            var thisWidget = this;
            if (!Common.HasClass(thisWidget.active, 'gtc-ui-state-disabled')) {
                if (thisWidget.active.matches('[aria-haspopup="true"]')) {
                    thisWidget.expand(event);
                }
                else {
                    thisWidget.select(event);
                }
            }

        },

        _itemRole: function () {

            var thisWidget = this;
            return {
                menu: 'menuitem',
                listbox: 'option'
            }[thisWidget.options.role];

        },

        _setOption: function (key, value) {

            var thisWidget = this;
            if (key === 'disabled') {
                if (!!value) {
                    Common.AddClass(thisWidget.element, 'gtc-ui-state-disabled');
                }
                else {
                    Common.RemoveClass(thisWidget.element, 'gtc-ui-state-disabled');
                }
                Common.SetAttr(thisWidget.element, 'aria-disabled', value);
            }
            thisWidget._super(key, value);

        },

        _scrollIntoView: function (item) {

            var thisWidget = this;
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            if (thisWidget._hasScroll()) {
                borderTop = parseFloat(Common.GetStyle(thisWidget.activeMenu, 'borderTopWidth')) || 0;
                paddingTop = parseFloat(Common.GetStyle(thisWidget.activeMenu, 'paddingTop')) || 0;
                offset = Common.Offset(item).top - Common.Offset(thisWidget.activeMenu).top - borderTop - paddingTop;
                scroll = thisWidget.activeMenu.scrollTop;
                elementHeight = Common.Height(thisWidget.activeMenu);
                itemHeight = Common.Height(item, true);

                if (offset < 0) {
                    thisWidget.activeMenu.scrollTop = scroll + offset;
                }
                else if (offset + itemHeight > elementHeight) {
                    thisWidget.activeMenu.scrollTop = scroll + offset - elementHeight + itemHeight;
                }
            }

        },

        _startOpening: function (submenu) {

            var thisWidget = this;
            clearTimeout(thisWidget.timer);

            // Don't open if already open fixes a Firefox bug that caused a .5 pixel
            // shift in the submenu position when mousing over the carat icon
            if (Common.GetAttr(submenu, 'aria-hidden') !== 'true') {
                return;
            }

            thisWidget.timer = setTimeout(
                function () {
                    thisWidget._close();
                    thisWidget._open(submenu);
                }, thisWidget.delay
            );

        },

        _open: function (submenu) {

            var thisWidget = this;
            var position = Common.MergeObjects({
                of: thisWidget.active
            }, thisWidget.options.position );

            clearTimeout(thisWidget.timer);
            var menuElements = Common.QueryAll('.gtc-ui-menu', thisWidget.element);
            var parentMenuElements = Common.ParentsUntil(null, submenu, '.gtc-ui-menu');
            var element, index = 0, length = menuElements.length;
            for ( ; index < length; index++) {
                element = menuElements[index];
                if (Common.IsInArray(element, parentMenuElements) == -1) {
                    element.style.display = 'none';
                    Common.SetAttr(element, 'aria-hidden', 'true');
                }
            }

            submenu.style.display = 'block';
            Common.RemoveAttr(submenu, 'aria-hidden');
            Common.SetAttr(submenu, 'aria-expanded', 'true');

            // TODO: Make sure positioning is handled correctly without this.
            // Position.Set(submenu, position);

        },

        // With no arguments, closes the currently active menu - if nothing is active
        // it closes all menus.  If passed an argument, it will search for menus BELOW
        _close: function (startMenu) {

            var thisWidget = this;
            if (!startMenu) {
                startMenu = thisWidget.active ? thisWidget.active.parentNode : thisWidget.element;
            }

            var menuElements = Common.QueryAll('.gtc-ui-menu', startMenu);
            var element, index = 0, length = menuElements.length;
            for ( ; index < length; index++) {
                element = menuElements[index];
                element.style.display = 'none';
                Common.SetAttr(element, 'aria-hidden', 'true');
                Common.SetAttr(element, 'aria-expanded', 'false');
            }

            var activeElements = Common.QueryAll('.gtc-ui-state-active:not(.gtc-ui-state-focus)');
            index = 0, length = activeElements.length;
            for ( ; index < length; index++) {
               Common.RemoveClass(activeElements[index], 'gtc-ui-state-active');
            }

        },

        _closeOnDocumentClick: function (event) {

            return !Common.Closest('.gtc-ui-menu', event.target);

        },

        _isDivider: function (item) {

            // Match hyphen, em dash, en dash
            return !/[^\-\u2014\u2013\s]/.test(item.textContent);

        },

        _move: function (direction, filter, event) {

            var next, thisWidget = this;
            if (thisWidget.active) {
                if (direction === 'first' || direction === 'last') {
                    if (direction == 'first') {
                        var prevSiblings = Common.GetAllSibling(thisWidget.active, Common.SiblingType.Previous, '.gtc-ui-menu-item');
                        next = prevSiblings[prevSiblings.length - 1];
                    }
                    else {
                        var nextSiblings = Common.GetAllSibling(thisWidget.active, Common.SiblingType.Next, '.gtc-ui-menu-item');
                        next = nextSiblings[nextSiblings.length - 1];
                    }
                }
                else {
                    next = Common.GetSibling(thisWidget.active, direction, '.gtc-ui-menu-item');
                }
            }
            if (!next || !thisWidget.active) {
                var itemSelector = thisWidget.options.items;
                if (itemSelector == '> *') {
                    itemSelector = '[id="' + thisWidget.activeMenu.id + '"] ' + itemSelector;
                }
                var allItems = Common.QueryAll(itemSelector, thisWidget.activeMenu);
                var filterInt;
                if (filter == 'first') {
                    filterInt = 0;
                }
                else {
                    filterInt = allItems.length - 1;
                }
                next = allItems[filterInt];
            }
            thisWidget.focus(event, next);

        },

        _hasScroll: function () {

            var thisWidget = this;
            return Common.Height(thisWidget.element, true) < thisWidget.element.scrollHeight;

        },

        _filterMenuItems: function (character) {

            var thisWidget = this;
            var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&'),
                regex = new RegExp('^' + escapedCharacter, 'i');

            var itemSelector = thisWidget.options.items;
            if (itemSelector == '> *') {
                itemSelector = '[id="' + thisWidget.activeMenu.id + '"] ' + itemSelector;
            }
            var allItems = Common.QueryAll(itemSelector, thisWidget.activeMenu);
            var menuItems = Common.FilterElementArray(allItems, '.gtc-ui-menu-item');
            var filteredMenuItems = Common.FilterArray(menuItems,
                function (value) {
                    var text = value.textContent.trim();
                    return regex.test(text);
                }
            );
            return filteredMenuItems;

        },

        _create: function () {

            var thisWidget = this;
            thisWidget.activeMenu = thisWidget.element;

            // Flag used to prevent firing of the click handler
            // as the event bubbles up through nested menus
            thisWidget.mouseHandled = false;
            if (!thisWidget.element.id) {
                thisWidget.element.id = 'GTC' + Common.GenerateUniqueID();
            }
            Common.AddClasses(thisWidget.element, 'gtc-ui-menu gtc-ui-widget gtc-ui-widget-content');
            Common.SetAttr(thisWidget.element, 'role', thisWidget.options.role);
            Common.SetAttr(thisWidget.element, 'tabIndex', '0');

            if (thisWidget.options.disabled) {
                Common.AddClass(thisWidget.element, 'gtc-ui-state-disabled');
                Common.SetAttr(thisWidget.element, 'aria-disabled', 'true');
            }

            thisWidget._on({
                // Prevent focus from sticking to links inside menu after clicking
                // them (focus should always stay on UL during navigation).
                'mousedown .gtc-ui-menu-item': function (event) {

                    event.preventDefault();

                },
                'click .gtc-ui-menu-item': function (event) {

                    var target = event.target;
                    if (!this.mouseHandled && !Common.HasClass(target, 'gtc-ui-state-disabled')) {
                        this.select(event);

                        // Only set the mouseHandled flag if the event will bubble, see #9469.
                        if (!event.isPropagationStopped()) {
                            this.mouseHandled = true;
                        }

                        // Open submenu on click
                        if (Common.HasClass(target, 'gtc-ui-menu')) {
                            this.expand(event);
                        }
                        else if (this.element != this.document.activeElement && Common.Closest('.gtc-ui-menu', this.document.activeElement)) {

                            // Redirect focus to the menu
                            Events.Trigger(this.element, 'focus', [true]);

                            // If the active item is on the top level, let it stay active.
                            // Otherwise, blur the active item since it is no longer visible.
                            if (this.active && Common.ParentsUntil(null, this.active, '.gtc-ui-menu').length === 1) {
                                clearTimeout(this.timer);
                            }
                        }
                    }

                },
                'mouseenter .gtc-ui-menu-item': function (event) {

                    // Ignore mouse events while typeahead is active, see #10458.
                    // Prevents focusing the wrong item when typeahead causes a scroll while the mouse
                    // is over an item in the menu
                    if (this.previousFilter) {
                        return;
                    }
                    var target = event.currentTarget;

                    // Remove gtc-ui-state-active class from siblings of the newly focused menu item
                    // to avoid a jump caused by adjacent elements both having a class with a border
                    var siblings = Common.GetAllSibling(target, Common.SiblingType.All, '.gtc-ui-state-active');
                    Common.RemoveClassFromElements(siblings, 'gtc-ui-state-active');
                    this.focus(event, target);

                },
                mouseleave: 'collapseAll',
                'mouseleave .gtc-ui-menu': 'collapseAll',
                focus: function (event, keepActiveItem) {

                    // If there's already an active item, keep it active
                    // If not, activate the first item
                    var itemSelector = this.options.items;
                    if (itemSelector == '> *') {
                        itemSelector = '[id="' + this.element.id + '"] ' + itemSelector;
                    }
                    var item = this.active || Common.QueryAll(itemSelector, this.element)[0];

                    if (!keepActiveItem) {
                        this.focus(event, item);
                    }

                },
                blur: function (event) {

                    setTimeout(
                        function () {
                            if (!thisWidget.element.contains(thisWidget.document.activeElement)) {
                                thisWidget.collapseAll(event);
                            }
                        }, 0
                    );

                },
                keydown: '_keydown'
            });

            thisWidget.refresh();

            // Clicks outside of a menu collapse any open menus
            thisWidget._on(thisWidget.document, {
                click: function (event) {
                    if (this._closeOnDocumentClick(event)) {
                        this.collapseAll(event);
                    }

                    // Reset the mouseHandled flag
                    this.mouseHandled = false;
                }
            });

        }

    };

    WidgetFactory.Register('gtc.menu', MenuWidget);

} (window, document, Common, Cache, Events, Velocity));
// Filtered Text Field Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var FilteredTextFieldWidget = {

        // Private Variables
        defaultElement: '<input>',
        requestIndex: 0,
        pending: 0,

        // Options
        options: {
            appendTo: null,
            autoFocus: false,
            delay: 300,
            minLength: 1,
            position: {
                my: 'left top',
                at: 'left bottom',
                collision: 'none'
            },
            source: null,

            // callbacks
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },

        // Public Methods
        search: function (value, event) {

            var thisWidget = this;
            value = value != null ? value : thisWidget._value();

            // Always save the actual value, not the one passed as an argument
            thisWidget.term = thisWidget._value();

            if (value.length < thisWidget.options.minLength) {
                return thisWidget.close(event);
            }

            if (thisWidget._trigger('search', event) === false) {
                return;
            }

            return thisWidget._search(value);
        },

        close: function (event) {

            var thisWidget = this;
            thisWidget.cancelSearch = true;
            thisWidget._close(event);

        },

        updateOptionsForOnKeyUp: function (content) {

            var thisWidget = this;
            thisWidget.__response(content, true);

        },

        widget: function () {

            var thisWidget = this;
            return thisWidget.menu.element;

        },

        // Private Methods
        _destroy: function () {

            var thisWidget = this;
            clearTimeout(thisWidget.searching);
            Common.RemoveClass(thisWidget.element, 'gtc-ui-autocomplete-input');
            Common.RemoveAttr(thisWidget.element, 'autocomplete');
            Common.Remove(thisWidget.menu.element);
            Common.Remove(thisWidget.liveRegion);

        },

        _setOption: function (key, value) {

            var thisWidget = this;
            thisWidget._super( key, value );
            if (key === 'source') {
                thisWidget._initSource();
            }
            if (key === 'appendTo') {
                thisWidget._appendTo().appendChild(thisWidget.menu.element);
            }
            if (key === 'disabled' && value && thisWidget.xhr) {
                thisWidget.xhr.abort();
            }

        },

        _appendTo: function () {

            var thisWidget = this;
            var element = thisWidget.options.appendTo;

            if (element) {
                element = element.nodeType ? element : Common.QueryAll(element, thisWidget.document)[0];
            }

            if (!element) {
                element = Common.Closest('.gtc-ui-front', thisWidget.element);
            }

            if (!element) {
                element = thisWidget.document.body;
            }

            return element;

        },

        _initSource: function () {

            var array, url, thisWidget = this;
            if (Common.IsArray(thisWidget.options.source)) {
                array = thisWidget.options.source;
                thisWidget.source = function (request, response) {
                    response(WidgetFactory.gtc.filteredtextfield.filter(array, request.term));
                };
            }
            else if (Common.IsString(thisWidget.options.source)) {
                url = thisWidget.options.source;
                thisWidget.source = function (request, response) {
                    if (thisWidget.xhr) {
                        thisWidget.xhr.abort();
                    }
                    thisWidget.xhr = new XMLHttpRequest();
                    thisWidget.xhr.open('POST', url, true);
                    thisWidget.xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
                    thisWidget.xhr.onload = function () {
                        if (this.status >= 200 && this.status < 400) {
                            // Success!
                            var behaviorData = JSON.parse(this.response);
                            response( behaviorData );
                        }
                        else {
                            response([]);
                        }
                    };
                    thisWidget.xhr.onerror = function () {
                        response([]);
                    };
                    thisWidget.xhr.send(JSON.stringify(request));
                };
            }
            else {
                thisWidget.source = thisWidget.options.source;
            }

        },

        _searchTimeout: function (event) {

            var thisWidget = this;
            clearTimeout(thisWidget.searching);
            thisWidget.searching = setTimeout(
                function () {
                    // Search if the value has changed, or if the user retypes the same value (see #7434)
                    var equalValues = thisWidget.term === thisWidget._value(),
                        menuVisible = Common.IsVisible(thisWidget.menu.element),
                        modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;

                    if (!equalValues || (equalValues && !menuVisible && !modifierKey)) {
                        thisWidget.selectedItem = null;
                        thisWidget.search(null, event);
                    }
                }, thisWidget.options.delay
            );

        },

        _search: function (value) {

            var thisWidget = this;
            thisWidget.pending++;
            Common.AddClass(thisWidget.element, 'gtc-ui-autocomplete-loading');
            thisWidget.cancelSearch = false;
            thisWidget.source({ term: value }, thisWidget._response());

        },

        _response: function () {

            var thisWidget = this;
            var index = ++thisWidget.requestIndex;

            return Common.Proxy(
                function (content) {
                    if (index === this.requestIndex) {
                        this.__response(content);
                    }

                    this.pending--;
                    if (!this.pending) {
                        Common.RemoveClass(this.element, 'gtc-ui-autocomplete-loading');
                    }
                }, thisWidget
            );

        },

        __response: function (content, stopSuggestOpen) {

            var thisWidget = this;
            if (content) {
                content = thisWidget._normalize(content);
            }
            thisWidget._trigger('response', null, { content: content });
            if (!thisWidget.options.disabled && content && content.length && !thisWidget.cancelSearch && !stopSuggestOpen) {
                thisWidget._suggest(content);
                thisWidget._trigger('open');
            }
            else {
                // Use ._close() instead of .close() so we don't cancel future searches
                thisWidget._close();
            }

        },

        _close: function (event) {

            var thisWidget = this;
            if (Common.IsVisible(thisWidget.menu.element)) {
                thisWidget.menu.element.style.display = 'none';
                thisWidget.menu.blur();
                thisWidget.isNewMenu = true;
                thisWidget._trigger('close', event);
            }

        },

        _change: function (event) {

            var thisWidget = this;
            if (thisWidget.previous !== thisWidget._value()) {
                thisWidget._trigger('change', event, { item: thisWidget.selectedItem });
            }

        },

        _normalize: function (items) {

            // Assume all items have the right format when the first item is complete
            if (items.length && items[0].label && items[0].value) {
                return items;
            }
            var newItems = [];
            var item, index = 0, length = items.length;
            for ( ; index < length; index++) {
                item = items[index];
                if (Common.IsString(item)) {
                    newItems.push({
                        label: item,
                        value: item
                    });
                }
                else {
                    newItems.push(Common.MergeObjects({}, item, {
                        label: item.label || item.value,
                        value: item.value || item.label
                    }));
                }
            }
            return newItems;

        },

        _suggest: function (items) {

            var thisWidget = this;
            var ul = thisWidget.menu.element;
            if (ul.nodeType === 1) {
                // Get all elements inside element to be removed and clean up their data and events as well
                // INFO: getElementsByTagName is MUCH faster in this context than querySelectorAll (NodeList - live vs static)
                Cache.CleanElementData(ul.getElementsByTagName('*'));
            }
            ul.textContent = '';
            thisWidget._renderMenu(ul, items);
            thisWidget.isNewMenu = true;
            thisWidget.menu.refresh();

            // size and position menu
            ul.style.display = 'block';
            thisWidget._resizeMenu();

            // TODO: Make sure positioning is handled correctly without this.
            // Position.Set(ul, Common.MergeObjects({of: thisWidget.element}, thisWidget.options.position));

            if (thisWidget.options.autoFocus) {
                thisWidget.menu.next();
            }

        },

        _resizeMenu: function () {

            var thisWidget = this;
            var ul = thisWidget.menu.element;
            ul.style.width = '';
            var max = Math.max(
                // Firefox wraps long text (possibly a rounding bug)
                // so we add 1px to avoid the wrapping (#7513)
                Common.Width(ul, true) + 1,
                Common.Width(thisWidget.element, true)
            );
            thisWidget._appendTo().style.width =  max + 'px';

        },

        _renderMenu: function (ul, items) {

            var thisWidget = this;
            var index = 0, length = items.length;
            for ( ; index < length; index++) {
                thisWidget._renderItemData(ul, items[index]);
            }

        },

        _renderItemData: function (ul, item) {

            var thisWidget = this;
            var renderedItem = thisWidget._renderItem(ul, item);
            return Cache.Set(renderedItem, 'gtc-ui-autocomplete-item', item);

        },

        _renderItem: function (ul, item) {

            var newLi = Common.Create('li');
            newLi.textContent = item.label;
            ul.appendChild(newLi);
            return newLi;

        },

        _move: function (direction, event) {

            var thisWidget = this;
            if (!Common.IsVisible(thisWidget.menu.element)) {
                thisWidget.search( null, event );
                return;
            }
            if (thisWidget.menu.isFirstItem() && /^previous/.test(direction) || thisWidget.menu.isLastItem() && /^next/.test(direction)) {

                if (!thisWidget.isMultiLine) {
                    thisWidget._value(thisWidget.term);
                }

                thisWidget.menu.blur();
                return;
            }
            thisWidget.menu[direction](event);

        },

        _value: function () {

            var thisWidget = this;
            return thisWidget.element.value;

        },

        _keyEvent: function (keyEvent, event) {

            var thisWidget = this;
            if (!thisWidget.isMultiLine || Common.IsVisible(thisWidget.menu.element)) {
                thisWidget._move(keyEvent, event);

                // Prevents moving cursor to beginning/end of the text field in some browsers
                event.preventDefault();
            }

        },

        _create: function () {

            var thisWidget = this;

            // Some browsers only repeat keydown events, not keypress events,
            // so we use the suppressKeyPress flag to determine if we've already
            // handled the keydown event. #7269
            // Unfortunately the code for & in keypress is the same as the up arrow,
            // so we use the suppressKeyPressRepeat flag to avoid handling keypress
            // events when we know the keydown event was used to modify the
            // search term. #7799
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
                nodeName = thisWidget.element.nodeName.toLowerCase(),
                isTextarea = nodeName === 'textarea',
                isInput = nodeName === 'input';

            thisWidget.isMultiLine =
                // Textareas are always multi-line
                isTextarea ? true :
                // Inputs are always single-line, even if inside a contentEditable element
                // IE also treats inputs as contentEditable
                isInput ? false :
                // All other element types are determined by whether or not they're contentEditable
                thisWidget.element.isContentEditable;

            thisWidget.isNewMenu = true;

            Common.AddClass(thisWidget.element, 'gtc-ui-autocomplete-input');
            Common.SetAttr(thisWidget.element, 'autocomplete', 'off');

            thisWidget._on(thisWidget.element, {
                keydown: function (event) {

                    if (this.element.readOnly) {
                        suppressKeyPress = true;
                        suppressInput = true;
                        suppressKeyPressRepeat = true;
                        return;
                    }

                    suppressKeyPress = false;
                    suppressInput = false;
                    suppressKeyPressRepeat = false;
                    var keyCode = GTC.Keyboard;
                    switch ( event.keyCode ) {
                        case keyCode.PageUp:
                            suppressKeyPress = true;
                            this._move('previousPage', event);
                            break;
                        case keyCode.PageDown:
                            suppressKeyPress = true;
                            this._move('nextPage', event);
                            break;
                        case keyCode.Up:
                            suppressKeyPress = true;
                            this._keyEvent('previous', event);
                            break;
                        case keyCode.Down:
                            suppressKeyPress = true;
                            this._keyEvent('next', event);
                            break;
                        case keyCode.Enter:
                            // When menu is open and has focus
                            if (this.menu.active) {
                                // #6055 - Opera still allows the keypress to occur
                                // which causes forms to submit
                                suppressKeyPress = true;
                                event.preventDefault();
                                this.menu.select(event);
                            }
                            else if (this.element == document.activeElement) {
                                suppressKeyPress = true;
                                event.preventDefault();
                            }
                            break;
                        case keyCode.Tab:
                            if (this.menu.active) {
                                this.menu.select(event);
                            }
                            break;
                        case keyCode.Escape:
                            if (Common.IsVisible(this.menu.element)) {
                                if (!this.isMultiLine) {
                                    this._value(this.term);
                                }
                                this.close(event);
                                // Different browsers have different default behavior for escape
                                // Single press can mean undo or clear
                                // Double press in IE means clear the whole form
                                event.preventDefault();
                            }
                            break;
                        default:
                            suppressKeyPressRepeat = true;
                            // search timeout should be triggered before the input value is changed
                            this._searchTimeout(event);
                            break;
                    }

                },
                keypress: function (event) {

                    if (suppressKeyPress) {
                        suppressKeyPress = false;
                        if (!this.isMultiLine || Common.IsVisible(this.menu.element)) {
                            event.preventDefault();
                        }
                        return;
                    }
                    if (suppressKeyPressRepeat) {
                        return;
                    }

                    // Replicate some key handlers to allow them to repeat in Firefox and Opera
                    var keyCode = GTC.Keyboard;
                    switch (event.keyCode) {
                        case keyCode.PageUp:
                            this._move('previousPage', event);
                            break;
                        case keyCode.PageDown:
                            this._move('nextPage', event);
                            break;
                        case keyCode.Up:
                            this._keyEvent('previous', event);
                            break;
                        case keyCode.Down:
                            this._keyEvent('next', event);
                            break;
                    }

                },
                input: function (event) {

                    if (suppressInput) {
                        suppressInput = false;
                        event.preventDefault();
                        return;
                    }
                    this._searchTimeout(event);

                },
                focus: function () {

                    this.selectedItem = null;
                    this.previous = this._value();

                },
                blur: function (event) {

                    if (this.cancelBlur) {
                        delete this.cancelBlur;
                        return;
                    }

                    clearTimeout(this.searching);
                    this.close(event);
                    this._change(event);

                }
            });

            thisWidget._initSource();
            thisWidget.menu = Common.Create('ul');
            Common.AddClasses(thisWidget.menu, 'gtc-ui-autocomplete gtc-ui-front gtc-cfscroll-y');
            thisWidget._appendTo().appendChild(thisWidget.menu);
            Widgets.menu(thisWidget.menu, {
                // disable ARIA support, the live region takes care of that
                role: null
            });
            thisWidget.menu.style.display = 'none';
            thisWidget.menu = Widgets.menu(thisWidget.menu, 'instance');

            thisWidget._on(thisWidget.menu.element, {
                mousedown: function (event) {

                    // prevent moving focus out of the text field
                    event.preventDefault();

                    // IE doesn't prevent moving focus even with event.preventDefault()
                    // so we set a flag to know when we should ignore the blur event
                    var that = this;
                    this.cancelBlur = true;
                    setTimeout(
                        function () {
                            delete that.cancelBlur;
                        }, 0
                    );

                    // clicking on the scrollbar causes focus to shift to the body
                    // but we can't detect a mouseup or a click immediately afterward
                    // so we have to track the next mousedown and close the menu if
                    // the user clicks somewhere outside of the autocomplete
                    var menuElement = this.menu.element;
                    if (!Common.Closest('.gtc-ui-menu-item', event.target)) {
                        setTimeout(
                            function () {
                                Events.One(this.document, 'mousedown',
                                    function (event) {
                                        if (event.target !== that.element && event.target !== menuElement && !menuElement.contains(menuElement, event.target)) {
                                            that.close();
                                        }
                                    }
                                );
                            }, 0
                        );
                    }

                },
                menufocus: function (event, ui) {

                    var label, item;
                    // support: Firefox
                    // Prevent accidental activation of menu items in Firefox (#7024 #9118)
                    if (this.isNewMenu) {
                        this.isNewMenu = false;
                        if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                            this.menu.blur();
                            Events.One(this.document, 'mousemove',
                                function() {
                                    Events.Trigger(event.target, event.originalEvent);
                                }
                            );
                            return;
                        }
                    }

                    item = Cache.Get(ui.item, 'gtc-ui-autocomplete-item');
                    var focusOutput = this._trigger('focus', event, { item: item });
                    if (false !== focusOutput) {
                        // Use value to match what will end up in the input, if it was a key event
                        if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
                            this._value(item.value);
                        }
                    }

                    // Announce the value in the liveRegion
                    label = Common.GetAttr(ui.item, 'aria-label') || item.value;
                    if (label && label.trim().length) {
                        var children = Common.GetChildren(this.liveRegion);
                        var index = 0, length = children.length;
                        for ( ; index < length; index++) {
                            children[index].style.display = 'none';
                        }
                        var newDiv = Common.Create('div');
                        newDiv.textContent = label;
                        this.liveRegion.appendChild(newDiv);
                    }

                },
                menuselect: function (event, ui) {

                    var item = Cache.Get(ui.item, 'gtc-ui-autocomplete-item'), previous = this.previous;

                    // Only trigger when focus was lost (click on menu)
                    if (this.element !== this.document.activeElement) {
                        this.element.focus();
                        this.previous = previous;

                        // #6109 - IE triggers two focus events and the second
                        // is asynchronous, so we need to reset the previous
                        // term synchronously and asynchronously :-(
                        var that = this;
                        setTimeout(
                            function () {
                                that.previous = previous;
                                that.selectedItem = item;
                            }, 0
                        );
                    }

                    var selectOutput = this._trigger('select', event, { item: item });
                    if (false !== selectOutput) {
                        this._value(item.value);
                    }
                    // reset the term after the select event
                    // this allows custom select handling to work properly
                    this.term = this._value();

                    this.close(event);
                    this.selectedItem = item;

                }
            });

            var liveRegion = Common.Create('span');
            Common.SetAttr(liveRegion, 'role', 'status');
            Common.SetAttr(liveRegion, 'aria-live', 'assertive');
            Common.SetAttr(liveRegion, 'aria-relevant', 'additions');
            Common.AddClass(liveRegion, 'gtc-ui-helper-hidden-accessible');
            thisWidget.liveRegion = liveRegion;
            thisWidget.document.body.appendChild(liveRegion);

            // Turning off autocomplete prevents the browser from remembering the
            // value when navigating through history, so we re-enable autocomplete
            // if the page is unloaded before the widget is destroyed. #7790
            thisWidget._on(thisWidget.window, {
                beforeunload: function () {
                    Common.RemoveAttr(this.element, "autocomplete" );
                }
            });

        }

    };

    WidgetFactory.Register('gtc.filteredtextfield', FilteredTextFieldWidget);

    Common.MergeObjects(WidgetFactory.gtc.filteredtextfield, {
        escapeRegex: function (value) {

            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');

        },

        filter: function (array, term) {

            var matcher = new RegExp(WidgetFactory.gtc.filteredtextfield.escapeRegex(term), 'i');
            return Common.FilterArray(array,
                function (value) {
                    return matcher.test(value.label || value.value || value);
                }
            );

        }
    });

} (window, document, Common, Cache, Events, Velocity));
// Heading
// Based On: Heading -> ViewElement
(function (Heading, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Heading.Render = function (heading) {

        // Build classes
        var fontStyleClassName = '';
        var bottomBorderClassName = '';
        if (Common.IsDefined(heading.Font)) {
            fontStyleClassName = 'gtc-heading-' + heading.Name.toLowerCase();
        }
        if (heading.AppendLine == 'Yes') {
            bottomBorderClassName = 'gtc-heading-bottom-border';
        }

        var headingMarkup = '';
        if (Common.IsDefined(heading.Font)) {
            headingMarkup += '<style>';
            headingMarkup += '.' + fontStyleClassName + ' { ';
            if (Common.IsDefined(heading.Font.Color)) {
                headingMarkup += 'color: ' + Colors.ProcessValue(heading.Font.Color, false, null) + ';';
            }
            if (Common.IsDefined(heading.Font.Size)) {
                headingMarkup += 'font-size: ' + heading.Font.Size + heading.Font.Scale + ';';
            }
            if (Common.IsDefined(heading.Font.Weight)) {
                headingMarkup += 'font-weight: ' + heading.Font.Weight.toLowerCase() + ';';
            }
            if (Common.IsDefined(heading.Font.LineSpacing)) {
                headingMarkup += 'line-height: ' + heading.Font.LineSpacing + 'px;';
            }
            if (Common.IsDefined(heading.Font.LetterSpacing)) {
                headingMarkup += 'letter-spacing: ' + heading.Font.LetterSpacing + 'px;';
            }
            headingMarkup += ' }';
            headingMarkup += '</style>';
        }

        // Default sizing or you just get hnull
        var sizing = heading.Sizing;
        if (Common.IsNotDefined(heading.Sizing)) {
            sizing = '1';
        }

        // Heading<, TabIndex@, Class@, Id@, Heading>
        headingMarkup += '<h' + sizing + ' class="gtc-heading gtc-heading-' + sizing + ' gtc-page-theme-color ' + fontStyleClassName + ' ' + bottomBorderClassName + '" data-namespace="Heading"' + ViewElement.RenderAttributes(heading);

        // Translations
        if (Common.IsDefined(heading.TextString)) {
            headingMarkup += ' data-translate="' + heading.TextString + '"';
        }
        headingMarkup += '>';

        // Text
        headingMarkup += Common.TranslateKey(heading.TextString);

        // Heading</>
        headingMarkup += '</h' + sizing + '>';

        // Return markup
        return headingMarkup;

    };

    Heading.UpdateValue = function (heading, textValue, promises) {

        // Animation hide promise
        var animationHidePromise = Common.Promise();
        promises.push(animationHidePromise.promise);

        // Sanity Check
        textValue = (Common.IsNotDefined(textValue)) ? '' : Common.Decode(textValue);

        // Check for Mask
        var maskingOptions = Common.GetAttr(heading, 'data-mask');
        if (Common.IsString(maskingOptions)) {
            if (maskingOptions.length > 0 && textValue.length > 0) {
                formatResult = Mask.Format(textValue, JSON.parse(maskingOptions), true);
                textValue = formatResult.Text;
            }
        }

        // Set Value
        Common.SetAttr(heading, 'data-translate', textValue);
        Velocity(heading, { 'opacity': 0 }, 'slow',
            function () {
                var animationPromise = Common.Promise();
                promises.push(animationPromise.promise);
                heading.textContent = Common.TranslateKey(textValue);
                Velocity(heading, 'reverse',
                    function () {
                        Common.RemoveOpacity(heading);
                        animationHidePromise.resolve();
                        animationPromise.resolve();
                    }
                );
            }
        );

    };

} (window.Heading = window.Heading || {}, window, document, Common, Cache, Events, Velocity));
// Link Display Item
// Based On: LinkDisplayItem -> DisplayItem -> ViewElement
(function (LinkDisplayItem, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    LinkDisplayItem.Render = function (linkDisplayItem, displayDetail) {

        var className = '';
        if (Common.IsDefined(linkDisplayItem.ItemSpan)) {
            className = ' gtc-columns-' + linkDisplayItem.ItemSpan;
        }

        // Li<, TabIndex@, Class@, Id@
        var linkDisplayItemMarkup = '<li data-namespace="LinkDisplayItem" class="gtc-linkdisplayitem gtc-displaydetail-column' + className + '"' + ViewElement.RenderAttributes(linkDisplayItem);

        // Data-Mask@
        if (Common.IsDefined(linkDisplayItem.Mask)) {
            linkDisplayItemMarkup += ' data-mask="' + linkDisplayItem.Mask + '"';
        }

        // Li>
        linkDisplayItemMarkup += '>';

        if (Common.IsDefined(linkDisplayItem.Label) && linkDisplayItem.Label.length > 0) {
            // Span<>, Label, Span</>
            linkDisplayItemMarkup += '<span class="gtc-displaydetail-item-head"';

            // Translations and Label masking
            var dateRegex = new RegExp(/\/Date\((-?\d+)\)\//gi);
            var isDate = dateRegex.test(linkDisplayItem.Label);
            if (!isDate) {
                linkDisplayItemMarkup += ' data-translate="' + linkDisplayItem.Label + '"';
            }

            if (isDate && Common.IsDefined(linkDisplayItem.Mask)) {
                var formatResult = Mask.Format(linkDisplayItem.Label, Mask.BuildMaskingOptions(linkDisplayItem.Mask));
                linkDisplayItemMarkup += '>' + formatResult.Text + '</span>';
            }
            else {
                linkDisplayItemMarkup += '>' + Common.TranslateKey(linkDisplayItem.Label) + '</span>';
            }
        }

        // Span<>
        linkDisplayItemMarkup += '<span class="gtc-displaydetail-item">';

        // Links
        if (Common.IsDefined(linkDisplayItem.Links) && linkDisplayItem.Links.length > 0) {

            // Links
            var link, index = 0, length = linkDisplayItem.Links.length;
            for ( ; index < length; index++) {
                link = linkDisplayItem.Links[index];

                // Id?
                if (Common.IsDefined(displayDetail.Id)) {
                    // Update name to be unique
                    link.Name += Common.SanitizeToken(displayDetail.Id);
                }

                // Li<>, Anchor, Li</>
                linkDisplayItemMarkup += Link.Render(link);
            }

        }

        // Span</>
        linkDisplayItemMarkup += '</span>';

        // Li</>
        linkDisplayItemMarkup += '</li>';
        return linkDisplayItemMarkup;

    };

} (window.LinkDisplayItem = window.LinkDisplayItem || {}, window, document, Common, Cache, Events, Velocity));
// Selectable Button
// Based On: SelectableButton -> Button -> Link -> ViewElement
(function (SelectableButton, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    SelectableButton.Render = function (selectableButton) {

        // var className = '';
        var className = Link.RenderClassing(selectableButton, 'btn');

        // Anchor<, TabIndex@, Class@, Id@, Data-ControllerPath/ActionName@
        var selectableButtonMarkup = '<a role="button" class="' + className + '" data-namespace="SelectableButton" data-configure="Pre"' + ViewElement.RenderAttributes(selectableButton) + EventElement.AttachEvent(selectableButton.Name, 'click', selectableButton.OnClick, SelectableButton.OnClick);

        // Attach Key press event
        if (Common.IsDefined(selectableButton.AttachedKey)) {
            GTC.AttachKey(selectableButton.Name, selectableButton.AttachedKey);
        }

        // Data-ButtonGroup@
        if (Common.IsDefined(selectableButton.GroupName)) {
            selectableButtonMarkup += ' data-buttongroup="' + selectableButton.GroupName + '"';
        }

        // Data-ButtonIndex@
        if (Common.IsDefined(selectableButton.Index)) {
            selectableButtonMarkup += ' data-buttonindex="' + selectableButton.Index + '"';
        }

        // Data-Selected@
        if (selectableButton.IsSelected == 'Yes') {
            selectableButtonMarkup += ' aria-selected="true" data-selected="true"';
        }
        else {
            selectableButtonMarkup += ' aria-selected="false" data-selected="false"';
        }

        // Tooltip
        if (Common.IsDefined(selectableButton.Tooltip)) {
            selectableButtonMarkup += ' data-translate="[data-tooltip]' + selectableButton.Tooltip + '"';
            selectableButtonMarkup += ' data-tooltip="' + Common.TranslateKey(selectableButton.Tooltip) + '"';
        }

        // Anchor>
        selectableButtonMarkup += '>';

        // Icon
        if (Common.IsDefined(selectableButton.Icon)) {
            selectableButtonMarkup += Icon.Render(selectableButton.Icon, false);
        }

        // Link text
        selectableButtonMarkup += '<span';

        // Translations
        if (Common.IsDefined(selectableButton.Title)) {
            selectableButtonMarkup += ' data-translate="' + selectableButton.Title + '"';
        }

        // Link text
        selectableButtonMarkup += '>' + Common.TranslateKey(selectableButton.Title) + '</span>';

        // 508 Compliance - Focus In/Focus Out
        Events.On(document.body, 'focusin.' + selectableButton.Name, '#' + selectableButton.Name,
            function (event) {
                Events.On(document, 'keyup.' + selectableButton.Name,
                    function (keyupEvent) {
                        var pressedKeyCode = (keyupEvent.keyCode ? keyupEvent.keyCode : keyupEvent.which);
                        if (pressedKeyCode == GTC.Keyboard.Enter) {
                            var element = Common.Get(selectableButton.Name);
                            Events.Trigger(element, 'mouseup');
                            Events.Trigger(element, 'click');
                        }
                    }
                );
            }
        );
        Events.On(document.body, 'focusout.' + selectableButton.Name, '#' + selectableButton.Name,
            function (event) {
                Events.Off(document, 'keyup.' + selectableButton.Name);
            }
        );

        // Anchor</>
        selectableButtonMarkup += '</a>';
        return selectableButtonMarkup;

    };

    SelectableButton.Configure = function (button, configureStage) {

        Widgets.uibutton(button, { Type: 'Selectable' });

    };

    SelectableButton.OnClick = function (event) {

        // Current SelectedButton
        var oldSelectedButton = Common.Query('.gtc-btn-selectablebutton[data-selected=true]');
        SetSelectedAttributes(oldSelectedButton, this);

        // OnClick Parameters
        var onClickParameters = [
            {
                Name: 'SelectedButton',
                Value: this.id,
                UiParameters: null
            },
            {
                Name: 'FromIndex',
                Value: Common.GetAttr(oldSelectedButton, 'data-buttonindex'),
                UiParameters: null
            },
            {
                Name: 'ToIndex',
                Value: Common.GetAttr(this, 'data-buttonindex'),
                UiParameters: null
            }
        ];

        // Get Click Event
        var onClickEvent = JSON.parse(Common.GetAttr(this, 'data-click'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, this);

    };

    SelectableButton.UpdateSelected = function (button) {

        Events.Trigger(button, 'mouseup');
        if (Common.HasAttr(button, 'data-click')) {
            Events.Trigger(button, 'click');
        }
        else {
            var oldSelectedButton = Common.Query('.gtc-btn-selectablebutton[data-selected=true]');
            SetSelectedAttributes(oldSelectedButton, button);
        }

    };

    SelectableButton.ShowPinwheel = function (button) {

        SpinKit.Show(button, 'FadingCircle');

    };

    SelectableButton.HidePinwheel = function (button) {

        SpinKit.Hide(button);

    };

    // Private Methods
    function SetSelectedAttributes (oldSelectedButton, newSelectedButton) {

        Common.SetAttr(oldSelectedButton, 'data-selected', 'false');
        Common.SetAttr(oldSelectedButton, 'aria-selected', 'false');
        Common.SetAttr(newSelectedButton, 'data-selected', 'true');
        Common.SetAttr(newSelectedButton, 'aria-selected', 'true');

    };

} (window.SelectableButton = window.SelectableButton || {}, window, document, Common, Cache, Events, Velocity));
// Note Field
// Based On: NoteField -> PlaceholderField -> ValueField -> Field -> ViewElement
(function (NoteField, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    NoteField.Render = function (noteField) {

        // Label Exists (needed for Icon rendering)
        var labelExists = true;
        if (Common.IsNotDefined(noteField.Label)) {
            labelExists = false;
        }

        // Label
        if (Common.IsDefined(noteField.Label)) {
            noteField.Label.ExtraClassing = 'gtc-label-notefield';
        }
        var noteFieldMarkup = Field.RenderLabel(noteField);

        // Textarea<, Placeholder@, Name@, @Data-Serializable, TabIndex@, Class@, Id@, Data-Disabled@
        noteFieldMarkup += '<textarea class="gtc-input-notefield';
        if (Common.IsDefined(noteField.Icon)) {
            if (labelExists == false) {
                noteFieldMarkup += ' gtc-input__icon-left';
            }
            else {
                noteFieldMarkup += ' gtc-input__icon-label-left';
            }
        }
        noteFieldMarkup += '"' + PlaceholderField.RenderAttributes(noteField) + Field.RenderAttributes(noteField);

        // Data-HasChanged@ Event
        if (noteField.IsSerializable == 'Yes') {
            Events.On(document.body, 'change.fieldvaluechange.' + noteField.Name, '#' + noteField.Name,
                function () {
                    Common.SetAttr(this, 'data-haschanged', 'Yes');
                }
            );
        }

        // 508 Compliance
        if (noteField.IsRequired == 'Yes') {
            noteFieldMarkup += ' aria-required="true"';
        }

        // Data-ControllerPath/ActionName@, Wire OnChange!
        if (Common.IsEventViewElementDefined(noteField.OnChange)) {
            noteFieldMarkup += Field.AttachOnChange(noteField, NoteField.OnChange);
        }

        // Rows@
        if (Common.IsDefined(noteField.Rows)) {
            noteFieldMarkup += ' rows="' + noteField.Rows + '"';
        }

        // Columns@
        if (Common.IsDefined(noteField.Columns)) {
            noteFieldMarkup += ' cols="' + noteField.Columns + '"';
        }

        // MaxLength@
        if (Common.IsDefined(noteField.MaxLength)) {
            noteFieldMarkup += ' maxlength="' + noteField.MaxLength + '"';
        }

        // IsResizable@
        noteFieldMarkup += ' style="resize:';
        if (noteField.IsResizable == 'Yes') {
            noteFieldMarkup += 'vertical';

            // Setup resizing
            var onResizeEndFunction = function () {
                Common.ResizeView();
            };

            // TODO: Rewrite to support IE which does not allow textarea resizing.
            Events.On(document.body, 'configuretextarea', '#' + noteField.Name,
                function () {
                    var textArea = Common.Get(noteField.Name);
                    var initialHeight = null;

                    // Wait for modal to show before calculating height
                    // Firefox is why we cant have nice things!
                    if (Common.IsModal()) {
                        Events.On(top.document, 'modalvisible',
                            function (event) {
                                initialHeight = Common.Height(textArea);
                            }
                        );
                    }
                    else {
                        initialHeight = Common.Height(textArea);
                    }
                    Events.On(document, 'mouseup.textareaheightchange-' + noteField.Name + '.' + noteField.Name,
                        function () {
                            var newHeight = Common.Height(textArea);
                            if (newHeight != initialHeight) {
                                initialHeight = newHeight;
                                onResizeEndFunction();
                            }
                        }
                    );

                    // Handle reinitializing resizing on show
                    Events.On(document.body, 'reconfiguretextarea-' + noteField.Name + '.' + noteField.Name,
                        function () {
                            var textArea = Common.Get(noteField.Name);
                            initialHeight = Common.Height(textArea);
                            onResizeEndFunction();
                        }
                    );
                }
            );
        }
        else {
            noteFieldMarkup += 'none';
        }
        noteFieldMarkup += ';"';

        // @Data-NameSpace
        noteFieldMarkup += ' data-namespace="NoteField" data-configure="Pre">';

        // Value
        if (Common.IsDefined(noteField.Value)) {
            noteFieldMarkup += noteField.Value;
        }

        // Textarea</>
        noteFieldMarkup += '</textarea>';

        // Icon
        if (Common.IsDefined(noteField.Icon)) {
            noteFieldMarkup += Icon.Render(noteField.Icon, true, labelExists);
        }
        return noteFieldMarkup;

    };

    NoteField.Configure = function (field, configureStage) {

        Widgets.textbox(field);
        Events.Trigger(field, 'configuretextarea');

    };

    NoteField.OnChange = function (event) {

        // Remove Prefix_
        var fieldParameterName = Common.RemovePrefix(this.name);

        // Field Value
        var fieldValueUiParameter = [
            {
                Name: fieldParameterName,
                Value:  this.value,
                UiParameters: null
            }
        ];

        // Call OnChange
        Field.OnChange(this, fieldValueUiParameter);

    };

    NoteField.HasValue = function (noteField) {

        return ValueField.HasValue(noteField);

    };

    NoteField.IsCompleted = function (field) {

        return ValueField.IsCompleted(field);

    };

    NoteField.UpdateValue = function (field, fieldValue) {

        ValueField.UpdateValue(field, fieldValue);

    };

    NoteField.UpdateLabel = function (field, fieldLabel, promises, context) {

        Field.UpdateLabel(field, fieldLabel, promises, context);

    };

    NoteField.PostInstructionConfiguration = function (noteField) {

        Events.Trigger(document.body, 'reconfiguretextarea-' + noteField.id);

    };

    NoteField.ShowPinwheel = function (field) {

        Field.ShowPinwheel(field, 'FadingCircle');

    };

    NoteField.HidePinwheel = function (field) {

        Field.HidePinwheel(field);

    };

} (window.NoteField = window.NoteField || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class DateField
 * @classdesc Supports the DateField View Element<br>
 *            Based On: ViewElement > Field > valueField > PlaceholderField > MaskField
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (DateField, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function DateField.Render
     * @param {object} dateField - The DateField View Element in JSON format
     * @description Generates the HTML markup for the DateField View Element 
     * @returns {string} HTML Markup of the DateField View Element
     * @listens change.fieldvaluechange (id = <var>currencyFieldName</var>)
     * @listens configuremonthviewdatefield (id = <var>dateFieldName</var>)
     * @listens focusin (id = AnchorOpenCalendar-<var>dateFieldObjectId</var>)
     * @listens focusout (id = AnchorOpenCalendar-<var>dateFieldObjectId</var>)
     * @listens click (id = AnchorOpenCalendar-<var>dateFieldObjectId</var>)
     */
    DateField.Render = function (dateField) {

        // Label Exists (needed for Icon rendering)
        var labelExists = true;
        if (Common.IsNotDefined(dateField.Label)) {
            labelExists = false;
        }

        // Label
        var dateFieldMarkup = Field.RenderLabel(dateField);

        // input<, Data-Mask@, Placeholder@, Name@, Value@, @Data-Serializable, TabIndex@, Class@, Id@, Data-Disabled@
        dateFieldMarkup += '<input class="gtc-input-calendar gtc-dateselectiontype-' + dateField.SelectionType.toLowerCase();
        if (Common.IsDefined(dateField.Icon)) {
            if (labelExists == false) {
                dateFieldMarkup += ' gtc-input__icon-left';
            }
            else {
                dateFieldMarkup += ' gtc-input__icon-label-left';
            }
        }
        dateFieldMarkup += '"' + MaskField.RenderAttributes(dateField) + Field.RenderAttributes(dateField);

        // Data-HasChanged@ Event
        if (dateField.IsSerializable == 'Yes') {
            Events.On(document.body, 'change.fieldvaluechange.' + dateField.Name, '#' + dateField.Name,
                function () {
                    Common.SetAttr(this, 'data-haschanged', 'Yes');
                }
            );
        }

        // 508 Compliance
        if (dateField.IsRequired == 'Yes') {
            dateFieldMarkup += ' aria-required="true"';
        }

        // Data-ControllerPath/ActionName@, Wire OnChange!
        if (Common.IsEventViewElementDefined(dateField.OnChange)) {
            dateFieldMarkup += Field.AttachOnChange(dateField, DateField.OnChange);
        }

        // Configure date field
        if (dateField.SelectionType == 'MonthViewer') {
            Events.One(document.body, 'configuremonthviewdatefield', '#' + dateField.Name,
                function () {
                    var dateFieldObject = Common.Get(dateField.Name);
                    var tabIndex = Common.GetAttr(dateFieldObject, 'tabindex');
                    var tabIndexAttribute = '';
                    if (Common.IsDefined(tabIndex) && parseInt(tabIndex, 10) > 0) {
                        tabIndexAttribute = ' tabindex="' + tabIndex + '"';
                    }
                    var anchorName = 'AnchorOpenCalendar-' + dateFieldObject.id;
                    dateFieldObject.insertAdjacentHTML('afterend', '<a' + tabIndexAttribute + ' class="gtc-input-system" id="' + anchorName + '" aria-haspopup="true"><i class="gtc-icon-styles fa fa-calendar"></i><span class="gtc-sr-only" data-translate="OpensSimulatedDialog508">' + Common.TranslateKey('OpensSimulatedDialog508') + '</span></a>');
                    var openCalendar = Common.Get(anchorName);

                    // 508 Compliance - Focus In/Focus Out
                    Events.On(openCalendar, 'focusin.' + anchorName,
                        function (event) {
                            Events.On(document, 'keyup.' + anchorName,
                                function (event) {
                                    var pressedKeyCode = (event.keyCode ? event.keyCode : event.which);
                                    if (pressedKeyCode == GTC.Keyboard.Enter) {
                                        document.activeElement.blur();
                                        var element = Common.Get(anchorName);
                                        Events.Trigger(element, 'click');
                                    }
                                }
                            );
                        }
                    );
                    Events.On(openCalendar, 'focusout.' + anchorName,
                        function (event) {
                            Events.Off(document, 'keyup.' + anchorName);
                        }
                    );

                    // Click Event
                    Events.On(openCalendar, 'click',
                        function () {
                            if (Common.HasClass(document.body, 'gtc-modal-resizing')) {
                                return;
                            }
                            if (Common.HasClass(this, 'gtc-showingdatepicker')) {
                                Common.RemoveClass(this, 'gtc-showingdatepicker');
                                Widgets.monthlydatepicker(dateFieldObject, 'hide');
                            }
                            else {
                                Common.AddClass(this, 'gtc-showingdatepicker');
                                Widgets.monthlydatepicker(dateFieldObject, 'show');

                                // Adjust screen height if needed
                                var calendarDisplayHeight = Common.Height(Common.Get('gtc-ui-datepicker-div'), true);
                                var coords = Common.Offset(this.previousSibling);
                                if (Common.IsModal()) {
                                    var modalCalendar = Common.Query('.gtc-modal-iframe', null, true);
                                    var modalBottom = Common.Height(modalCalendar.parentNode) + Common.Offset(modalCalendar.parentNode).top;
                                    var calendarBottom = calendarDisplayHeight + Common.Offset(this.parentNode).top + coords.top + Common.Height(this.parentNode) + Common.Offset(modalCalendar.parentNode).top;
                                    if (calendarBottom > modalBottom) {
                                        Cache.Set(this, 'IsHeightIncreased', true);
                                        Cache.Set(this, 'HeightIncrease', calendarBottom - modalBottom + (parseInt(calendarDisplayHeight) * 2));
                                        var currentHeight = parseInt(modalCalendar.parentNode.style.height, 10);
                                        modalCalendar.parentNode.style.height = (currentHeight + Cache.Get(this, 'HeightIncrease')) + 'px';
                                    }
                                }
                            }
                        }
                    );
                    Widgets.monthlydatepicker(dateFieldObject,
                        {
                            showButtonPanel: true,
                            showOn: '',
                            showOtherMonths: true,
                            selectOtherMonths: true,
                            onClose: function () {
                                var openAnchor = Common.Get(anchorName);
                                Common.RemoveClass(openAnchor, 'gtc-showingdatepicker');

                                // Adjust Height if it was added
                                if (Cache.Get(openAnchor, 'IsHeightIncreased')) {
                                    Cache.Set(openAnchor, 'IsHeightIncreased', false);
                                    if (Common.IsModal() && Common.IsNotDefined(dateField.OnChange)) {
                                        var modalCalendar = Common.Query('.gtc-modal-iframe', null, true);
                                        var currentHeight = parseInt(modalCalendar.parentNode.style.height, 10);
                                        modalCalendar.parentNode.style.height = (currentHeight - Cache.Get(openAnchor, 'HeightIncrease')) + 'px';
                                    }
                                }
                            },
                            onSelect: function () {
                                // Get Milliseconds from 1970
                                var milliSecondsFrom1970 = Date.parse(Widgets.monthlydatepicker(dateFieldObject, 'getDate'));

                                // Remove timezone (only if FromUTC is false)
                                var maskingOptions = JSON.parse(Common.GetAttr(dateFieldObject, 'data-mask'));
                                if (Common.IsNotDefined(maskingOptions.FromUTC) || maskingOptions.FromUTC == false) {
                                    milliSecondsFrom1970 = Common.RemoveTimezone(milliSecondsFrom1970);
                                }

                                // Build Date String
                                var rawData = '/Date(' + milliSecondsFrom1970.toString() + ')/';
                                MaskField.UpdateValue(dateFieldObject, rawData);
                                dateFieldObject.focus();
                            }
                        }
                    );

                    // Handle locked field
                    if (dateField.IsLocked == 'Yes') {
                        Common.SetAttr(dateFieldObject, 'data-locked', 'true');
                        Common.SetAttr(dateFieldObject, 'disabled', 'disabled');
                        Common.SetAttr(dateFieldObject, 'data-focusindex', Common.GetAttr(dateFieldObject, 'tabindex'));
                        Common.SetAttr(dateFieldObject, 'tabindex', '-1');
                        Common.Get('AnchorOpenCalendar-' + dateFieldObject.id).style.display = 'none';
                        Common.AddClass(dateFieldObject, 'gtc-input-locked');
                        dateFieldObject.insertAdjacentHTML('afterend', '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
                    }
                }
            );
        }

        // @Data-SerializeAsUTC
        var serializeAsUtc = 'No';
        if (Common.IsDefined(dateField.SerializeAsUTC)) {
            serializeAsUtc = 'Yes';
        }
        dateFieldMarkup += ' data-serializeasutc="' + dateField.SerializeAsUTC + '"';

        // @Data-NameSpace, @Data-FieldType, Type@, Input/>
        dateFieldMarkup += ' data-namespace="DateField" data-configure="Pre" type="text" />';

        // Icon
        if (Common.IsDefined(dateField.Icon)) {
            dateFieldMarkup += Icon.Render(dateField.Icon, true, labelExists);
        }
        return dateFieldMarkup;

    };

    /**
     * @function DateField.Configure
     * @param {object} field - The DateField DOM element
     * @param {string} configureStage - Pre for Configuration before Translations or Post for Configuration after Translations
     * @description Called by Page.Configure after the dynamic HTML markup is added to the DOM
     */
    DateField.Configure = function (field, configureStage) {

        if (Common.HasClass(field, 'gtc-dateselectiontype-datepicker')) {
            Widgets.calendar(field, { UpdateValueCallback: Mask.SetFormattedValue });
        }
        if (Common.HasClass(field, 'gtc-dateselectiontype-monthviewer')) {
            Events.Trigger(field, 'configuremonthviewdatefield');
        }

    };

    /**
     * @function DateField.OnChange
     * @param {event} event - A DOM click Event
     * @description Calls Field.OnChange (which will call the OnChange<i>dateField</i> Behavior)
     */
    DateField.OnChange = function (event) {

        // Remove Prefix_
        var fieldParameterName = Common.RemovePrefix(this.name);

        // Don't kick off onchanges when they are only selecting dates
        if (Common.HasClass(Common.Get('AnchorOpenCalendar-' + this.id), 'gtc-showingdatepicker')) {
            return;
        }

        // Field Value
        var fieldValueUiParameter = [
            {
                Name: fieldParameterName,
                Value: Common.GetAttr(this, 'data-raw'),
                UiParameters: null
            }
        ];

        // Call OnChange
        Field.OnChange(this, fieldValueUiParameter);

    };

    /**
     * @function DateField.Lock
     * @param {object} field - The DateField DOM element
     * @param {boolean} onParent - Look in parent page
     * @description Lock the DateField
     */
    DateField.Lock = function (field, onParent) {

        if (Common.HasClass(field, 'gtc-dateselectiontype-datepicker')) {
            Widgets.calendar(field, 'DisableControl');
        }
        else {
            if (Common.IsNotDefined(Common.GetAttr(field, 'data-locked'))) {
                Common.SetAttr(field, 'data-locked', 'true');
                Common.SetAttr(field, 'disabled', 'disabled');
                Common.SetAttr(field, 'data-focusindex', Common.GetAttr(field, 'tabindex'));
                Common.SetAttr(field, 'tabindex', '-1');
                Common.Get('AnchorOpenCalendar-' + field.name, onParent).style.display = 'none';
                Common.AddClass(field, 'gtc-input-locked');
                field.insertAdjacentHTML('afterend', '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
            }
        }

    };

    /**
     * @function DateField.Unlock
     * @param {object} field - The DateField DOM element
     * @param {boolean} onParent - Look in parent page
     * @description Unlock the DateField
     */
    DateField.Unlock = function (field, onParent) {

        if (Common.HasClass(field, 'gtc-dateselectiontype-datepicker')) {
            Widgets.calendar(field, 'EnableControl');
        }
        else {
            if (Common.IsDefined(Common.GetAttr(field, 'data-locked'))) {
                Common.RemoveAttr(field, 'disabled');
                Common.RemoveAttr(field, 'data-disabled');
                Common.SetAttr(field, 'tabindex', Common.GetAttr(field, 'data-focusindex'));
                Common.Get('AnchorOpenCalendar-' + field.name, onParent).style.display = 'inline-table';
                Common.RemoveClass(field, 'gtc-input-locked');
                Common.Remove(Common.Query('.gtc-input-system', field.parentNode));
                Common.RemoveAttr(field, 'data-locked');
            }
        }

    };

    /**
     * @function DateField.HasValue
     * @param {object} dateField - The DateField View Element in JSON format
     * @description Check if the field has a value
     * @returns {boolean} Returns <i>true</i> if it has a value, <i>false</i> otherwise
     */
    DateField.HasValue = function (dateField) {

        return MaskField.HasValue(dateField);

    };

    /**
     * @function DateField.IsCompleted
     * @param {object} currencyField - The DateField DOM element
     * @description Check if the field has a value
     * @returns {boolean} Returns <i>true</i> if it has a value, <i>false</i> otherwise
     */
    DateField.IsCompleted = function (field) {

        return MaskField.IsCompleted(field);

    };

    /**
     * @function DateField.UpdateValue
     * @param {object} field - The DateField DOM element
     * @param {string} fieldValue - The new Value of the DateField
     * @description Updates the value of the DateField
     */
    DateField.UpdateValue = function (field, fieldValue) {

        MaskField.UpdateValue(field, fieldValue);

    };

    /**
     * @function DateField.UpdateLabel
     * @param {object} field - The DateField DOM element
     * @param {string} fieldLabel - The new Label of the DateField
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Label of the DateField
     */
    DateField.UpdateLabel = function (field, fieldLabel, promises, context) {

        Field.UpdateLabel(field, fieldLabel, promises, context);

    };

    /**
     * @function DateField.ShowPinwheel
     * @param {object} field - The DateField DOM element
     * @description Shows Pinwheel on the View Element
     */
    DateField.ShowPinwheel = function (field) {

        Field.ShowPinwheel(field, 'FadingCircle');

    };

    /**
     * @function DateField.HidePinwheel
     * @param {object} field - The DateField DOM element
     * @description Hides Pinwheel on the View Element
     */
    DateField.HidePinwheel = function (field) {

        Field.HidePinwheel(field);

    };

} (window.DateField = window.DateField || {}, window, document, Common, Cache, Events, Velocity));
// Date Picker Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var datepicker_instActive;

    // Date picker manager.
    // Use the singleton instance of this class, Widgets.datepicker, to interact with the date picker.
    // Settings for (groups of) date pickers are maintained in an instance object,
    // allowing multiple different settings on the same page.
    function Datepicker () {
        this._curInst = null; // The current instance in use
        this._keyEvent = false; // If the last event was a key event
        this._disabledInputs = []; // List of date picker inputs that have been disabled
        this._datepickerShowing = false; // True if the popup picker is showing , false if not
        this._inDialog = false; // True if showing within a "dialog", false if not
        this._mainDivId = 'gtc-ui-datepicker-div'; // The ID of the main datepicker division
        this._inlineClass = 'gtc-ui-datepicker-inline'; // The name of the inline marker class
        this._appendClass = 'gtc-ui-datepicker-append'; // The name of the append marker class
        this._triggerClass = 'gtc-ui-datepicker-trigger'; // The name of the trigger marker class
        this._dialogClass = 'gtc-ui-datepicker-dialog'; // The name of the dialog marker class
        this._disableClass = 'gtc-ui-datepicker-disabled'; // The name of the disabled covering marker class
        this._unselectableClass = 'gtc-ui-datepicker-unselectable'; // The name of the unselectable cell marker class
        this._currentClass = 'gtc-ui-datepicker-current-day'; // The name of the current day marker class
        this._dayOverClass = 'gtc-ui-datepicker-days-cell-over'; // The name of the day hover marker class
        this.regional = []; // Available regional settings, indexed by language code
        this.regional[''] = { // Default regional settings
            closeText: 'Done', // Display text for close link
            prevText: 'Prev', // Display text for previous month link
            nextText: 'Next', // Display text for next month link
            currentText: 'Today', // Display text for current month link
            monthNames: ['January','February','March','April','May','June', 'July','August','September','October','November','December'], // Names of months for drop-down and formatting
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting
            dayNamesMin: ['Su','Mo','Tu','We','Th','Fr','Sa'], // Column headings for days starting at Sunday
            weekHeader: 'Wk', // Column header for week of the year
            dateFormat: 'mm/dd/yy', // See format options on parseDate
            firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
            isRTL: false, // True if right-to-left language, false if left-to-right
            showMonthAfterYear: false, // True if the year select precedes month, false for month then year
            yearSuffix: '' // Additional text to append to the year in the month headers
        };
        this._defaults = { // Global defaults for all the date picker instances
            showOn: 'focus', // "focus" for popup on focus,
                // "button" for trigger button, or "both" for either
            showOptions: {}, // Options for enhanced animations
            defaultDate: null, // Used when field is blank: actual date,
                // +/-number for offset from today, null for today
            appendText: '', // Display text following the input box, e.g. showing the format
            buttonText: '...', // Text for trigger button
            buttonImage: '', // URL for trigger button image
            buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
            hideIfNoPrevNext: false, // True to hide next/previous month links
                // if not applicable, false to just disable them
            navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
            gotoCurrent: false, // True if today link goes back to current selection instead
            changeMonth: false, // True if month can be selected directly, false if only prev/next
            changeYear: false, // True if year can be selected directly, false if only prev/next
            yearRange: 'c-10:c+10', // Range of years to display in drop-down,
                // either relative to today's year (-nn:+nn), relative to currently displayed year
                // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
            showOtherMonths: false, // True to show dates in other months, false to leave blank
            selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
            showWeek: false, // True to show week of the year, false to not show it
            calculateWeek: this.iso8601Week, // How to calculate the week of the year,
                // takes a Date and returns the number of the week for it
            shortYearCutoff: '+10', // Short year values < this are in the current century,
                // > this are in the previous century,
                // string value starting with "+" for current year + value
            minDate: null, // The earliest selectable date, or null for no limit
            maxDate: null, // The latest selectable date, or null for no limit
            beforeShowDay: null, // Function that takes a date and returns an array with
                // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
                // [2] = cell title (optional), e.g. Widgets.datepicker.noWeekends
            beforeShow: null, // Function that takes an input field and
                // returns a set of custom settings for the date picker
            onSelect: null, // Define a callback function when a date is selected
            onChangeMonthYear: null, // Define a callback function when the month or year is changed
            onClose: null, // Define a callback function when the datepicker is closed
            numberOfMonths: 1, // Number of months to show at a time
            showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
            stepMonths: 1, // Number of months to step back/forward
            stepBigMonths: 12, // Number of months to step back/forward for the big links
            altField: '', // Selector for an alternate field to store selected dates into
            altFormat: '', // The date format to use for the alternate field
            constrainInput: true, // The input is constrained by the current date format
            showButtonPanel: false, // True to show button panel, false to not show it
            autoSize: false, // True to size the input for the date format, false to leave as is
            disabled: false // The initial disabled state
        };
        Common.MergeObjects(this._defaults, this.regional['']);
        this.regional.en = Common.MergeObjects(true, {}, this.regional['']);
        this.regional['en-US'] = Common.MergeObjects(true, {}, this.regional.en);
        this.dpDiv = datepicker_bindHover(Common.GenerateHTML('<div id="' + this._mainDivId + '" class="gtc-ui-datepicker gtc-ui-widget gtc-ui-widget-content gtc-ui-helper-clearfix gtc-ui-corner-all"></div>'));
    };

    Common.MergeObjects(Datepicker.prototype, {
        // Class name added to elements to indicate already configured with a date picker.
        markerClassName: 'hasDatepicker',

        //Keep track of the maximum number of rows displayed (see #7043)
        maxRows: 4,

        // TODO rename to "widget" when switching to widget factory
        _widgetDatepicker: function () {

            return this.dpDiv;

        },

        // Override the default settings for all instances of the date picker.
        // @param  settings  object - the new settings to use as defaults (anonymous object)
        // @return the manager object
        setDefaults: function (settings) {

            datepicker_extendRemove(this._defaults, settings || {});
            return this;

        },

        // Attach the date picker to a target.
        // @param  target   element - the target input field or division or span
        // @param  settings  object - the new settings to use for this date picker instance (anonymous)
        _attachDatepicker: function (target, settings) {

            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase();
            inline = (nodeName === 'div' || nodeName === 'span');
            if (!target.id) {
                this.uuid += 1;
                target.id = 'dp' + this.uuid;
            }
            inst = this._newInst(target, inline);
            inst.settings = Common.MergeObjects({}, settings || {});
            if (nodeName === 'input') {
                this._connectDatepicker(target, inst);
            }
            else if (inline) {
                this._inlineDatepicker(target, inst);
            }

        },

        // Create a new instance object.
        _newInst: function (target, inline) {

            var id = target.id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape meta chars
            return {
                id: id, input: target, // associated target
                selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
                drawMonth: 0, drawYear: 0, // month being drawn
                inline: inline, // is datepicker inline or not
                dpDiv: (!inline ? this.dpDiv : // presentation div
                datepicker_bindHover(Common.GenerateHTML('<div class="' + this._inlineClass + ' gtc-ui-datepicker gtc-ui-widget gtc-ui-widget-content gtc-ui-helper-clearfix gtc-ui-corner-all"></div>')))};

        },

        // Attach the date picker to an input field.
        _connectDatepicker: function (target, inst) {

            var input = target;
            inst.append = null;
            inst.trigger = null;
            if (Common.HasClass(input, this.markerClassName)) {
                return;
            }
            this._attachments(input, inst);
            Common.AddClass(input, this.markerClassName);
            Events.On(input, 'keydown', this._doKeyDown);
            Events.On(input, 'keypress', this._doKeyPress);
            Events.On(input, 'keyup', this._doKeyUp);
            this._autoSize(inst);
            Cache.Set(target, 'datepicker', inst);
            // If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }

        },

        // Make attachments based on settings.
        _attachments: function (input, inst) {

            var context, showOn, buttonText, buttonImage,
                appendText = this._get(inst, 'appendText'),
                isRTL = this._get(inst, 'isRTL');

            if (inst.append) {
                Common.Remove(inst.append);
            }
            if (appendText) {
                inst.append = Common.GenerateHTML('<span class="' + this._appendClass + '">' + appendText + '</span>');
                context = input;
                if (!isRTL) {
                    context = input.nextSibling;
                }
                input.parentNode.insertBefore(inst.append, context);
            }

            Events.Off(input, 'focus', this._showDatepicker);

            if (inst.trigger) {
                Common.Remove(inst.trigger);
            }

            showOn = this._get(inst, 'showOn');
            if (showOn === 'focus' || showOn === 'both') { // pop-up date picker when in the marked field
                input.focus(this._showDatepicker);
            }
            if (showOn === 'button' || showOn === 'both') { // pop-up date picker when button clicked
                buttonText = this._get(inst, 'buttonText');
                buttonImage = this._get(inst, 'buttonImage');
                var triggerElement;
                if (this._get(inst, 'buttonImageOnly')) {
                    triggerElement = Common.GenerateHTML('<img/>');
                    Common.AddClass(triggerElement, this._triggerClass);
                    Common.SetAttr(triggerElement, 'src', buttonImage);
                    Common.SetAttr(triggerElement, 'alt', buttonText);
                    Common.SetAttr(triggerElement, 'title', buttonText);
                }
                else {
                    var triggerElement = Common.GenerateHTML('<button type="button"></button>');
                    Common.AddClass(triggerElement, this._triggerClass);
                    if (!buttonImage) {
                        triggerElement.innerHTML = buttonText;
                    }
                    else {
                        var img = Common.GenerateHTML('<img/>');
                        Common.SetAttr(img, 'src', buttonImage);
                        Common.SetAttr(img, 'alt', buttonText);
                        Common.SetAttr(img, 'title', buttonText);
                        triggerElement.appendChild(img);
                    }
                }
                inst.trigger = triggerElement;
                context = input;
                if (!isRTL) {
                    context = input.nextSibling;
                }
                input.parentNode.insertBefore(inst.trigger, context);
                Events.On(inst.trigger, 'click',
                    function () {
                        if (Widgets.datepicker._datepickerShowing && Widgets.datepicker._lastInput === input) {
                            Widgets.datepicker._hideDatepicker();
                        }
                        else if (Widgets.datepicker._datepickerShowing && Widgets.datepicker._lastInput !== input) {
                            Widgets.datepicker._hideDatepicker();
                            Widgets.datepicker._showDatepicker(input);
                        }
                        else {
                            Widgets.datepicker._showDatepicker(input);
                        }
                        return false;
                    }
                );
            }

        },

        // Apply the maximum length for the date format.
        _autoSize: function (inst) {

            if (this._get(inst, 'autoSize') && !inst.inline) {
                var findMax, max, maxI, i,
                    date = new Date(2009, 12 - 1, 20), // Ensure double digits
                    dateFormat = this._get(inst, 'dateFormat');

                if (dateFormat.match(/[DM]/)) {
                    findMax = function (names) {
                        max = 0;
                        maxI = 0;
                        for (i = 0; i < names.length; i++) {
                            if (names[i].length > max) {
                                max = names[i].length;
                                maxI = i;
                            }
                        }
                        return maxI;
                    };
                    date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ? 'monthNames' : 'monthNamesShort'))));
                    date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ? 'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
                }
                Common.SetAttr(inst.input, 'size', this._formatDate(inst, date).length);
            }

        },

        // Attach an inline date picker to a div.
        _inlineDatepicker: function (target, inst) {

            var divSpan = target;
            if (Common.HasClass(divSpan, this.markerClassName)) {
                return;
            }
            Common.AddClass(divSpan, this.markerClassName);
            divSpan.appendChild(inst.dpDiv);
            Cache.Set(target, 'datepicker', inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);

            // If disabled option is true, disable the datepicker before showing it (see ticket #5665)
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }
            inst.dpDiv.style.display = 'block';

        },

        // Pop-up the date picker in a "dialog" box.
        // @param  input element - ignored
        // @param  date string or Date - the initial date to display
        // @param  onSelect  function - the function to call when a date is selected
        // @param  settings  object - update the dialog date picker instance's settings (anonymous object)
        // @param  pos int[2] - coordinates for the dialog's position within the screen or
        //                  event - with x/y coordinates or
        //                  leave empty for default (screen centre)
        // @return the manager object
        _dialogDatepicker: function (input, date, onSelect, settings, pos) {

            var id, browserWidth, browserHeight, scrollX, scrollY,
                inst = this._dialogInst; // internal instance

            if (!inst) {
                this.uuid += 1;
                id = 'dp' + this.uuid;
                this._dialogInput = Common.GenerateHTML('<input type="text" id="' + id + '" style="position: absolute; top: -100px; width: 0px;"/>');
                Events.On(this._dialogInput, 'keydown', this._doKeyDown);
                document.body.appendChild(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                Cache.Set(this._dialogInput, 'datepicker', inst);
            }
            datepicker_extendRemove(inst.settings, settings || {});
            date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
            this._dialogInput.value = date;

            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
            if (!this._pos) {
                browserWidth = document.documentElement.clientWidth;
                browserHeight = document.documentElement.clientHeight;
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = // should use actual width/height below
                    [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
            }

            // move input on screen for focus, but hidden behind dialog
            this._dialogInput.style.left = (this._pos[0] + 20) + 'px';
            this._dialogInput.style.top = this._pos[1] + 'px';
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            Common.AddClass(this.dpDiv, this._dialogClass);
            this._showDatepicker(this._dialogInput);
            Cache.Set(this._dialogInput, 'datepicker', inst);
            return this;

        },

        // Detach a datepicker from its control.
        // @param  target   element - the target input field or division or span
        _destroyDatepicker: function (target) {

            var nodeName,
                inst = Cache.Get(target, 'datepicker');

            if (!Common.HasClass(target, this.markerClassName)) {
                return;
            }

            nodeName = target.nodeName.toLowerCase();
            Cache.Remove(target, 'datepicker');
            if (nodeName === 'input') {
                Common.Remove(inst.append);
                Common.Remove(inst.trigger);
                Common.RemoveClass(target, this.markerClassName);
                Events.Off(target, 'focus', this._showDatepicker);
                Events.Off(target, 'keydown', this._doKeyDown);
                Events.Off(target, 'keypress', this._doKeyPress);
                Events.Off(target, 'keyup', this._doKeyUp);
            }
            else if (nodeName === 'div' || nodeName === 'span') {
                Common.RemoveClass(target, this.markerClassName);
                if (target.nodeType === 1) {
                    // Get all elements inside element to be removed and clean up their data and events as well
                    // INFO: getElementsByTagName is MUCH faster in this context than querySelectorAll (NodeList - live vs static)
                    Cache.CleanElementData(target.getElementsByTagName('*'));
                }
                target.textContent = '';
            }

            if (datepicker_instActive === inst) {
                datepicker_instActive = null;
            }

        },

        // Enable the date picker on a target
        // @param  target   element - the target input field or division or span
        _enableDatepicker: function (target) {

            var nodeName, inline, index, length,
                inst = Cache.Get(target, 'datepicker');

            if (!Common.HasClass(target, this.markerClassName)) {
                return;
            }

            nodeName = target.nodeName.toLowerCase();
            if (nodeName === 'input') {
                target.disabled = false;
                var buttons = Common.GetByTagName('button', inst.trigger);
                index = 0, length = buttons.length;
                for ( ; index < length; index++) {
                    buttons[index].disabled = false;
                }
                var images = Common.GetByTagName('img', inst.trigger);
                index = 0, length = images.length;
                for ( ; index < length; index++) {
                    images[index].style.opacity = '1.0';
                    images[index].style.cursor = '';
                }
            }
            else if (nodeName === 'div' || nodeName === 'span') {
                inline = Common.GetChildren(target, '.' + this._inlineClass);
                index = 0, length = inline.length;
                for ( ; index < length; index++) {
                    var inlineChildren = Common.GetChildren(inline[index]);
                    var childIndex = 0, childLength = inlineChildren.length;
                    for ( ; childIndex < childLength; childIndex++) {
                        Common.RemoveClass(inlineChildren[childIndex], 'gtc-ui-state-disabled');
                    }
                    var selects = Common.QueryAll('select.gtc-ui-datepicker-month, select.gtc-ui-datepicker-year', inline[index]);
                    childIndex = 0, childLength = selects.length;
                    for ( ; childIndex < childLength; childIndex++) {
                        selects[childIndex].disabled = false;
                    }
                }
            }

            // Delete entry
            this._disabledInputs = Common.FilterArray(this._disabledInputs,
                function (value) {
                    return (value === target ? false : true);
                }
            );

        },

        // Disable the date picker to a target
        // @param  target   element - the target input field or division or span
        _disableDatepicker: function (target) {

            var nodeName, inline, index, length,
                inst = Cache.Get(target, 'datepicker');

            if (!Common.HasClass(target, this.markerClassName)) {
                return;
            }

            nodeName = target.nodeName.toLowerCase();
            if (nodeName === 'input') {
                target.disabled = true;
                var buttons = Common.GetByTagName('button', inst.trigger);
                index = 0, length = buttons.length;
                for ( ; index < length; index++) {
                    buttons[index].disabled = true;
                }
                var images = Common.GetByTagName('img', inst.trigger);
                index = 0, length = images.length;
                for ( ; index < length; index++) {
                    images[index].style.opacity = '.5';
                    images[index].style.cursor = 'default';
                }
            }
            else if (nodeName === 'div' || nodeName === 'span') {
                inline = Common.GetChildren(target, '.' + this._inlineClass);
                index = 0, length = inline.length;
                for ( ; index < length; index++) {
                    var inlineChildren = Common.GetChildren(inline[index]);
                    var childIndex = 0, childLength = inlineChildren.length;
                    for ( ; childIndex < childLength; childIndex++) {
                        Common.AddClass(inlineChildren[childIndex], 'gtc-ui-state-disabled');
                    }
                    var selects = Common.QueryAll('select.gtc-ui-datepicker-month, select.gtc-ui-datepicker-year', inline[index]);
                    childIndex = 0, childLength = selects.length;
                    for ( ; childIndex < childLength; childIndex++) {
                        selects[childIndex].disabled = true;
                    }
                }
            }

            // Delete entry
            this._disabledInputs = Common.FilterArray(this._disabledInputs,
                function (value) {
                    return (value === target ? false : true);
                }
            );
            this._disabledInputs[this._disabledInputs.length] = target;

        },

        // Is target disabled as a datepicker?
        // @param  target   element - the target input field or division or span
        // @return boolean - true if disabled, false if enabled
        _isDisabledDatepicker: function (target) {

            if (!target) {
                return false;
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] === target) {
                    return true;
                }
            }
            return false;

        },

        // Retrieve the instance data for the target control.
        // @param  target  element - the target input field or division or span
        // @return  object - the associated instance data
        // @throws  error if a problem getting data
        _getInst: function (target) {

            try {
                return Cache.Get(target, 'datepicker');
            }
            catch (err) {
                throw 'Missing instance data for this datepicker';
            }

        },

        // Update or retrieve the settings for a date picker attached to an input field or division.
        // @param  target  element - the target input field or division or span
        // @param  name object - the new settings to update or
        //              string - the name of the setting to change or retrieve,
        //              when retrieving also "all" for all instance settings or
        //              "defaults" for all global defaults
        // @param  value   any - the new value for the setting
        //              (omit if above is an object or to retrieve a value)
        _optionDatepicker: function (target, name, value) {

            var settings, date, minDate, maxDate,
                inst = this._getInst(target);

            if (arguments.length === 2 && Common.IsString(name)) {
                return (name === 'defaults' ? Common.MergeObjects({}, Widgets.datepicker._defaults) :
                    (inst ? (name === "all" ? Common.MergeObjects({}, inst.settings) :
                    this._get(inst, name)) : null));
            }

            settings = name || {};
            if (Common.IsString(name)) {
                settings = {};
                settings[name] = value;
            }

            if (inst) {
                if (this._curInst === inst) {
                    this._hideDatepicker();
                }

                date = this._getDateDatepicker(target, true);
                minDate = this._getMinMaxDate(inst, 'min');
                maxDate = this._getMinMaxDate(inst, 'max');
                datepicker_extendRemove(inst.settings, settings);

                // Reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
                if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                    inst.settings.minDate = this._formatDate(inst, minDate);
                }
                if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                    inst.settings.maxDate = this._formatDate(inst, maxDate);
                }
                if ('disabled' in settings) {
                    if (settings.disabled) {
                        this._disableDatepicker(target);
                    }
                    else {
                        this._enableDatepicker(target);
                    }
                }
                this._attachments(target, inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst);
            }

        },

        // Change method deprecated
        _changeDatepicker: function (target, name, value) {

            this._optionDatepicker(target, name, value);

        },

        // Redraw the date picker attached to an input field or division.
        // @param  target  element - the target input field or division or span
        _refreshDatepicker: function (target) {

            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst);
            }

        },

        // Set the dates for a target
        // @param  target element - the target input field or division or span
        // @param  date Date - the new date
        _setDateDatepicker: function (target, date) {

            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
            }

        },

        // Get the date(s) for the first entry in a target
        // @param  target element - the target input field or division or span
        // @param  noDefault boolean - true if no default date is to be used
        // @return Date - the current date
        _getDateDatepicker: function (target, noDefault) {

            var inst = this._getInst(target);
            if (inst && !inst.inline) {
                this._setDateFromField(inst, noDefault);
            }
            return (inst ? this._getDate(inst) : null);

        },

        // Handle keystrokes.
        _doKeyDown: function (event) {

            var onSelect, dateStr, sel,
                inst = Widgets.datepicker._getInst(event.target),
                handled = true,
                isRTL = Common.HasClass(inst.dpDiv, 'gtc-ui-datepicker-rtl');

            inst._keyEvent = true;
            if (Widgets.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                    case 9:
                        Widgets.datepicker._hideDatepicker();
                        handled = false;
                        break; // hide on tab out
                    case 13:
                        sel = Common.Query('td.' + Widgets.datepicker._dayOverClass + ':not(.' + Widgets.datepicker._currentClass + ')', inst.dpDiv);
                        if (sel) {
                            Widgets.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel);
                        }

                        onSelect = Widgets.datepicker._get(inst, 'onSelect');
                        if (onSelect) {
                            dateStr = Widgets.datepicker._formatDate(inst);

                            // trigger custom callback
                            onSelect.apply((inst.input ? inst.input : null), [dateStr, inst]);
                        }
                        else {
                            Widgets.datepicker._hideDatepicker();
                        }

                        return false; // don't submit the form
                    case 27:
                        Widgets.datepicker._hideDatepicker();
                        break; // hide on escape
                    case 33:
                        Widgets.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            -Widgets.datepicker._get(inst, 'stepBigMonths') :
                            -Widgets.datepicker._get(inst, 'stepMonths')), 'M');
                        break; // previous month/year on page up/+ ctrl
                    case 34:
                        Widgets.datepicker._adjustDate(event.target, (event.ctrlKey ?
                            +Widgets.datepicker._get(inst, 'stepBigMonths') :
                            +Widgets.datepicker._get(inst, 'stepMonths')), 'M');
                        break; // next month/year on page down/+ ctrl
                    case 35:
                        if (event.ctrlKey || event.metaKey) {
                            Widgets.datepicker._clearDate(event.target);
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // clear on ctrl or command +end
                    case 36:
                        if (event.ctrlKey || event.metaKey) {
                            Widgets.datepicker._gotoToday(event.target);
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // current on ctrl or command +home
                    case 37:
                        if (event.ctrlKey || event.metaKey) {
                            Widgets.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
                        }
                        handled = event.ctrlKey || event.metaKey;
                        // -1 day on ctrl or command +left
                        if (event.originalEvent.altKey) {
                            Widgets.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                -Widgets.datepicker._get(inst, 'stepBigMonths') :
                                -Widgets.datepicker._get(inst, 'stepMonths')), 'M');
                        }
                        // next month/year on alt +left on Mac
                        break;
                    case 38:
                        if (event.ctrlKey || event.metaKey) {
                            Widgets.datepicker._adjustDate(event.target, -7, 'D');
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // -1 week on ctrl or command +up
                    case 39:
                        if (event.ctrlKey || event.metaKey) {
                            Widgets.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
                        }
                        handled = event.ctrlKey || event.metaKey;
                        // +1 day on ctrl or command +right
                        if (event.originalEvent.altKey) {
                            Widgets.datepicker._adjustDate(event.target, (event.ctrlKey ?
                                +Widgets.datepicker._get(inst, 'stepBigMonths') :
                                +Widgets.datepicker._get(inst, 'stepMonths')), 'M');
                        }
                        // next month/year on alt +right
                        break;
                    case 40:
                        if (event.ctrlKey || event.metaKey) {
                            Widgets.datepicker._adjustDate(event.target, +7, 'D');
                        }
                        handled = event.ctrlKey || event.metaKey;
                        break; // +1 week on ctrl or command +down
                    default:
                        handled = false;
                }
            }
            else if (event.keyCode === 36 && event.ctrlKey) {
                // Display the date picker on ctrl+home
                Widgets.datepicker._showDatepicker(this);
            }
            else {
                handled = false;
            }

            if (handled) {
                event.preventDefault();
                event.stopPropagation();
            }

        },

        // Filter entered characters - based on date format.
        _doKeyPress: function (event) {

            var chars, chr,
                inst = Widgets.datepicker._getInst(event.target);

            if (Widgets.datepicker._get(inst, 'constrainInput')) {
                chars = Widgets.datepicker._possibleChars(Widgets.datepicker._get(inst, 'dateFormat'));
                chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
            }

        },

        // Synchronise manual entry and field/alternate field.
        _doKeyUp: function (event) {

            var date,
                inst = Widgets.datepicker._getInst(event.target);

            if (inst.input.value !== inst.lastVal) {
                try {
                    date = Widgets.datepicker.parseDate(Widgets.datepicker._get(inst, 'dateFormat'),
                        (inst.input ? inst.input.value : null),
                        Widgets.datepicker._getFormatConfig(inst));

                    if (date) { // only if valid
                        Widgets.datepicker._setDateFromField(inst);
                        Widgets.datepicker._updateAlternate(inst);
                        Widgets.datepicker._updateDatepicker(inst);
                    }
                }
                catch (err) {
                }
            }
            return true;

        },

        // Pop-up the date picker for a given input field.
        // If false returned from beforeShow event handler do not show.
        // @param  input  element - the input field attached to the date picker or
        //                  event - if triggered by focus
        _showDatepicker: function (input) {

            input = input.target || input;
            if (input.nodeName.toLowerCase() !== 'input') { // find from button/image trigger
                input = Common.Query("input", input.parentNode);
            }

            if (Widgets.datepicker._isDisabledDatepicker(input) || Widgets.datepicker._lastInput === input) {
                return;
            }

            var inst, beforeShow, beforeShowSettings, isFixed,
                offset;

            inst = Widgets.datepicker._getInst(input);
            if (Widgets.datepicker._curInst && Widgets.datepicker._curInst !== inst) {
                Velocity(Widgets.datepicker._curInst.dpDiv, 'stop', true);
                if (inst && Widgets.datepicker._datepickerShowing) {
                    Widgets.datepicker._hideDatepicker(Widgets.datepicker._curInst.input);
                }
            }

            beforeShow = Widgets.datepicker._get(inst, 'beforeShow');
            beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
            if (beforeShowSettings === false){
                return;
            }
            datepicker_extendRemove(inst.settings, beforeShowSettings);

            inst.lastVal = null;
            Widgets.datepicker._lastInput = input;
            Widgets.datepicker._setDateFromField(inst);

            if (Widgets.datepicker._inDialog) { // hide cursor
                input.value = '';
            }
            if (!Widgets.datepicker._pos) { // position below input
                Widgets.datepicker._pos = Widgets.datepicker._findPos(input);
                Widgets.datepicker._pos[1] += input.offsetHeight; // add the height
            }

            isFixed = false;
            var inputParents = Common.ParentsUntil(null, input);
            var index = 0, length = inputParents.length;
            for ( ; index < length; index++) {
                isFixed = Common.GetStyle(inputParents[index], 'position') === 'fixed';
                if (isFixed) {
                    break;
                }
            }

            offset = {left: Widgets.datepicker._pos[0], top: Widgets.datepicker._pos[1]};
            Widgets.datepicker._pos = null;

            // To avoid flashes on Firefox
            if (inst.dpDiv.nodeType === 1) {
                // Get all elements inside element to be removed and clean up their data and events as well
                // INFO: getElementsByTagName is MUCH faster in this context than querySelectorAll (NodeList - live vs static)
                Cache.CleanElementData(inst.dpDiv.getElementsByTagName('*'));
            }
            inst.dpDiv.textContent = '';

            // determine sizing offscreen
            inst.dpDiv.style.position = 'absolute';
            inst.dpDiv.style.display = 'block';
            inst.dpDiv.style.top = '-1000px';
            Widgets.datepicker._updateDatepicker(inst);

            // fix width for dynamic number of date pickers
            // and adjust position before showing
            offset = Widgets.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.style.position = isFixed ? 'fixed' : 'absolute';
            inst.dpDiv.style.display = 'none';
            inst.dpDiv.style.left = offset.left + 'px';
            inst.dpDiv.style.top = offset.top + 'px';

            if (!inst.inline) {
                Widgets.datepicker._datepickerShowing = true;

                Velocity(inst.dpDiv, 'fadeIn', 'fast');

                if (Widgets.datepicker._shouldFocusInput(inst)) {
                    inst.input.focus();
                }

                Widgets.datepicker._curInst = inst;
            }

        },

        // Generate the date picker content.
        _updateDatepicker: function (inst) {

            this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
            datepicker_instActive = inst; // for delegate hover events

            if (inst.dpDiv.nodeType === 1) {
                // Get all elements inside element to be removed and clean up their data and events as well
                // INFO: getElementsByTagName is MUCH faster in this context than querySelectorAll (NodeList - live vs static)
                Cache.CleanElementData(inst.dpDiv.getElementsByTagName('*'));
            }
            inst.dpDiv.textContent = '';
            Common.InsertHTMLString(inst.dpDiv, Common.InsertType.Append, this._generateHTML(inst));
            this._attachHandlers(inst);

            var origyearshtml,
                numMonths = this._getNumberOfMonths(inst),
                cols = numMonths[1],
                width = 17,
                activeCell = Common.Query('.' + this._dayOverClass + ' a', inst.dpDiv);

            if (activeCell) {
                datepicker_handleMouseover.apply(activeCell);
            }

            Common.RemoveClasses(inst.dpDiv, 'gtc-ui-datepicker-multi-2 gtc-ui-datepicker-multi-3 gtc-ui-datepicker-multi-4');
            inst.dpDiv.style.width = '';
            if (cols > 1) {
                Common.AddClass(inst.dpDiv, 'gtc-ui-datepicker-multi-' + cols);
                inst.dpDiv.styl.width = (width * cols) + 'em';
            }
            if (numMonths[0] !== 1 || numMonths[1] !== 1) {
                Common.AddClass(inst.dpDiv, 'gtc-ui-datepicker-multi');
            }
            else {
                Common.RemoveClass(inst.dpDiv, 'gtc-ui-datepicker-multi');
            }
            if (this._get(inst, 'isRTL')) {
                Common.AddClass(inst.dpDiv, 'gtc-ui-datepicker-rtl');
            }
            else {
                Common.RemoveClass(inst.dpDiv, 'gtc-ui-datepicker-rtl');
            }

            if (inst === Widgets.datepicker._curInst && Widgets.datepicker._datepickerShowing && Widgets.datepicker._shouldFocusInput(inst)) {
                inst.input.focus();
            }

            // Deffered render of the years select (to avoid flashes on Firefox)
            if (inst.yearshtml){
                origyearshtml = inst.yearshtml;
                setTimeout(
                    function () {
                        // Assure that inst.yearshtml didn't change.
                        if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                            var yearSelect = Common.Query('select.gtc-ui-datepicker-year', inst.dpDiv);
                            if (yearSelect) {
                                var newNode = Common.GenerateHTML(inst.yearshtml);
                                yearSelect.parentNode.replaceChild(newNode, yearSelect);
                            }
                        }
                        origyearshtml = inst.yearshtml = null;
                    }, 0
                );
            }

        },

        // #6694 - don't focus the input if it's already focused
        // this breaks the change event in IE
        // Support: IE
        _shouldFocusInput: function (inst) {

            return inst.input && Common.IsVisible(inst.input) && !inst.input.disabled == false && !inst.input != document.activeElement;

        },

        // Check positioning to remain on screen.
        _checkOffset: function (inst, offset, isFixed) {

            var dpWidth = Common.Width(inst.dpDiv, true),
                dpHeight = Common.Height(inst.dpDiv, true),
                inputWidth = inst.input ? Common.Width(inst.input, true) : 0,
                inputHeight = inst.input ? Common.Height(inst.input, true) : 0,
                viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : window.pageXOffset),
                viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : window.pageYOffset);

            var inputOffset = Common.Offset(inst.input);
            offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
            offset.left -= (isFixed && offset.left === inputOffset.left) ? window.pageXOffset : 0;
            offset.top -= (isFixed && offset.top === (inputOffset.top + inputHeight)) ? window.pageYOffset : 0;

            // now check if datepicker is showing outside window viewport - move to a better place if so.
            offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
                Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight) : 0);

            return offset;

        },

        // Find an object's position on the screen.
        _findPos: function (obj) {

            var position,
                inst = this._getInst(obj),
                isRTL = this._get(inst, 'isRTL');

            while (obj && (obj.type === 'hidden' || obj.nodeType !== 1 || Common.IsHidden(obj))) {
                if (isRTL) {
                    obj = Common.GetSibling(obj, Common.SiblingType.Previous);
                }
                else {
                    obj = Common.GetSibling(obj, Common.SiblingType.Next);
                }
            }

            position = Common.Offset(obj);
            return [position.left, position.top];

        },

        // Hide the date picker from view.
        // @param  input  element - the input field attached to the date picker
        _hideDatepicker: function (input) {

            var postProcess, onClose,
                inst = this._curInst;

            if (!inst || (input && inst !== Cache.Get(input, 'datepicker'))) {
                return;
            }

            if (this._datepickerShowing) {
                postProcess = function () {
                    Widgets.datepicker._tidyDialog(inst);
                };

                Velocity(inst.dpDiv, 'fadeOut', 'fast', postProcess);

                this._datepickerShowing = false;

                onClose = this._get(inst, 'onClose');
                if (onClose) {
                    onClose.apply((inst.input ? inst.input : null), [(inst.input ? inst.input.value : ''), inst]);
                }

                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.style.position = 'absolute';
                    this._dialogInput.style.left = '0';
                    this._dialogInput.style.top = '-100px';
                }
                this._inDialog = false;
            }

        },

        // Tidy up after a dialog display.
        _tidyDialog: function (inst) {

            Common.RemoveClass(inst.dpDiv, this._dialogClass);
            Events.Off(inst.dpDiv, '.gtc-ui-datepicker-calendar');

        },

        // Close date picker if clicked elsewhere.
        _checkExternalClick: function (event) {

            if (!Widgets.datepicker._curInst) {
                return;
            }

            var target = event.target,
                inst = Widgets.datepicker._getInst(target);

            if (((target.id !== Widgets.datepicker._mainDivId &&
                    Common.ParentsUntil(null, target, '#' + Widgets.datepicker._mainDivId).length == 0 &&
                    !Common.HasClass(target, Widgets.datepicker.markerClassName) &&
                    Common.IsNotDefined(Common.Closest('.' + Widgets.datepicker._triggerClass, target)) &&
                    Widgets.datepicker._datepickerShowing)) ||
                (Common.HasClass(target, Widgets.datepicker.markerClassName) && Widgets.datepicker._curInst !== inst)) {
                    Widgets.datepicker._hideDatepicker();
            }

        },

        // Adjust one of the date sub-fields.
        _adjustDate: function (id, offset, period) {

            var target;
            if (Common.IsString(id)) {
                target = Common.Get(id);
            }
            else {
                target = id;
            }
            var inst = this._getInst(target);

            if (this._isDisabledDatepicker(target)) {
                return;
            }
            this._adjustInstDate(inst, offset +
                (period === 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning
                period);
            this._updateDatepicker(inst);

        },

        // Action for current link.
        _gotoToday: function (id) {

            var date, target;
            if (Common.IsString(id)) {
                target = Common.Get(id);
            }
            else {
                target = id;
            }
            var inst = this._getInst(target);

            if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear;
            }
            else {
                date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
            }
            this._notifyChange(inst);
            this._adjustDate(target);

        },

        // Action for selecting a new month/year.
        _selectMonthYear: function (id, select, period) {

            var inst, target;
            if (Common.IsString(id)) {
                target = Common.Get(id);
            }
            else {
                target = id;
            }
            inst = this._getInst(target);

            inst['selected' + (period === 'M' ? 'Month' : 'Year')] =
            inst['draw' + (period === 'M' ? 'Month' : 'Year')] =
                parseInt(select.options[select.selectedIndex].value, 10);

            this._notifyChange(inst);
            this._adjustDate(target);

        },

        // Action for selecting a day.
        _selectDay: function(id, month, year, td) {

            var inst, target;
            if (Common.IsString(id)) {
                target = Common.Get(id);
            }
            else {
                target = id;
            }

            if (Common.HasClass(td, this._unselectableClass) || this._isDisabledDatepicker(target)) {
                return;
            }

            inst = this._getInst(target);
            inst.selectedDay = inst.currentDay = Common.Query('a', td).innerHTML;
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));

        },

        // Erase the input field and hide the date picker.
        _clearDate: function (id) {

            var target;
            if (Common.IsString(id)) {
                target = Common.Get(id);
            }
            else {
                target = id;
            }
            this._selectDate(target, '');

        },

        // Update the input field with the selected date.
        _selectDate: function (id, dateStr) {

            var onSelect, target;
            if (Common.IsString(id)) {
                target = Common.Get(id);
            }
            else {
                target = id;
            }
            var inst = this._getInst(target);

            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
            if (inst.input) {
                inst.input.value = dateStr;
            }
            this._updateAlternate(inst);

            onSelect = this._get(inst, 'onSelect');
            if (onSelect) {
                onSelect.apply((inst.input ? inst.input : null), [dateStr, inst]);  // trigger custom callback
            }
            else if (inst.input) {
                Events.Trigger(inst.input, 'change'); // fire the change event
            }

            if (inst.inline){
                this._updateDatepicker(inst);
            }
            else {
                this._hideDatepicker();
                this._lastInput = inst.input;
                if (!Common.IsObject(inst.input)) {
                    inst.input.focus(); // restore focus
                }
                this._lastInput = null;
            }

        },

        // Update any alternate field to synchronise with the main field.
        _updateAlternate: function (inst) {

            var altFormat, date, dateStr,
                altField = this._get(inst, 'altField');

            if (altField) { // update alternate field too
                altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
                date = this._getDate(inst);
                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                altField.value = dateStr;
            }

        },

        // Set as beforeShowDay function to prevent selection of weekends.
        // @param  date  Date - the date to customise
        // @return [boolean, string] - is this date selectable?, what is its CSS class?
        noWeekends: function (date) {

            var day = date.getDay();
            return [(day > 0 && day < 6), ''];

        },

        // Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
        // @param  date  Date - the date to get the week for
        // @return  number - the number of the week within the year that contains this date
        iso8601Week: function (date) {

            var time,
                checkDate = new Date(date.getTime());

            // Find Thursday of this week starting on Monday
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

            time = checkDate.getTime();
            checkDate.setMonth(0); // Compare with Jan 1
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;

        },

        // Parse a string value into a date object.
        // See formatDate below for the possible formats.
        //
        // @param  format string - the expected format of the date
        // @param  value string - the date in the above format
        // @param  settings Object - attributes include:
        //                  shortYearCutoff  number - the cutoff year for determining the century (optional)
        //                  dayNamesShort   string[7] - abbreviated names of the days from Sunday (optional)
        //                  dayNames        string[7] - names of the days from Sunday (optional)
        //                  monthNamesShort string[12] - abbreviated names of the months (optional)
        //                  monthNames      string[12] - names of the months (optional)
        // @return  Date - the extracted date value or null if value is blank
        parseDate: function (format, value, settings) {

            if (format == null || value == null) {
                throw 'Invalid arguments';
            }

            value = (Common.IsObject(value) ? value.toString() : value + '');
            if (value === '') {
                return null;
            }

            var iFormat, dim, extra,
                iValue = 0,
                shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
                shortYearCutoff = (!Common.IsString(shortYearCutoffTemp) ? shortYearCutoffTemp :
                    new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
                dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
                year = -1,
                month = -1,
                day = -1,
                doy = -1,
                literal = false,
                date,
                // Check whether a format character is doubled
                lookAhead = function (match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },
                // Extract a number from the string value
                getNumber = function (match) {

                    var isDoubled = lookAhead(match),
                        size = (match === '@' ? 14 : (match === '!' ? 20 :
                        (match === 'y' && isDoubled ? 4 : (match === 'o' ? 3 : 2)))),
                        minSize = (match === 'y' ? size : 1),
                        digits = new RegExp('^\\d{' + minSize + ',' + size + '}'),
                        num = value.substring(iValue).match(digits);
                    if (!num) {
                        throw 'Missing number at position ' + iValue;
                    }
                    iValue += num[0].length;
                    return parseInt(num[0], 10);

                },
                // Extract a name from the string value and convert to an index
                getName = function (match, shortNames, longNames) {

                    var index = -1, names;

                    var namesToMap = lookAhead(match) ? longNames : shortNames;
                    var mappedNames = [];
                    var mapIndex = 0, mapLength = namesToMap.length;
                    for ( ; mapIndex < mapLength; mapIndex++) {
                        mappedNames.push([mapIndex, namesToMap[mapIndex]]);
                    }

                    names = mappedNames.sort(
                        function (a, b) {
                            return -(a[1].length - b[1].length);
                        }
                    );

                    var pair, sortedIndex = 0, sortedLength = names.length;
                    for ( ; sortedIndex < sortedLength; sortedIndex++) {
                        pair = names[sortedIndex];
                        var name = pair[1];
                        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                            index = pair[0];
                            iValue += name.length;
                            break;
                        }
                    }
                    if (index !== -1) {
                        return index + 1;
                    }
                    else {
                        throw 'Unknown name at position ' + iValue;
                    }

                },
                // Confirm that a literal character matches the string value
                checkLiteral = function () {

                    if (value.charAt(iValue) !== format.charAt(iFormat)) {
                        throw 'Unexpected literal at position ' + iValue;
                    }
                    iValue++;

                };

            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === '\'' && !lookAhead('\'')) {
                        literal = false;
                    }
                    else {
                        checkLiteral();
                    }
                }
                else {
                    switch (format.charAt(iFormat)) {
                        case 'd':
                            day = getNumber('d');
                            break;
                        case 'D':
                            getName('D', dayNamesShort, dayNames);
                            break;
                        case 'o':
                            doy = getNumber('o');
                            break;
                        case 'm':
                            month = getNumber('m');
                            break;
                        case 'M':
                            month = getName('M', monthNamesShort, monthNames);
                            break;
                        case 'y':
                            year = getNumber('y');
                            break;
                        case '@':
                            date = new Date(getNumber('@'));
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case '!':
                            date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
                            year = date.getFullYear();
                            month = date.getMonth() + 1;
                            day = date.getDate();
                            break;
                        case '\'':
                            if (lookAhead('\'')){
                                checkLiteral();
                            }
                            else {
                                literal = true;
                            }
                            break;
                        default:
                            checkLiteral();
                    }
                }
            }

            if (iValue < value.length){
                extra = value.substr(iValue);
                if (!/^\s+/.test(extra)) {
                    throw 'Extra/unparsed characters found in date: ' + extra;
                }
            }

            if (year === -1) {
                year = new Date().getFullYear();
            }
            else if (year < 100) {
                year += new Date().getFullYear() - new Date().getFullYear() % 100 +
                    (year <= shortYearCutoff ? 0 : -100);
            }

            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim) {
                        break;
                    }
                    month++;
                    day -= dim;
                } while (true);
            }

            date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                throw 'Invalid date'; // E.g. 31/02/00
            }
            return date;

        },

        // Standard date formats.
        ATOM: 'yy-mm-dd', // RFC 3339 (ISO 8601)
        COOKIE: 'D, dd M yy',
        ISO_8601: 'yy-mm-dd',
        RFC_822: 'D, d M y',
        RFC_850: 'DD, dd-M-y',
        RFC_1036: 'D, d M y',
        RFC_1123: 'D, d M yy',
        RFC_2822: 'D, d M yy',
        RSS: 'D, d M y', // RFC 822
        TICKS: '!',
        TIMESTAMP: '@',
        W3C: 'yy-mm-dd', // ISO 8601

        _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

        // Format a date object into a string value.
        // The format can be combinations of the following:
        // d  - day of month (no leading zero)
        // dd - day of month (two digit)
        // o  - day of year (no leading zeros)
        // oo - day of year (three digit)
        // D  - day name short
        // DD - day name long
        // m  - month of year (no leading zero)
        // mm - month of year (two digit)
        // M  - month name short
        // MM - month name long
        // y  - year (two digit)
        // yy - year (four digit)
        // @ - Unix timestamp (ms since 01/01/1970)
        // ! - Windows ticks (100ns since 01/01/0001)
        // "..." - literal text
        // '' - single quote
        //
        // @param  format string - the desired format of the date
        // @param  date Date - the date value to format
        // @param  settings Object - attributes include:
        //                  dayNamesShort   string[7] - abbreviated names of the days from Sunday (optional)
        //                  dayNames        string[7] - names of the days from Sunday (optional)
        //                  monthNamesShort string[12] - abbreviated names of the months (optional)
        //                  monthNames      string[12] - names of the months (optional)
        // @return  string - the date in the above format
        formatDate: function (format, date, settings) {

            if (!date) {
                return '';
            }

            var iFormat,
                dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
                // Check whether a format character is doubled
                lookAhead = function (match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                },
                // Format a number, with leading zero if necessary
                formatNumber = function (match, value, len) {
                    var num = '' + value;
                    if (lookAhead(match)) {
                        while (num.length < len) {
                            num = '0' + num;
                        }
                    }
                    return num;
                },
                // Format a name, short or long as requested
                formatName = function (match, value, shortNames, longNames) {
                    return (lookAhead(match) ? longNames[value] : shortNames[value]);
                },
                output = "",
                literal = false;

            if (date) {
                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === '\'' && !lookAhead('\'')) {
                            literal = false;
                        }
                        else {
                            output += format.charAt(iFormat);
                        }
                    }
                    else {
                        switch (format.charAt(iFormat)) {
                            case 'd':
                                output += formatNumber('d', date.getDate(), 2);
                                break;
                            case 'D':
                                output += formatName('D', date.getDay(), dayNamesShort, dayNames);
                                break;
                            case 'o':
                                output += formatNumber('o',
                                    Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                                break;
                            case 'm':
                                output += formatNumber('m', date.getMonth() + 1, 2);
                                break;
                            case 'M':
                                output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
                                break;
                            case 'y':
                                output += (lookAhead('y') ? date.getFullYear() :
                                    (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
                                break;
                            case '@':
                                output += date.getTime();
                                break;
                            case '!':
                                output += date.getTime() * 10000 + this._ticksTo1970;
                                break;
                            case '\'':
                                if (lookAhead('\'')) {
                                    output += '\'';
                                }
                                else {
                                    literal = true;
                                }
                                break;
                            default:
                                output += format.charAt(iFormat);
                        }
                    }
                }
            }
            return output;

        },

        // Extract all possible characters from the date format.
        _possibleChars: function (format) {

            var iFormat,
                chars = '',
                literal = false,
                // Check whether a format character is doubled
                lookAhead = function(match) {
                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                };

            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === '\'' && !lookAhead('\'')) {
                        literal = false;
                    }
                    else {
                        chars += format.charAt(iFormat);
                    }
                }
                else {
                    switch (format.charAt(iFormat)) {
                        case 'd': case 'm': case 'y': case '@':
                            chars += '0123456789';
                            break;
                        case 'D': case 'M':
                            return null; // Accept anything
                        case '\'':
                            if (lookAhead('\'')) {
                                chars += '\'';
                            }
                            else {
                                literal = true;
                            }
                            break;
                        default:
                            chars += format.charAt(iFormat);
                    }
                }
            }
            return chars;

        },

        // Get a setting value, defaulting if necessary.
        _get: function (inst, name) {

            return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];

        },

        // Parse existing date and initialise date picker.
        _setDateFromField: function (inst, noDefault) {

            if (inst.input.value === inst.lastVal) {
                return;
            }

            var dateFormat = this._get(inst, 'dateFormat'),
                dates = inst.lastVal = inst.input ? inst.input.value : null,
                defaultDate = this._getDefaultDate(inst),
                date = defaultDate,
                settings = this._getFormatConfig(inst);

            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate;
            } catch (event) {
                dates = (noDefault ? '' : dates);
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = (dates ? date.getDate() : 0);
            inst.currentMonth = (dates ? date.getMonth() : 0);
            inst.currentYear = (dates ? date.getFullYear() : 0);
            this._adjustInstDate(inst);

        },

        // Retrieve the default date shown on opening.
        _getDefaultDate: function (inst) {

            return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));

        },

        // A date may be specified as an exact value or a relative one.
        _determineDate: function (inst, date, defaultDate) {

            var offsetNumeric = function (offset) {
                    var date = new Date();
                    date.setDate(date.getDate() + offset);
                    return date;
                },
                offsetString = function (offset) {
                    try {
                        return Widgets.datepicker.parseDate(Widgets.datepicker._get(inst, 'dateFormat'),
                            offset, Widgets.datepicker._getFormatConfig(inst));
                    }
                    catch (e) {
                        // Ignore
                    }

                    var date = (offset.toLowerCase().match(/^c/) ?
                        Widgets.datepicker._getDate(inst) : null) || new Date(),
                        year = date.getFullYear(),
                        month = date.getMonth(),
                        day = date.getDate(),
                        pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
                        matches = pattern.exec(offset);

                    while (matches) {
                        switch (matches[2] || 'd') {
                            case 'd' : case 'D' :
                                day += parseInt(matches[1],10); break;
                            case 'w' : case 'W' :
                                day += parseInt(matches[1],10) * 7; break;
                            case 'm' : case 'M' :
                                month += parseInt(matches[1],10);
                                day = Math.min(day, Widgets.datepicker._getDaysInMonth(year, month));
                                break;
                            case 'y': case 'Y' :
                                year += parseInt(matches[1],10);
                                day = Math.min(day, Widgets.datepicker._getDaysInMonth(year, month));
                                break;
                        }
                        matches = pattern.exec(offset);
                    }
                    return new Date(year, month, day);
                },
                newDate = (date == null || date === '' ? defaultDate : (Common.IsString(date) ? offsetString(date) :
                    (Common.IsNumber(date) ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

            newDate = (newDate && newDate.toString() === 'Invalid Date' ? defaultDate : newDate);
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0);
            }
            return this._daylightSavingAdjust(newDate);

        },

        // Handle switch to/from daylight saving.
        // Hours may be non-zero on daylight saving cut-over:
        // > 12 when midnight changeover, but then cannot generate
        // midnight datetime, so jump to 1AM, otherwise reset.
        // @param  date  (Date) the date to check
        // @return  (Date) the corrected date
        _daylightSavingAdjust: function (date) {

            if (!date) {
                return null;
            }
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date;

        },

        // Set the date(s) directly.
        _setDate: function (inst, date, noChange) {

            var clear = !date,
                origMonth = inst.selectedMonth,
                origYear = inst.selectedYear,
                newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
                this._notifyChange(inst);
            }
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.value = (clear ? '' : this._formatDate(inst));
            }

        },

        // Retrieve the date(s) directly.
        _getDate: function (inst) {

            var startDate = (!inst.currentYear || (inst.input && inst.input.value === '') ? null :
                this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
                return startDate;

        },

        // Attach the onxxx handlers.  These are declared statically so
        // they work with static code transformers like Caja.
        _attachHandlers: function (inst) {

            var stepMonths = this._get(inst, 'stepMonths'),
                id = inst.id.replace( /\\\\/g, '\\' );
            var allHandlers = Common.QueryAll('[data-handler]', inst.dpDiv);
            var handler, element, index = 0, length = allHandlers.length;
            for ( ; index < length; index++) {
                element = allHandlers[index];
                handler = {
                    prev: function () {
                        Widgets.datepicker._adjustDate(id, -stepMonths, 'M');
                    },
                    next: function () {
                        Widgets.datepicker._adjustDate(id, +stepMonths, 'M');
                    },
                    hide: function () {
                        Widgets.datepicker._hideDatepicker();
                    },
                    today: function () {
                        Widgets.datepicker._gotoToday(id);
                    },
                    selectDay: function () {
                        Widgets.datepicker._selectDay(id, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this);
                        return false;
                    },
                    selectMonth: function () {
                        Widgets.datepicker._selectMonthYear(id, this, 'M');
                        return false;
                    },
                    selectYear: function () {
                        Widgets.datepicker._selectMonthYear(id, this, 'Y');
                        return false;
                    }
                };
                Events.On(element, element.getAttribute('data-event'), handler[element.getAttribute('data-handler')]);
            }

        },

        // Generate the HTML for the current state of the date picker.
        _generateHTML: function (inst) {

            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
                controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
                monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
                selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
                cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
                printDate, dRow, tbody, daySettings, otherMonth, unselectable,
                tempDate = new Date(),
                today = this._daylightSavingAdjust(
                    new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
                isRTL = this._get(inst, 'isRTL'),
                showButtonPanel = this._get(inst, 'showButtonPanel'),
                hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext'),
                navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat'),
                numMonths = this._getNumberOfMonths(inst),
                showCurrentAtPos = this._get(inst, 'showCurrentAtPos'),
                stepMonths = this._get(inst, 'stepMonths'),
                isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
                currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
                    new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
                minDate = this._getMinMaxDate(inst, 'min'),
                maxDate = this._getMinMaxDate(inst, 'max'),
                drawMonth = inst.drawMonth - showCurrentAtPos,
                drawYear = inst.drawYear;

            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--;
            }
            if (maxDate) {
                maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
                    maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--;
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;

            prevText = this._get(inst, 'prevText');
            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
                this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
                this._getFormatConfig(inst)));

            prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
                '<a class="gtc-ui-datepicker-prev gtc-ui-corner-all" data-handler="prev" data-event="click"' +
                ' title="' + prevText + '"><span class="gtc-ui-icon gtc-ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' :
                (hideIfNoPrevNext ? '' : '<a class="gtc-ui-datepicker-prev gtc-ui-corner-all gtc-ui-state-disabled" title="'+ prevText + '"><span class="gtc-ui-icon gtc-ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));

            nextText = this._get(inst, 'nextText');
            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
                this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
                this._getFormatConfig(inst)));

            next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
                '<a class="gtc-ui-datepicker-next gtc-ui-corner-all" data-handler="next" data-event="click"' +
                ' title="' + nextText + '"><span class="gtc-ui-icon gtc-ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' :
                (hideIfNoPrevNext ? '' : '<a class="gtc-ui-datepicker-next gtc-ui-corner-all gtc-ui-state-disabled" title="'+ nextText + '"><span class="gtc-ui-icon gtc-ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));

            currentText = this._get(inst, 'currentText');
            gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);
            currentText = (!navigationAsDateFormat ? currentText :
                this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

            controls = (!inst.inline ? '<button type="button" class="gtc-ui-datepicker-close gtc-ui-state-default gtc-ui-priority-primary gtc-ui-corner-all" data-handler="hide" data-event="click">' +
                this._get(inst, 'closeText') + '</button>' : '');

            buttonPanel = (showButtonPanel) ? '<div class="gtc-ui-datepicker-buttonpane gtc-ui-widget-content">' + (isRTL ? controls : '') +
                (this._isInRange(inst, gotoDate) ? '<button type="button" class="gtc-ui-datepicker-current gtc-ui-state-default gtc-ui-priority-secondary gtc-ui-corner-all" data-handler="today" data-event="click"' +
                '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';

            firstDay = parseInt(this._get(inst, 'firstDay'),10);
            firstDay = (isNaN(firstDay) ? 0 : firstDay);

            showWeek = this._get(inst, 'showWeek');
            dayNames = this._get(inst, 'dayNames');
            dayNamesMin = this._get(inst, 'dayNamesMin');
            monthNames = this._get(inst, 'monthNames');
            monthNamesShort = this._get(inst, 'monthNamesShort');
            beforeShowDay = this._get(inst, 'beforeShowDay');
            showOtherMonths = this._get(inst, 'showOtherMonths');
            selectOtherMonths = this._get(inst, 'selectOtherMonths');
            defaultDate = this._getDefaultDate(inst);
            html = '';
            dow;
            for (row = 0; row < numMonths[0]; row++) {
                group = '';
                this.maxRows = 4;
                for (col = 0; col < numMonths[1]; col++) {
                    selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    cornerClass = ' gtc-ui-corner-all';
                    calender = '';
                    if (isMultiMonth) {
                        calender += '<div class="gtc-ui-datepicker-group';
                        if (numMonths[1] > 1) {
                            switch (col) {
                                case 0: calender += ' gtc-ui-datepicker-group-first';
                                    cornerClass = ' gtc-ui-corner-' + (isRTL ? 'right' : 'left'); break;
                                case numMonths[1]-1: calender += ' gtc-ui-datepicker-group-last';
                                    cornerClass = ' gtc-ui-corner-' + (isRTL ? 'left' : 'right'); break;
                                default: calender += ' gtc-ui-datepicker-group-middle'; cornerClass = ''; break;
                            }
                        }
                        calender += '">';
                    }
                    calender += '<div class="gtc-ui-datepicker-header gtc-ui-widget-header gtc-ui-helper-clearfix' + cornerClass + '">' +
                        (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : '') +
                        (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : '') +
                        this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
                        row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
                        '</div><table class="gtc-ui-datepicker-calendar"><thead>' +
                        '<tr>';
                    thead = (showWeek ? '<th class="gtc-ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');
                    for (dow = 0; dow < 7; dow++) { // days of the week
                        day = (dow + firstDay) % 7;
                        thead += '<th scope="col"' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="gtc-ui-datepicker-week-end"' : '') + '>' +
                            '<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';
                    }
                    calender += thead + '</tr></thead><tbody>';
                    daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                    }
                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
                    numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
                    this.maxRows = numRows;
                    printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
                        calender += '<tr>';
                        tbody = (!showWeek ? '' : '<td class="gtc-ui-datepicker-week-col">' +
                            this._get(inst, 'calculateWeek')(printDate) + '</td>');
                        for (dow = 0; dow < 7; dow++) { // create date picker days
                            daySettings = (beforeShowDay ?
                                beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
                            otherMonth = (printDate.getMonth() !== drawMonth);
                            unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
                                (minDate && printDate < minDate) || (maxDate && printDate > maxDate);
                            tbody += '<td class="' +
                                ((dow + firstDay + 6) % 7 >= 5 ? ' gtc-ui-datepicker-week-end' : '') + // highlight weekends
                                (otherMonth ? ' gtc-ui-datepicker-other-month' : '') + // highlight days from other months
                                ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
                                (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
                                // or defaultDate is current printedDate and defaultDate is selectedDate
                                ' ' + this._dayOverClass : '') + // highlight selected day
                                (unselectable ? ' ' + this._unselectableClass + ' gtc-ui-state-disabled': '') +  // highlight unselectable days
                                (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates
                                (printDate.getTime() === currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day
                                (printDate.getTime() === today.getTime() ? ' gtc-ui-datepicker-today' : '')) + '"' + // highlight today (if different)
                                ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2].replace(/'/g, '&#39;') + '"' : '') + // cell title
                                (unselectable ? '' : ' data-handler="selectDay" data-event="click" data-month="' + printDate.getMonth() + '" data-year="' + printDate.getFullYear() + '"') + '>' + // actions
                                (otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months
                                (unselectable ? '<span class="gtc-ui-state-default">' + printDate.getDate() + '</span>' : '<a class="gtc-ui-state-default' +
                                (printDate.getTime() === today.getTime() ? ' gtc-ui-state-highlight' : '') +
                                (printDate.getTime() === currentDate.getTime() ? ' gtc-ui-state-active' : '') + // highlight selected day
                                (otherMonth ? ' gtc-ui-priority-secondary' : '') + // distinguish dates from other months
                                '" href="#">' + printDate.getDate() + '</a>')) + '</td>'; // display selectable date
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate);
                        }
                        calender += tbody + '</tr>';
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++;
                    }
                    calender += '</tbody></table>' + (isMultiMonth ? '</div>' +
                                ((numMonths[0] > 0 && col === numMonths[1]-1) ? '<div class="gtc-ui-datepicker-row-break"></div>' : '') : '');
                    group += calender;
                }
                html += group;
            }
            html += buttonPanel;
            inst._keyEvent = false;
            return html;

        },

        // Generate the month and year header.
        _generateMonthYearHeader: function (inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {

            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
                changeMonth = this._get(inst, 'changeMonth'),
                changeYear = this._get(inst, 'changeYear'),
                showMonthAfterYear = this._get(inst, 'showMonthAfterYear'),
                html = '<div class="gtc-ui-datepicker-title">',
                monthHtml = '';

            // month selection
            if (secondary || !changeMonth) {
                monthHtml += '<span class="gtc-ui-datepicker-month">' + monthNames[drawMonth] + '</span>';
            } else {
                inMinYear = (minDate && minDate.getFullYear() === drawYear);
                inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
                monthHtml += '<select class="gtc-ui-datepicker-month" data-handler="selectMonth" data-event="change">';
                for ( month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                        monthHtml += '<option value="' + month + '"' +
                            (month === drawMonth ? ' selected="selected"' : '') +
                            '>' + monthNamesShort[month] + '</option>';
                    }
                }
                monthHtml += '</select>';
            }

            if (!showMonthAfterYear) {
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
            }

            // year selection
            if ( !inst.yearshtml ) {
                inst.yearshtml = '';
                if (secondary || !changeYear) {
                    html += '<span class="gtc-ui-datepicker-year">' + drawYear + '</span>';
                } else {
                    // determine range of years to display
                    years = this._get(inst, 'yearRange').split(':');
                    thisYear = new Date().getFullYear();
                    determineYear = function(value) {
                        var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
                            (value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
                            parseInt(value, 10)));
                        return (isNaN(year) ? thisYear : year);
                    };
                    year = determineYear(years[0]);
                    endYear = Math.max(year, determineYear(years[1] || ''));
                    year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
                    endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
                    inst.yearshtml += '<select class="gtc-ui-datepicker-year" data-handler="selectYear" data-event="change">';
                    for (; year <= endYear; year++) {
                        inst.yearshtml += '<option value="' + year + '"' +
                            (year === drawYear ? ' selected="selected"' : '') +
                            '>' + year + '</option>';
                    }
                    inst.yearshtml += '</select>';

                    html += inst.yearshtml;
                    inst.yearshtml = null;
                }
            }

            html += this._get(inst, 'yearSuffix');
            if (showMonthAfterYear) {
                html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
            }
            html += '</div>'; // Close datepicker_header
            return html;

        },

        // Adjust one of the date sub-fields.
        _adjustInstDate: function (inst, offset, period) {

            var year = inst.drawYear + (period === 'Y' ? offset : 0),
                month = inst.drawMonth + (period === 'M' ? offset : 0),
                day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === 'D' ? offset : 0),
                date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period === 'M' || period === 'Y') {
                this._notifyChange(inst);
            }

        },

        // Ensure a date is within any min/max bounds.
        _restrictMinMax: function (inst, date) {

            var minDate = this._getMinMaxDate(inst, 'min'),
                maxDate = this._getMinMaxDate(inst, 'max'),
                newDate = (minDate && date < minDate ? minDate : date);
            return (maxDate && newDate > maxDate ? maxDate : newDate);

        },

        // Notify change of month/year.
        _notifyChange: function (inst) {

            var onChange = this._get(inst, 'onChangeMonthYear');
            if (onChange) {
                onChange.apply((inst.input ? inst.input : null), [inst.selectedYear, inst.selectedMonth + 1, inst]);
            }

        },

        // Determine the number of months to show.
        _getNumberOfMonths: function (inst) {

            var numMonths = this._get(inst, 'numberOfMonths');
            return (numMonths == null ? [1, 1] : (Common.IsNumber(numMonths) ? [1, numMonths] : numMonths));

        },

        // Determine the current maximum date - ensure no time components are set.
        _getMinMaxDate: function (inst, minMax) {

            return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);

        },

        // Find the number of days in a given month.
        _getDaysInMonth: function (year, month) {

            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();

        },

        // Find the day of the week of the first of a month.
        _getFirstDayOfMonth: function (year, month) {

            return new Date(year, month, 1).getDay();

        },

        // Determines if we should allow a "next/prev" month display change.
        _canAdjustMonth: function (inst, offset, curYear, curMonth) {

            var numMonths = this._getNumberOfMonths(inst),
                date = this._daylightSavingAdjust(new Date(curYear,
                curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

            if (offset < 0) {
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
            }
            return this._isInRange(inst, date);

        },

        // Is the given date in the accepted range?
        _isInRange: function (inst, date) {

            var yearSplit, currentYear,
                minDate = this._getMinMaxDate(inst, 'min'),
                maxDate = this._getMinMaxDate(inst, 'max'),
                minYear = null,
                maxYear = null,
                years = this._get(inst, 'yearRange');
                if (years){
                    yearSplit = years.split(':');
                    currentYear = new Date().getFullYear();
                    minYear = parseInt(yearSplit[0], 10);
                    maxYear = parseInt(yearSplit[1], 10);
                    if (yearSplit[0].match(/[+\-].*/)) {
                        minYear += currentYear;
                    }
                    if (yearSplit[1].match(/[+\-].*/)) {
                        maxYear += currentYear;
                    }
                }

            return ((!minDate || date.getTime() >= minDate.getTime()) &&
                (!maxDate || date.getTime() <= maxDate.getTime()) &&
                (!minYear || date.getFullYear() >= minYear) &&
                (!maxYear || date.getFullYear() <= maxYear));

        },

        // Provide the configuration settings for formatting/parsing.
        _getFormatConfig: function (inst) {

            var shortYearCutoff = this._get(inst, 'shortYearCutoff');
            shortYearCutoff = (!Common.IsString(shortYearCutoff) ? shortYearCutoff :
                new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
            return {shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, 'dayNamesShort'), dayNames: this._get(inst, 'dayNames'),
                monthNamesShort: this._get(inst, 'monthNamesShort'), monthNames: this._get(inst, 'monthNames')};

        },

        // Format the given date for display.
        _formatDate: function (inst, day, month, year) {

            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear;
            }
            var date = (day ? (Common.IsObject(day) ? day :
                this._daylightSavingAdjust(new Date(year, month, day))) :
                this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
            return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));

        }
    });

    // Bind hover events for datepicker elements.
    // Done via delegate so the binding only occurs once in the lifetime of the parent div.
    // Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
    function datepicker_bindHover (dpDiv) {

        var selector = 'button, .gtc-ui-datepicker-prev, .gtc-ui-datepicker-next, .gtc-ui-datepicker-calendar td a';
        Events.On(dpDiv, selector, 'mouseout',
            function () {
                Common.RemoveClass(this, 'gtc-ui-state-hover');
                if (this.className.indexOf('gtc-ui-datepicker-prev') !== -1) {
                    Common.RemoveClass('gtc-ui-datepicker-prev-hover');
                }
                if (this.className.indexOf('gtc-ui-datepicker-next') !== -1) {
                    Common.RemoveClass(this, 'gtc-ui-datepicker-next-hover');
                }
            }
        );
        Events.On(dpDiv, selector, 'mouseover', datepicker_handleMouseover);
        return dpDiv;

    }

    function datepicker_handleMouseover () {

        if (!Widgets.datepicker._isDisabledDatepicker(datepicker_instActive.inline? datepicker_instActive.dpDiv.parentNode : datepicker_instActive.input)) {
            var table = Common.Closest('.gtc-ui-datepicker-calendar', this);
            var allAnchors = Common.QueryAll('a', table);
            Common.RemoveClassFromElements(allAnchors, 'gtc-ui-state-hover');
            Common.AddClass(this, 'gtc-ui-state-hover');
            if (this.className.indexOf('gtc-ui-datepicker-prev') !== -1) {
                Common.AddClass(this, 'gtc-ui-datepicker-prev-hover');
            }
            if (this.className.indexOf('gtc-ui-datepicker-next') !== -1) {
                Common.AddClass(this, 'gtc-ui-datepicker-next-hover');
            }
        }

    }

    function datepicker_extendRemove (target, props) {

        Common.MergeObjects(target, props);
        for (var name in props) {
            if (props[name] == null) {
                target[name] = props[name];
            }
        }
        return target;

    };

    // Invoke the datepicker functionality.
    // @param  options  string - a command, optionally followed by additional parameters or
    //                  Object - settings for attaching new datepicker functionality
    // @return  element
    Widgets.monthlydatepicker = function (elements, options) {

        // Verify an empty collection wasn't passed - Fixes #6976
        if (Common.IsNotDefined(elements)) {
            return elements;
        }

        // Initialise the date picker.
        if (!Widgets.datepicker.initialized) {
            Events.On(document, 'mousedown.gtc-ui-datepicker-div', Widgets.datepicker._checkExternalClick);
            Widgets.datepicker.initialized = true;
        }

        // Append datepicker main container to body if not exist.
        if (!Common.Get(Widgets.datepicker._mainDivId)) {
            document.body.appendChild(Widgets.datepicker.dpDiv);
        }

        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (Common.IsString(options) && (options === 'isDisabled' || options === 'getDate' || options === 'widget')) {
            return Widgets.datepicker['_' + options + 'Datepicker'].apply(Widgets.datepicker, [elements].concat(otherArgs));
        }
        if (options === 'option' && arguments.length === 2 && Common.IsString(arguments[1])) {
            return Widgets.datepicker['_' + options + 'Datepicker'].apply(Widgets.datepicker, [elements].concat(otherArgs));
        }

        if (Common.IsString(options)) {
            return Widgets.datepicker['_' + options + 'Datepicker'].apply(Widgets.datepicker, [elements].concat(otherArgs));
        }
        else {
            return Widgets.datepicker._attachDatepicker(elements, options);
        }

    };

    // Singleton instance
    Widgets.datepicker = new Datepicker();
    Widgets.datepicker.initialized = false;
    Widgets.datepicker.uuid = new Date().getTime();
    Widgets.datepicker.version = "1.11.4";

    var datepicker = Widgets.datepicker;

} (window, document, Common, Cache, Events, Velocity));
// Calendar Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var CalendarGlobals = {
        CalendarCreated: false,
        Days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        Months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        MonthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        MonthNameToNum: { 'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12 },
        DaysInMonth: { 'Jan': 31, 'Feb': 28, 'FebLeap': 29, 'Mar': 31, 'MarLeap': 31, 'Apr': 30, 'May': 31, 'Jun': 30, 'Jul': 31, 'Aug': 31, 'Sep': 30, 'Oct': 31, 'Nov': 30, 'Dec': 31 },
        InnerHtmlForDays: {
            'Jan': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">30</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay31" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay31-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay31-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Feb': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">30</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay28-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay28-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'FebLeap': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">30</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay29-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay29-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'MarLeap': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">28</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay31" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay31-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay31-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Mar': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">27</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay31" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay31-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay31-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Apr': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">30</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay30-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay30-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'May': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">29</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay31" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay31-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay31-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Jun': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">30</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay30-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay30-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Jul': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">29</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay31" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay31-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay31-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Aug': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">30</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay31" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay31-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay31-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Sep': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">30</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay30-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay30-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Oct': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">29</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay31" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay31-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay31-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Nov': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">30</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay30-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay30-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>',
            'Dec': '<ul><li id="LiDay1-00" class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px">29</li><li id="LiDay1-0" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay2" class="gtc-classLiDatePickerNotSelected">2</li><li id="LiDay3" class="gtc-classLiDatePickerNotSelected">3</li><li id="LiDay4" class="gtc-classLiDatePickerNotSelected">4</li><li id="LiDay5" class="gtc-classLiDatePickerNotSelected">5</li><li id="LiDay6" class="gtc-classLiDatePickerNotSelected">6</li><li id="LiDay7" class="gtc-classLiDatePickerNotSelected">7</li><li id="LiDay8" class="gtc-classLiDatePickerNotSelected">8</li><li id="LiDay9" class="gtc-classLiDatePickerNotSelected">9</li><li id="LiDay10" class="gtc-classLiDatePickerNotSelected">10</li><li id="LiDay11" class="gtc-classLiDatePickerNotSelected">11</li><li id="LiDay12" class="gtc-classLiDatePickerNotSelected">12</li><li id="LiDay13" class="gtc-classLiDatePickerNotSelected">13</li><li id="LiDay14" class="gtc-classLiDatePickerNotSelected">14</li><li id="LiDay15" class="gtc-classLiDatePickerNotSelected">15</li><li id="LiDay16" class="gtc-classLiDatePickerNotSelected">16</li><li id="LiDay17" class="gtc-classLiDatePickerNotSelected">17</li><li id="LiDay18" class="gtc-classLiDatePickerNotSelected">18</li><li id="LiDay19" class="gtc-classLiDatePickerNotSelected">19</li><li id="LiDay20" class="gtc-classLiDatePickerNotSelected">20</li><li id="LiDay21" class="gtc-classLiDatePickerNotSelected">21</li><li id="LiDay22" class="gtc-classLiDatePickerNotSelected">22</li><li id="LiDay23" class="gtc-classLiDatePickerNotSelected">23</li><li id="LiDay24" class="gtc-classLiDatePickerNotSelected">24</li><li id="LiDay25" class="gtc-classLiDatePickerNotSelected">25</li><li id="LiDay26" class="gtc-classLiDatePickerNotSelected">26</li><li id="LiDay27" class="gtc-classLiDatePickerNotSelected">27</li><li id="LiDay28" class="gtc-classLiDatePickerNotSelected">28</li><li id="LiDay29" class="gtc-classLiDatePickerNotSelected">29</li><li id="LiDay30" class="gtc-classLiDatePickerNotSelected">30</li><li id="LiDay31" class="gtc-classLiDatePickerNotSelected">31</li><li id="LiDay31-1" class="gtc-classLiDatePickerNotSelected">1</li><li id="LiDay31-2" class="gtc-classLiDatePickerNotSelected">2</li></ul>'
        },
        StartOfTime: 1800,
        EndOfTime: 2400
    };

    var CalendarWidget = {

        // Options
        options: {
            ClassCalendarActiveSelection: 'gtc-classControlCalendarActiveSelection',
            ClassCalendarLocked: 'gtc-input-locked',
            ParentElement: 'PageContent',
            UpdateValueCallback: ''
        },

        // Public Methods
        IsDisabled: function () {

            return GTC.IsControlDisabled(this.element);

        },

        DisableControl: function () {

            this._disableControl();

        },

        EnableControl: function () {

            this._enableControl();

        },

        // Private Methods

        // Sets the current date on load
        _initializeCurrentDateOnLoad: function (elementValue) {

            var dateObj;
            if (Common.IsNotDefined(elementValue) || Common.IsEmptyString(elementValue)) {
                dateObj = new Date();
            }
            else {
                dateObj = new Date(elementValue);
            }
            return dateObj;

        },

        // Sets the position and highlighting of year and month on load
        _initializeMonthYearOnLoad: function (date) {

            this._updateMarginTop('LiMonth000', this._findCorrectPosition('month', date) + 'px');
            Common.RemoveClass(Common.Query('.gtc-classLiDatePickerSelected', Common.Get('DivDatePickerMonth')), 'gtc-classLiDatePickerSelected');
            this._handleClassUpdate('LiMonth' + date.getMonth(), 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');
            this._updateMarginTop('LiYear00', this._findCorrectPosition('year', date) + 'px');
            Common.RemoveClass(Common.Query('.gtc-classLiDatePickerSelected', Common.Get('DivDatePickerYear')), 'gtc-classLiDatePickerSelected');
            this._handleClassUpdate('LiYear' + date.getFullYear(), 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');

        },

        // Loads the list of days for passed in month and sets position of currently selected day
        _setDaysForMonth: function (iMonth, date, CurrentDateObject) {

            var daysHtml = CalendarGlobals.InnerHtmlForDays[iMonth];
            if (CurrentDateObject) {
                CurrentDateObject.CurrentMonthLastDay = CalendarGlobals.DaysInMonth[iMonth];
            }
            if (this._isLeapYear(date.getFullYear()) && (iMonth == 'Feb' || iMonth == 'Mar')) {
                daysHtml = CalendarGlobals.InnerHtmlForDays[iMonth + 'Leap'];
                if (CurrentDateObject && iMonth == 'Feb') {
                    CurrentDateObject.CurrentMonthLastDay = CalendarGlobals.DaysInMonth[iMonth + 'Leap'];
                }
            }
            Common.Get('DivDatePickerDay').innerHTML = daysHtml;
            this._updateMarginTop('LiDay1-00', this._findCorrectPosition('day', date) + 'px');
            this._handleClassUpdate('LiDay' + date.getDate(), 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');

        },

        // sets display of date in header
        _setDateHeader: function (date) {

            Common.Get('H3SelectedDateDisplay').innerHTML = CalendarGlobals.Days[date.getDay()] + ', ' + CalendarGlobals.Months[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();

        },

        // returns true if passed in year is leap year
        _isLeapYear: function (iYear) {

            return new Date(iYear, 1, 29).getDate() == 29;

        },

        _preparePositionIndexingForAnimation: function (delta, PositionIndexingObject, ScrollingElement, CurrentDateObject) {

            if (delta > 0) {
                PositionIndexingObject.CurrentPosition = parseInt(PositionIndexingObject.CurrentPosition, 10) + 32;
                if (ScrollingElement.Changing == 'Day') {
                    PositionIndexingObject.CurrentClass = CurrentDateObject.CurrentDay;
                    PositionIndexingObject.NextClass = CurrentDateObject.CurrentDay - 1;
                    CurrentDateObject.CurrentDay = PositionIndexingObject.NextClass;
                }
                else if (ScrollingElement.Changing == 'Month') {
                    PositionIndexingObject.CurrentClass = CurrentDateObject.CurrentMonth;
                    PositionIndexingObject.NextClass = CurrentDateObject.CurrentMonth - 1;
                    CurrentDateObject.CurrentMonth = PositionIndexingObject.NextClass;
                }
                else if (ScrollingElement.Changing == 'Year') {
                    PositionIndexingObject.CurrentClass = CurrentDateObject.CurrentYear;
                    PositionIndexingObject.NextClass = CurrentDateObject.CurrentYear - 1;
                    CurrentDateObject.CurrentYear = PositionIndexingObject.NextClass;
                }
            }
            else {
                PositionIndexingObject.CurrentPosition = parseInt(PositionIndexingObject.CurrentPosition, 10) - 32;
                if (ScrollingElement.Changing == 'Day') {
                    PositionIndexingObject.CurrentClass = CurrentDateObject.CurrentDay;
                    PositionIndexingObject.NextClass = CurrentDateObject.CurrentDay + 1;
                    CurrentDateObject.CurrentDay = PositionIndexingObject.NextClass;
                }
                else if (ScrollingElement.Changing == 'Month') {
                    PositionIndexingObject.CurrentClass = CurrentDateObject.CurrentMonth;
                    PositionIndexingObject.NextClass = CurrentDateObject.CurrentMonth + 1;
                    CurrentDateObject.CurrentMonth = PositionIndexingObject.NextClass;
                }
                else if (ScrollingElement.Changing == 'Year') {
                    PositionIndexingObject.CurrentClass = CurrentDateObject.CurrentYear;
                    PositionIndexingObject.NextClass = CurrentDateObject.CurrentYear + 1;
                    CurrentDateObject.CurrentYear = PositionIndexingObject.NextClass;
                }
            }

        },

        // Moves month/day/year on scroll and handles other date logic
        _animateCalendarOnScroll: function (event, delta) {

            if (Common.IsFunction(event.stopPropagation)) {
                event.stopPropagation();
            }
            if (Common.IsFunction(event.preventDefault)) {
                event.preventDefault();
            }
            var thisWidget = event.data.ThisWidget;
            var CurrentDateObject = event.data.CurrentDateObject;
            var ScrollingElement = Cache.Get(event.data.ScrollingElement, 'ScrollingElement');
            var PositionIndexingObject = {};
            PositionIndexingObject.CurrentClass = 0;
            PositionIndexingObject.NextClass = 0;
            PositionIndexingObject.CurrentPosition = Common.GetStyle(Common.Get('Li' + ScrollingElement.CurrentListener), 'margin-top');
            thisWidget._preparePositionIndexingForAnimation(delta, PositionIndexingObject, ScrollingElement, CurrentDateObject);
            if (ScrollingElement.Changing == 'Month' && CurrentDateObject.CurrentMonth == 12) {
                thisWidget._changeMonthEndOfYear(ScrollingElement, PositionIndexingObject, CurrentDateObject);
            }
            else if (ScrollingElement.Changing == 'Month' && CurrentDateObject.CurrentMonth == -1) {
                thisWidget._changeMonthStartOfYear(ScrollingElement, PositionIndexingObject, CurrentDateObject);
            }
            else if (ScrollingElement.Changing == 'Month' && CurrentDateObject.CurrentMonth != 12 && CurrentDateObject.CurrentMonth != -1) {
                thisWidget._changeMonth(ScrollingElement, PositionIndexingObject, CurrentDateObject);
            }
            else if (ScrollingElement.Changing == 'Day' && CurrentDateObject.CurrentDay == CurrentDateObject.CurrentMonthLastDay + 1) {
                thisWidget._changeDayEndOfMonth(ScrollingElement, PositionIndexingObject, CurrentDateObject);
            }
            else if (ScrollingElement.Changing == 'Day' && CurrentDateObject.CurrentDay == 0) {
                thisWidget._changeDayStartOfMonth(ScrollingElement, PositionIndexingObject, CurrentDateObject);
            }
            else if (ScrollingElement.Changing == 'Day' && CurrentDateObject.CurrentDay != CurrentDateObject.CurrentMonthLastDay + 1 && CurrentDateObject.CurrentDay != 0) {
                thisWidget._changeDay(ScrollingElement, PositionIndexingObject);
            }
            else if (ScrollingElement.Changing == 'Year' && CurrentDateObject.CurrentYear == CalendarGlobals.EndOfTime + 1) {
                thisWidget._changeYearEndOfTime(ScrollingElement, PositionIndexingObject, CurrentDateObject);
            }
            else if (ScrollingElement.Changing == 'Year' && CurrentDateObject.CurrentYear == CalendarGlobals.StartOfTime - 1) {
                thisWidget._changeYearStartOfTime(ScrollingElement, PositionIndexingObject, CurrentDateObject);
            }
            else if (ScrollingElement.Changing == 'Year' && CurrentDateObject.CurrentYear != CalendarGlobals.EndOfTime + 1 && CurrentDateObject.CurrentYear != CalendarGlobals.StartOfTime - 1) {
                thisWidget._changeYear(ScrollingElement, PositionIndexingObject);
            }
            thisWidget._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.CurrentClass, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            thisWidget._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.NextClass, 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');
            thisWidget._setDateHeader(thisWidget._buildDateObjFromCurrentDateObject(CurrentDateObject));

        },

        _changeMonthEndOfYear: function (ScrollingElement, PositionIndexingObject, CurrentDateObject) {

            var leap = this._appendLeapOnLeapYear(CurrentDateObject);
            if (CurrentDateObject.CurrentDay > CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap]) {
                CurrentDateObject.CurrentDay = CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap];
            }
            this._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.CurrentClass, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            this._updateMarginTop('Li' + ScrollingElement.CurrentListener, '-33px');
            PositionIndexingObject.CurrentClass = 0;
            PositionIndexingObject.NextClass = 0;
            CurrentDateObject.CurrentMonth = 0;
            this._handleClassUpdate('LiYear' + CurrentDateObject.CurrentYear, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            this._handleStartEndOfTime(CurrentDateObject, 'up');
            this._handleClassUpdate('LiYear' + CurrentDateObject.CurrentYear, 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');
            this._updateMarginTop('LiYear00', this._findCorrectPosition('year', this._buildDateObjFromCurrentDateObject(CurrentDateObject)) + 'px');

        },

        _changeMonthStartOfYear: function (ScrollingElement, PositionIndexingObject, CurrentDateObject) {

            var leap = this._appendLeapOnLeapYear(CurrentDateObject);
            if (CurrentDateObject.CurrentDay > CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap]) {
                CurrentDateObject.CurrentDay = CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap];
            }
            this._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.CurrentClass, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            this._updateMarginTop('Li' + ScrollingElement.CurrentListener, '-385px');
            PositionIndexingObject.CurrentClass = 11;
            PositionIndexingObject.NextClass = 11;
            CurrentDateObject.CurrentMonth = 11;
            this._handleClassUpdate('LiYear' + CurrentDateObject.CurrentYear, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            this._handleStartEndOfTime(CurrentDateObject, 'down');
            this._handleClassUpdate('LiYear' + CurrentDateObject.CurrentYear, 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');
            this._updateMarginTop('LiYear00', this._findCorrectPosition('year', this._buildDateObjFromCurrentDateObject(CurrentDateObject)) + 'px');

        },

        _changeMonth: function (ScrollingElement, PositionIndexingObject, CurrentDateObject) {

            var leap = this._appendLeapOnLeapYear(CurrentDateObject);
            if (CurrentDateObject.CurrentDay > CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap]) {
                CurrentDateObject.CurrentDay = CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap];
            }
            this._setDaysForMonth(CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth], this._buildDateObjFromCurrentDateObject(CurrentDateObject), CurrentDateObject);
            this._updateMarginTop('Li' + ScrollingElement.CurrentListener, PositionIndexingObject.CurrentPosition + 'px');

        },

        _changeDayEndOfMonth: function (ScrollingElement, PositionIndexingObject, CurrentDateObject) {

            this._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.CurrentClass, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            this._updateMarginTop('Li' + ScrollingElement.CurrentListener, '-33px');
            PositionIndexingObject.CurrentClass = 1;
            PositionIndexingObject.NextClass = 1;
            CurrentDateObject.CurrentDay = 1;
            this._handleClassUpdate('LiMonth' + CurrentDateObject.CurrentMonth, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            CurrentDateObject.CurrentMonth++;
            if (CurrentDateObject.CurrentMonth == 12) {
                this._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.CurrentClass, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
                this._updateMarginTop('Li' + ScrollingElement.CurrentListener, '-33px');
                CurrentDateObject.CurrentMonth = 0;
                this._handleClassUpdate('LiYear' + CurrentDateObject.CurrentYear, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
                this._handleStartEndOfTime(CurrentDateObject, 'up');
                this._handleClassUpdate('LiYear' + CurrentDateObject.CurrentYear, 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');
                this._updateMarginTop('LiYear00', this._findCorrectPosition('year', this._buildDateObjFromCurrentDateObject(CurrentDateObject)) + 'px');
            }
            this._handleClassUpdate('LiMonth' + CurrentDateObject.CurrentMonth, 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');
            this._updateMarginTop('LiMonth000', this._findCorrectPosition('month', this._buildDateObjFromCurrentDateObject(CurrentDateObject)) + 'px');
            this._setDaysForMonth(CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth], this._buildDateObjFromCurrentDateObject(CurrentDateObject), CurrentDateObject);

        },

        _changeDayStartOfMonth: function (ScrollingElement, PositionIndexingObject, CurrentDateObject) {

            this._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.CurrentClass, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            this._handleClassUpdate('LiMonth' + CurrentDateObject.CurrentMonth, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            CurrentDateObject.CurrentMonth--;
            var startingMonthValue = CurrentDateObject.CurrentMonth;
            if (startingMonthValue == -1) {
                this._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.CurrentClass, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
                this._updateMarginTop('Li' + ScrollingElement.CurrentListener, '-385px');
                PositionIndexingObject.CurrentClass = 11;
                PositionIndexingObject.NextClass = 11;
                CurrentDateObject.CurrentMonth = 11;
                this._handleClassUpdate('LiYear' + CurrentDateObject.CurrentYear, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
                this._handleStartEndOfTime(CurrentDateObject, 'down');
                this._handleClassUpdate('LiYear' + CurrentDateObject.CurrentYear, 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');
            }
            var leap = this._appendLeapOnLeapYear(CurrentDateObject);
            this._handleClassUpdate('LiMonth' + CurrentDateObject.CurrentMonth, 'gtc-classLiDatePickerNotSelected', 'gtc-classLiDatePickerSelected');
            PositionIndexingObject.CurrentClass = CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap];
            PositionIndexingObject.NextClass = CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap];
            CurrentDateObject.CurrentDay = CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap];
            this._updateMarginTop('LiMonth000', this._findCorrectPosition('month', this._buildDateObjFromCurrentDateObject(CurrentDateObject)) + 'px');
            this._setDaysForMonth(CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] + leap, this._buildDateObjFromCurrentDateObject(CurrentDateObject), CurrentDateObject);
            if (startingMonthValue == -1) {
                this._updateMarginTop('LiYear00', this._findCorrectPosition('year', this._buildDateObjFromCurrentDateObject(CurrentDateObject)) + 'px');
            }
            this._updateMarginTop('Li' + ScrollingElement.CurrentListener, this._findCorrectPosition('day', this._buildDateObjFromCurrentDateObject(CurrentDateObject)) + 'px');

        },

        _changeDay: function (ScrollingElement, PositionIndexingObject) {

            this._updateMarginTop('Li' + ScrollingElement.CurrentListener, PositionIndexingObject.CurrentPosition + 'px');

        },

        _changeYearEndOfTime: function (ScrollingElement, PositionIndexingObject, CurrentDateObject) {

            this._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.CurrentClass, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            this._updateMarginTop('Li' + ScrollingElement.CurrentListener, '-33px');
            PositionIndexingObject.CurrentClass = CalendarGlobals.StartOfTime;
            PositionIndexingObject.NextClass = CalendarGlobals.StartOfTime;
            CurrentDateObject.CurrentYear = CalendarGlobals.StartOfTime;

        },

        _changeYearStartOfTime: function (ScrollingElement, PositionIndexingObject, CurrentDateObject) {

            this._handleClassUpdate('Li' + ScrollingElement.Changing + PositionIndexingObject.CurrentClass, 'gtc-classLiDatePickerSelected', 'gtc-classLiDatePickerNotSelected');
            PositionIndexingObject.CurrentClass = CalendarGlobals.EndOfTime;
            PositionIndexingObject.NextClass = CalendarGlobals.EndOfTime;
            CurrentDateObject.CurrentYear = CalendarGlobals.EndOfTime;
            this._updateMarginTop('Li' + ScrollingElement.CurrentListener, this._findCorrectPosition('year', this._buildDateObjFromCurrentDateObject(CurrentDateObject)) + 'px');

        },

        _changeYear: function (ScrollingElement, PositionIndexingObject) {

            this._updateMarginTop('Li' + ScrollingElement.CurrentListener, PositionIndexingObject.CurrentPosition + 'px');

        },

        _handleClassUpdate: function (id, removeClass, addClass) {

            var element = Common.Get(id);
            Common.RemoveClass(element, removeClass);
            Common.AddClass(element, addClass);

        },

        _updateMarginTop: function (id, marginTop) {

            Common.Get(id).style.marginTop = marginTop;

        },

        _handleStartEndOfTime: function (CurrentDateObject, scrollDirection) {

            if (CurrentDateObject.CurrentYear == CalendarGlobals.StartOfTime && scrollDirection == 'down') {
                CurrentDateObject.CurrentYear = CalendarGlobals.EndOfTime;
            }
            else if (CurrentDateObject.CurrentYear == CalendarGlobals.EndOfTime && scrollDirection == 'up') {
                CurrentDateObject.CurrentYear = CalendarGlobals.StartOfTime;
            }
            else {
                if (scrollDirection == 'up') {
                    CurrentDateObject.CurrentYear++;
                }
                else if (scrollDirection == 'down') {
                    CurrentDateObject.CurrentYear--;
                }
            }

        },

        _appendLeapOnLeapYear: function (CurrentDateObject) {

            if (this._isLeapYear(CurrentDateObject.CurrentYear) && (CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] == 'Feb' || CalendarGlobals.MonthsShort[CurrentDateObject.CurrentMonth] == 'Mar')) {
                return 'Leap';
            }
            else {
                return '';
            }

        },

        // Finds the position of li in list
        _findCorrectPosition: function (which, date) {

            var startingPixelPosition = -1;
            if (which == 'day') {
                return startingPixelPosition - (date.getDate() * 32);
            }
            else if (which == 'month') {
                return startingPixelPosition - ((date.getMonth() + 1) * 32);
            }
            else if (which == 'year') {
                return startingPixelPosition - ((date.getFullYear() - CalendarGlobals.StartOfTime + 1) * 32);
            }
            return startingPixelPosition;

        },

        _buildDateObjFromSelectedValues: function () {

            var buildDate = '';
            var findDateVals = Common.QueryAll('.gtc-classLiDatePickerSelected', Common.Get('DivDatePicker'));
            var index = 0, length = findDateVals.length;
            for ( ; index < length; index++) {
                if (index == 0) {
                    buildDate += CalendarGlobals.MonthNameToNum[findDateVals[index].innerHTML];
                }
                else {
                    buildDate += findDateVals[index].innerHTML;
                }
                if (index != 2) {
                    buildDate += '/';
                }
            }
            var dateObj;
            if (Common.IsNotDefined(buildDate) || Common.IsEmptyString(buildDate)) {
                dateObj = new Date();
            }
            else {
                dateObj = new Date(buildDate);
            }
            return dateObj;

        },

        _buildDateObjFromCurrentDateObject: function (CurrentDateObject) {

            var buildDate = (CurrentDateObject.CurrentMonth + 1) + '/' + CurrentDateObject.CurrentDay + '/' + CurrentDateObject.CurrentYear;
            return new Date(buildDate);

        },

        _buildCurrentDateObjectForAnimate: function (dateObj) {

            var currentMonth = dateObj.getMonth();
            var currentDay = dateObj.getDate();
            var currentYear = dateObj.getFullYear();
            var currentMonthLastDay = CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[currentMonth]];
            if (this._isLeapYear(currentYear) && (CalendarGlobals.MonthsShort[currentMonth] == 'Feb' || CalendarGlobals.MonthsShort[currentMonth] == 'Mar')) {
                if (CalendarGlobals.MonthsShort[currentMonth] == 'Feb') {
                    currentMonthLastDay = CalendarGlobals.DaysInMonth[CalendarGlobals.MonthsShort[currentMonth] + 'Leap'];
                }
            }
            var CurrentDateObject = {};
            CurrentDateObject.CurrentMonth = currentMonth;
            CurrentDateObject.CurrentDay = currentDay;
            CurrentDateObject.CurrentYear = currentYear;
            CurrentDateObject.CurrentMonthLastDay = currentMonthLastDay;
            return CurrentDateObject;

        },

        // Builds each date picker section for display
        _buildDatePicker: function () {

            var datePickerMarkup = '<div class="gtc-classDivDatePicker" id="DivDatePicker" style="display: none; position: absolute;"><span class="gtc-sr-only" data-translate="BeginningOfContent508">' + Common.TranslateKey('BeginningOfContent508') + '</span>';
            datePickerMarkup += '<div class="gtc-classDivDatePickerHeader"><h3 class="gtc-classH3DatePickerHeader" id="H3SelectedDateDisplay"></h3></div>';
            datePickerMarkup += '<div class="gtc-classDivDatePickerContent"><div class="gtc-classDivDatePickerScrollArea" id="DivDatePickerMonth"><ul>';
            datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" style="margin-top: 32px;" id="LiMonth000">' + CalendarGlobals.MonthsShort[10] + '</li>';
            datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" id="LiMonth00">' + CalendarGlobals.MonthsShort[11] + '</li>';
            var index = 0, length = CalendarGlobals.MonthsShort.length;
            for ( ; index < length; index++) {
                datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" id="LiMonth' + index + '">' + CalendarGlobals.MonthsShort[index] + '</li>';
            }
            datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" id="LiMonth12">' + CalendarGlobals.MonthsShort[0] + '</li>';
            datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" id="LiMonth13">' + CalendarGlobals.MonthsShort[1] + '</li></ul>';
            datePickerMarkup += '</div>';
            datePickerMarkup += '<div class="gtc-classDivDatePickerScrollArea" id="DivDatePickerDay"></div>';
            datePickerMarkup += '<div class="gtc-classDivDatePickerScrollArea" id="DivDatePickerYear"><ul>';
            datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" id="LiYear00" style="margin-top: 32px;">' + (CalendarGlobals.EndOfTime - 1) + '</li>';
            datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" id="LiYear0">' + CalendarGlobals.EndOfTime + '</li>';
            index = CalendarGlobals.StartOfTime;
            for ( ; index <= CalendarGlobals.EndOfTime; index++) {
                datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" id="LiYear' + index + '">' + index + '</li>';
            }
            datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" id="LiYearEnd0">' + CalendarGlobals.StartOfTime + '</li>';
            datePickerMarkup += '<li class="gtc-classLiDatePickerNotSelected" id="LiYearEnd00">' + (CalendarGlobals.StartOfTime + 1) + '</li></ul></div></div>';
            datePickerMarkup += '<div class="gtc-classDivDatePickerSelected" style="pointer-events: none;"></div><div class="gtc-classDivDatePickerControls">';
            datePickerMarkup += '<span class="gtc-classSpanDatePickerCloseButton" id="SpanCloseButton">Close</span>';
            datePickerMarkup += '<span class="gtc-classSpanDatePickerSetButton" id="SpanSetDateButton">Set Date</span></div><span class="gtc-sr-only" data-translate="EndOfContent508">' + Common.TranslateKey('EndOfContent508') + '</span></div>';
            Common.InsertHTMLString(document.body, Common.InsertType.Append, datePickerMarkup);

        },

        _insertOpenCalendarAnchor: function () {

            var tabIndex = Common.GetAttr(this.element, 'tabindex');
            var tabIndexAttribute = '';
            if (Common.IsDefined(tabIndex) && parseInt(tabIndex, 10) > 0) {
                tabIndexAttribute = ' tabindex="' + tabIndex + '"';
            }
            var anchorName = 'AnchorOpenCalendar-' + this.element.name;
            Common.InsertHTMLString(this.element, Common.InsertType.After, '<a' + tabIndexAttribute + ' class="gtc-input-system" id="' + anchorName + '" aria-haspopup="true"><i class="gtc-icon-styles fa fa-calendar"></i><span class="gtc-sr-only" data-translate="OpensSimulatedDialog508">' + Common.TranslateKey('OpensSimulatedDialog508') + '</span></a>');

            // 508 Compliance - Focus In/Focus Out
            var anchor = Common.Get(anchorName);
            Events.On(anchor, 'focusin.' + anchorName,
                function (event) {
                    Events.On(document, 'keyup.' + anchorName,
                        function (event) {
                            var pressedKeyCode = (event.keyCode ? event.keyCode : event.which);
                            if (pressedKeyCode == GTC.Keyboard.Enter) {
                                document.activeElement.blur();
                                var element = Common.Get(anchorName);
                                Events.Trigger(element, 'click');
                            }
                        }
                    );
                }
            );
            Events.On(anchor, 'focusout.' + anchorName,
                function (event) {
                    Events.Off(document, 'keyup.' + anchorName);
                }
            );

        },

        _bindCalendarCloseOnBodyClickEvent: function () {

            var thisWidget = this;
            Events.On(document.body, 'click.calendarCloseOnBodyClick.DivDatePicker',
                function (event) {
                    var eventTarget = event.target;
                    if (Common.IsNotDefined(Common.Closest('#DivDatePicker', eventTarget)) && Common.GetAttr(eventTarget, 'class') != 'gtc-classInputCalendar') {
                        Events.Off(document.body, 'click.calendarCloseOnBodyClick');
                        Velocity(Common.Get('DivDatePicker'), 'fadeOut', 400,
                            function () {
                                var properInstance = thisWidget._loadProperInstance();
                                Events.Trigger(properInstance.element, 'focus');
                                properInstance._adjustHeightOnClose();
                            }
                        );
                    }
                }
            );

        },

        _bindCloseButtonEvent: function () {

            var thisWidget = this;
            var closeButton = Common.Get('SpanCloseButton');
            Events.Off(closeButton, 'click.calendarSpanCloseButtonClick');
            Events.On(closeButton, 'click.calendarSpanCloseButtonClick',
                function (event) {
                    event.preventDefault();
                    Events.Off(document.body, 'click.calendarCloseOnBodyClick');
                    Events.Off(document, 'keydown.calendarKeyboardClicks');
                    Velocity(Common.Get('DivDatePicker'), 'fadeOut', 400,
                        function () {
                            var properInstance = thisWidget._loadProperInstance();
                            Events.Trigger(properInstance.element, 'focus');
                            properInstance._adjustHeightOnClose();
                        }
                    );
                }
            );

        },

        _bindSetDateButtonEvent: function () {

            var thisWidget = this;

            var setDateButton = Common.Get('SpanSetDateButton');
            Events.Off(setDateButton, 'click.calendarSpanSetDateButtonClick');
            Events.On(setDateButton, 'click.calendarSpanSetDateButtonClick',
                function (event) {
                    event.preventDefault();
                    var properInstance = thisWidget._loadProperInstance();
                    var buildDate = properInstance._buildDateObjFromSelectedValues();
                    var divDatePicker = Common.Get('DivDatePicker');
                    var builtStringDate = (buildDate.getMonth() + 1) + '/' + buildDate.getDate() + '/' + buildDate.getFullYear();
                    Events.Off(document.body, 'click.calendarCloseOnBodyClick');
                    Events.Off(document, 'keydown.calendarKeyboardClicks');
                    Velocity(divDatePicker, 'fadeOut', 400,
                        function () {
                            Events.Trigger(properInstance.element, 'focus');
                            properInstance._adjustHeightOnClose();
                        }
                    );

                    // Get Milliseonds from 1970
                    var milliSecondsFrom1970 = Date.parse(builtStringDate);

                    // Build Date String
                    var rawData = '/Date(' + milliSecondsFrom1970.toString() + ')/';
                    if (Common.IsFunction(properInstance.options.UpdateValueCallback)) {
                        if (Common.IsNotEmptyString(builtStringDate)) {
                            properInstance.options.UpdateValueCallback(rawData, properInstance.element);
                        }
                    }
                    else {
                        MaskField.UpdateValue(properInstance.element, rawData);
                    }
                }
            );

        },

        _removeAllSelections: function () {

            Events.Trigger(Common.Get('DivDatePickerMonth'), 'mouseleave');
            Events.Trigger(Common.Get('DivDatePickerDay'), 'mouseleave');
            Events.Trigger(Common.Get('DivDatePickerYear'), 'mouseleave');

        },

        _prepareForKeyboardSelection: function () {

            Events.Off(document, 'keydown.calendarSetSelection');
            Events.On(document, 'keydown.calendarSetSelection.DivDatePicker',
                function (event) {
                    switch (event.keyCode) {
                        case GTC.Keyboard.Up:
                            Events.Off(document, 'keydown.calendarSetSelection');
                            Events.Trigger(Common.Get('DivDatePickerDay'), 'mouseenter');
                            break;
                        case GTC.Keyboard.Down:
                            Events.Off(document, 'keydown.calendarSetSelection');
                            Events.Trigger(Common.Get('DivDatePickerDay'), 'mouseenter');
                            break;
                        case GTC.Keyboard.Left:
                            Events.Off(document, 'keydown.calendarSetSelection');
                            Events.Trigger(Common.Get('DivDatePickerYear'), 'mouseenter');
                            break;
                        case GTC.Keyboard.Right:
                            Events.Off(document, 'keydown.calendarSetSelection');
                            Events.Trigger(Common.Get('DivDatePickerMonth'), 'mouseenter');
                            break;
                        case GTC.Keyboard.Enter:
                            Events.Off(document, 'keydown.calendarSetSelection');
                            Events.Trigger(Common.Get('SpanSetDateButton'), 'click');
                            break;
                        case GTC.Keyboard.Escape:
                            Events.Off(document, 'keydown.calendarSetSelection');
                            Events.Trigger(Common.Get('SpanCloseButton'), 'click');
                            break;
                    }
                }
            );

        },

        _adjustHeightOnClose: function () {

            // Initialize
            var thisWidget = this;

            // Adjust Height if it was added
            if (thisWidget.IsHeightIncreased) {
                thisWidget.IsHeightIncreased = false;
                if (Common.IsModal()) {
                    var modalCalendar = window.parent.Common.Query('.gtc-modal-iframe', null, true);
                    var newHeight = Common.Height(modalCalendar.parentNode) - thisWidget.HeightIncrease;
                    modalCalendar.parentNode.style.height = newHeight + 'px';
                }
                else {
                    var parentElement = Common.Get(thisWidget.options.ParentElement);
                    var newHeight = Common.Height(parentElement) - thisWidget.HeightIncrease;
                    parentElement.style.height = newHeight + 'px';
                }
            }

        },

        _bindCalendarOpenEvent: function () {

            var thisWidget = this;

            Events.On(Common.Get('AnchorOpenCalendar-' + thisWidget.element.name), 'click.calendarOpenAnchor',
                function (event) {
                    event.preventDefault();

                    // Remove this event immediately in case a previous field had calendar open before events could be removed
                    Events.Off(document.body, 'click.calendarCloseOnBodyClick');

                    // Check if in modal and if resizing
                    if (Common.IsModal() && Common.IsDefined(Common.Query('body.gtc-modal-resizing'))) {
                        return;
                    }
                    var thisPrev = Common.GetSibling(this, Common.SiblingType.Previous);
                    var thisParent = this.parentNode;
                    thisWidget._removeAllSelections();
                    var elementValue = thisPrev.value;

                    // TODO: Solve for all date formats
                    var mask = JSON.parse(Common.GetAttr(thisPrev, 'data-mask'));
                    if (Common.IsDefined(mask) && mask.Definition == 'DD/MM/YYYY') {
                        elementValue = elementValue.replace(/([0-9]+)\/([0-9]+)/, '$2/$1');
                    }
                    var passedDate = thisWidget._initializeCurrentDateOnLoad(elementValue);
                    var selectedLis = Common.QueryAll('li.gtc-classLiDatePickerSelected');
                    Common.RemoveClassFromElements(selectedLis, 'gtc-classLiDatePickerSelected');
                    Common.AddClassToElements(selectedLis, 'gtc-classLiDatePickerNotSelected');
                    var divDatePicker = Common.Get('DivDatePicker');
                    Cache.Set(divDatePicker, 'currentElement', thisPrev.name);
                    thisWidget._bindCloseButtonEvent();
                    thisWidget._bindSetDateButtonEvent();
                    thisWidget._initializeMonthYearOnLoad(passedDate);
                    thisWidget._setDaysForMonth(CalendarGlobals.MonthsShort[passedDate.getMonth()], passedDate, false);
                    thisWidget._setDateHeader(passedDate);
                    var coords = Common.Offset(thisPrev);
                    var divDatePickerStyle = divDatePicker.style;
                    divDatePickerStyle.top = (coords.top + Common.Height(thisParent)) + 'px';
                    divDatePickerStyle.left = coords.left + 'px';
                    Velocity(divDatePicker, 'fadeIn', 400,
                        function () {
                            thisWidget._bindCalendarCloseOnBodyClickEvent();
                        }
                    );

                    // Adjust screen height if needed
                    var calendarDisplayHeight = Common.Height(divDatePicker, true);
                    var parentElement = Common.Get(thisWidget.options.ParentElement);
                    if (Common.IsDefined(parentElement) && !Common.IsModal()) {
                        var parentElementHeight = Common.Height(parentElement);
                        var containerElementHeight = Common.Offset(parentElement).top + parentElementHeight;
                        var calendarHeight = Common.Offset(divDatePicker).top + calendarDisplayHeight + 10;
                        if (calendarHeight > containerElementHeight && containerElementHeight > 0) {
                            thisWidget.IsHeightIncreased = true;
                            thisWidget.HeightIncrease = calendarHeight - containerElementHeight;
                            parentElement.style.height = (parentElementHeight + thisWidget.HeightIncrease) + 'px';
                        }
                    }
                    else if (Common.IsModal()) {
                        var modalCalendarParent = window.parent.Common.Query('.gtc-modal-iframe', null, true).parentNode;
                        var modalCalendarParentOffset = Common.Offset(modalCalendarParent);
                        var modalBottom = Common.Height(modalCalendarParent, true) + modalCalendarParentOffset.top;
                        var calendarBottom = calendarDisplayHeight + Common.Offset(thisParent).top + coords.top + Common.Height(thisParent) + modalCalendarParentOffset.top;
                        if (calendarBottom > modalBottom) {
                            thisWidget.IsHeightIncreased = true;
                            thisWidget.HeightIncrease = calendarBottom - modalBottom + (calendarDisplayHeight * 2);
                            var modalCalendarParentHeight = Common.Height(modalCalendarParent);
                            modalCalendarParent.style.height = (modalCalendarParentHeight + thisWidget.HeightIncrease) + 'px';
                        }
                    }

                    // Bind keyboard clicks
                    thisWidget._prepareForKeyboardSelection();
                }
            );

        },

        _buildFakeEventObject: function (CurrentDateObject, ScrollingElement, ThisWidget) {

            var fakeEvent = {};
            fakeEvent.data = {};
            fakeEvent.data.CurrentDateObject = CurrentDateObject;
            fakeEvent.data.ScrollingElement = ScrollingElement;
            fakeEvent.data.ThisWidget = ThisWidget;
            return fakeEvent;

        },

        _bindCalendarKeyboardClicks: function (CurrentDateObject, ScrollingElement) {

            var thisWidget = this;

            Events.Off(document, 'keydown.calendarKeyboardClicks');
            Events.On(document, 'keydown.calendarKeyboardClicks.DivDatePicker',
                function (event) {
                    var fakeEvent = thisWidget._buildFakeEventObject(CurrentDateObject, ScrollingElement, thisWidget);

                    // Process Key
                    switch (event.keyCode) {
                        case GTC.Keyboard.Down:
                            thisWidget._animateCalendarOnScroll(fakeEvent, 0);
                            break;
                        case GTC.Keyboard.Up:
                            thisWidget._animateCalendarOnScroll(fakeEvent, 1);
                            break;
                        case GTC.Keyboard.Left:
                            var currentElementData = Cache.Get(ScrollingElement, 'ScrollingElement');
                            if (currentElementData.Changing == 'Month') {
                                Events.Trigger(Common.Get('DivDatePickerMonth'), 'mouseleave');
                                Events.Trigger(Common.Get('DivDatePickerYear'), 'mouseenter');
                            }
                            else if (currentElementData.Changing == 'Day') {
                                Events.Trigger(Common.Get('DivDatePickerDay'), 'mouseleave');
                                Events.Trigger(Common.Get('DivDatePickerMonth'), 'mouseenter');
                            }
                            else if (currentElementData.Changing == 'Year') {
                                Events.Trigger(Common.Get('DivDatePickerYear'), 'mouseleave');
                                Events.Trigger(Common.Get('DivDatePickerDay'), 'mouseenter');
                            }
                            break;
                        case GTC.Keyboard.Right:
                            var currentElementData = Cache.Get(ScrollingElement, 'ScrollingElement');
                            if (currentElementData.Changing == 'Month') {
                                Events.Trigger(Common.Get('DivDatePickerMonth'), 'mouseleave');
                                Events.Trigger(Common.Get('DivDatePickerDay'), 'mouseenter');
                            }
                            else if (currentElementData.Changing == 'Day') {
                                Events.Trigger(Common.Get('DivDatePickerDay'), 'mouseleave');
                                Events.Trigger(Common.Get('DivDatePickerYear'), 'mouseenter');
                            }
                            else if (currentElementData.Changing == 'Year') {
                                Events.Trigger(Common.Get('DivDatePickerYear'), 'mouseleave');
                                Events.Trigger(Common.Get('DivDatePickerMonth'), 'mouseenter');
                            }
                            break;
                        case GTC.Keyboard.Enter:
                            Events.Trigger(Common.Get('SpanSetDateButton'), 'click');
                            break;
                        case GTC.Keyboard.Escape:
                            Events.Trigger(Common.Get('SpanCloseButton'), 'click');
                            break;
                    }
                }
            );

        },

        _bindCalendarTouchEvents: function (CurrentDateObject, ScrollingElement) {

            var thisWidget = this;
            var fakeEvent = thisWidget._buildFakeEventObject(CurrentDateObject, ScrollingElement, thisWidget);

            // Setup touch swipe events
            Touch.InitializeTouchEvents();
            Events.On(ScrollingElement, 'swipedown',
                function () {
                    Events.Off(this, 'mousewheel');
                    thisWidget._animateCalendarOnScroll(fakeEvent, 1);
                    thisWidget._initializeMonthYearOnLoad(CurrentDateObject);
                }
            );
            Events.On(ScrollingElement, 'swipeup',
                function () {
                    Events.Off(this, 'mousewheel');
                    thisWidget._animateCalendarOnScroll(fakeEvent, 0);
                    thisWidget._initializeMonthYearOnLoad(CurrentDateObject);
                }
            );

        },

        _bindMouseEnterEvent: function () {

            var thisWidget = this;

            // Initialize normalization of scroll event values
            Scroll.InitializeScrollEvents();

            var dateSections = Common.QueryAll('#DivDatePickerMonth, #DivDatePickerDay, #DivDatePickerYear');
            Events.Off(dateSections, 'mouseenter.calendarScrollEvents');
            Events.On(dateSections, 'mouseenter.calendarScrollEvents',
                function (event) {
                    event.preventDefault();
                    thisWidget._removeAllSelections();
                    var buildDate = thisWidget._buildDateObjFromSelectedValues();
                    var CurrentDateObject = thisWidget._buildCurrentDateObjectForAnimate(buildDate);
                    Common.AddClass(this, 'gtc-classControlCalendarActiveSelection');
                    thisWidget._bindCalendarKeyboardClicks(CurrentDateObject, this);
                    thisWidget._bindCalendarTouchEvents(CurrentDateObject, this);
                    Events.Off(this, 'mousewheel');
                    Events.On(this, 'mousewheel', { CurrentDateObject: CurrentDateObject, ScrollingElement: this, ThisWidget: thisWidget }, thisWidget._animateCalendarOnScroll);
                }
            );

        },

        _bindMouseLeaveEvent: function () {

            var dateSections = Common.QueryAll('#DivDatePickerMonth, #DivDatePickerDay, #DivDatePickerYear');
            Events.Off(dateSections, 'mouseleave.calendarScrollEvents');
            Events.On(dateSections, 'mouseleave.calendarScrollEvents',
                function (event) {
                    event.preventDefault();
                    Common.RemoveClass(this, 'gtc-classControlCalendarActiveSelection');
                    Events.Off(document, 'keydown.calendarKeyboardClicks');
                    Events.Off(this, 'mousewheel');
                }
            );

        },

        _defineCalendarListenerIds: function () {

            Cache.Set(Common.Get('DivDatePickerMonth'), 'ScrollingElement', { CurrentListener: 'Month000', Changing: 'Month' });
            Cache.Set(Common.Get('DivDatePickerDay'), 'ScrollingElement', { CurrentListener: 'Day1-00', Changing: 'Day' });
            Cache.Set(Common.Get('DivDatePickerYear'), 'ScrollingElement', { CurrentListener: 'Year00', Changing: 'Year' });

        },

        _loadProperInstance: function () {

            return Cache.Get(Common.Get(Cache.Get(Common.Get('DivDatePicker'), 'currentElement')), 'gtc-calendar');

        },

        _disableControl: function () {

            if (!this.Locked) {
                this.Locked = true;
                Common.SetAttr(this.element, 'disabled', 'disabled');
                Common.SetAttr(this.element, 'tabindex', '-1');
                Common.Get('AnchorOpenCalendar-' + this.element.name).style.display = 'none';
                Common.AddClass(this.element, this.options.ClassCalendarLocked);
                Common.InsertHTMLString(this.element, Common.InsertType.After, '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
            }

        },

        _enableControl: function () {

            if (this.Locked) {
                Common.RemoveAttr(this.element, 'disabled');
                Common.RemoveAttr(this.element, 'data-disabled');
                Common.SetAttr(this.element, 'tabindex', this.FocusIndex);
                Common.Get('AnchorOpenCalendar-' + this.element.name).style.display = 'inline-table';
                Common.RemoveClass(this.element, this.options.ClassCalendarLocked);
                Common.Remove(Common.GetSibling(this.element, Common.SiblingType.Next));
                this.Locked = false;
            }

        },

        _init: function () {

        },

        _create: function () {

            // Create local properties
            this.Locked = false;

            // Create calendar
            if (!CalendarGlobals.CalendarCreated) {
                this._buildDatePicker();
                this._defineCalendarListenerIds();
                this._bindMouseEnterEvent();
                this._bindMouseLeaveEvent();
                CalendarGlobals.CalendarCreated = true;
            }

            this.FocusIndex = Common.GetAttr(this.element, 'tabindex');

            // Initialize fields
            this._insertOpenCalendarAnchor();
            this._bindCalendarOpenEvent();

            // Disabled?
            var dataDisabled = Common.GetAttr(this.element, 'data-disabled');
            if (dataDisabled == 'true') {
                this._disableControl();
            }

        }

    };

    WidgetFactory.Register('gtc.calendar', CalendarWidget);

} (window, document, Common, Cache, Events, Velocity));
// Scroll Namespace
(function (Scroll, window, document, Common, Cache, Events, Velocity, undefined) {

    // Declare scroll event support variables
    var scrollEventsInitialized = false;
    var normalizeEvents  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];
    var bindingEvents = ('onwheel' in document || document.documentMode >= 9) ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];
    var lowestDelta = null;
    var clearLowestDeltaTimeout = null;
    var slice = Array.prototype.slice;
    var onwheelOverride = {
        setup: function () {

            if (Common.IsDefined(this.addEventListener)) {
                for (var loopIndex = bindingEvents.length; loopIndex;) {
                    this.addEventListener(bindingEvents[--loopIndex], NormalizeScrollDeltas, false);
                }
            }
            else {
                this.onmousewheel = NormalizeScrollDeltas;
            }

            // Store line and page height for element in case we need to convert to pixels later (deltaMode)
            Cache.Set(this, 'scrollLineHeight', onwheelOverride.getLineHeight(this));
            Cache.Set(this, 'scrollPageHeight', onwheelOverride.getPageHeight(this));

        },
        teardown: function () {

            if (Common.IsDefined(this.removeEventListener)) {
                for (var loopIndex = bindingEvents.length; loopIndex;) {
                    this.removeEventListener(bindingEvents[--loopIndex], NormalizeScrollDeltas, false);
                }
            }
            else {
                this.onmousewheel = null;
            }

            // Remove data added to the element
            Cache.Remove(this, 'scrollLineHeight');
            Cache.Remove(this, 'scrollPageHeight');

        },
        getLineHeight: function (element) {

            var parent = Common.OffsetParent(element);
            if (Common.IsNotDefined(parent)) {
                parent = document.body;
            }
            return parseInt(Common.GetStyle(parent, 'fontSize'), 10) || parseInt(Common.GetStyle(element, 'fontSize'), 10) || 16;

        },
        getPageHeight: function (element) {

            return Common.Height(element);

        }
    };

    // Public Methods
    Scroll.IsScrollInitialized = function () {

        return scrollEventsInitialized;

    };

    Scroll.InitializeScrollEvents = function () {

        // Only initialize once
        if (scrollEventsInitialized) {
            return;
        }
        scrollEventsInitialized = true;

        // Normalize mouse hooks
        var eventInternal = Events.GetInternal();
        if (Common.IsDefined(eventInternal.fixHooks)) {
            for (var loopIndex = normalizeEvents.length; loopIndex;) {
                eventInternal.fixHooks[normalizeEvents[--loopIndex]] = eventInternal.mouseHooks;
            }
        }

        // Override mousewheel
        eventInternal.special.mousewheel = onwheelOverride;

    };

    Scroll.FindVerticalScrollDistance = function (normalizedEvent) {

        return normalizedEvent.scrollDistanceFactor * normalizedEvent.deltaY;

    };

    Scroll.FindHorizontalScrollDistance = function (normalizedEvent) {

        return normalizedEvent.scrollDistanceFactor * normalizedEvent.deltaX;

    };

    // Private Methods
    function NormalizeScrollDeltas (event) {

        // Initialize
        var originalEvent = event || window.event;
        var eventArguments = slice.call(arguments, 1);
        var absoluteDelta = 0;
        var delta = 0;
        var deltaX = 0;
        var deltaY = 0;

        // Make writable copy of event and normalize properties
        var eventInternal = Events.GetInternal();
        event = eventInternal.fix.call(eventInternal, originalEvent);
        event.type = 'mousewheel';

        // Find old types of scrollwheel delta
        if ('detail' in originalEvent) {
            deltaY = originalEvent.detail * -1;
        }
        if ('wheelDelta' in originalEvent) {
            deltaY = originalEvent.wheelDelta;
        }
        if ('wheelDeltaY' in originalEvent) {
            deltaY = originalEvent.wheelDeltaY;
        }
        if ('wheelDeltaX' in originalEvent) {
            deltaX = originalEvent.wheelDeltaX * -1;
        }

        // Handle Firefox horizontal scrolling
        if ('axis' in originalEvent && originalEvent.axis === originalEvent.HORIZONTAL_AXIS) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // For backwards compatabilitiy set delta to be Y or X if Y is 0
        if (deltaY === 0) {
            delta = deltaX;
        }
        else {
            delta = deltaY;
        }

        // Find new types of scrollwheel delta
        if ('deltaY' in originalEvent) {
            deltaY = originalEvent.deltaY * -1;
            delta = deltaY;
        }
        if ('deltaX' in originalEvent) {
            deltaX = originalEvent.deltaX;
            if (deltaY === 0) {
                delta  = deltaX * -1;
            }
        }

        // No scrolling, return
        if (deltaY === 0 && deltaX === 0) {
            return;
        }

        // Convert lines or pages of text to pixels if not already pixels (deltaMode 0)
        if (originalEvent.deltaMode === 1) {
            var lineHeight = Cache.Get(this, 'scrollLineHeight');
            delta *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        }
        else if (originalEvent.deltaMode === 2) {
            var pageHeight = Cache.Get(this, 'scrollPageHeight');
            delta *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to use for value normalization
        absoluteDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if (Common.IsNotDefined(lowestDelta) || absoluteDelta < lowestDelta) {
            lowestDelta = absoluteDelta;
        }

        // Get normalized integer value for each delta
        delta = Math[delta  > 0 ? 'floor' : 'ceil'](delta / lowestDelta);
        deltaX = Math[deltaX > 0 ? 'floor' : 'ceil'](deltaX / lowestDelta);
        deltaY = Math[deltaY > 0 ? 'floor' : 'ceil'](deltaY / lowestDelta);

        // Add normalized values to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.scrollDistanceFactor = lowestDelta;

        // Set to 0 since everything was converted to pixels above
        event.deltaMode = 0;

        // Add custom event and deltas to the front of event arguments
        eventArguments.unshift(event, delta, deltaX, deltaY);

        // Clear lowestDelta to handle multiple device types
        if (Common.IsDefined(clearLowestDeltaTimeout)) {
            clearTimeout(clearLowestDeltaTimeout);
        }
        clearLowestDeltaTimeout = setTimeout(
            function () {
                lowestDelta = null;
            }, 200
        );

        // Dispatch normalized delta event
        return eventInternal.dispatch.apply(this, eventArguments);

    };

} (window.Scroll = window.Scroll || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class CloseButton
 * @classdesc Supports the CloseButton View Element<br>
 *            Based On: ViewElement > Link
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (CloseButton, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function CloseButton.Render
     * @param {object} closeButton - The CloseButton View Element in JSON format
     * @description Generates the HTML markup for the CloseButton View Element 
     * @returns {string} HTML Markup of the CloseButton View Element
     */
    CloseButton.Render = function (closeButton) {

        // Anchor<, TabIndex@, Class@, Id@
        var className = Link.RenderClassing(closeButton, 'btn');
        var buttonMarkup = '<button type="button" class="' + className + '" data-namespace="CloseButton" data-configure="Pre"' + ViewElement.RenderAttributes(closeButton) + EventElement.AttachEvent(closeButton.Name, 'close', closeButton.OnClose, CloseButton.OnClose);

        // Tooltip
        if (Common.IsDefined(closeButton.Tooltip)) {
            buttonMarkup += ' data-translate="[data-tooltip]' + closeButton.Tooltip + '"';
            buttonMarkup += ' data-tooltip="' + Common.TranslateKey(closeButton.Tooltip) + '"';
        }

        // Serialize Form
        if (Common.IsDefined(closeButton.FormToCheck)) {
            buttonMarkup += ' data-formtocheck="' + closeButton.FormToCheck + '"';
            buttonMarkup += ' data-confirmation=\'' + JSON.stringify(closeButton.Confirmation) + '\'';
        }

        // Anchor>
        buttonMarkup += '>';

        // Icon
        if (Common.IsDefined(closeButton.Icon)) {
            buttonMarkup += Icon.Render(closeButton.Icon, false);
        }

        // Attach Key
        if (Common.IsDefined(closeButton.AttachedKey)) {
            GTC.AttachKey(closeButton.Name, closeButton.AttachedKey);
        }

        // Link Text
        if (Common.IsDefined(closeButton.Title)) {
            buttonMarkup += '<span id="' + closeButton.Name + 'Title" data-translate="' + closeButton.Title + '">' + Common.TranslateKey(closeButton.Title) + '</span>';
        }

        // Anchor</>
        buttonMarkup += '</button>';

        // Return markup
        return buttonMarkup;

    };

    /**
     * @function CloseButton.Configure
     * @param {object} closeButton - The CloseButton DOM element
     * @param {string} configureStage - Pre for Configuration before Translations or Post for Configuration after Translations
     * @description Called by Page.Configure after the dynamic HTML markup is added to the DOM
     * @listens click (id = CloseButton)
     */
    CloseButton.Configure = function (closeButton, configureStage) {

        Events.On(closeButton, 'click',
            function (event) {
                event.preventDefault();
                CloseButton.OnClose(Common.Closest('.gtc-btn-closebutton', event.target));
            }
        );
    };

    /**
     * @function CloseButton.OnClick
     * @param {object} closeButton - The CloseButton DOM element
     * @description This method is called when the CloseButton is clicked and subsequently calls CloseButton.CloseView
     */
    CloseButton.OnClose = function (closeButton) {

        // Form to Check
        var formToCheck = Common.GetAttr(closeButton, 'data-formtocheck');
        if (Common.IsDefined(formToCheck)) {
            // Has Form changed?
            if (Form.HasChanged(Common.Get(formToCheck))) {
                var confirmationMessage = JSON.parse(Common.GetAttr(closeButton, 'data-confirmation'));
                confirmationMessage.Type = parseInt(confirmationMessage.Type, 10);
                window.parent.Modals.ShowMessageDialog(confirmationMessage,
                    function (modalResult) {
                        if (modalResult == Modals.ModalResult.Yes) {
                            CloseButton.CloseView(closeButton);
                        }
                    }
                );
            }
            else {
                CloseButton.CloseView(closeButton);
            }
        }
        else {
            CloseButton.CloseView(closeButton);
        }

    };

    /**
     * @function CloseButton.CloseView
     * @param {object} closeButton - The CloseButton DOM element
     * @description Calls the OnClose<i>Button</i> Behavior of the CloseButton on the View ifit exists otherwise closes the View
     */
    CloseButton.CloseView = function (closeButton) {

        // Get OnCloseEvent object
        var onCloseEvent = JSON.parse(Common.GetAttr(closeButton, 'data-close'));
        if (Common.IsDefined(onCloseEvent)) {
            var onCloseParameters = [];
            if (Common.IsDefined(onCloseEvent.UiParameters)) {
                onCloseParameters = onCloseParameters.concat(onCloseEvent.UiParameters);
            }

            // Serialize Form?
            var formToCheck = Common.GetAttr(closeButton, 'data-formtocheck');
            if (Common.IsDefined(formToCheck)) {
                onCloseParameters = onCloseParameters.concat(Form.SerializeArray(Common.Get(formToCheck)));
            }

            // Execute View Behavior
            Common.ExecuteViewBehavior(onCloseEvent.ControllerPath + onCloseEvent.ActionName, onCloseParameters, HandleOnClose, closeButton);
        }
        else {
            Common.CloseView();
        }

    };

    /**
     * @function CloseButton.UpdateTitle
     * @param {object} closeButton - The CloseButton DOM element
     * @param {string} newTitle - The new Title of the CloseButton
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Title of the CloseButton
     */
    CloseButton.UpdateTitle = function (closeButton, newTitle, promises, context) {

        Link.UpdateTitle(closeButton, newTitle, promises, context);

    };

    /**
     * @function CloseButton.ShowPinwheel
     * @param {object} closeButton - The CloseButton DOM element
     * @description Shows Pinwheel on the View Element
     */
    CloseButton.ShowPinwheel = function (closeButton) {

        SpinKit.Show(closeButton, 'FadingCircle');

    };

    /**
     * @function CloseButton.HidePinwheel
     * @param {object} closeButton - The CloseButton DOM element
     * @description Hides Pinwheel on the View Element
     */
    CloseButton.HidePinwheel = function (closeButton) {

        SpinKit.Hide(closeButton);

    };

    // Private Methods
    function HandleOnClose (pageInstructionData, requestingElement) {

        var closeViewInstruction = {
            Action: 'CloseView',
            Context: 'Current',
            Instruction: null,
            Language: null,
            PropertyName: null,
            Theme: null,
            Type: 'NavigateInstruction',
            UiParameters: null,
            Version: null
        };
        pageInstructionData.PageInstructions = pageInstructionData.PageInstructions.concat(closeViewInstruction);
        Page.RunInstructions(pageInstructionData, requestingElement);

    };

} (window.CloseButton = window.CloseButton || {}, window, document, Common, Cache, Events, Velocity));
// MultiSelect Panel
// Based On: MultiSelectPanel -> DisplayPanel -> ViewElement
(function (MultiSelectPanel, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var scrollSemaphore = false;

    // Public Methods
    MultiSelectPanel.Render = function (multiSelectPanel) {

        // Build class name
        var className = '';
        if (multiSelectPanel.StackDisplayDetails == 'Yes') {
            className += ' gtc-multiselectpanel-stacked';
        }
        if (multiSelectPanel.DisplayNoItems == 'Yes') {
            className += ' gtc-multiselectpanel-displaynoitems';
        }
        if (multiSelectPanel.IsLocked == 'Yes') {
            className += ' gtc-multiselectpanel-locked';
        }

        // Div<, TabIndex@, Class@, Id@, Div>
        var multiSelectPanelMarkup = '<div data-serializable data-namespace="MultiSelectPanel" data-configure="Pre" class="gtc-multiselectpanel' + className + '"' + ViewElement.RenderAttributes(multiSelectPanel);

        // List Name
        if (Common.IsDefined(multiSelectPanel.ListName)) {
            multiSelectPanelMarkup += ' data-listname="' + multiSelectPanel.ListName + '"';
        }

        // Paging On Scroll?
        if (Common.IsEventViewElementDefined(multiSelectPanel.OnScroll)) {
            if (Common.IsDefined(multiSelectPanel.FormToSerialize)) {
                multiSelectPanel.OnScroll.FormToSerialize = multiSelectPanel.FormToSerialize;
            }
            multiSelectPanelMarkup += ' data-onscroll=\'' + JSON.stringify(multiSelectPanel.OnScroll) + '\' data-pagenumber="1"';

            // Attach configure event
            Events.One(document.body, 'configuremultiselectpanelonscroll',
                function () {
                    SetScrolling(multiSelectPanel.Name);
                }
            );
        }

        // Has height?
        if (Common.IsDefined(multiSelectPanel.Dimension) && Common.IsDefined(multiSelectPanel.Dimension.Height)) {
            multiSelectPanelMarkup += ' data-hasheight="Yes"';
        }

        // Locked Message?
        if (Common.IsDefined(multiSelectPanel.LockedMessage) && Common.IsNotEmptyString(multiSelectPanel.LockedMessage)) {
            multiSelectPanelMarkup += ' data-lockedmessage="' + multiSelectPanel.LockedMessage + '"';
        }

        // Div>
        multiSelectPanelMarkup += '>';

        // Header Area
        multiSelectPanelMarkup += '<div class="gtc-multiselectpanel-header">';

        // H2<>, Title, H2</>
        if (Common.IsDefined(multiSelectPanel.Title)) {
            multiSelectPanelMarkup += '<h2 id="' + multiSelectPanel.Name + 'Title" class="gtc-page-theme-color"';

            // Translations
            multiSelectPanelMarkup += ' data-translate="' + multiSelectPanel.Title + '"';
            multiSelectPanelMarkup += '>' + Common.TranslateKey(multiSelectPanel.Title) + '</h2>';
        }

        // Links Div
        var hasSelectAll = multiSelectPanel.DisplaySelectAll == 'Yes';
        var hasLinks = Common.IsDefined(multiSelectPanel.Links) && multiSelectPanel.Links.length > 0;
        if (hasSelectAll || hasLinks) {
            multiSelectPanelMarkup += '<div class="gtc-multiselectpanel-links">';
        }

        // Select All Button
        if (hasSelectAll) {
            var hideSelectAllClass = '';
            if (Common.IsNotDefined(multiSelectPanel.DisplayDetails) || multiSelectPanel.DisplayDetails.length == 0 || multiSelectPanel.IsLocked == 'Yes') {
                hideSelectAllClass = ' style="display:none;"';
            }
            multiSelectPanelMarkup += '<a data-namespace="Button" class="gtc-multiselectpanel-selectall"' + hideSelectAllClass + ' id="' + multiSelectPanel.Name + 'SelectAllButton"><i class="gtc-icon-styles fa fa-square-o"></i><span data-translate="SelectAll">' + Common.TranslateKey('SelectAll') + '</span></a>';
        }

        // Dimension
        var dimensionStyleClass = '';
        if (Common.IsDefined(multiSelectPanel.Dimension)) {
            dimensionStyleClass = 'gtc-multiselectpanel-' + multiSelectPanel.Name.toLowerCase();
            multiSelectPanelMarkup += '<style>.' + dimensionStyleClass + ' {';
            var dimensionStyle = StyleHelper.BuildDimensionStyle(multiSelectPanel.Dimension);
            if (Common.IsDefined(dimensionStyle.Height)) {
                multiSelectPanelMarkup += 'height:' + dimensionStyle.Height;
            }
            multiSelectPanelMarkup += '}</style>';
            dimensionStyleClass = ' ' + dimensionStyleClass;
        }

        // Links
        if (hasLinks) {
            // Render Links
            var link, index = 0, length = multiSelectPanel.Links.length;
            for (; index < length; index++) {
                link = multiSelectPanel.Links[index];

                // Id?
                if (Common.IsDefined(multiSelectPanel.Id)) {
                    // Update name to be unique
                    link.Name += Common.SanitizeToken(multiSelectPanel.Id);
                }

                // Li<>, Anchor, Li</>
                multiSelectPanelMarkup += Link.Render(link);
            }
        }

        // Close Links Div
        if (hasSelectAll || hasLinks) {
            multiSelectPanelMarkup += '</div>';
        }

        // Close Header Area
        multiSelectPanelMarkup += '</div>';

        // Scroll Target
        multiSelectPanelMarkup += '<div id="' + multiSelectPanel.Name + 'ScrollTarget" class="gtc-multiselectpanel-body gtc-scrolltarget gtc-cfscroll-y' + dimensionStyleClass + '">';

        // Is Locked?
        if (multiSelectPanel.IsLocked == 'Yes') {
            var message = (Common.IsDefined(multiSelectPanel.LockedMessage)) ? multiSelectPanel.LockedMessage : '';
            multiSelectPanelMarkup += '<div id="' + multiSelectPanel.Name + 'Locked" class="gtc-multiselectpanel-lockedoverlay">';
            multiSelectPanelMarkup += '<span data-translate="' + message + '">' + Common.TranslateKey(message) + '</span>';
            multiSelectPanelMarkup += '</div>';
        }

        // Display Details
        if (Common.IsDefined(multiSelectPanel.DisplayDetails) && multiSelectPanel.DisplayDetails.length > 0) {
            // Initialize
            var displayDetailCount = multiSelectPanel.DisplayDetails.length;

            // Display Details
            var displayDetail, displayDetailIndex = 0;
            for (; displayDetailIndex < displayDetailCount; displayDetailIndex++) {
                displayDetail = multiSelectPanel.DisplayDetails[displayDetailIndex];
                var displayDetailNamespace = window[displayDetail.Type.toString()];
                multiSelectPanelMarkup += displayDetailNamespace.Render(displayDetail);
            }
        }
        else if (multiSelectPanel.DisplayNoItems == 'Yes') {
            multiSelectPanelMarkup += NoItemsToDisplay();
        }

        // Div</>, Div</>
        multiSelectPanelMarkup += '</div></div>';
        return multiSelectPanelMarkup;

    };

    MultiSelectPanel.Configure = function (multiSelectPanel, configureStage) {

        Widgets.multiselect(multiSelectPanel);
        if (Common.IsDefined(multiSelectPanel.dataset.onscroll)) {
            Events.Trigger(multiSelectPanel, 'configuremultiselectpanelonscroll');
        }

    };

    MultiSelectPanel.SerializeArray = function (element) {

        var uiParameters = {
            Name: Common.GetAttr(element, 'data-listname'),
            Value: null,
            UiParameters: []
        };
        var selectedDetails = Widgets.multiselect(element, 'GetSelected');
        if (selectedDetails.length > 0) {
            var selectedDetail, index = 0, length = selectedDetails.length;
            for (; index < length; index++) {
                selectedDetail = selectedDetails[index];
                var selectDetailParent = selectedDetail.parentNode;

                // View Model / Entity UiParameter
                var viewModel = JSON.parse(Common.GetAttr(selectDetailParent, 'data-viewmodel'));
                var viewModelId = null;
                if (Common.IsDefined(viewModel.Value) && Common.IsNotEmptyString(viewModel.Value)) {
                    viewModelId = viewModel.Value;
                }
                entityUiParameter = {
                    Name: viewModel.Name,
                    Value: null,
                    UiParameters: null
                };

                // Build Entity UiParameter
                var entityName = Common.GetAttr(selectedDetail, "data-entityname")
                if (entityName == "Text" || entityName == "null") {
                    entityUiParameter.Value = viewModelId;
                }
                else {
                    // Id
                    var propertiesUiParameters = [];
                    propertiesUiParameters.push(
                        {
                            Name: 'Id',
                            Value: viewModelId,
                            UiParameters: null
                        }
                    );

                    // Ui Parameters
                    var extraUiParameters = JSON.parse(Common.GetAttr(selectDetailParent, 'data-uiparameters'));
                    if (Common.IsDefined(extraUiParameters)) {
                        var uiParameter, extraUiParametersIndex = 0, extraUiParametersLength = extraUiParameters.length;
                        for (; extraUiParametersIndex < extraUiParametersLength; extraUiParametersIndex++) {
                            uiParameter = extraUiParameters[extraUiParametersIndex];
                            propertiesUiParameters.push(
                                {
                                    Name: uiParameter.Name,
                                    Value: uiParameter.Value,
                                    UiParameters: null
                                }
                            );
                        }
                    }
                    entityUiParameter.UiParameters = propertiesUiParameters;
                }
                uiParameters.UiParameters.push(entityUiParameter);
            }
        }
        return uiParameters;

    };

    MultiSelectPanel.UpdateValues = function (multiSelectPanel, uiParameters) {

        // Remove all selected
        var multiSelectDetails = Common.QueryAll('.gtc-multiselectdetail', multiSelectPanel);
        var index = 0, length = multiSelectDetails.length;
        for (; index < length; index++) {
            Common.RemoveClass(Common.Query('.gtc-multiselectdetail-body', multiSelectDetails[index]), 'gtc-ui-selected');
        }

        // Set Checks
        if (Common.IsDefined(uiParameters)) {
            var multiSelectDetail, uiParameter, index = 0, length = uiParameters.length;
            for (; index < length; index++) {
                uiParameter = uiParameters[index];
                multiSelectDetail = Common.Query('[data-selectableid=' + Common.SanitizeToken(uiParameter.Name) + ']', multiSelectPanel);
                if (uiParameter.Value == 'Yes') {
                    Common.AddClass(Common.Query('.gtc-multiselectdetail-body', multiSelectDetail), 'gtc-ui-selected');
                }
            }
            Widgets.multiselect(multiSelectPanel, 'UpdateSelected');
        }

    };

    MultiSelectPanel.Lock = function (multiSelectPanel) {

        if (!Common.HasClass(multiSelectPanel, 'gtc-multiselectpanel-locked')) {
            var panelId = multiSelectPanel.id;
            Common.AddClass(multiSelectPanel, 'gtc-multiselectpanel-locked');
            var lockedMessage = Common.GetAttr(multiSelectPanel, 'data-lockedmessage');
            lockedMessage = (Common.IsDefined(lockedMessage)) ? lockedMessage : '';
            var htmlToInsert = '<div id="' + panelId + 'Locked" class="gtc-multiselectpanel-lockedoverlay">';
            htmlToInsert += '<span data-translate="' + lockedMessage + '">' + Common.TranslateKey(lockedMessage) + '</span>';
            htmlToInsert += '</div>';
            var scrollTarget = Common.Query('#' + panelId + 'ScrollTarget', multiSelectPanel);
            Common.InsertHTMLString(scrollTarget, Common.InsertType.Prepend, htmlToInsert);
            var insertedHtml = scrollTarget.firstChild;
            Velocity(insertedHtml, 'fadeIn', 'slow');

            // Update SelectAll button
            var selectAllButton = Common.Get(panelId + 'SelectAllButton');
            if (Common.IsDefined(selectAllButton) && Common.IsVisible(selectAllButton)) {
                Velocity(selectAllButton, 'fadeOut', 'slow');
            }
        }

    };

    MultiSelectPanel.Unlock = function (multiSelectPanel) {

        if (Common.HasClass(multiSelectPanel, 'gtc-multiselectpanel-locked')) {
            var panelId = multiSelectPanel.id;
            Common.RemoveClass(multiSelectPanel, 'gtc-multiselectpanel-locked');
            Velocity(Common.Query('#' + panelId + 'Locked', multiSelectPanel), 'fadeOut', 'slow',
                function () {
                    Common.Remove(this[0]);
                }
            );

            // Update SelectAll button
            var selectAllButton = Common.Get(panelId + 'SelectAllButton');
            if (Common.IsDefined(selectAllButton) && Common.IsHidden(selectAllButton)) {
                Velocity(selectAllButton, 'fadeIn', 'slow');
            }
        }

    };

    MultiSelectPanel.OnScroll = function (multiSelectPanel, pageNumber) {

        // Initialize
        var onScrollParameters = [];

        // Get OnScrollEvent object
        var onScrollEvent = JSON.parse(Common.GetAttr(multiSelectPanel, 'data-onscroll'));
        if (Common.IsDefined(onScrollEvent.UiParameters)) {
            onScrollParameters = onScrollParameters.concat(onScrollEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onScrollEvent.FormToSerialize)) {
            onScrollParameters = onScrollParameters.concat(Form.SerializeArray(Common.Get(onScrollEvent.FormToSerialize)));
        }

        // Page Number
        var newPageNumber = parseInt(pageNumber, 10) + 1;
        onScrollParameters.push(
            {
                Name: 'PageNumber',
                Value: newPageNumber,
                UiParameters: null
            }
        );

        // Execute View Behavior
        Common.ExecuteViewBehavior(onScrollEvent.ControllerPath + onScrollEvent.ActionName, onScrollParameters,
            function (pageInstructionData) {
                // Return if no page instructions
                if (Common.IsNotDefined(pageInstructionData.PageInstructions) || pageInstructionData.PageInstructions.length == 0) {
                    RemoveOnScrollLoader(0);
                    return;
                }

                // Remove instruction from list
                var pagingInstruction = null;
                pageInstructionData.PageInstructions = Common.FilterArray(pageInstructionData.PageInstructions,
                    function(pageInstruction) {
                        if (pageInstruction.Instruction != 'Page') {
                            return true;
                        }
                        else {
                            pagingInstruction = pageInstruction;
                            return false;
                        }
                    }
                );

                // Insert new paging data if there are view elements
                var delayValue = 300;
                if (Common.IsDefined(pagingInstruction.ViewElements) && pagingInstruction.ViewElements.length > 0) {
                    Common.SetAttr(multiSelectPanel, 'data-pagenumber', newPageNumber);
                    var multiSelectPanelMarkup = BuildContent(multiSelectPanel, pagingInstruction.ViewElements, true);
                    var scrollTarget = Common.Query('.gtc-scrolltarget', multiSelectPanel);
                    Common.InsertHTMLString(scrollTarget, Common.InsertType.Append, multiSelectPanelMarkup);
                    Widgets.multiselect(multiSelectPanel, 'IntializeNewDetails');
                    Common.RetranslatePage();
                    var hiddenMultiSelectDetails = Common.QueryAllHidden('.gtc-multiselectdetail', scrollTarget);
                    Velocity(hiddenMultiSelectDetails, 'slideDown', 'slow');
                    var selectAllButton = Common.Get(multiSelectPanel.id + 'SelectAllButton');
                    if (!Common.HasClass(multiSelectPanel, 'gtc-multiselectpanel-locked') && Common.IsDefined(selectAllButton) && Common.IsHidden(selectAllButton)) {
                        Velocity(selectAllButton, 'fadeIn', 'slow');
                    }
                    Page.SetPageHeight();
                    Common.RetranslatePage();
                }
                else {
                    delayValue = 0;
                }

                // Remove loader
                RemoveOnScrollLoader(delayValue);

                // Run remaining instructions if they exist
                if (pageInstructionData.PageInstructions.length > 0) {
                    Page.RunInstructions(pageInstructionData);
                }
            }, multiSelectPanel
        );

    };

    MultiSelectPanel.UpdateTitle = function (multiSelectPanel, updatedTitle, promises, context) {

        var onParent = context == 'Parent';
        var title = Common.Get(multiSelectPanel.id + 'Title', onParent);
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(updatedTitle);
            Common.SetAttr(title, 'data-translate', updatedTitle);
        };
        if (Common.IsHidden(multiSelectPanel)) {
            updateTitleFunction();
        }
        else {
            // Get deferred object for animation
            var animationPromise = Common.Promise();
            promises.push(animationPromise.promise);

            // Animate
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    MultiSelectPanel.ReplaceContent = function (multiSelectPanel, viewElements, promises) {

        // Remove events
        if (Common.IsDefined(Cache.Get(multiSelectPanel, 'gtc-multiselect'))) {
            Widgets.multiselect(multiSelectPanel, 'destroy');
        }

        // Get content
        var scrollTarget = Common.Query('#' + multiSelectPanel.id + 'ScrollTarget', multiSelectPanel);

        // Remove delegated events before building HTML which will attach delegated events with same id!
        // INFO: Only remove delegated events from content that is being replaced, e.g. not the panel links!
        Cache.CleanDelegatedElementsData(scrollTarget);

        // Get promise
        var animationHidePromise = Common.Promise();
        promises.push(animationHidePromise.promise);

        // Replace content
        var multiSelectDetails = Common.QueryAll('.gtc-multiselectdetail', scrollTarget);
        if (multiSelectDetails.length > 0) {
            Velocity(multiSelectDetails, 'slideUp', 'slow').then(
                function (event) {
                    ReplaceDisplayDetails(multiSelectPanel, viewElements, promises, animationHidePromise);
                }
            );
        }
        else {
            ReplaceDisplayDetails(multiSelectPanel, viewElements, promises, animationHidePromise);
        }

    };

    MultiSelectPanel.AppendContent = function (multiSelectPanel, viewElements) {

        // Build Content
        var displayPanelMarkup = BuildContent(multiSelectPanel, viewElements);

        // Append
        var scrollTarget = Common.Query('.gtc-scrolltarget', multiSelectPanel);
        Common.InsertHTMLString(scrollTarget, Common.InsertType.Append, displayPanelMarkup);
        Widgets.multiselect(multiSelectPanel, 'IntializeNewDetails');
        Common.RetranslatePage();
        var hiddenMultiSelectDetails = Common.QueryAllHidden('.gtc-multiselectdetail', scrollTarget);

        // Show details
        Velocity(hiddenMultiSelectDetails, 'slideDown', 'slow');

        // Update SelectAll button if it was initially empty
        var selectAllButton = Common.Get(multiSelectPanel.id + 'SelectAllButton');
        if (!Common.HasClass(multiSelectPanel, 'gtc-multiselectpanel-locked') && Common.IsDefined(selectAllButton) && Common.IsHidden(selectAllButton)) {
            Velocity(selectAllButton, 'fadeIn', 'slow');
        }

    };

    MultiSelectPanel.PrependContent = function (multiSelectPanel, viewElements) {

        // Build Content
        var displayPanelMarkup = BuildContent(multiSelectPanel, viewElements);

        // Prepend
        var scrollTarget = Common.Query('.gtc-scrolltarget', multiSelectPanel);
        Common.InsertHTMLString(scrollTarget, Common.InsertType.Prepend, displayPanelMarkup);
        Widgets.multiselect(multiSelectPanel, 'IntializeNewDetails');
        Common.RetranslatePage();
        var hiddenMultiSelectDetails = Common.QueryAllHidden('.gtc-multiselectdetail', scrollTarget);

        // Show details
        Velocity(hiddenMultiSelectDetails, 'slideDown', 'slow');

        // Update SelectAll button if it was initially empty
        var selectAllButton = Common.Get(multiSelectPanel.id + 'SelectAllButton');
        if (!Common.HasClass(multiSelectPanel, 'gtc-multiselectpanel-locked') && Common.IsHidden(selectAllButton)) {
            Velocity(selectAllButton, 'fadeIn', 'slow');
        }

    };

    MultiSelectPanel.RemoveContent = function (multiSelectPanel, viewElements, promises) {

        var multiSelectDetail, index = 0, length;
        if (Common.IsDefined(viewElements) && viewElements.length > 0) {
            length = viewElements.length;
            for ( ; index < length; index++) {
                multiSelectDetail = viewElements[index];
                var multiSelectDetailId = multiSelectDetail.Name;
                if (Common.IsDefined(multiSelectDetail.Id)) {
                    multiSelectDetailId += Common.SanitizeToken(multiSelectDetail.Id);
                }
                MultiSelectDetail.RemoveElement(Common.Query('#' + multiSelectDetailId, multiSelectPanel), promises);
            }
        }
        else {
            var multiSelectDetails = Common.QueryAll('.gtc-multiselectdetail', multiSelectPanel);
            length = multiSelectDetails.length;
            for ( ; index < length; index++) {
                multiSelectDetail = multiSelectDetails[index];
                MultiSelectDetail.RemoveElement(multiSelectDetail, promises);
            }
        }
        DisplayPanel.UpdateDisplayNoItems(multiSelectPanel, promises);

    };

    // Private Methods
    function ReplaceDisplayDetails (multiSelectPanel, viewElements, promises, animationHidePromise) {

        var scrollTarget = Common.Query('#' + multiSelectPanel.id + 'ScrollTarget', multiSelectPanel);

        // Remove all display details
        Common.Remove(Common.QueryAll('.gtc-multiselectdetail', scrollTarget));

        // Render new display details and append
        if (Common.IsDefined(viewElements) && viewElements.length > 0) {
            var displayDetail, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                displayDetail = viewElements[index];
                var animationPromise = Common.Promise();
                promises.push(animationPromise.promise);
                var displayDetailNamespace = window[displayDetail.Type.toString()];
                displayDetail.IsDisplayed = 'No';
                var displayPanelMarkup = displayDetailNamespace.Render(displayDetail);
                var insertedMarkup = Common.InsertHTMLString(scrollTarget, Common.InsertType.Append, displayPanelMarkup, displayDetail.Name);

                // For loops have no scope! Give it some. (IIFE)
                (function (insertedMarkup, multiSelectPanel, animationPromise) {

                    Velocity(insertedMarkup, 'slideDown', 'slow',
                        function () {
                            Widgets.multiselect(multiSelectPanel);
                            animationPromise.resolve();
                        }
                    );

                } (insertedMarkup, multiSelectPanel, animationPromise));
            }
            animationHidePromise.resolve();
            Common.RetranslatePage();

            // Update SelectAll button if it was initially empty
            var selectAllButton = Common.Get(multiSelectPanel.id + 'SelectAllButton');
            if (!Common.HasClass(multiSelectPanel, 'gtc-multiselectpanel-locked') && Common.IsDefined(selectAllButton) && Common.IsHidden(selectAllButton)) {
                Velocity(selectAllButton, 'fadeIn', 'slow');
            }
        }
        else {
            if (Common.HasClass(multiSelectPanel, 'gtc-multiselectpanel-displaynoitems')) {
                var animationPromise = Common.Promise();
                promises.push(animationPromise.promise);
                var displayPanelMarkup = NoItemsToDisplay(true);
                Common.InsertHTMLString(scrollTarget, Common.InsertType.Append, displayPanelMarkup);
                var insertedMarkup = scrollTarget.lastChild;
                Velocity(insertedMarkup, 'slideDown', 'slow',
                    function () {
                        Widgets.multiselect(multiSelectPanel);
                        animationPromise.resolve();
                    }
                );
            }
            Common.RetranslatePage();
            animationHidePromise.resolve();

            // Update SelectAll button if it was initially empty
            var selectAllButton = Common.Get(multiSelectPanel.id + 'SelectAllButton');
            if (Common.IsDefined(selectAllButton) && Common.IsVisible(selectAllButton)) {
                Velocity(selectAllButton, 'fadeOut', 'slow');
            }
        }

    };

    function NoItemsToDisplay (isHidden) {

        var hiddenStyle = '';
        if (isHidden == true) {
            hiddenStyle = ' style="display: none;"';
        }
        return '<div class="gtc-multiselectdetail gtc-multiselectdetail-noitems"' + hiddenStyle + '><p data-translate="NoItemsToDisplay">' + Common.TranslateKey('NoItemsToDisplay') + '</p></div>';

    };

    function BuildContent (multiSelectPanel, viewElements, isPaging) {

        // Remove no items if it exists
        var noItemsDetail = Common.Query('.gtc-multiselectdetail-noitems', multiSelectPanel);
        if (Common.IsDefined(noItemsDetail)) {
            Velocity(noItemsDetail, 'slideUp', 'slow',
                function () {
                    Common.Remove(noItemsDetail);
                }
            );
        }

        // Build Markup
        var displayPanelMarkup = '';
        if (Common.IsDefined(viewElements)) {
            var displayDetail, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                displayDetail = viewElements[index];
                if (isPaging != true) {
                    displayDetail.IsDisplayed = 'No';
                }
                var displayDetailNamespace = window[displayDetail.Type.toString()];
                displayPanelMarkup += displayDetailNamespace.Render(displayDetail);
            }
        }
        return displayPanelMarkup;

    };

    function SetScrolling (multiSelectPanelName) {

        var multiSelectPanelElement = Common.Get(multiSelectPanelName);
        var multiSelectPanelScrollTarget = Common.Query('#' + multiSelectPanelElement.id + 'ScrollTarget', multiSelectPanelElement);
        var hasStickyRegion = Common.QueryAll('[data-region-sticky="true"]').length > 0 ? true : false;
        var spinHtml = '<div class="gtc-loader" id="' + multiSelectPanelName + 'LoadingOnScroll"><i class="gtc-icon-styles fa fa-circle-o-notch fa-spin"></i></div>';

        // Scroll Element
        var scrollElement = window;
        if (multiSelectPanelElement.dataset.hasheight == 'Yes') {
            scrollElement = multiSelectPanelScrollTarget;
        }

        // Attach scroll event
        Events.On(scrollElement, 'scroll.paging' + multiSelectPanelName + '.' + multiSelectPanelName,
            function (event) {
                HandleScrollEvent(multiSelectPanelElement, hasStickyRegion, spinHtml);
            }
        );

        // Attach wheel event
        Events.On(multiSelectPanelScrollTarget, 'wheel.paging' + multiSelectPanelName + '.' + multiSelectPanelName,
            function (event) {
                if (event.originalEvent.deltaY < 0) {
                    return;
                }
                HandleScrollEvent(multiSelectPanelElement, hasStickyRegion, spinHtml);
            }
        );

    };

    function HandleScrollEvent (multiSelectPanelElement, hasStickyRegion, spinHtml) {

        if (!scrollSemaphore) {
            if (hasStickyRegion) {
                var scrollHeight = this.scrollHeight;
                var offset = this.scrollTop + this.offsetHeight;
                if (offset >= scrollHeight) {
                    scrollSemaphore = true;
                    Common.InsertHTMLString(multiSelectPanelElement, Common.InsertType.Append, spinHtml);
                    MultiSelectPanel.OnScroll(multiSelectPanelElement, Common.GetAttr(multiSelectPanelElement, 'data-pagenumber'));
                }
            }
            else {
                if (Math.round(window.pageYOffset) == Common.Height(document) - Common.Height(window)) {
                    scrollSemaphore = true;
                    Common.InsertHTMLString(multiSelectPanelElement, Common.InsertType.Append, spinHtml);
                    MultiSelectPanel.OnScroll(multiSelectPanelElement, Common.GetAttr(multiSelectPanelElement, 'data-pagenumber'));
                }
            }
        }

    };

    function RemoveOnScrollLoader (delayValue) {

        // Remove loader
        var loaders = Common.QueryAll('.gtc-loader');
        if (loaders.length > 0) {
            Velocity(loaders, 'slideUp',
                {
                    delay: delayValue,
                    duration: 'slow',
                    complete: function () {
                        Common.Remove(this);
                        scrollSemaphore = false;
                    }
                }
            );
        }
        else {
            scrollSemaphore = false;
        }

    };

} (window.MultiSelectPanel = window.MultiSelectPanel || {}, window, document, Common, Cache, Events, Velocity));
// MultiSelect Detail
// Based On: MultiSelectDetail -> DisplayDetail -> ViewElement
(function (MultiSelectDetail, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    MultiSelectDetail.Render = function (multiSelectDetail) {

        // Build class name
        var className = 'gtc-multiselectdetail';
        if (Common.IsDefined(multiSelectDetail.ImageSource)) {
            className += ' gtc-multiselectdetail-image';
        }
        if (multiSelectDetail.DisplayDetailType == 'SingleItem') {
            multiSelectDetail.DisplayItemsPerLine = 1;
            multiSelectDetail.IsExpandable = 'No';
            className += ' gtc-multiselectdetail-inline';
        }
        else if (multiSelectDetail.IsExpandable == 'Yes') {
            className += ' gtc-multiselectdetail-expands';
        }

        var expanded = 'false';
        var displayStyle = '';
        var expandedClass = '';
        var rotateClass = '';
        if (multiSelectDetail.IsExpandable == 'Yes' && multiSelectDetail.IsOpen == 'Yes') {
            expanded = 'true';
            displayStyle = ' style="display:block;"';
            expandedClass = ' gtc-multiSelectDetail-expandable-open';
            rotateClass = ' fa-rotate-270';
        }

        // Div@, TabIndex@, Class@, Id@, Div>
        var selectableId = Common.SanitizeToken(multiSelectDetail.Id);
        if (Common.IsEmptyString(selectableId)) {
            selectableId = multiSelectDetail.Name;
        }
        var multiSelectDetailMarkup = '<div data-namespace="MultiSelectDetail" data-selectableid="' + selectableId + '" class="' + className + ' gtc-columns-' + multiSelectDetail.DisplayItemsPerLine;
        if (Common.IsDefined(multiSelectDetail.DisplayDetailType)) {
            multiSelectDetailMarkup += ' gtc-multiselectdetail-' + multiSelectDetail.DisplayDetailType.toLowerCase();
        }
        multiSelectDetailMarkup += expandedClass + '"';

        // UiParameters
        if (Common.IsDefined(multiSelectDetail.UiParameters)) {
            multiSelectDetailMarkup += ' data-uiparameters=\'' + JSON.stringify(multiSelectDetail.UiParameters) + '\'';
        }

        // Display Items Per Line
        multiSelectDetailMarkup += ' data-displayitemsperline="' + multiSelectDetail.DisplayItemsPerLine + '"';

        // Id?
        var viewModelId = null;
        if (Common.IsDefined(multiSelectDetail.Id) || Common.IsDefined(multiSelectDetail.Name)) {
            // View Model
            var viewModel = {
                Name: multiSelectDetail.Name,
                Value: multiSelectDetail.Id
            };

            // Update name to be unique
            viewModelId = Common.SanitizeToken(multiSelectDetail.Id);
            multiSelectDetail.Name += viewModelId;

            // Data-ViewModel@
            multiSelectDetailMarkup += ' data-viewmodel=\'' + JSON.stringify(viewModel) + '\'';
        }
        multiSelectDetailMarkup += ViewElement.RenderAttributes(multiSelectDetail) + '>';

        // Title
        if (Common.IsDefined(multiSelectDetail.Title)) {
            multiSelectDetailMarkup += '<h3 id="' + multiSelectDetail.Name + 'Title" class="gtc-page-theme-color" data-translate="' + multiSelectDetail.Title + '">' + Common.TranslateKey(multiSelectDetail.Title) + '</h3>';
        }

        // Div<>
        multiSelectDetailMarkup += '<div data-entityname="' + multiSelectDetail.EntityName + '" data-selectablename="' + multiSelectDetail.Name + '" class="gtc-multiselectdetail-body">';

        // Image Source
        if (Common.IsDefined(multiSelectDetail.ImageSource)) {
            multiSelectDetailMarkup += '<img src="' + Common.BuildResourcePath(multiSelectDetail.ImageSource) + '" />';
        }

        // Display Items
        if (Common.IsDefined(multiSelectDetail.DisplayItems)) {
            // Find length of items
            var displayItemCount = multiSelectDetail.DisplayItems.length;
            var itemsPerLineInt = parseInt(multiSelectDetail.DisplayItemsPerLine, 10);

            // Count spans and cache index
            var itemSpanCount = 0;
            var lastUnrenderedIndex = null;

            // Div<>
            multiSelectDetailMarkup += '<div class="gtc-multiselectdetail-input">';

            // Label<, For@, Display, Input<, @Data-NameSpace, @Data-FieldType
            multiSelectDetailMarkup += '<label role="checkbox" class="gtc-input-checkbox" for="' + multiSelectDetail.Name + 'MultiSelectCheckbox"><input data-namespace="CheckboxField"';

            // Data-CheckboxGroup@, @Name
            multiSelectDetailMarkup += ' data-checkboxgroup="' + multiSelectDetail.Name + 'Group" name="' + multiSelectDetail.Name + 'MultiSelectCheckbox"';

            // Checked@, Value@
            if (multiSelectDetail.IsChecked == 'Yes') {
                multiSelectDetailMarkup += ' checked="checked"';
            }

            // @TabIndex, @Class, @Id, @Type
            multiSelectDetailMarkup += ' tabindex="' + multiSelectDetail.FocusIndex + '" class="gtc-multiselectdetail-multiselectcheckbox" id="' + multiSelectDetail.Name + 'MultiSelectCheckbox" type="checkbox" /></label>';

            // Div</>
            multiSelectDetailMarkup += '</div>';

            // Ol<>
            multiSelectDetailMarkup += '<div class="gtc-multiselectdetail-content"><ol class="gtc-multiselectdetail-row">';

            // Display Fields
            var displayItem, displayItemIndex = 0, itemSpanInt;
            for ( ; displayItemIndex < displayItemCount; displayItemIndex++) {
                displayItem = multiSelectDetail.DisplayItems[displayItemIndex];
                itemSpanInt = parseInt(displayItem.ItemSpan, 10);

                // Expandable?
                if (multiSelectDetail.IsExpandable == 'Yes' && itemSpanCount >= itemsPerLineInt) {
                    lastUnrenderedIndex = displayItemIndex;
                    break;
                }

                // Stop item spans greater than items per line or apply row spans
                if (displayItem.SpanRow == 'Yes' || multiSelectDetail.DisplayDetailType == 'SingleItem' || itemSpanInt > itemsPerLineInt) {
                    displayItem.ItemSpan = multiSelectDetail.DisplayItemsPerLine;
                }

                // Give Rich Text Display Items unique ids for initialization
                if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                    // Update name to be unique
                    displayItem.Name += viewModelId;
                }

                // Build Display Item
                var displayItemNamespace = window[displayItem.Type.toString()];
                multiSelectDetailMarkup += displayItemNamespace.Render(displayItem, multiSelectDetail);

                // Add to item span count
                itemSpanCount += itemSpanInt;

                // Append Line?
                if (displayItem.AppendLine == 'Yes' && displayItemCount != displayItemIndex + 1) {
                    multiSelectDetailMarkup += '</ol><ol class="gtc-multiselectdetail-row">';
                }
            }

            // Ol</>
            multiSelectDetailMarkup += '</ol>';

            // Add expandable section and wire slide
            if (multiSelectDetail.IsExpandable == 'Yes') {
                multiSelectDetailMarkup += '<div aria-expanded="false" class="gtc-multiselectdetail-expandable"><ol class="gtc-multiselectdetail-row">';
                if (Common.IsDefined(lastUnrenderedIndex)) {
                    var index = lastUnrenderedIndex, length = multiSelectDetail.DisplayItems.length;
                    for ( ; index < length; index++) {
                        var displayItem = multiSelectDetail.DisplayItems[index];
                        var displayItemNamespace = window[displayItem.Type.toString()];
                        itemSpanInt = parseInt(displayItem.ItemSpan, 10);

                        // Stop item spans greater than items per line or apply row spans
                        if (displayItem.SpanRow == 'Yes' || itemSpanInt > itemsPerLineInt) {
                            displayItem.ItemSpan = multiSelectDetail.DisplayItemsPerLine;
                        }

                        // Give Rich Text Display Items unique ids for initialization
                        if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                            // Update name to be unique
                            displayItem.Name += viewModelId;
                        }

                        // Render
                        multiSelectDetailMarkup += displayItemNamespace.Render(displayItem, multiSelectDetail);

                        // Append Line?
                        if (displayItem.AppendLine == 'Yes' && multiSelectDetail.DisplayItems.length != index + 1) {
                            multiSelectDetailMarkup += '</ol><ol class="gtc-multiselectdetail-row">';
                        }
                    }
                }
                multiSelectDetailMarkup += '</ol></div>';

                // Attach click event to expand multiselect deatail
                Events.On(document.body, 'click.' + multiSelectDetail.Name, '#' + multiSelectDetail.Name,
                    function (event) {
                        var eventTarget = event.target;
                        if (!Common.HasClass(eventTarget, 'gtc-multiselectdetail-footer') && Common.IsNotDefined(Common.Closest('.gtc-multiselectdetail-footer', eventTarget))) {
                            event.preventDefault();
                            var displayDetailExpandable = Common.Query('.gtc-multiselectdetail-expandable', this);
                            if (Common.IsDefined(Common.QueryAll('.gtc-multiselectdetail-column', displayDetailExpandable))) {
                                if (Common.IsHidden(displayDetailExpandable)) {
                                    Velocity(displayDetailExpandable, 'slideDown', 'slow',
                                        function () {
                                            Page.SetPageHeight();
                                        }
                                    );
                                    Common.AddClass(Common.Query('.gtc-multiselectdetail-expandable-icon', this), 'fa-rotate-270');
                                    Common.AddClass(this, 'gtc-multiselectdetail-expandable-open');
                                    Common.SetAttr(displayDetailExpandable, 'aria-expanded', 'true');
                                }
                                else {
                                    Velocity(displayDetailExpandable, 'slideUp', 'slow',
                                        function () {
                                            Page.SetPageHeight();
                                        }
                                    );
                                    Common.RemoveClass(Common.Query('.gtc-multiselectdetail-expandable-icon', this), 'fa-rotate-270');
                                    Common.RemoveClass(this, 'gtc-multiselectdetail-expandable-open');
                                    Common.SetAttr(displayDetailExpandable, 'aria-expanded', 'false');
                                }
                            }
                        }
                    }
                );
            }
        }

        // I</>
        if (multiSelectDetail.IsExpandable == 'Yes') {
            multiSelectDetailMarkup += '<i class="gtc-multiselectdetail-expandable-icon gtc-icon-styles fa fa-share fa-rotate-90' + rotateClass + '"></i>';
        }

        // Div</>, Div</>
        multiSelectDetailMarkup += '</div></div>';

        // Links
        if (Common.IsDefined(multiSelectDetail.Links) && multiSelectDetail.Links.length > 0) {
            // Div<>
            multiSelectDetailMarkup += '<div class="gtc-multiselectdetail-footer">';

            // Links
            var link, index = 0, length = multiSelectDetail.Links.length;
            for ( ; index < length; index++) {
                link = multiSelectDetail.Links[index];

                // Id?
                if (Common.IsDefined(multiSelectDetail.Id)) {
                    // Update name to be unique
                    link.Name += Common.SanitizeToken(multiSelectDetail.Id);
                }

                // Li<>, Anchor, Li</>
                multiSelectDetailMarkup += Link.Render(link);
            }

            // Div</>
            multiSelectDetailMarkup += '</div>';
        }

        // Div</>
        multiSelectDetailMarkup += '</div>';

        // Return markup
        return multiSelectDetailMarkup;

    };

    MultiSelectDetail.UpdateValues = function (displayDetail, uiParameters, promises) {

        if (Common.IsDefined(uiParameters)) {
            var uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];

                // DisplayItem
                var displayItem = Common.Query('#' + uiParameter.Name, displayDetail);

                // Dynamic Rich Text?
                if (Common.IsNotDefined(displayItem)) {
                    // Build display detail object
                    var viewModel = JSON.parse(Common.GetAttr(displayDetail, 'data-viewmodel'));
                    if (Common.IsDefined(viewModel)) {
                        var viewModelId = Common.SanitizeToken(viewModel.Value);
                        displayItem = Common.Query('#' + uiParameter.Name + viewModelId, displayDetail);
                    }
                }

                // Namespace (DisplayItem, CurrencyDisplayItem or EditableDisplayItem)
                var namespace = window[Common.GetAttr(displayItem, 'data-namespace')];
                namespace.UpdateValue(displayItem, uiParameter.Value, promises);
            }
        }

    };

    MultiSelectDetail.UpdateColors = function (displayDetail, uiParameters, promises) {

        if (Common.IsDefined(uiParameters)) {
            var uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];

                // DisplayItem
                var displayItem = Common.Query('#' + uiParameter.Name, displayDetail);

                // Dynamic Rich Text?
                if (Common.IsDefined(displayItem)) {
                    // Build display detail object
                    var viewModel = JSON.parse(Common.GetAttr(displayDetail, 'data-viewmodel'));
                    if (Common.IsDefined(viewModel)) {
                        var viewModelId = Common.SanitizeToken(viewModel.Value);
                        displayItem = Common.Query('#' + uiParameter.Name + viewModelId, displayDetail);
                    }
                }

                // Namespace (DisplayItem, CurrencyDisplayItem or EditableDisplayItem)
                var namespace = window[Common.GetAttr(displayItem, 'data-namespace')];
                namespace.UpdateColor(displayItem, uiParameter.Value, promises);
            }
        }

    };

    MultiSelectDetail.ReplaceContent = function (displayDetail, viewElements) {

        // Build Markup
        var displayDetailVisibleMarkup = '';
        var displayDetailExpandableMarkup = '';
        var displayItemsPerLine = parseInt(Common.GetAttr(displayDetail, 'data-displayitemsperline'), 10);

        // Build display detail object
        var viewModelId = null;
        var displayDetailObj = {
            Name: displayDetail.id
        };
        var viewModel = JSON.parse(Common.GetAttr(displayDetail, 'data-viewmodel'));
        if (Common.IsDefined(viewModel)) {
            displayDetailObj.Id = viewModel.Value;
            viewModelId = Common.SanitizeToken(viewModel.Value);
        }

        // Clean delegated events on elements being removed before building HTML which will attach delegated events with same id!
        // Only on children elements since this is replace content.
        var displayDetailContent = Common.Query('.gtc-multiselectdetail-content', displayDetail);
        var displayDetailExpandable = Common.Query('.gtc-multiselectdetail-expandable', displayDetail);
        Cache.CleanDelegatedElementsData(displayDetailContent, true);
        Cache.CleanDelegatedElementsData(displayDetailExpandable, true);

        // Display Items
        if (Common.IsDefined(viewElements) && viewElements.length > 0) {
            // Find length of items
            var displayItemCount = viewElements.length;

            // Count spans and cache index
            var itemSpanCount = 0;
            var lastUnrenderedIndex = null;

            // Ol<>
            displayDetailVisibleMarkup += '<ol class="gtc-multiselectdetail-row">';

            // Display Fields
            var displayItem, displayItemIndex = 0, itemSpanInt;
            for ( ; displayItemIndex < displayItemCount; displayItemIndex++) {
                displayItem = viewElements[displayItemIndex];
                itemSpanInt = parseInt(displayItem.ItemSpan, 10);

                // Expandable?
                if (Common.HasClass(displayDetail, 'gtc-multiselectdetail-expands') && itemSpanCount >= displayItemsPerLine) {
                    lastUnrenderedIndex = displayItemIndex;
                    break;
                }

                // Stop item spans greater than items per line or apply row spans
                if (displayItem.SpanRow == 'Yes' || Common.HasClass(displayDetail, 'gtc-multiselectdetail-inline') || itemSpanInt > displayItemsPerLine) {
                    displayItem.ItemSpan = displayItemsPerLine;
                }

                // Give Rich Text Display Items unique ids
                if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                    // Update name to be unique
                    displayItem.Name += viewModelId;
                }

                // Build Display Item
                var displayItemNamespace = window[displayItem.Type.toString()];
                displayDetailVisibleMarkup += displayItemNamespace.Render(displayItem, displayDetailObj);

                // Add to item span count
                itemSpanCount += itemSpanInt;

                // Append Line?
                if (displayItem.AppendLine == 'Yes' && displayItemCount != displayItemIndex + 1) {
                    displayDetailVisibleMarkup += '</ol><ol class="gtc-multiselectdetail-row">';
                }
            }

            // Ol</>
            displayDetailVisibleMarkup += '</ol>';

            // Add expandable section and wire slide
            if (Common.HasClass(displayDetail, 'gtc-multiselectdetail-expands')) {
                displayDetailExpandableMarkup += '<ol class="gtc-multiselectdetail-row">';
                if (Common.IsDefined(lastUnrenderedIndex)) {
                    var index = lastUnrenderedIndex, length = viewElements.length;
                    for ( ; index < length; index++) {
                        var displayItem = viewElements[index];
                        var displayItemNamespace = window[displayItem.Type.toString()];
                        itemSpanInt = parseInt(displayItem.ItemSpan, 10);

                        // Stop item spans greater than items per line or apply row spans
                        if (displayItem.SpanRow == 'Yes' || itemSpanInt > displayItemsPerLine) {
                            displayItem.ItemSpan = displayItemsPerLine;
                        }

                        // Give Rich Text Display Items unique ids
                        if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                            // Update name to be unique
                            displayItem.Name += viewModelId;
                        }

                        // Render
                        displayDetailExpandableMarkup += displayItemNamespace.Render(displayItem, displayDetailObj);

                        // Append Line?
                        if (displayItem.AppendLine == 'Yes' && viewElements.length != index + 1) {
                            displayDetailExpandableMarkup += '</ol><ol class="gtc-multiselectdetail-row">';
                        }
                    }
                }
                displayDetailExpandableMarkup += '</ol>';
            }
        }

        // Replace Content
        if (Common.IsDefined(displayDetailContent)) {
            Common.Remove(displayDetailContent.children);
        }
        if (Common.IsDefined(displayDetailExpandable)) {
            Common.Remove(displayDetailExpandable.children);
        }
        displayDetailContent.appendChild(Common.GenerateFragment(displayDetailVisibleMarkup));
        if (Common.HasClass(displayDetail, 'gtc-multiselectdetail-expands')) {
            displayDetailExpandable.appendChild(Common.GenerateFragment(displayDetailExpandableMarkup));
        }

    };

    MultiSelectDetail.ReplaceElement = function (displayDetail, viewElements, promises) {

        // Animation Promise
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Remove delegated events before building HTML which will attach delegated events with same id!
        Cache.CleanDelegatedElementsData(displayDetail);

        // Build Markup
        var displayDetailMarkup = '';
        if (Common.IsDefined(viewElements)) {
            var viewElement;
            index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                viewElement = viewElements[index];
                viewElement.IsDisplayed = 'No';
                var displayDetailNamespace = window[viewElement.Type.toString()];
                displayDetailMarkup += displayDetailNamespace.Render(viewElement);
            }
        }

        // Replace
        Velocity(displayDetail, 'slideUp', 'slow',
            function () {
                Common.InsertHTMLString(displayDetail, Common.InsertType.After, displayDetailMarkup);
                var insertedDetail = displayDetail.nextElementSibling;
                Velocity(insertedDetail, 'slideDown', 'slow',
                    function () {
                        animationPromise.resolve();
                    }
                );
                var multiSelectPanel = Common.Closest('.gtc-multiselectpanel', insertedDetail);
                Widgets.multiselect(multiSelectPanel, 'IntializeNewDetails');

                // Remove display detail and cleanup cache but ignore delegated events since they were already removed and reattached with same id!
                Common.Remove(displayDetail, false, true);
            }
        );

    };

    MultiSelectDetail.AppendContent = function (displayDetail, viewElements) {

        // Build Content
        var displayDetailMarkup = BuildContent(displayDetail, viewElements);

        // Append Content
        Common.InsertHTMLString(Common.Query('.gtc-multiselectdetail-content', displayDetail).lastChild, Common.InsertType.Append, displayDetailMarkup);

    };

    MultiSelectDetail.PrependContent = function (displayDetail, viewElements) {

        // Build Content
        var displayDetailMarkup = BuildContent(displayDetail, viewElements);

        // Prepend Content
        Common.InsertHTMLString(Common.Query('.gtc-multiselectdetail-content', displayDetail).lastChild, Common.InsertType.Prepend, displayDetailMarkup);

    };

    MultiSelectDetail.RemoveElement = function (displayDetail, promises) {

        // Get deferred object for animation
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Animate
        Velocity(displayDetail, 'slideUp', 600,
            function () {
                Common.Remove(displayDetail);
                animationPromise.resolve();
            }
        );

    };

    MultiSelectDetail.UpdateTitle = function (displayDetail, updatedTitle, promises, context) {

        var onParent = context == 'Parent';
        var title = Common.Get(displayDetail.id + 'Title', onParent);
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(updatedTitle);
            Common.SetAttr(title, 'data-translate', updatedTitle);
        };
        if (Common.IsHidden(displayDetail)) {
            updateTitleFunction();
        }
        else {
            // Get deferred object for animation
            var animationPromise = Common.Promise();
            promises.push(animationPromise.promise);

            // Animate
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    function BuildContent(displayDetail, viewElements) {

        // Build display detail object
        var viewModelId = null;
        var detailObject = {
            Name: displayDetail.id
        };
        var viewModel = JSON.parse(Common.GetAttr(displayDetail, 'data-viewmodel'));
        if (Common.IsDefined(viewModel)) {
            detailObject.Id = viewModel.Value;
            viewModelId = Common.SanitizeToken(viewModel.Value);
        }

        // Build Markup
        var displayDetailMarkup = '', displayItem, displayItemIndex = 0, length = viewElements.length;
        for ( ; displayItemIndex < length; displayItemIndex++) {
            displayItem = viewElements[displayItemIndex];

            // Give Rich Text Display Items unique ids
            if (displayItem.Type == 'RichTextDisplayItem' && Common.IsDefined(viewModelId)) {
                // Update name to be unique
                displayItem.Name += viewModelId;
            }

            // Display Item
            var displayItemNamespace = window[displayItem.Type.toString()];
            displayDetailMarkup += displayItemNamespace.Render(displayItem, detailObject);
            if (displayItem.AppendLine == 'Yes' && viewElements.length != displayItemIndex + 1) {
                displayDetailMarkup += '</ol><ol class="gtc-multiselectdetail-row">';
            }
        }
        return displayDetailMarkup;

    };

} (window.MultiSelectDetail = window.MultiSelectDetail || {}, window, document, Common, Cache, Events, Velocity));
// Radio Field
// Based On: RadioField -> ValueField -> Field -> ViewElement
(function (RadioField, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    RadioField.Render = function (radioField) {

        // Label Exists (needed for Icon rendering)
        var labelExists = true;
        if (Common.IsNotDefined(radioField.Label)) {
            labelExists = false;
        }

        // 508 Compliance
        var className = '';
        if (Common.IsNotDefined(radioField.Label)) {
            var generatedLabel = {
                TextString: radioField.Name,
                ScreenReaderOnly: true
            };
            if (Common.IsDefined(radioField.Placeholder)) {
                generatedLabel.TextString = radioField.Placeholder;
            }
            radioField.Label = generatedLabel;
        }

        // 508 Compliance
        if (radioField.Label.ScreenReaderOnly == true) {
            className += ' gtc-sr-only';
        }

        // FieldSet<, @Data-TranslateContent, Legend<
        var radioFieldMarkup = '<fieldset role="radiogroup" class="gtc-input-radio-group';
        if (Common.IsDefined(radioField.Icon)) {
            if (labelExists == false) {
                radioFieldMarkup += ' gtc-input__icon-left';
            }
            else {
                radioFieldMarkup += ' gtc-input__icon-label-left';
            }
        }
        radioFieldMarkup += '" data-translatecontent="' + radioField.TranslateContent + '"><legend class="gtc-input-radio-label gtc-label' + className + '" for="' + radioField.Name + '"><span';

        // Translations
        if (Common.IsDefined(radioField.Label) && Common.IsDefined(radioField.Label.TextString)) {
            radioFieldMarkup += ' data-translate="' + radioField.Label.TextString + '"';
        }

        // Span>, Label, Legend>, Span</>
        radioFieldMarkup += '>' + Common.TranslateKey(radioField.Label.TextString) + '</span>';
        radioFieldMarkup += Field.RenderLabel(radioField, true) + '</legend>';

        // Tooltip
        if (Common.IsDefined(radioField.Label.Tooltip)) {
            radioFieldMarkup += '<a class="gtc-tooltip gtc-label-tooltip" data-translate="[data-tooltip]' + radioField.Label.Tooltip + '" data-tooltip="' + Common.TranslateKey(radioField.Label.Tooltip) + '"></a>';
        }

        // Data-Disabled@
        var fieldAttributesMarkup = Field.RenderAttributes(radioField);

        // Build Radio
        radioFieldMarkup += '<div class="gtc-radiogroup-divforlabels">';
        if (Common.IsDefined(radioField.OptionDetail.Options)) {
            var option, index = 0, length = radioField.OptionDetail.Options.length;
            for ( ; index < length; index++) {
                option = radioField.OptionDetail.Options[index];
                var convertedToken = Common.SanitizeToken(option.Value);

                // @Data-NameSpace, @Data-FieldType, Label<, For@, Span<>, Input<
                radioFieldMarkup += '<label role="radio" class="gtc-input-radio" for="' + radioField.Name + convertedToken + '">';
                if (radioField.TranslateContent == 'Yes') {
                    radioFieldMarkup += '<span data-translate="' + option.Display + '">' + Common.TranslateKey(option.Display);
                }
                else {
                    radioFieldMarkup += '<span>' + option.Display;
                }
                radioFieldMarkup += '</span><input data-namespace="RadioField" data-configure="Pre"';

                // 508 Compliance
                if (radioField.IsRequired == 'Yes') {
                    radioFieldMarkup += ' aria-required="true"';
                }

                // Data-Serializable@
                if (radioField.IsSerializable == 'Yes') {
                    radioFieldMarkup += ' data-serializable';
                    Events.On(document.body, 'change.fieldvaluechange.' + radioField.Name + convertedToken, '#' + radioField.Name + convertedToken,
                        function () {
                            Common.SetAttr(this, 'data-haschanged', 'Yes');
                        }
                    );
                }

                // Data-Disabled@
                radioFieldMarkup += fieldAttributesMarkup;

                // @Checked
                if (Common.SanitizeToken(radioField.Value) == convertedToken) {
                    radioFieldMarkup += ' checked="checked"';
                }

                // Data-ControllerPath/ActionName@, Wire OnChange!
                if (Common.IsEventViewElementDefined(radioField.OnChange)) {
                    radioFieldMarkup += Field.AttachOnChange(radioField, RadioField.OnChange, convertedToken);
                }

                // @TabIndex, @Class, @Data-TranslateContent, @Id, @Name, @Type, @Value
                radioFieldMarkup += ' tabindex="' + radioField.FocusIndex + '" class="gtc-input-radio-option" data-translatecontent="' + radioField.TranslateContent + '" id="' + radioField.Name + convertedToken + '" name="' + radioField.Name + '" type="radio" value="' + option.Value + '" />';

                // Label</>
                radioFieldMarkup += '</label>';
            }
        }
        radioFieldMarkup += '</div></fieldset>';

        // Icon
        if (Common.IsDefined(radioField.Icon)) {
            radioFieldMarkup += Icon.Render(radioField.Icon, true, labelExists);
        }

        // Return
        return radioFieldMarkup;

    };

    RadioField.Configure = function (radioOption, configureStage) {

        Widgets.radio(radioOption, { ClassLabelRadioUnselected: 'gtc-classLabelRadioUnselected', ClassLabelRadioSelected: 'gtc-input-radio-selected' });

    };

    RadioField.OnChange = function (event) {

        // Remove Prefix_
        var fieldParameterName = Common.RemovePrefix(this.name);

        // Field Value
        var fieldValueUiParameter = [
            {
                Name: fieldParameterName,
                Value:  this.value,
                UiParameters: null
            }
        ];

        // Call OnChange
        Field.OnChange(this, fieldValueUiParameter);

    };

    RadioField.HasValue = function (radioField) {

        if (Common.IsDefined(radioField.Value)) {
            return true;
        }
        return false;

    };

    RadioField.IsCompleted = function (field) {

        var radioName = field.name;
        var index = 0, radios = Common.GetByName(radioName), radioLength = radios.length, radioValue;
        for ( ; index < radioLength; index++) {
            if (radios[index].checked == true) {
                radioValue = radios[index].value;
                break;
            }
        }
        if (Common.IsDefined(radioValue)) {
            return true;
        }
        return false;

    };

    RadioField.UpdateValue = function (field, fieldValue) {

        if (Common.IsNotEmptyString(fieldValue)) {
            if (fieldValue.length > 0) {
                var radioField = FindRadioField(field, fieldValue);
                if (Common.IsDefined(radioField)) {
                    radioField.checked = true;
                    if (Common.IsDefined(Common.GetAttr(radioField, 'data-serializable'))) {
                        Common.SetAttr(radioField, 'data-haschanged', 'Yes');
                    }
                    Common.SetAttr(radioField, 'value', fieldValue);
                    GTC.TriggerEvent(radioField, 'widgetUpdateValue');
                }
            }
        }
        else {
            GTC.TriggerEvent(field[0], 'widgetClearValue');
        }
        Events.Trigger(field, 'focusout');

    };

    RadioField.UpdateLabel = function (field, fieldLabel, promises, context) {

        var radioFieldSet = field[0].parentElement.parentElement.parentElement;
        var label = Common.Query('legend', radioFieldSet);
        Label.UpdateLabel(label, fieldLabel, promises, context, Common.IsHidden(radioFieldSet));

    };

    RadioField.ShowPinwheel = function (field) {

        Field.ShowPinwheel(field, 'FadingCircle');

    };

    RadioField.HidePinwheel = function (field) {

        Field.HidePinwheel(field);

    };

    function FindRadioField (field, fieldValue) {

        // Sanity Check
        if (Common.IsNotDefined(field)) {
            return null;
        }

        // Find Radio Field
        var radioField = null;
        var currentRadio, index = 0, length = field.length;
        for ( ; index < length; index++) {
            currentRadio = field[index];
            if (Common.SanitizeToken(currentRadio.value) == Common.SanitizeToken(fieldValue)) {
                radioField = currentRadio;
                break;
            }
        }
        return radioField;

    };

} (window.RadioField = window.RadioField || {}, window, document, Common, Cache, Events, Velocity));
// Radio Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var RadioWidget = {

        // Options
        options: {
            ClassLabelRadioUnselected: 'gtc-classLabelRadioUnselected',
            ClassLabelRadioSelected: 'gtc-input-radio-selected',
            ClassRadioLocked: 'gtc-input-locked'
        },

        // Public Methods
        IsDisabled: function () {

            return GTC.IsControlDisabled(this.element);

        },

        DisableControl: function () {

            this._disableControl();

        },

        EnableControl: function () {

            this._enableControl();

        },

        // Private Methods
        _setLabelStyle: function () {

            var label = this.element.parentNode;
            if (this.element.checked) {
                Common.AddClass(label, this.options.ClassLabelRadioUnselected);
                Common.AddClass(label, this.options.ClassLabelRadioSelected);
                Common.SetAttr(label, 'aria-checked', 'true');
            }
            else {
                Common.AddClass(label, this.options.ClassLabelRadioUnselected);
                Common.RemoveClass(label, this.options.ClassLabelRadioSelected);
                Common.SetAttr(label, 'aria-checked', 'false');
            }

        },

        _bindClick: function () {

            // Initialize
            var thisWidget = this;

            // Click
            Events.On(thisWidget.element, 'click',
                function (event) {
                    var radioGroups = Common.QueryAll('.gtc-input-radio-option[name="' + this.name + '"]');
                    var index = 0, length = radioGroups.length;
                    for ( ; index < length; index++) {
                        Common.RemoveClass(radioGroups[index].parentNode, thisWidget.options.ClassLabelRadioSelected);
                        Common.SetAttr(radioGroups[index].parentNode, 'aria-checked', 'false');
                    }
                    Common.AddClass(this.parentNode, thisWidget.options.ClassLabelRadioSelected);
                    Common.SetAttr(this.parentNode, 'aria-checked', 'true');
                }
            );

            // ClearWidget
            Events.On(thisWidget.element, 'widgetClearValue',
                function (event) {
                    var radioGroups = Common.QueryAll('.gtc-input-radio-option[name="' + this.name + '"]');
                    var index = 0, length = radioGroups.length;
                    for ( ; index < length; index++) {
                        Common.RemoveClass(radioGroups[index].parentNode, thisWidget.options.ClassLabelRadioSelected);
                        Common.SetAttr(radioGroups[index].parentNode, 'aria-checked', 'false');
                        radioGroups[index].checked = false;
                    }
                }
            );

            // UpdateWidget
            Events.On(thisWidget.element, 'widgetUpdateValue',
                function (event) {
                    var radioGroups = Common.QueryAll('.gtc-input-radio-option[name="' + this.name + '"]');
                    var index = 0, length = radioGroups.length;
                    for ( ; index < length; index++) {
                        Common.RemoveClass(radioGroups[index].parentNode, thisWidget.options.ClassLabelRadioSelected);
                        Common.SetAttr(radioGroups[index].parentNode, 'aria-checked', 'false');
                    }
                    Common.AddClass(this.parentNode, thisWidget.options.ClassLabelRadioSelected);
                    Common.SetAttr(this.parentNode, 'aria-checked', 'true');
                }
            );

        },

        _disableControl: function () {

            // Initialize
            var thisWidget = this;

            // Disabled control
            if (!thisWidget.Locked) {
                thisWidget.Locked = true;
                Common.SetAttr(thisWidget.element, 'disabled', 'disabled');
                Common.SetAttr(thisWidget.element, 'data-disabled', 'true');
                var closestGroup = Common.Closest('.gtc-input-radio-group', thisWidget.element);
                Common.AddClass(closestGroup, thisWidget.options.ClassRadioLocked);
                if (Common.IsNotDefined(Common.Query('span.gtc-input-system', closestGroup))) {
                    Common.InsertHTMLString(closestGroup, Common.InsertType.Append, '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
                }
                Common.SetAttr(thisWidget.element, 'tabindex', '-1');
            }

        },

        _enableControl: function () {

            // Initialize
            var thisWidget = this;

            // Enable control
            if (thisWidget.Locked) {
                Common.RemoveAttr(thisWidget.element, 'disabled');
                Common.RemoveAttr(thisWidget.element, 'data-disabled');
                var closestGroup = Common.Closest('.gtc-input-radio-group', thisWidget.element);
                Common.RemoveClass(closestGroup, thisWidget.options.ClassRadioLocked);
                var systemInput = Common.Query('span.gtc-input-system', closestGroup);
                if (Common.IsDefined(systemInput)) {
                    Common.Remove(systemInput);
                }
                Common.SetAttr(thisWidget.element, 'tabindex', thisWidget.FocusIndex);
                thisWidget.Locked = false;
            }

        },

        _init: function () {
        },

        _create: function () {

            this.Locked = false;
            this.FocusIndex = Common.GetAttr(this.element, 'tabindex');

            // Initialize
            this._setLabelStyle();
            this._bindClick();

            // Disabled?
            var dataDisabled = Common.GetAttr(this.element, 'data-disabled');
            if (dataDisabled == 'true') {
                this._disableControl();
            }

        }

    };

    WidgetFactory.Register('gtc.radio', RadioWidget);

} (window, document, Common, Cache, Events, Velocity));
/** 
 * @class DocumentDisplay
 * @classdesc Supports the DocumentDisplay View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
 (function (DocumentDisplay, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function DocumentDisplay.Render
     * @param {object} documentDisplay - The DocumentDisplay View Element in JSON format
     * @description Generates the HTML markup for the DocumentDisplay View Element 
     * @returns {string} HTML Markup of the DocumentDisplay View Element
     * @listens configuredocumentdisplay (id = <var>documentDisplayName</var>)
     * @listens click (id = <var>documentDisplayName</var>Maximize)
     */
    DocumentDisplay.Render = function (documentDisplay) {

        // Div<, Data-NameSpace@, TabIndex@, Class@, Id@, @Data-Height, Div>
        var documentDisplayMarkup = '<div class="gtc-documentdisplay" data-namespace="DocumentDisplay" data-configure="Pre"' + ViewElement.RenderAttributes(documentDisplay);
        var groupDocsMarkup = '<div class="gtc-documentdisplay-container" id="' + documentDisplay.Name + 'GroupDocs"';
        if (Common.IsDefined(documentDisplay.FileName)) {
            groupDocsMarkup += ' data-currentfile="' + documentDisplay.FileName + '"';
        }

        // Dimension styles
        var stylesMarkup = '';
        if (Common.IsDefined(documentDisplay.Dimension)) {
            // Height
            if (Common.IsDefined(documentDisplay.Dimension.Height)) {
                documentDisplayMarkup += ' data-height="' + documentDisplay.Dimension.Height + documentDisplay.Dimension.Scale + '"';
                stylesMarkup += 'height:' + documentDisplay.Dimension.Height + documentDisplay.Dimension.Scale + ';';
            }

            // Width
            if (Common.IsDefined(documentDisplay.Dimension.Width)) {
                documentDisplayMarkup += ' data-width="' + documentDisplay.Dimension.Width + documentDisplay.Dimension.Scale + '"';
                stylesMarkup += 'width:' + documentDisplay.Dimension.Width + documentDisplay.Dimension.Scale + ';';
            }

            // Add style attribute
            if (Common.IsNotEmptyString(stylesMarkup)) {
                stylesMarkup = ' style="' + stylesMarkup + '"';
            }
        }

        // Setup configuration
        if (!Common.IsPreview()) {
            Events.On(document.body, 'configuredocumentdisplay.' + documentDisplay.Name, '#' + documentDisplay.Name,
                function () {
                    // Show pinwheel
                    var that = this;
                    Common.ShowPinwheel(that);

                    // Get host and port
                    var url = window.location.protocol + '//' + window.location.hostname;
                    var port = window.location.port;
                    if (Common.IsDefined(port) && Common.IsNotEmptyString(port)) {
                        url += ':' + port;
                    }
                    url += '/';

                    // Build inserts that don't matter when they complete loading
                    var insertsMarkup = '<link rel="stylesheet" type="text/css" href="' + url + 'document-viewer/CSS/GetCss?name=bootstrap.css">';
                    insertsMarkup += '<link rel="stylesheet" type="text/css" href="' + url + 'document-viewer/CSS/GetCss?name=GroupdocsViewer.all.min.css">';
                    insertsMarkup += '<link rel="stylesheet" type="text/css" href="' + url + 'document-viewer/CSS/GetCss?name=jquery-ui-1.10.3.dialog.min.css">';
                    Common.InsertHTMLString(document.body, Common.InsertType.Append, insertsMarkup);

                    // Define function to complete initialization after scripts load
                    var completeInit = function () {

                        // Initialize GroupDocs
                        var isModal = Common.IsModal();
                        var showDownload = (documentDisplay.ShowDownloadButton == 'Yes') ? true : false;
                        var showPrint = (documentDisplay.ShowPrintButton == 'Yes') ? true : false;
                        var fileExists = Common.IsDefined(documentDisplay.FileName);
                        var $groupDocs = $(Common.Get(documentDisplay.Name + 'GroupDocs'));
                        var localizedStrings = null;
                        var thumbsImageBase64Encoded = null;
                        var calculatedHeight = 0;
                        var calculatedWidth = 0;
                        var fileDisplayName = documentDisplay.FileDisplayName;
                        if (Common.IsDefined(documentDisplay.Dimension)) {
                            // Height
                            if (Common.IsDefined(documentDisplay.Dimension.Height)) {
                                calculatedHeight = documentDisplay.Dimension.Height;
                            }
                            else if (isModal) {
                                calculatedHeight = Common.Height(parent.window);
                            }

                            // Width
                            if (Common.IsDefined(documentDisplay.Dimension.Width)) {
                                calculatedWidth = documentDisplay.Dimension.Width;
                            }
                            else if (isModal) {
                                calculatedWidth = '100%';
                            }
                        }
                        else if (isModal) {
                            calculatedHeight = Common.Height(parent.window);
                            calculatedWidth = '100%';
                        }
                        $groupDocs.groupdocsViewer({
                            backgroundColor: null,
                            convertWordDocumentsCompletely: false,
                            currentSearchHighlightColor: null,
                            downloadPdfFile: false,
                            enableStandardErrorHandling: true,
                            fileDisplayName: fileDisplayName,
                            filePath: documentDisplay.FileName,
                            height: calculatedHeight,
                            ignoreDocumentAbsence: true,
                            initialZoom: 100,
                            jqueryFileDownloadCookieName: 'jqueryFileDownloadJSForGD',
                            loadAllPagesOnSearch: false,
                            localizedStrings: localizedStrings,
                            minimumImageWidth: 0,
                            onlyShrinkLargePages: false,
                            openThumbnails: false,
                            preloadPagesCount: 1,
                            preloadPagesOnBrowserSide: true,
                            preventTouchEventsBubbling: false,
                            printWithWatermark: false,
                            quality: 100,
                            searchForSeparateWords: false,
                            searchHighlightColor: null,
                            showDownload: showDownload,
                            showDownloadErrorsInPopup: false,
                            showFolderBrowser: false,
                            showHeader: true,
                            showImageWidth: false,
                            showOnePageInRow: false,
                            showPaging: true,
                            showPrint: showPrint,
                            showSearch: true,
                            showThumbnails: true,
                            showViewerStyleControl: false,
                            showZoom: true,
                            supportPageReordering: false,
                            supportPageRotation: true,
                            supportTextSelection: true,
                            thumbnailsContainerBackgroundColor: null,
                            thumbnailsContainerBorderRightColor: null,
                            thumbnailsContainerWidth: 0,
                            thumbsImageBase64Encoded: thumbsImageBase64Encoded,
                            toolbarBorderBottomColor: null,
                            toolbarButtonBorderColor: null,
                            toolbarButtonBorderHoverColor: null,
                            toolbarButtonsBoxShadowHoverStyle: null,
                            toolbarButtonsBoxShadowStyle: null,
                            toolbarInputFieldBorderColor: null,
                            treatPhrasesInDoubleQuotesAsExactPhrases: false,
                            useEmScaling: false,
                            useHtmlBasedEngine: false,
                            useHtmlThumbnails: false,
                            useImageBasedPrinting: true,
                            useInnerThumbnails: false,
                            usePdfPrinting: false,
                            usePngImagesForHtmlBasedEngine: false,
                            useRtl: false,
                            viewerStyle: 1,
                            watermarkColor: null,
                            watermarkFontSize: 0,
                            watermarkPosition: 'Diagonal',
                            watermarkText: null,
                            width: calculatedWidth,
                            zoomToFitHeight: false,
                            zoomToFitWidth: true
                        });

                        // Make responsive and cleanup file
                        $groupDocs.groupdocsViewer('on', 'documentLoadCompleted.groupdocs',
                            function () {
                                fileExists = true;
                                if (!isModal) {
                                    UpdateDimensions($groupDocs, fileExists);
                                }

                                // Remove pinwheel
                                Common.HidePinwheel(that);

                                // Modal size correct?
                                if (isModal) {
                                    Common.ResizeView(true);
                                }
                            }
                        );
                        if (!isModal) {
                            var onResizeEndFunction = function (event) {
                                UpdateDimensions($groupDocs, fileExists);
                            };
                            Common.AttachWindowResizingEvent(onResizeEndFunction, 'onDocumentDisplayResize');
                        }
                        window.onunload = function () {
                            // Cleanup the last file we loaded
                            var currentFile = Common.GetAttr($groupDocs[0], 'data-currentfile');
                            if (Common.IsDefined(currentFile)) {
                                CleanupFile(currentFile);
                            }
                        };

                        // Setup full screen toggle
                        var toolbar = Common.Query('[name=printAndDownloadToolbar]', $groupDocs[0]);
                        if (!showDownload && !showPrint) {
                            toolbar.style.display = 'block';
                        }
                        var fullscreenLink = Common.InsertHTMLString(toolbar, Common.InsertType.Append, '<a id="' + documentDisplay.Name + 'Maximize" class="new_head_tools_btn h_t_i_fullscreen fullscreen_button" id="mystyle" data-tooltip="Full Screen" data-localize-tooltip="Full Screen"><i class="gtc-icon-styles fa fa-arrows-alt"  style="color: white; margin: 7px 8px;"></i></a>', documentDisplay.Name + 'Maximize');
                        Events.On(fullscreenLink, 'click',
                            function () {
                                if (Common.HasClass(that, 'gtc-documentdisplay-fullscreen')) {
                                    Common.RemoveClass(that, 'gtc-documentdisplay-fullscreen');
                                    if (isModal) {
                                        Common.RemoveClass(Common.Query('.gtc-modal-iframe', null, true), 'gtc-modal-fullscreen');
                                    }
                                    if (!isModal) {
                                        UpdateDimensions($groupDocs, fileExists);
                                    }
                                    else {
                                        if (fileExists) {
                                            $groupDocs.groupdocsViewer('setZoom', 100);
                                        }
                                    }
                                }
                                else {
                                    Common.AddClass(that, 'gtc-documentdisplay-fullscreen');
                                    if (isModal) {
                                        Common.AddClass(Common.Query('.gtc-modal-iframe', null, true), 'gtc-modal-fullscreen');
                                    }
                                    if (fileExists) {
                                        var newZoom = Common.Width(window) * 100 / 950;
                                        $groupDocs.groupdocsViewer('setZoom', newZoom);
                                    }
                                }
                            }
                        );

                        // Handle removing pinwheel an resizing if no file was initially loaded
                        if (Common.IsNotDefined(documentDisplay.FileName)) {
                            if (!isModal) {
                                UpdateDimensions($groupDocs, fileExists);
                            }

                            // Remove pinwheel
                            Common.HidePinwheel(that);

                            // Modal size correct?
                            if (isModal) {
                                Common.ResizeView(true);
                            }
                        }

                    };

                    // Load scripts asynch in specific order with promises
                    InjectScript(url + 'document-viewer/GetScript?name=libs/jquery-1.9.1.min.js').then(
                        function () {
                            return InjectScript(url + 'document-viewer/GetScript?name=libs/jquery-ui-1.10.3.min.js');
                        }
                    ).then(
                        function () {
                            return InjectScript(url + 'document-viewer/GetScript?name=libs/knockout-3.2.0.js');
                        }
                    ).then(
                        function () {
                            return InjectScript(url + 'document-viewer/GetScript?name=libs/turn.min.js');
                        }
                    ).then(
                        function () {
                            return InjectScript(url + 'document-viewer/GetScript?name=libs/modernizr.2.6.2.Transform2d.min.js');
                        }
                    ).then(
                        function () {
                            InjectScript(url + 'document-viewer/GetScript?name=installableViewer.min.js').then(
                                function () {
                                    $.ui.groupdocsViewer.prototype.applicationPath = url;
                                    $.ui.groupdocsViewer.prototype.useHttpHandlers = false;
                                    InjectScript(url + 'document-viewer/GetScript?name=GroupdocsViewer.all.min.js').then(
                                        function () {
                                            completeInit();
                                        }
                                    );
                                }
                            );
                        }
                    );
                }
            );
        }

        // Div</>
        documentDisplayMarkup += '>';

        // Override some odd third party CSS that was causing issues
        documentDisplayMarkup += '<style>.gtc-documentdisplay-container .grpdx .input_search{width:160px;height:30px}.gtc-documentdisplay-container .grpdx .new_head_input{margin:10px 3px}</style>';

        // Div</>, Div</>, Div</>
        documentDisplayMarkup += groupDocsMarkup + stylesMarkup + '></div></div>';
        return documentDisplayMarkup;

    };

    /**
     * @function DocumentDisplay.Configure
     * @param {object} documentDisplay - The DocumentDisplay DOM element
     * @param {string} configureStage - Pre for Configuration before Translations or Post for Configuration after Translations
     * @description Called by Page.Configure after the dynamic HTML markup is added to the DOM
     * @fires configuredocumentdisplay (DocumentDisplay)
     */
    DocumentDisplay.Configure = function (documentDisplay, configureStage) {

        Events.Trigger(documentDisplay, 'configuredocumentdisplay');

    };

    /**
     * @function Column.UpdateValue
     * @param {object} documentDisplay - The DocumentDisplay DOM element
     * @param {string} fileName - The new file to display
     * @description Displayed a new file
     */
    DocumentDisplay.UpdateValue = function (documentDisplay, fileName) {

        Common.ShowPinwheel(documentDisplay);
        var groupDocs = Common.Get(documentDisplay.id + 'GroupDocs');
        var currentFile = Common.GetAttr(groupDocs, 'data-currentfile');
        $(groupDocs).groupdocsViewer('loadDocument', fileName);
        Common.SetAttr(groupDocs, 'data-currentfile', fileName);
        if (Common.IsDefined(currentFile)) {
            CleanupFile(currentFile);
        }
        Common.HidePinwheel(documentDisplay);

    };

    /**
     * @function DocumentDisplay.ShowPinwheel
     * @param {object} button - The DocumentDisplay DOM element
     * @description Shows Pinwheel on the View Element
     */
    DocumentDisplay.ShowPinwheel = function (documentDisplay) {

        Common.InsertHTMLString(document.body, Common.InsertType.Append, '<div class="gtc-pinwheel-overlay gtc-pinwheel-overlay-transparent" id="' + documentDisplay.id + 'PinwheelOverlay"></div>');
        SpinKit.Show(documentDisplay, 'FadingCircle');

    };

    /**
     * @function DocumentDisplay.HidePinwheel
     * @param {object} button - The DocumentDisplay DOM element
     * @description Hides Pinwheel on the View Element
     */
    DocumentDisplay.HidePinwheel = function (documentDisplay) {

        setTimeout(
            function () {
                SpinKit.Hide(documentDisplay);
                var pinwheelOverlay = Common.Get(documentDisplay.id + 'PinwheelOverlay');
                if (Common.IsDefined(pinwheelOverlay)) {
                    Common.Remove(pinwheelOverlay);
                }
            }, 600
        );

    };

    // Private Methods
    function InjectScript (url) {

        // Load a script and return a promise that resolves when script loaded
        var loadedPromise = Common.Promise();
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.onload = function(){
            loadedPromise.resolve();
        };
        script.src = url;
        document.body.appendChild(script);
        return loadedPromise.promise;

    };

    function CleanupFile (fileName) {

        var cleanupDocumentParameters = {
            fileName: fileName
        };

        // Make ajax request
        var requestObject = new XMLHttpRequest();
        requestObject.open('POST', '/File/RemoveDocumentFile', true);
        requestObject.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        requestObject.onload = function () {
            if (this.status >= 200 && this.status < 400) {
                // Success!
            }
            else {
                Common.RequestErrorHandler(this, null, true);
            }
        };
        requestObject.onerror = function () {
            Common.RequestErrorHandler(this, null, true);
        };
        requestObject.send(JSON.stringify(cleanupDocumentParameters));

    };

    function UpdateDimensions ($groupDocs, fileExists) {

        var content = Common.Closest('#PageMainContent', $groupDocs[0]);
        if (Common.IsNotDefined(content)) {
            content = window;
        }
        var paddingLeft = parseFloat(Common.GetStyle(content, 'paddingLeft'));
        var paddingRight = parseFloat(Common.GetStyle(content, 'paddingRight'));
        var newWidth = Common.Width(content);
        if (Common.IsNumeric(paddingLeft)) {
            newWidth = newWidth - paddingLeft;
        }
        if (Common.IsNumeric(paddingRight)) {
            newWidth = newWidth - paddingRight;
        }
        var newHeight = Common.Height(content);
        $groupDocs.groupdocsViewer('setWidth', newWidth);
        if (fileExists) {
            var newZoom = newWidth * 60 / 950;
            $groupDocs.groupdocsViewer('setZoom', newZoom);
        }
        $groupDocs.groupdocsViewer('setHeight', newHeight);

    };

} (window.DocumentDisplay = window.DocumentDisplay || {}, window, document, Common, Cache, Events, Velocity));
// Switch Field
// Based On: SwitchField -> ValueField -> Field -> ViewElement
(function (SwitchField, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    SwitchField.Render = function (switchField) {

        // Label Exists (needed for Icon rendering)
        var labelExists = true;
        if (Common.IsNotDefined(switchField.Label)) {
            labelExists = false;
        }

        // Label
        var switchFieldMarkup = Field.RenderLabel(switchField);

        // Div<, @Id, @Class, @Data-Namespace
        switchFieldMarkup += '<div id="' + switchField.Name + '-Container" class="gtc-switchbox';
        if (Common.IsDefined(switchField.Icon)) {
            if (labelExists == false) {
                switchFieldMarkup += ' gtc-input__icon-left';
            }
            else {
                switchFieldMarkup += ' gtc-input__icon-label-left';
            }
        }

        // Display Text?
        switchFieldMarkup += '" data-ontext="'
        switchFieldMarkup += (Common.IsDefined(switchField.OnText)) ? switchField.OnText : '';
        switchFieldMarkup += '" data-offtext="'
        switchFieldMarkup += (Common.IsDefined(switchField.OffText)) ? switchField.OffText : '';
        switchFieldMarkup += '">'

        // Label<>, input<, Data-CheckboxGroup@, Name@, Value@, TabIndex@, Class@, Id@
        switchFieldMarkup += '<label class="gtc-switchbox-label" for="' + switchField.Name + '"><input data-namespace="SwitchField" data-configure="Pre" data-checkboxgroup="' + switchField.Name + '" name="' + switchField.Name + '" tabindex="' + switchField.FocusIndex + '" class="gtc-input-switchbox" id="' + switchField.Name + '"';

        // Data-ControllerPath/ActionName@, Wire OnChange!
        if (Common.IsEventViewElementDefined(switchField.OnChange)) {
            switchFieldMarkup += Field.AttachOnChange(switchField, SwitchField.OnChange);
        }

        // 508 Compliance
        if (switchField.IsRequired == 'Yes') {
            switchFieldMarkup += ' aria-required="true"';
        }

        // Checked@
        if (switchField.Value == 'Yes') {
            switchFieldMarkup += ' checked="checked" value="Yes"';
        }

        // @Data-Serializable
        if (switchField.IsSerializable == 'Yes') {
            switchFieldMarkup += ' data-serializable';
            Events.On(document.body, 'change.fieldvaluechange.' + switchField.Name, '#' + switchField.Name,
                function () {
                    Common.SetAttr(this, 'data-haschanged', 'Yes');
                }
            );
        }

        // Data-Disabled@
        switchFieldMarkup += Field.RenderAttributes(switchField);

        // @Data-FieldType, Type@, Input>, Label</>, Div</>
        switchFieldMarkup += ' type="checkbox" /></label></div>';

        // Icon
        if (Common.IsDefined(switchField.Icon)) {
            switchFieldMarkup += Icon.Render(switchField.Icon, true, labelExists);
        }
        return switchFieldMarkup;

    };

    SwitchField.Configure = function (field, configureStage) {

        Widgets.switchbox(field, { OnText: 'Yes', OffText: 'No' });

    };

    SwitchField.OnChange = function (event) {

        // Remove Prefix_
        var fieldParameterName = Common.RemovePrefix(this.name);

        // Field Value
        var yesNoValue = 'No';
        if (this.checked == true) {
            yesNoValue = 'Yes';
        }
        var fieldValueUiParameter = [
            {
                Name: fieldParameterName,
                Value: yesNoValue,
                UiParameters: null
            }
        ];

        // Call OnChange
        Field.OnChange(this, fieldValueUiParameter);

    };

    SwitchField.HasValue = function (switchField) {

        return true;

    };

    SwitchField.IsCompleted = function (field) {

        return true;

    };

    SwitchField.UpdateValue = function (field, fieldValue) {

        var switchChecked = false;
        if (fieldValue == 'Yes') {
            switchChecked = true;
        }
        if (Common.IsDefined(Common.GetAttr(field, 'data-serializable'))) {
            Common.SetAttr(field, 'data-haschanged', 'Yes');
        }
        field.checked = switchChecked;
        Widgets.switchbox(field, 'FlipSwitch', switchChecked);

    };

    SwitchField.UpdateLabel = function (field, fieldLabel, promises, context) {

        Field.UpdateLabel(field, fieldLabel, promises, context);

    };

    SwitchField.ShowPinwheel = function (field) {

        Field.ShowPinwheel(field, 'FadingCircle');

    };

    SwitchField.HidePinwheel = function (field) {

        Field.HidePinwheel(field);

    };

} (window.SwitchField = window.SwitchField || {}, window, document, Common, Cache, Events, Velocity));
// Switchbox Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var SwitchboxWidget = {

        // Options
        options: {
            OnText: 'YES',
            OffText: 'NO',
            Type: 'Default',
            ClassSwitchboxLocked: 'gtc-input-locked'
        },

        // Public Methods
        IsDisabled: function () {

            return GTC.IsControlDisabled(this.element);

        },

        DisableControl: function () {

            this._disableControl();

        },

        EnableControl: function () {

            this._enableControl();

        },

        UpdateControl: function () {

            var isChecked = this.element.checked;
            if (isChecked == true && !this.SwitchOn) {
                this._switchOn();
            }
            else if (isChecked != true && this.SwitchOn) {
                this._switchOff();
            }

        },

        FlipSwitch: function (flipOn) {

            if (flipOn == true && this.SwitchOn == false) {
                this._switchOn();
            }
            else if (flipOn == false && this.SwitchOn == true) {
                this._switchOff();
            }

        },

        // Private Methods
        _destroy: function () {

            // Initialize
            var thisWidget = this;

            // Unbind events
            var focusElementsId = '#' + htmlInputId + '-SwitchContainer';
            if (thisWidget.options.Type == 'SwitchMask') {
                focusElementsId += ', #' + htmlInputId + 'Text';
            }
            var focusElements = Common.QueryAll(focusElementsId);
            Events.Off(focusElements, 'focusin');
            Events.Off(focusElements, 'focusout');

            // Remove generated html
            Common.Remove(Common.GetAllSibling(thisWidget.element, '.gtc-switch'));

        },

        _createSwitchbox: function () {

            // Intialize
            var thisWidget = this;
            var htmlInputId = thisWidget.element.id;
            var elementStyle = thisWidget.element.style;
            elementStyle.left = '-9999px';
            elementStyle.position = 'absolute';
            if (thisWidget.element.checked) {
                thisWidget.SwitchOn = true;
            }
            else {
                thisWidget.SwitchOn = false;
            }

            // Switchbox Markup
            var spanSwitchMarkup = '<span role="checkbox" aria-checked="' + thisWidget.SwitchOn + '" id="' + htmlInputId + '-SwitchContainer" class="gtc-switch" tabindex="' + thisWidget.FocusIndex + '">';
            spanSwitchMarkup += '<span class="gtc-switch-value" data-translate="' + thisWidget.options.OffText + '">' + Common.TranslateKey(thisWidget.options.OffText) + '</span>';
            spanSwitchMarkup += '<span class="gtc-switch-track">';
            spanSwitchMarkup += '<span id="' + htmlInputId + '-SwitchButton" class="gtc-switch-button"></span>';
            spanSwitchMarkup += '</span>';
            spanSwitchMarkup += '<span class="gtc-switch-value" data-translate="' + thisWidget.options.OnText + '">' + Common.TranslateKey(thisWidget.options.OnText) + '</span>';
            spanSwitchMarkup += '</span>';

            // Insert HTML
            Common.InsertHTMLString(thisWidget.element, Common.InsertType.After, spanSwitchMarkup);

        },

        _bindAnchorFocus: function () {

            // Initialize
            var thisWidget = this;
            var htmlInputId = thisWidget.element.id;
            var focusElementsId = '#' + htmlInputId + '-SwitchContainer';
            if (thisWidget.options.Type == 'SwitchMask') {
                focusElementsId += ', #' + htmlInputId + 'Text';
            }
            var focusElements = Common.QueryAll(focusElementsId);

            // Focus In
            Events.On(focusElements, 'focusin',
                function (event) {
                    if (thisWidget.Focused != true) {
                        if (thisWidget.options.Type == 'SwitchMask') {
                            Common.AddClass(Common.Query('.gtc-label[for="' + htmlInputId + '"]'), 'gtc-label-focused');
                        }
                        else {
                            Events.Trigger(thisWidget.element, 'focusin');
                        }
                        Events.Off(document, 'keydown.switchboxKeyboardClicks');
                        Events.On(document, 'keydown.switchboxKeyboardClicks.' + thisWidget.element.id,
                            function (event) {
                                switch (event.keyCode) {
                                    case GTC.Keyboard.Enter:
                                    case GTC.Keyboard.Space:
                                        Events.Trigger(thisWidget.element, 'click');
                                        break;
                                }
                            }
                        );
                        thisWidget.Focused = true;
                    }
                }
            );

            // Focus Out
            Events.On(focusElements, 'focusout',
                function (event) {
                    if (thisWidget.options.Type == 'SwitchMask') {
                        Common.RemoveClass(Common.Query('.gtc-label[for="' + htmlInputId + '"]'), 'gtc-label-focused');
                    }
                    else {
                        Events.Trigger(thisWidget.element, 'focusout');
                    }
                    Events.Off(document, 'keydown.switchboxKeyboardClicks');
                    thisWidget.Focused = false;
                }
            );

        },

        _switchOn: function () {

            // Initialize
            var thisWidget = this;
            var htmlInputId = thisWidget.element.id;

            if (thisWidget.options.Type == 'SwitchMask') {
                // Position, Placeholder, ParameterName, CurrencyCode(?) and Mask Options
                thisWidget.element.value = 'Right';
                var switchMaskOptions = JSON.parse(Common.GetAttr(Common.Closest('.gtc-switchmask', thisWidget.element), 'data-switchmask'));
                var switchMaskTextFieldName = switchMaskOptions.Name + 'Text';
                var textField = Common.Get(switchMaskTextFieldName);
                textField.value = '';
                Common.SetAttr(textField, 'placeholder', Common.TranslateKey(switchMaskOptions.RightSwitch.Placeholder));
                Common.SetAttr(textField, 'data-translate', '[placeholder]' + switchMaskOptions.RightSwitch.Placeholder);
                Common.SetAttr(textField, 'data-parametername', switchMaskOptions.RightSwitch.Name);
                Common.RemoveAttr(textField, 'data-currencycode');
                if (switchMaskOptions.RightSwitch.IsCurrency == 'Yes') {
                    Common.SetAttr(textField, 'data-currencycode', switchMaskOptions.RightSwitch.Code);
                }
                var hasMask = Common.IsDefined(switchMaskOptions.RightSwitch.Mask);
                if (hasMask) {
                    var maskingOptions = Mask.BuildMaskingOptions(switchMaskOptions.RightSwitch.Mask);
                    Common.SetAttr(textField, 'data-mask', JSON.stringify(maskingOptions));
                    setTimeout(
                        function () {
                            textField.focus();
                        }, 10
                    );
                }
            }
            Common.SetAttr(Common.Get(htmlInputId + '-SwitchContainer'), 'aria-checked', 'true');
            thisWidget.SwitchOn = true;

        },

        _switchOff: function () {

            // Initialize
            var thisWidget = this;
            var htmlInputId = thisWidget.element.id;

            if (thisWidget.options.Type == 'SwitchMask') {
                // Position, Placeholder, ParameterName, CurrencyCode(?) and Mask Options
                thisWidget.element.value = 'Left';
                var switchMaskOptions = JSON.parse(Common.GetAttr(Common.Closest('.gtc-switchmask', thisWidget.element), 'data-switchmask'));
                var switchMaskTextFieldName = switchMaskOptions.Name + 'Text';
                var textField = Common.Get(switchMaskTextFieldName);
                textField.value = '';
                Common.SetAttr(textField, 'placeholder', Common.TranslateKey(switchMaskOptions.LeftSwitch.Placeholder));
                Common.SetAttr(textField, 'data-translate', '[placeholder]' + switchMaskOptions.LeftSwitch.Placeholder);
                Common.SetAttr(textField, 'data-parametername', switchMaskOptions.LeftSwitch.Name);
                Common.RemoveAttr(textField, 'data-currencycode');
                if (switchMaskOptions.LeftSwitch.IsCurrency == 'Yes') {
                    Common.SetAttr(textField, 'data-currencycode', switchMaskOptions.LeftSwitch.Code);
                }
                var hasMask = Common.IsDefined(switchMaskOptions.LeftSwitch.Mask);
                if (hasMask) {
                    var maskingOptions = Mask.BuildMaskingOptions(switchMaskOptions.LeftSwitch.Mask);
                    Common.SetAttr(textField, 'data-mask', JSON.stringify(maskingOptions));
                    setTimeout(
                        function(){
                            textField.focus();
                        }, 10
                    );
                }
            }
            Common.SetAttr(Common.Get(htmlInputId + '-SwitchContainer'), 'aria-checked', 'false');
            thisWidget.SwitchOn = false;

        },

        _bindElementChange: function () {

            // Initialize
            var thisWidget = this;

            // Bind change event
            Events.On(thisWidget.element, 'change.updateSwitchBox',
                function () {
                    if (this.checked) {
                        thisWidget._switchOn();
                    }
                    else {
                        thisWidget._switchOff();
                    }
                }
            );

        },

        _disableControl: function () {

            // Initialize
            var thisWidget = this;

            // Disable
            if (!this.Locked) {
                this.Locked = true;
                Common.SetAttr(thisWidget.element, 'disabled', 'disabled');
                Common.SetAttr(thisWidget.element, 'data-disabled', 'true');
                if (thisWidget.options.Type != 'SwitchMask') {
                    var switchbox = Common.Closest('.gtc-switchbox', thisWidget.element);
                    Common.AddClass(switchbox, thisWidget.options.ClassSwitchboxLocked);
                    Common.InsertHTMLString(switchbox, Common.InsertType.After, '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
                }
                else if (thisWidget.options.Type == 'SwitchMask') {
                    var closestSwitchMask = Common.Closest('.gtc-switchmask', thisWidget.element);
                    Common.AddClass(closestSwitchMask, thisWidget.options.ClassSwitchboxLocked);
                    var textField = Common.Query('.gtc-switchmask-text', closestSwitchMask);
                    if (!Common.HasClass(textField, 'gtc-input-locked')) {
                        Widgets.textbox(textField, 'DisableControl');
                    }
                }
            }

        },

        _enableControl: function () {

            // Initialize
            var thisWidget = this;

            // Enable
            if (this.Locked) {
                Common.RemoveAttr(thisWidget.element, 'disabled');
                Common.RemoveAttr(thisWidget.element, 'data-disabled');
                if (thisWidget.options.Type != 'SwitchMask') {
                    var switchbox = Common.Closest('.gtc-switchbox', thisWidget.element);
                    Common.RemoveClass(switchbox, thisWidget.options.ClassSwitchboxLocked);
                    Common.Remove(Common.GetSibling(switchbox, Common.SiblingType.Next));
                }
                else if (thisWidget.options.Type == 'SwitchMask') {
                    var switchMask = Common.Closest('.gtc-switchmask', thisWidget.element);
                    Common.RemoveClass(switchMask, thisWidget.options.ClassSwitchboxLocked);
                    var textField = Common.Query('.gtc-switchmask-text', switchMask);
                    if (Common.HasClass(textField, 'gtc-input-locked')) {
                        Widgets.textbox(textField, 'EnableControl');
                    }
                }
                this.Locked = false;
            }

        },

        _init: function () {
        },

        _create: function () {

            // Data
            Common.SetAttr(this.element, 'data-widgetinitialized', 'true');
            this.Locked = false;
            this.Focused = false;
            this.SwitchOn = false;
            this.FocusIndex = Common.GetAttr(this.element, 'tabindex');
            Common.SetAttr(this.element, 'tabindex', '-1');

            // Display Text
            var parentDiv = Common.Closest('.gtc-switchbox', this.element);
            if (Common.IsDefined(parentDiv)) {
                this.options.OnText = Common.GetAttr(parentDiv, 'data-ontext') || '';
                this.options.OffText = Common.GetAttr(parentDiv, 'data-offtext') || '';
            }
            else {
                if (Common.IsNotDefined(this.options.OnText)) {
                    this.options.OnText = 'Yes';
                }
                if (Common.IsNotDefined(this.options.OffText)) {
                    this.options.OffText = 'No';
                }
            }

            // Initialize
            this._createSwitchbox();
            this._bindElementChange();
            this._bindAnchorFocus();

            // Check if field is disabled
            var dataDisabled = Common.GetAttr(this.element, 'data-disabled');
            if (dataDisabled == 'true') {
                this._disableControl();
            }

        }

    };

    WidgetFactory.Register('gtc.switchbox', SwitchboxWidget);

} (window, document, Common, Cache, Events, Velocity));
// Tree
// Based On: Tree -> ViewElement
(function (Tree, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Tree.Render = function (dataTree, inTreePanel) {

        var treeNamespace = window[dataTree.TreeType.toString() + 'Tree'];
        return treeNamespace.Render(dataTree, inTreePanel);

    };

    Tree.Configure = function (tree, configureStage) {

        if (tree.dataset.treetype == 'Space') {
            SpaceTree.ShowTrees(tree);
        }
        else if (tree.dataset.treetype == 'Accordion') {
            Widgets.accordiontree(tree);
        }
    };

    Tree.ReplaceElement = function (tree, viewElements, promises, context) {

        var treeNamespace = window[Common.GetAttr(tree, 'data-treetype') + 'Tree'];
        treeNamespace.ReplaceElement(tree, viewElements, promises, context);

    };

    Tree.UpdateTitle = function (tree, updatedTitle, promises, context) {

        // Get deferred object for animation
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Find title
        var onParent = context == 'Parent';
        var title = Common.Get(tree.id + 'Title', onParent);

        // Define our update function
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(updatedTitle);
            Common.SetAttr(title, 'data-translate', updatedTitle);
        };

        // If title doesnt exist, create one
        if (Common.IsNotDefined(title)) {
            var className = 'gtc-tree-title ';
            var treeNamespace = window[Common.GetAttr(tree, 'data-treetype') + 'Tree'];
            if (treeNamespace == 'AccordionTree') {
                className = 'gtc-accordiontree-title ';
            }
            var titleHtml = '<h2 id="' + tree.id + 'Title" style="display: none;" class="' + className + 'gtc-page-theme-color" data-translate="' + updatedTitle + '">' + Common.TranslateKey(updatedTitle) + '</h2>';
            title = Common.InsertHTMLString(tree, Common.InsertType.Prepend, titleHtml, tree.id + 'Title');
            Common.Slide(title, 'show', 'left', 'slow');
        }
        else if (Common.IsHidden(tree)) {
            updateTitleFunction();
        }
        else {
            // Animate
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    Tree.UpdateValues = function (tree, uiParameters) {

        var treeNamespace = window[Common.GetAttr(tree, 'data-treetype') + 'Tree'];
        treeNamespace.UpdateValues(tree, uiParameters);

    };

    Tree.UpdateColor = function (tree, uiParameters) {

        var treeNamespace = window[Common.GetAttr(tree, 'data-treetype') + 'Tree'];
        treeNamespace.UpdateColor(tree, uiParameters);

    };

    Tree.UpdateTooltip = function (tree, uiParameters) {

        var treeNamespace = window[Common.GetAttr(tree, 'data-treetype') + 'Tree'];
        treeNamespace.UpdateTooltip(tree, uiParameters);

    };

    Tree.AppendContent = function (tree, viewElements, promises, context) {

        var treeNamespace = window[Common.GetAttr(tree, 'data-treetype') + 'Tree'];
        treeNamespace.AppendContent(tree, viewElements, promises, context);

    };

    Tree.RemoveContent = function (tree, viewElements, promises, context) {

        var treeNamespace = window[Common.GetAttr(tree, 'data-treetype') + 'Tree'];
        treeNamespace.RemoveContent(tree, viewElements, promises, context);

    };

    Tree.ShowPinwheel = function (tree) {

        Common.InsertHTMLString(document.body, Common.InsertType.Append, '<div class="gtc-pinwheel-overlay gtc-pinwheel-overlay-transparent" id="TreePinwheelOverlay"></div>');
        SpinKit.Show(tree, 'FadingCircle');

    };

    Tree.HidePinwheel = function (tree) {

        setTimeout(
            function () {
                SpinKit.Hide(tree);
                Common.Remove(Common.Get('TreePinwheelOverlay'));
            }, 600
        );

    };

} (window.Tree = window.Tree || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class AccordionTree
 * @classdesc Supports the AccordionTree View Element<br>
 *            Based On: ViewElement > Tree
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (AccordionTree, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function AccordionTree.Render
     * @param {object} accordionTree - The AccordionTree View Element in JSON format
     * @param {boolean} inTreePanel - Is the Tree in a TreePanel?
     * @description Generates the HTML markup for the AccordionTree View Element 
     * @returns {string} HTML Markup of the AccordionTree View Element
     */
    AccordionTree.Render = function (accordionTree, inTreePanel) {

        var accordionTreeMarkup = '';
        var inTreePanelAttribute = '';
        if (inTreePanel == true) {
            inTreePanelAttribute = ' data-intreepanel="true"';
        }

        // Dimension
        var dimensionClass = '';
        var dimensionData = '';
        if (Common.IsDefined(accordionTree.Dimension) && Common.IsOneDefined([accordionTree.Dimension.Height, accordionTree.Dimension.Width])) {
            dimensionClass = 'gtc-tree-' + accordionTree.Name.toLowerCase();
            accordionTreeMarkup += '<style>.' + dimensionClass + ' {';
            if (Common.IsDefined(accordionTree.Dimension.Height)) {
                accordionTreeMarkup += 'height:' + accordionTree.Dimension.Height + accordionTree.Dimension.Scale + ';';
                dimensionData += ' data-height="' + accordionTree.Dimension.Height + accordionTree.Dimension.Scale + '"';
            }
            accordionTreeMarkup += 'width:100%;}</style>';
            dimensionData += ' data-width="100%"';
            dimensionClass = ' ' + dimensionClass;
        }

        // Div<, TabIndex@, Class@, Id@
        accordionTreeMarkup += '<div' + inTreePanelAttribute + dimensionData + ' class="gtc-accordiontree' + dimensionClass + '" data-treetype="' + accordionTree.TreeType + '" data-namespace="Tree" data-configure="Pre"' + ViewElement.RenderAttributes(accordionTree);

        // On Node Select Event
        if (Common.IsEventViewElementDefined(accordionTree.OnNodeSelect)) {
            // Data-ControllerPath/ActionName
            accordionTreeMarkup += ' data-nodeselect=\'' + JSON.stringify(accordionTree.OnNodeSelect) + '\'';
        }

        // On Load Event
        if (Common.IsEventViewElementDefined(accordionTree.OnLoad)) {
            // Data-ControllerPath/ActionName
            accordionTreeMarkup += ' data-load=\'' + JSON.stringify(accordionTree.OnLoad) + '\'';
        }

        // Div>
        accordionTreeMarkup += '>';

        // Title
        if (Common.IsDefined(accordionTree.Title)) {
            accordionTreeMarkup += '<h2 id="' + accordionTree.Name + 'Title" class="gtc-accordiontree-title gtc-page-theme-color" data-translate="' + accordionTree.Title + '">' + Common.TranslateKey(accordionTree.Title) + '</h2>';
        }

        // Build tree markup
        accordionTreeMarkup += BuildTreeStructure(accordionTree, false);

        // Div</>
        accordionTreeMarkup += '</div>';
        return accordionTreeMarkup;

    };

    /**
     * @function AccordionTree.OnNodeSelect
     * @param {object} tree - The AccordionTree DOM element
     * @param {object} node - The selected Node DOM element
     * @description Calls the OnNodeSelect Behavior of the AccordionTree when a node is clicked 
     */
    AccordionTree.OnNodeSelect = function (tree, node) {

        // Initialize
        var onNodeSelectParameters = [];
        var selectedNodeUiParameters = {
            Name: tree.id,
            Value: null,
            UiParameters: []
        };

        // Get OnNodeSelectEvent object
        var onNodeSelectEvent = JSON.parse(Common.GetAttr(tree, 'data-nodeselect'));
        if (Common.IsDefined(onNodeSelectEvent.UiParameters)) {
            onNodeSelectParameters = onNodeSelectParameters.concat(onNodeSelectEvent.UiParameters);
        }

        // Object properties
        var propertiesUiParameters = [];

        // View Model
        var viewModel = Common.GetAttr(node, 'data-nodeid');
        var viewModelId = null;
        if (Common.IsDefined(viewModel) && Common.IsNotEmptyString(viewModel)) {
            viewModelId = viewModel;
        }

        // Id
        propertiesUiParameters.push(
            {
                Name: 'Id',
                Value: viewModelId,
                UiParameters: null
            }
        );

        // Ui Parameters
        var extraUiParameters = JSON.parse(Common.GetAttr(node, 'data-uiparameters'));
        if (Common.IsDefined(extraUiParameters)) {
            var uiParameter, index = 0, length = extraUiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = extraUiParameters[index];
                propertiesUiParameters.push(
                    {
                        Name: uiParameter.Name,
                        Value: uiParameter.Value,
                        UiParameters: null
                    }
                );
            }
        }

        // Entity
        selectedNodeUiParameters.UiParameters = propertiesUiParameters;

        // Add selected node
        onNodeSelectParameters = onNodeSelectParameters.concat(selectedNodeUiParameters);

        // Execute View Behavior
        Common.ExecuteViewBehavior(onNodeSelectEvent.ControllerPath + onNodeSelectEvent.ActionName, onNodeSelectParameters, Page.RunInstructions, tree);

    };

    /**
     * @function AccordionTree.OnLoad
     * @param {object} tree - The AccordionTree DOM element
     * @description Calls the OnLoad Behavior of the AccordionTree when the tree is configured
     */
    AccordionTree.OnLoad = function (tree) {

        // Initialize
        var onLoadParameters = [];

        // Get OnLoadEvent object
        var onLoadEvent = JSON.parse(Common.GetAttr(tree, 'data-load'));
        if (Common.IsDefined(onLoadEvent.UiParameters)) {
            onLoadParameters = onLoadParameters.concat(onLoadEvent.UiParameters);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onLoadEvent.ControllerPath + onLoadEvent.ActionName, onLoadParameters, Page.RunInstructions, tree);

    };

    /**
     * @function AccordionTree.ReplaceElement
     * @param {object} tree - The AccordionTree DOM element
     * @param {object[]} viewElements - An array that contains one AccordionTree View Element in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Replaces the AccordionTree
     */
    AccordionTree.ReplaceElement = function (tree, viewElements, promises, context) {

        if (Common.IsDefined(viewElements) && viewElements.length == 1) {

            // Get promise
            var animationHidePromise = Common.Promise();
            promises.push(animationHidePromise.promise);

            // Get data
            var dataTree = viewElements[0];

            // Update Title
            if (Common.IsDefined(dataTree.Title)) {
                var title = Common.Get(tree.id + 'Title');
                if (Common.IsDefined(title)) {
                    Common.Slide(title, 'hide', 'left', 'slow',
                        function () {
                            Common.SetAttr(title, 'data-translate', dataTree.Title);
                            title.textContent = Common.TranslateKey(dataTree.Title);
                            Common.Slide(title, 'show', 'left', 'slow');
                        }
                    );
                }
                else {
                    var fragment = Common.GenerateFragment('<h2 id="' + tree.id + 'Title" style="display: none;" class="gtc-accordiontree-title gtc-page-theme-color" data-translate="' + dataTree.Title + '">' + Common.TranslateKey(dataTree.Title) + '</h2>');
                    tree.insertBefore(fragment, tree.firstChild);
                    title = Common.Get(tree.id + 'Title');
                    Common.Slide(title, 'show', 'left', 'slow');
                }
    	    }

            // Hide Tree
            var isParent = (context == 'Parent') ? true : false;
            Velocity(tree, 'slideUp', 'slow',
                function () {
                    if (isParent) {
                        window.parent.Widgets.accordiontree(tree, 'destroy');
                    }
                    else {
                        Widgets.accordiontree(tree, 'destroy');
                    }
                    Common.Remove(Common.Query('.gtc-accordiontree-root', tree));

                    // Build Tree Structure
                    var treeMarkup = BuildTreeStructure(dataTree, false);

                    // Insert tree
                    tree.appendChild(Common.GenerateFragment(treeMarkup));

                    // Intialize tree
                    if (isParent) {
                        window.parent.Widgets.accordiontree(tree);
                    }
                    else {
                        Widgets.accordiontree(tree);
                    }

                    // Show Tree
                    Velocity(tree, 'slideDown', 'slow',
                        function () {
                            animationHidePromise.resolve();
                        }
                    );
                }
            );
        }

    };

    /**
     * @function AccordionTree.AppendContent
     * @param {object} tree - The AccordionTree DOM element
     * @param {object[]} viewElements -  An array that contains one AccordionTree View Element in JSON format (The root node of the AccordionTree should be a existing node in the tree)
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Appends a set of nodes to the AccordionTree
     */
    AccordionTree.AppendContent = function (tree, viewElements, promises, context) {

        if (Common.IsDefined(viewElements)) {
            Tree.ShowPinwheel(tree);
            var subTree, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                subTree = viewElements[index];
                var subTreeId = subTree.Nodes[0].Name + Common.SanitizeToken(subTree.Nodes[0].Id);
                var htmlMarkup = BuildTreeStructure(subTree, true);
                if (context == 'Parent') {
                    window.parent.Widgets.accordiontree(tree, 'AddSubTree', { SubTreeId: subTreeId, HtmlMarkup: htmlMarkup });
                }
                else {
                    Widgets.accordiontree(tree, 'AddSubTree', { SubTreeId: subTreeId, HtmlMarkup: htmlMarkup });
                }
            }
            Tree.HidePinwheel(tree);
        }

    };

    /**
     * @function AccordionTree.RemoveContent
     * @param {object} tree - The AccordionTree DOM element
     * @param {object[]} viewElements -  An array that contains one AccordionTree View Element in JSON format (The root node of the AccordionTree should be a existing node in the tree)
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Removes a set of nodes from the AccordionTree
     */
    AccordionTree.RemoveContent = function (tree, viewElements, promises, context) {

        if (Common.IsDefined(viewElements)) {
            Tree.ShowPinwheel(tree);
            var subTree, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                subTree = viewElements[index];
                if (Common.IsDefined(subTree.Nodes) && subTree.Nodes.length == 1) {
                    var subTreeId = subTree.Nodes[0].Name + Common.SanitizeToken(subTree.Nodes[0].Id);
                    if (context == 'Parent') {
                        window.parent.Widgets.accordiontree(tree, 'RemoveSubTree', subTreeId);
                    }
                    else {
                        Widgets.accordiontree(tree, 'RemoveSubTree', subTreeId);
                    }
                }
            }
            Tree.HidePinwheel(tree);
        }

    };

    // Private Methods
    function BuildTreeStructure (treeData, isSubTree) {

        // Builds initial html structure for root nodes
        var treeNodeMarkup = '';
        var classAttribute = ' class="gtc-accordiontree-root"';
        if (isSubTree == true) {
            classAttribute = '';
        }
        else {
            treeNodeMarkup = '<ul role="tree"' + classAttribute + '>';
        }
        if (Common.IsDefined(treeData.Nodes) && treeData.Nodes.length > 0) {
            var node, index = 0, length = treeData.Nodes.length;
            for ( ; index < length; index++) {
                node = treeData.Nodes[index];
                if (isSubTree != true) {
                    treeNodeMarkup += '<li role="treeitem" aria-expanded="false" id="' + node.Name + Common.SanitizeToken(node.Id) + '"><a role="button"';
                    if (Common.IsDefined(node.Id)) {
                        treeNodeMarkup += ' data-nodeid="' + node.Id + '"';
                    }
                    if (Common.IsDefined(node.UiParameters)) {
                        treeNodeMarkup += ' data-uiparameters=\'' + JSON.stringify(node.UiParameters) + '\'';
                    }
                    treeNodeMarkup += '><span class="gtc-accordiontree-openclose"><i class="gtc-icon-styles fa fa-plus-square-o"></i><i class="gtc-icon-styles fa fa-minus-square-o"></i><i class="gtc-icon-styles fa fa-square-o"></i></span>';
                    treeNodeMarkup += node.Display;
                    treeNodeMarkup += '</a>';
                }
                if (Common.IsDefined(node.Children) && node.Children.length > 0) {
                    treeNodeMarkup += '<ul>';
                    var child, childIndex = 0, childLength = node.Children.length;
                    for ( ; childIndex < childLength; childIndex++) {
                        child = node.Children[childIndex];
                        treeNodeMarkup += BuildTreeChildren(child);
                    }
                    treeNodeMarkup += '</ul>';
                }
                if (isSubTree != true) {
                    treeNodeMarkup += '</li>';
                }
            }
        }
        if (isSubTree != true) {
            treeNodeMarkup += '</ul>';
        }
        return treeNodeMarkup;

    };

    function BuildTreeChildren (node) {

        // Recursively builds html structure for all child nodes
        var treeNodeMarkup = '<li role="treeitem" aria-expanded="false" id="' + node.Name + Common.SanitizeToken(node.Id) + '"><a role="button"';
        if (Common.IsDefined(node.Id)) {
            treeNodeMarkup += ' data-nodeid="' + node.Id + '"';
        }
        if (Common.IsDefined(node.UiParameters)) {
            treeNodeMarkup += ' data-uiparameters=\'' + JSON.stringify(node.UiParameters) + '\'';
        }
        treeNodeMarkup += '><span class="gtc-accordiontree-openclose"><i class="gtc-icon-styles fa fa-plus-square-o"></i><i class="gtc-icon-styles fa fa-minus-square-o"></i><i class="gtc-icon-styles fa fa-square-o"></i></span>';
        treeNodeMarkup += node.Display;
        treeNodeMarkup += '</a>';
        if (Common.IsDefined(node.Children) && node.Children.length > 0) {
            treeNodeMarkup += '<ul>';
            var child, index = 0, length = node.Children.length;
            for ( ; index < length; index++) {
                child = node.Children[index];
                treeNodeMarkup += '<li role="treeitem" aria-expanded="false" id="' + child.Name + Common.SanitizeToken(child.Id) + '"><a role="button"';
                if (Common.IsDefined(child.Id)) {
                    treeNodeMarkup += ' data-nodeid="' + child.Id + '"';
                }
                if (Common.IsDefined(child.UiParameters)) {
                    treeNodeMarkup += ' data-uiparameters=\'' + JSON.stringify(child.UiParameters) + '\'';
                }
                treeNodeMarkup += '><span class="gtc-accordiontree-openclose"><i class="gtc-icon-styles fa fa-plus-square-o"></i><i class="gtc-icon-styles fa fa-minus-square-o"></i><i class="gtc-icon-styles fa fa-square-o"></i></span>';
                treeNodeMarkup += child.Display;
                treeNodeMarkup += '</a>';
                if (Common.IsDefined(child.Children) && child.Children.length > 0) {
                    treeNodeMarkup += '<ul>';
                    var nodeChild, childIndex = 0, childLength = child.Children.length;
                    for ( ; childIndex < childLength; childIndex++) {
                        nodeChild = child.Children[childIndex];
                        treeNodeMarkup += BuildTreeChildren(nodeChild);
                    }
                    treeNodeMarkup += '</ul>';
                }
                treeNodeMarkup += '</li>';
            }
            treeNodeMarkup += '</ul>';
        }
        treeNodeMarkup += '</li>';
        return treeNodeMarkup;

    };

} (window.AccordionTree = window.AccordionTree || {}, window, document, Common, Cache, Events, Velocity));
// Accordion Tree Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var AccordionTreeWidget = {

        // Options
        options: {
            TreeRoot: null,
            StartCollapsed: true,
            CloseSameLevel: false,
            AnimationDuration: 400,
            InTreePanel: false,
            HasNodeSelectEvent: false
        },

        // Public Methods
        AddSubTree: function (subTreeData) {

            var thisWidget = this;
            thisWidget._addSubTree(subTreeData);

        },

        RemoveSubTree: function (subTreeId) {

            var thisWidget = this;
            thisWidget._removeSubTree(subTreeId);

        },

        // Private Methods
        _applyInitialUlStyles: function (uls) {

            // Initialize
            var thisWidget = this;

            // Apply styling
            var ulStyle, index = 0, length = uls.length;
            for ( ; index < length; index++) {
                ulStyle = uls[index].style;
                ulStyle.overflow = 'hidden';
                ulStyle.height = (thisWidget.options.StartCollapsed) ? 0 : 'auto';
                ulStyle.display = (thisWidget.options.StartCollapsed) ? 'none' : 'block';
            }

        },

        _applyInitialLiStyles: function (lis) {

            // Initialize
            var thisWidget = this;

            // Add classes for node element styling
            var val, children, index = 0, length = lis.length, childrenIndex, childrenLength;
            for ( ; index < length; index++) {
                val = lis[index];
                val.firstChild.style.cursor = 'pointer';
                children = Common.GetChildren(val, 'ul');
                childrenLength = children.length;
                if (childrenLength > 0) {
                    Common.AddClasses(val, 'gtc-accordiontree-node gtc-accordiontree-' + ((thisWidget.options.StartCollapsed) ? 'closed' : 'open'));
                    childrenIndex = 0;
                    for ( ; childrenIndex < childrenLength; childrenIndex++) {
                        Common.AddClass(children[childrenIndex], 'gtc-accordiontree-level-' + (Common.ParentsUntil(val, '.gtc-accordiontree-root', 'ul').length + 1));
                    }
                }
            }

        },

        _attachNodeAnchorClicks: function (anchors) {

            var thisWidget = this;

            // Set accordiontree-active class on list items for last opened element
            Events.Off(anchors, 'click.accordiontree-active');
            Events.On(anchors, 'click.accordiontree-active',
                function (event) {
                    // Set proper classes
                    var thisParent = this.parentNode;
                    var eventTarget = event.target;
                    var closestOpenClose = Common.Closest('.gtc-accordiontree-openclose', eventTarget);
                    if (Common.IsNotDefined(closestOpenClose)) {
                        var activeLis = Common.QueryAll('.gtc-accordiontree-active:not(#' + thisParent.id + ')', thisWidget.element);
                        Common.RemoveClassFromElements(activeLis, 'gtc-accordiontree-active');
                        if (Common.HasClass(thisParent, 'accordiontree-closed')) {
                            Common.AddClass(thisParent, 'gtc-accordiontree-active');
                        }
                        else {
                            Common.ToggleClass(thisParent, 'gtc-accordiontree-active');
                        }
                    }

                    if (Common.IsDefined(closestOpenClose)) {
                        var ulChild = Common.GetChildren(thisParent, 'ul')[0];
                        var isOpen = Common.HasClass(thisParent, 'gtc-accordiontree-open');

                        // Close other elements on same level if configured
                        if (thisWidget.options.CloseSameLevel) {
                            var openItems = Common.GetChildren(Common.Closest('ul', this), '.gtc-accordiontree-open:not(#' + thisParent.id + ')');
                            var itemsToClose = [], index = 0, length = openItems.length;
                            for ( ; index < length; index++) {
                                itemsToClose.push(Common.GetChildren(openItems[index], 'ul')[0]);
                            }
                            Velocity(itemsToClose, 'slideUp', thisWidget.options.AnimationDuration,
                                function () {
                                    var itemsToCloseIndex = 0, itemsToCloseLength = this.length;
                                    for ( ; itemsToCloseIndex < itemsToCloseLength; itemsToCloseIndex++) {
                                        thisWidget._setNodeClass(this[index].parentNode, true);
                                    }
                                }
                            );
                        }

                        // Set auto height, class and animate open/closed
                        if (Common.IsDefined(ulChild)) {
                            ulChild.style.height = 'auto';
                            thisWidget._setNodeClass(thisParent, isOpen);
                            var slideDirection = 'slideDown';
                            if (isOpen) {
                                slideDirection = 'slideUp';
                            }
                            Velocity(ulChild, slideDirection, thisWidget.options.AnimationDuration);
                        }
                    }
                    else {
                        // OnClickNode
                        if (Common.HasClass(thisParent, 'gtc-accordiontree-active') && Common.IsDefined(Common.GetAttr(thisWidget.element, 'data-nodeselect'))) {
                            AccordionTree.OnNodeSelect(thisWidget.element, this);
                        }
                    }
                }
            );

        },

        _attachNodeClicks: function (nodes) {

            var thisWidget = this;

            // Set node click elements
            var firstNodeChildren = [], index = 0, length = nodes.length;
            for ( ; index < length; index++) {
                firstNodeChildren.push(nodes[index].firstChild);
            }
            Events.Off(firstNodeChildren, 'click.accordiontree');
            Events.On(firstNodeChildren, 'click.accordiontree',
                function (event) {
                    event.preventDefault();

                    // Trigger OnNodeSelect event
                    if (Common.IsNotDefined(Common.Closest('.gtc-accordiontree-openclose', event.target)) && thisWidget.options.HasNodeSelectEvent) {
                        AccordionTree.OnNodeSelect(thisWidget.element, this.parentNode);
                    }
                }
            );

        },

        _setNodeClass: function (element, isOpen) {

            if (isOpen) {
                Common.RemoveClass(element, 'gtc-accordiontree-open');
                Common.AddClass(element, 'gtc-accordiontree-closed');
                Common.SetAttr(element, 'aria-expanded', 'false');
            }
            else {
                Common.RemoveClass(element, 'gtc-accordiontree-closed');
                Common.AddClass(element, 'gtc-accordiontree-open');
                Common.SetAttr(element, 'aria-expanded', 'true');
            }

        },

        _addSubTree: function (subTreeData) {

            // Initialize
            var thisWidget = this;

            // Find node to add subtree into
            var node = Common.Query('#' + subTreeData.SubTreeId, thisWidget.element);
            Common.Remove(Common.Query('ul', node));
            Common.RemoveClass(node, 'gtc-accordiontree-open');
            Common.RemoveClass(node, 'gtc-accordiontree-closed');
            Common.InsertHTMLString(node, Common.InsertType.Append, subTreeData.HtmlMarkup);

            // Set initial styles
            thisWidget._applyInitialUlStyles(Common.QueryAll('ul', node));
            var initialNodes = Common.FilterElementsOnDescendants(Common.QueryAll('li', node), 'ul');
            var initialLis = Common.MergeArray([], initialNodes);
            initialLis.push(node);
            thisWidget._applyInitialLiStyles(initialLis);

            // Attach node clicks
            thisWidget._attachNodeAnchorClicks(Common.QueryAll('li > *:first-child', node));
            thisWidget._attachNodeClicks(initialNodes);

            var element = Common.GetChildren(node, 'ul')[0];
            var isOpen = Common.HasClass(node, 'gtc-accordiontree-open');

            if (Common.HasClass(node, 'gtc-accordiontree-active')) {
                // Close other elements on same level if configured
                if (thisWidget.options.CloseSameLevel) {
                    var openItems = Common.GetChildren(Common.Closest('ul', node), '.gtc-accordiontree-open:not(#' + node.parentNode.id + ')');
                    var itemsToClose = [], index = 0, length = openItems.length;
                    for ( ; index < length; index++) {
                        itemsToClose.push(Common.GetChildren(openItems[index], 'ul')[0]);
                    }
                    Velocity(itemsToClose, 'slideUp', thisWidget.options.AnimationDuration,
                        function () {
                            var itemsToCloseIndex = 0, itemsToCloseLength = this.length;
                            for ( ; itemsToCloseIndex < itemsToCloseLength; itemsToCloseIndex++) {
                                thisWidget._setNodeClass(this[index].parentNode, true);
                            }
                        }
                    );
                }

                // Set auto height, class and animate open/closed
                if (Common.IsDefined(element)) {
                    element.style.height = 'auto';
                    thisWidget._setNodeClass(node, isOpen);
                    var slideDirection = 'slideDown';
                    if (isOpen) {
                        slideDirection = 'slideUp';
                    }
                    Velocity(element, slideDirection, thisWidget.options.AnimationDuration);
                }
            }

        },

        _removeSubTree: function (subTreeId) {

            // Initialize
            var thisWidget = this;

            // Remove subtree
            Common.Remove(Common.Query('#' + subTreeId, thisWidget.element));

        },

        _init: function () {

        },

        _create: function () {

            // Initialize
            var thisWidget = this;
            thisWidget.options.TreeRoot = Common.Query('.gtc-accordiontree-root', thisWidget.element);
            if (Common.IsDefined(Common.GetAttr(thisWidget.element, 'data-intreepanel')) && Common.GetAttr(thisWidget.element, 'data-intreepanel') == 'true') {
                thisWidget.options.InTreePanel = true;
            }

            // Set initial styles
            thisWidget._applyInitialUlStyles(Common.QueryAll('ul', thisWidget.options.TreeRoot));
            var initialLis = Common.FilterElementsOnDescendants(Common.QueryAll('li', thisWidget.element), 'ul');
            thisWidget._applyInitialLiStyles(initialLis);

            // Attach node clicks
            thisWidget._attachNodeAnchorClicks(Common.QueryAll('#' + thisWidget.element.id +'.gtc-accordiontree li > *:first-child'));
            thisWidget._attachNodeClicks(initialLis);

            // NOde Select event configured?
            if (Common.IsDefined(Common.GetAttr(thisWidget.element, 'data-nodeselect'))) {
                thisWidget.options.HasNodeSelectEvent = true;
            }

            // Trigger OnLoad event
            if (Common.IsDefined(Common.GetAttr(thisWidget.element, 'data-load'))) {
                AccordionTree.OnLoad(thisWidget.element);
            }

        }

    };

    WidgetFactory.Register('gtc.accordiontree', AccordionTreeWidget);

} (window, document, Common, Cache, Events, Velocity));
// Space Tree
// Based On: SpaceTree -> Tree -> ViewElement
(function (SpaceTree, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    SpaceTree.InitializedTrees = [];

    // Public Methods
    SpaceTree.Render = function (dataTree) {

        // Initiliaze
        var treeMarkup = '';

        // Dimension
        var dimensionClass = '';
        var dimensionData = '';
        if (Common.IsDefined(dataTree.Dimension) && Common.IsOneDefined([dataTree.Dimension.Height, dataTree.Dimension.Width])) {
            dimensionClass = 'gtc-tree-' + dataTree.Name.toLowerCase();
            treeMarkup += '<style>.' + dimensionClass + ' {';
            if (Common.IsDefined(dataTree.Dimension.Height)) {
                treeMarkup += 'height:' + dataTree.Dimension.Height + dataTree.Dimension.Scale + ';';
                dimensionData += ' data-height="' + dataTree.Dimension.Height + dataTree.Dimension.Scale + '"';
            }
            treeMarkup += 'width:100%;} </style>';
            dimensionData += ' data-width="100%"';
            dimensionClass = ' ' + dimensionClass;
        }

        // Div<, Class@, Id@, Data-Tree@>
        treeMarkup += '<div class="gtc-spacetree gtc-tree-container" data-treetype="' + dataTree.TreeType + '" data-namespace="Tree" data-configure="Pre"' + ViewElement.RenderAttributes(dataTree) + ' data-tree=\'' + JSON.stringify(dataTree) + '\'';

        // On Node Select Event
        if (Common.IsEventViewElementDefined(dataTree.OnNodeSelect)) {
            // Data-ControllerPath/ActionName
            treeMarkup += ' data-nodeselect=\'' + JSON.stringify(dataTree.OnNodeSelect) + '\'';
        }

        // On Load Event
        if (Common.IsEventViewElementDefined(dataTree.OnLoad)) {
            // Data-ControllerPath/ActionName
            treeMarkup += ' data-load=\'' + JSON.stringify(dataTree.OnLoad) + '\'';
        }

        // Dimension Data
        if (Common.IsNotEmptyString(dimensionData)) {
            treeMarkup += dimensionData;
        }

        // Variable Name
        if (Common.IsDefined(dataTree.VariableName)) {
            treeMarkup += ' data-variablename="' + dataTree.VariableName + '"';
        }
        treeMarkup += '>';

        // Title
        if (Common.IsDefined(dataTree.Title)) {
            treeMarkup += '<h2 id="' + dataTree.Name + 'Title" class="gtc-tree-title gtc-page-theme-color" data-translate="' + dataTree.Title + '">' + Common.TranslateKey(dataTree.Title) + '</h2>';
        }

        // Expand All
        if (dataTree.DisplayExpandAll == 'Yes') {
            treeMarkup += '<a data-currentstate="contracted" class="gtc-tree-expandall" id="tree-expandall-' + dataTree.Name + '"><i class="gtc-icon-styles fa fa-plus"></i></a>';
        }

        // Change Orientation
        var treeObjectOrientation = 'top';
        if (dataTree.Orientation.toLowerCase() == 'landscape') {
            treeObjectOrientation = 'left';
        }
        if (dataTree.DisplayChangeOrientation == 'Yes') {
            treeMarkup += '<a data-currentstate="' + treeObjectOrientation + '" class="gtc-tree-changeorientation gtc-tree-changeorientation-startingstate-' + treeObjectOrientation + '" id="tree-changeorientation-' + dataTree.Name + '"><i class="gtc-icon-styles fa fa-sitemap"></i></a>';
        }
        treeMarkup += '<div class="gtc-tree gtc-tree-' + dataTree.TreeType.toLowerCase() + dimensionClass + '" id="' + dataTree.Name + '-Container"></div>';
        treeMarkup += '</div>';

        // Return markup
        return treeMarkup;

    };

    SpaceTree.ShowTrees = function (spaceTrees) {

        var divTree, treeIndex = 0, length = spaceTrees.length;
        for ( ; treeIndex < length; treeIndex++) {
            divTree = spaceTrees[treeIndex];
            var dataTree = JSON.parse(Common.GetAttr(divTree, 'data-tree'));

            // Configure Tooltips
            var tooltips = {
                enable: false
            };
            if (dataTree.DisplayTooltips == 'Yes') {
                tooltips = {
                    enable: true,
                    offsetX: 20,
                    offsetY: 20,
                    onShow: function (tip, node) {
                        if (Common.IsDefined(node.data['Tooltip'])) {
                            Common.AddClass(tip, 'gtc-tip');
                            tip.innerHTML = '<div style="text-align: center">' + node.name + '</div><div>' + node.data['Tooltip'] + '</div>';
                            return true;
                        }
                        else {
                            tip.innerHTML = '';
                            return false;
                        }
                    }
                };
            }

            // Build Tree Data
            var jsonData = BuildJSONData(dataTree);

            // Tree Orientation
            var treeObjectOrientation = 'top';
            if (dataTree.Orientation.toLowerCase() == 'landscape') {
                treeObjectOrientation = 'left';
            }

            // Initialize Tree
            var currentScale = 1;
            var isZooming = false;
            var isDragging = false;
            var treeObject = new $jit.ST(
                {
                    injectInto: divTree.id + '-Container',
                    duration: 500,
                    transition: $jit.Trans.Quart.easeInOut,
                    levelDistance: 50,
                    constrained: true,
                    levelsToShow: 1,
                    orientation: treeObjectOrientation,
                    type: '2D',
                    Navigation: {
                        enable: true,
                        panning: true,
                        zooming: false,
                        onZoom: function (scroll) {
                            if (isZooming == false) {
                                isZooming = true;
                                var newScale = 0;
                                if (scroll > 1) {
                                    newScale = currentScale + (parseInt(scroll.toString().split('.')[1], 10) / 100);
                                }
                                else {
                                    newScale = currentScale - (1 - (parseInt(scroll.toString().split('.')[1], 10) / 100));
                                }
                                if (currentScale >= .5) {
                                    treeObject.graph.eachNode(
                                        function (node) {
                                            node.data['isScrolling'] = true;
                                            treeObject.labels.plotLabel(treeObject.canvas, node, treeObject.controller);
                                        }
                                    );
                                    currentScale = newScale;
                                }
                                else {
                                    currentScale = .5;
                                }
                                isZooming = false;
                            }
                        }
                    },
                    Node: {
                        height: 25,
                        width: 100,
                        color: '#FFFFFF',
                        type: 'rectangle',
                        overridable: true
                    },
                    Tips: tooltips,
                    Edge: {
                        type: 'bezier',
                        overridable: true,
                        color: '#BBBBBB'
                    },
                    Events: {
                        enable: true,
                        onClick: function (node, eventInfo, event) {
                            if (Common.IsDefined(Common.GetAttr(divTree, 'data-nodeselect')) && node != false && node.data['IgnoreNodeSelect'] == 'No') {
                                SpaceTree.OnNodeSelect(divTree, node);
                            }
                        },
                        onDragMove: function (node, eventInfo, event) {
                            isDragging = true;
                        }
                    },
                    onCreateLabel: function (label, node) {
                        label.id = node.id;
                        Common.AddClass(label, 'gtc-node');
                        label.innerHTML = node.name;
                        label.onclick = function (event) {
                            if (isDragging) {
                                isDragging = false;
                            }
                            else {
                                treeObject.onClick(node.id);
                            }
                        };
                    },
                    onPlaceLabel: function (label, node) {
                        var isScrolling = node.data['isScrolling'];
                        var labelStyle = label.style;
                        if (isScrolling == true) {
                            node.data['isScrolling'] = false;
                            labelStyle.webkitTransform = 'scale(' + currentScale + ', ' + currentScale + ')';
                            labelStyle.msTransform = 'scale(' + currentScale + ', ' + currentScale + ')';
                            labelStyle.transform = 'scale(' + currentScale + ', ' + currentScale + ')';
                        }
                        if (currentScale == 1) {
                            labelStyle.height = node.Node.height + 'px';
                            labelStyle.width = node.Node.width + 'px';
                        }
                        if (node.selected) {
                            Common.AddClass(label, 'gtc-selected-node');
                        }
                        else {
                            Common.RemoveClass(label, 'gtc-selected-node');
                        }
                    },
                    onBeforePlotNode: function (node) {
                        if (node.selected) {
                            node.setData('color', '#000000');
                        }
                        else {
                            node.setData('color', '#FFFFFF');
                        }
                    },
                    onBeforePlotLine: function (adjacency) {
                        if (adjacency.nodeFrom.selected && adjacency.nodeTo.selected) {
                            adjacency.data.$color = '#888888';
                            adjacency.data.$lineWidth = 3;
                        }
                        else {
                            delete adjacency.data.$color;
                            delete adjacency.data.$lineWidth;
                        }
                    }
                }
            );

            // Attach expand event
            if (dataTree.DisplayExpandAll == 'Yes') {
                Events.On(Common.Get('tree-expandall-' + dataTree.Name), 'click',
                    function () {
                        var spaceTree = Common.Get(dataTree.Name);
                        Tree.ShowPinwheel(spaceTree);
                        var currentState = Common.GetAttr(this, 'data-currentstate');
                        var options = treeObject.canvas.getConfig();
                        var treeObjectOrientation = Common.GetAttr(Common.Get('tree-changeorientation-' + dataTree.Name), 'data-currentstate');
                        if (currentState == 'expanded') {
                            options.constrained = true;
                            options.levelsToShow = 1;
                            treeObject.switchPosition(treeObjectOrientation, 'animate');
                            Common.SetAttr(this, 'data-currentstate', 'contracted');
                            Common.RemoveClass(Common.Query('i', this), 'gtc-rotate45');
                        }
                        else {
                            options.constrained = false;
                            options.levelsToShow = 500;
                            treeObject.switchPosition(treeObjectOrientation, 'animate');
                            Common.SetAttr(this, 'data-currentstate', 'expanded');
                            Common.AddClass(Common.Query('i', this), 'gtc-rotate45');
                        }
                        Tree.HidePinwheel(spaceTree);
                    }
                );
            }

            // Attach change orientation event
            if (dataTree.DisplayChangeOrientation == 'Yes') {
                Events.On(Common.Get('tree-changeorientation-' + dataTree.Name), 'click',
                    function () {
                        var spaceTree = Common.Get(dataTree.Name);
                        Tree.ShowPinwheel(spaceTree);
                        var currentState = Common.GetAttr(this, 'data-currentstate');
                        if (currentState == 'top') {
                            treeObject.switchPosition('left', 'animate');
                            Common.SetAttr(this, 'data-currentstate', 'left');
                            if (Common.HasClass(this, 'gtc-tree-changeorientation-startingstate-left')) {
                                Common.RemoveClass(Common.Query('i', this), 'gtc-rotate90');
                            }
                            else if (Common.HasClass(this, 'gtc-tree-changeorientation-startingstate-top')) {
                                Common.AddClass(Common.Query('i', this), 'gtc-rotate90');
                            }
                        }
                        else {
                            treeObject.switchPosition('top', 'animate');
                            Common.SetAttr(this, 'data-currentstate', 'top');
                            if (Common.HasClass(this, 'gtc-tree-changeorientation-startingstate-left')) {
                                Common.AddClass(Common.Query('i', this), 'gtc-rotate90');
                            }
                            else if (Common.HasClass(this, 'gtc-tree-changeorientation-startingstate-top')) {
                                Common.RemoveClass(Common.Query('i', this), 'gtc-rotate90');
                            }
                        }
                        Tree.HidePinwheel(spaceTree);
                    }
                );
            }

            if (!Common.IsEmptyObject(jsonData)) {
                // Load the json data
                treeObject.loadJSON(jsonData);

                // Compute node positions
                treeObject.compute();

                // Display tree or wait for display of modal for proper width
                var displayTreeFunction = function () {
                    // Animate tree into view
                    treeObject.geom.translate(new $jit.Complex(-300, -300), 'current');

                    // Emulate root node click to display tree
                    treeObject.onClick(treeObject.root);
                };

                // Is View a Modal?
                if (Common.IsModal()) {
                    setTimeout(
                        function () {
                            displayTreeFunction();
                            treeObject.canvas.resize(Common.Width(divTree), Common.Height(divTree));
                        }, 1000
                    );
                }
                else {
                    displayTreeFunction();
                }
            }

            // Cleanup json data
            Common.RemoveAttr(divTree, 'data-tree');

            // Save Reference for async changes
            SpaceTree.InitializedTrees[divTree.id] = treeObject;

            // Trigger OnLoad event
            if (Common.IsDefined(Common.GetAttr(divTree, 'data-load'))) {
                SpaceTree.OnLoad(divTree);
            }
        }

    };

    SpaceTree.OnNodeSelect = function (tree, node) {

        // Initialize
        var onNodeSelectParameters = [];
        var selectedNodeUiParameters = {
            Name: tree.id,
            Value: null,
            UiParameters: []
        };

        // Get OnNodeSelectEvent object
        var onNodeSelectEvent = JSON.parse(Common.GetAttr(tree, 'data-nodeselect'));
        if (Common.IsDefined(onNodeSelectEvent.UiParameters)) {
            onNodeSelectParameters = onNodeSelectParameters.concat(onNodeSelectEvent.UiParameters);
        }

        // Object properties
        var propertiesUiParameters = [];

        // View Model
        var viewModel = node.data['UiParameterNodeId'];
        var viewModelId = null;
        if (Common.IsDefined(viewModel) && Common.IsNotEmptyString(viewModel)) {
            viewModelId = viewModel;
        }

        // Id
        propertiesUiParameters.push(
            {
                Name: 'Id',
                Value: viewModelId,
                UiParameters: null
            }
        );

        // Ui Parameters
        var extraUiParameters = node.data['UiParameters'];
        if (Common.IsDefined(extraUiParameters)) {
            var uiParameter, index = 0, length = extraUiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = extraUiParameters[index];
                propertiesUiParameters.push(
                    {
                        Name: uiParameter.Name,
                        Value: uiParameter.Value,
                        UiParameters: null
                    }
                );
            }
        }

        // Entity
        selectedNodeUiParameters.UiParameters = propertiesUiParameters;

        // Add selected node
        onNodeSelectParameters = onNodeSelectParameters.concat(selectedNodeUiParameters);

        // Execute View Behavior
        Common.ExecuteViewBehavior(onNodeSelectEvent.ControllerPath + onNodeSelectEvent.ActionName, onNodeSelectParameters, Page.RunInstructions, tree);

    };

    SpaceTree.OnLoad = function (tree) {

        // Initialize
        var onLoadParameters = [];

        // Get OnLoadEvent object
        var onLoadEvent = JSON.parse(Common.GetAttr(tree, 'data-load'));
        if (Common.IsDefined(onLoadEvent.UiParameters)) {
            onLoadParameters = onLoadParameters.concat(onLoadEvent.UiParameters);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onLoadEvent.ControllerPath + onLoadEvent.ActionName, onLoadParameters, Page.RunInstructions, tree);

    };

    SpaceTree.ReplaceElement = function (tree, viewElements) {

        Tree.ShowPinwheel(tree);
        var hiddenTree = Common.IsHidden(tree);
        var replaceTree = function () {
            if (Common.IsDefined(viewElements) && viewElements.length == 1) {
                var dataTree = viewElements[0];

                var treeObject = SpaceTree.InitializedTrees[tree.id];
                treeObject.graph.empty();

                // Build Tree Data
                var jsonData = BuildJSONData(dataTree);

                // Load the json data
                treeObject.loadJSON(jsonData);

                // Compute node positions
                treeObject.compute();

                // Emulate root node click to display tree
                treeObject.onClick(treeObject.root);

                // Resize and refresh canvas
                if (hiddenTree) {
                    treeObject.canvas.resize(Common.Width(tree), Common.Height(tree));
                    treeObject.refresh();
                }

                // Remove Pinwheel
                Tree.HidePinwheel(tree);
            }
        };

        if (hiddenTree) {
            // Give time for tree to display so we can update canvas
            setTimeout(
                function () {
                    replaceTree();
                }, 1000
            );
        }
        else {
            replaceTree();
        }

    };

    SpaceTree.UpdateValues = function (tree, uiParameters) {

        if (Common.IsDefined(uiParameters)) {
            Tree.ShowPinwheel(tree);
            var treeObject = SpaceTree.InitializedTrees[tree.id];
            var uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];

                var label = treeObject.labels.getLabel(uiParameter.Name);
                if (Common.IsDefined(label)) {

                    // For loops have no scope! Give it some. (IIFE)
                    (function (label, uiParameter) {

                        Velocity(label, { 'opacity': '0' }, 'slow',
                            function () {
                                label.textContent = uiParameter.Value;
                                Velocity(label, 'reverse');
                            }
                        );

                    }(label, uiParameter));

                }
            }
            Tree.HidePinwheel(tree);
        }

    };

    SpaceTree.UpdateColor = function (tree, uiParameters) {

        if (Common.IsDefined(uiParameters)) {
            Tree.ShowPinwheel(tree);
            var treeObject = SpaceTree.InitializedTrees[tree.id];
            var uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];
                var label = treeObject.labels.getLabel(uiParameter.Name);
                var node = treeObject.graph.getNode(uiParameter.Name);
                var color = Colors.ProcessValue(uiParameter.Value, false, null);
                var labelStyle = label.style;
                labelStyle.backgroundColor = color;
                labelStyle.color = Colors.Invert(color);
                if (new RegExp(Colors.RGBRegEx).test(color)) {
                    color = '#' + Colors.ConvertRGBToHex(color);
                }
                node.setData('color', color);
                treeObject.fx.animate(
                    {
                        modes : [ 'node-property:color' ],
                        duration : 1
                    }
                );
            }
            Tree.HidePinwheel(tree);
        }

    };

    SpaceTree.UpdateTooltip = function (tree, uiParameters) {

        if (Common.IsDefined(uiParameters)) {
            Tree.ShowPinwheel(tree);
            var treeObject = SpaceTree.InitializedTrees[tree.id];
            var uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];
                var node = treeObject.graph.getNode(uiParameter.Name);
                node.data['Tooltip'] = uiParameter.Value;
            }
            Tree.HidePinwheel(tree);
        }

    };

    SpaceTree.AppendContent = function (tree, viewElements) {

        if (Common.IsDefined(viewElements)) {
            Tree.ShowPinwheel(tree);
            var treeObject = SpaceTree.InitializedTrees[tree.id];
            var subTree, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                subTree = viewElements[index];
                var jsonData = BuildJSONData(subTree);
                treeObject.addSubtree(jsonData, 'animate');
            }
            Tree.HidePinwheel(tree);
        }

    };

    SpaceTree.RemoveContent = function (tree, viewElements) {

        if (Common.IsDefined(viewElements)) {
            Tree.ShowPinwheel(tree);
            var treeObject = SpaceTree.InitializedTrees[tree.id];
            var subTree, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                subTree = viewElements[index];
                if (Common.IsDefined(subTree.Nodes) && subTree.Nodes.length == 1) {
                    var subTreeId = subTree.Nodes[0].Name + Common.SanitizeToken(subTree.Nodes[0].Id);
                    treeObject.removeSubtree(subTreeId, true, 'animate');
                }
            }
            Tree.HidePinwheel(tree);
        }

    };

    // Private Methods
    function BuildJSONData(treeData) {

        // Builds initial JSON structure for root nodes
        var jsonData = {};
        if (Common.IsDefined(treeData.Nodes) && treeData.Nodes.length > 0) {
            var node, nodeIndex = 0, nodeLength = treeData.Nodes.length;
            for ( ; nodeIndex < nodeLength; nodeIndex++) {
                node = treeData.Nodes[nodeIndex];
                jsonData.id = node.Name + Common.SanitizeToken(node.Id);
                jsonData.name = node.Display;
                jsonData.data = {
                    'Tooltip': node.Tooltip,
                    'IgnoreNodeSelect': node.IgnoreNodeSelect,
                    'UiParameterNodeId': node.Id,
                    'UiParameters': node.UiParameters
                };
                if (Common.IsDefined(node.Children) && node.Children.length > 0) {
                    jsonData.children = [];
                    var childIndex = 0, childLength = node.Children.length;
                    for ( ; childIndex < childLength; childIndex++) {
                        jsonData.children.push(BuildJSONChildren(node.Children[childIndex]));
                    }
                }
            }
        }
        return jsonData;

    };

    function BuildJSONChildren(node) {

        // Recursively builds JSON structure for all child nodes
        var jsonData = {};
        jsonData.id = node.Name + Common.SanitizeToken(node.Id);
        jsonData.name = node.Display;
        jsonData.data = {
            'Tooltip': node.Tooltip,
            'IgnoreNodeSelect': node.IgnoreNodeSelect,
            'UiParameterNodeId': node.Id,
            'UiParameters': node.UiParameters
        };
        if (Common.IsDefined(node.Children) && node.Children.length > 0) {
            jsonData.children = [];
            var child, childIndex = 0, childLength = node.Children.length;
            for ( ; childIndex < childLength; childIndex++) {
                child = node.Children[childIndex];
                var jsonChildData = {};
                jsonChildData.id = child.Name + Common.SanitizeToken(child.Id);
                jsonChildData.name = child.Display;
                jsonChildData.data = {
                    'Tooltip': child.Tooltip,
                    'IgnoreNodeSelect': child.IgnoreNodeSelect,
                    'UiParameterNodeId': child.Id,
                    'UiParameters': child.UiParameters
                };
                if (Common.IsDefined(child.Children) && child.Children.length > 0) {
                    jsonChildData.children = [];
                    var nodeChildIndex = 0, nodeChildLength = child.Children.length;
                    for ( ; nodeChildIndex < nodeChildLength; nodeChildIndex++) {
                        jsonChildData.children.push(BuildJSONChildren(child.Children[nodeChildIndex], false));
                    }
                }
                jsonData.children.push(jsonChildData);
            }
        }
        return jsonData;

    };

} (window.SpaceTree = window.SpaceTree || {}, window, document, Common, Cache, Events, Velocity));
// Secure Field
// Based On: SecureField -> PlaceholderField -> ValueField -> Field -> ViewElement
(function (SecureField, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    SecureField.Render = function (secureField) {

        // Label Exists (needed for Icon rendering)
        var labelExists = true;
        if (Common.IsNotDefined(secureField.Label)) {
            labelExists = false;
        }

        // Label
        var secureFieldMarkup = Field.RenderLabel(secureField);

        // input<, Placeholder@, Name@, Value@, @Data-Serializable, TabIndex@, Class@, Id@, Data-Disabled@
        secureFieldMarkup += '<input class="gtc-input-securefield';
        if (Common.IsDefined(secureField.Icon)) {
            if (labelExists == false) {
                secureFieldMarkup += ' gtc-input__icon-left';
            }
            else {
                secureFieldMarkup += ' gtc-input__icon-label-left';
            }
        }
        secureFieldMarkup += '"' + PlaceholderField.RenderAttributes(secureField) + Field.RenderAttributes(secureField);

        // Data-HasChanged@ Event
        if (secureField.IsSerializable == 'Yes') {
            Events.On(document.body, 'change.fieldvaluechange.' + secureField.Name, '#' + secureField.Name,
                function () {
                    Common.GetAttr(this, 'data-haschanged', 'Yes');
                }
            );
        }

        // 508 Compliance
        if (secureField.IsRequired == 'Yes') {
            secureFieldMarkup += ' aria-required="true"';
        }

        // Data-ControllerPath/ActionName@, Wire OnChange!
        if (Common.IsEventViewElementDefined(secureField.OnChange)) {
            secureFieldMarkup += Field.AttachOnChange(secureField, SecureField.OnChange);
        }

        // Setup Password?
        var strengthRequirementMarkup = '';
        if (secureField.SetupPassword == 'Yes') {
            // Parse ints and define for later scope
            var passwordComplexityInt = parseInt(secureField.PasswordComplexity, 10);
            var passwordLengthInt = parseInt(secureField.PasswordLength, 10);

            // Add extra attributes to field
            secureFieldMarkup += ' data-length="' + secureField.PasswordLength + '"';
            secureFieldMarkup += ' data-complexity="' + secureField.PasswordComplexity + '"';

            // Build Dots Markup and Requirements Drop Down Markup
            strengthRequirementMarkup += '<div id="' + secureField.Name + 'StrengthDots" class="gtc-strength-dots">';
            strengthRequirementMarkup += '<span id="' + secureField.Name + 'StrengthDotsOne" class="gtc-strength-dot"></span>';
            strengthRequirementMarkup += '<span id="' + secureField.Name + 'StrengthDotsTwo" class="gtc-strength-dot"></span>';
            strengthRequirementMarkup += '<span id="' + secureField.Name + 'StrengthDotsThree" class="gtc-strength-dot"></span>';
            strengthRequirementMarkup += '<span id="' + secureField.Name + 'StrengthDotsFour" class="gtc-strength-dot"></span></div>';
            strengthRequirementMarkup += '<div class="gtc-password-requirements" id="' + secureField.Name + 'Requirements"><ul>';
            strengthRequirementMarkup += '<li id="' + secureField.Name + 'PasswordLength">Password must have at least ' + secureField.PasswordLength + ' characters.</li>';
            if (passwordComplexityInt > 0) {
                strengthRequirementMarkup += '<li>Password must have ';
                switch (passwordComplexityInt) {
                    case 1:
                        strengthRequirementMarkup += '<span id="' + secureField.Name + 'ComplexityDisplay">one</span>';
                        break;
                    case 2:
                        strengthRequirementMarkup += '<span id="' + secureField.Name + 'ComplexityDisplay">two</span>';
                        break;
                    case 3:
                        strengthRequirementMarkup += '<span id="' + secureField.Name + 'ComplexityDisplay">three</span>';
                        break;
                    case 4:
                        strengthRequirementMarkup += '<span id="' + secureField.Name + 'ComplexityDisplay">all</span>';
                        break;
                }
                strengthRequirementMarkup += ' of the following:<ul>';
                strengthRequirementMarkup += '<li id="' + secureField.Name + 'LowerCaseDisplay">At least one lowercase letter</li>';
                strengthRequirementMarkup += '<li id="' + secureField.Name + 'UppercaseDisplay">At least one uppercase letter</li>';
                strengthRequirementMarkup += '<li id="' + secureField.Name + 'NumberDisplay">At least one number</li>';
                strengthRequirementMarkup += '<li id="' + secureField.Name + 'SybmolDisplay">At least one symbol</li>';
                strengthRequirementMarkup += '</ul></li>';
            }
            strengthRequirementMarkup += '</ul></div>';

            // Attach focus event to show requirements drop down and more
            Events.On(document.body, 'focusin.testpassword.' + secureField.Name, '#' + secureField.Name,
                function () {
                    // Initialize
                    var secureFieldObject = Common.Get(secureField.Name);
                    var passwordLength = Common.Get(secureField.Name + 'PasswordLength');
                    var lowerCase = Common.Get(secureField.Name + 'LowerCaseDisplay');
                    var upperCase = Common.Get(secureField.Name + 'UppercaseDisplay');
                    var number = Common.Get(secureField.Name + 'NumberDisplay');
                    var symbol = Common.Get(secureField.Name + 'SybmolDisplay');
                    var complexity = Common.Get(secureField.Name + 'ComplexityDisplay');
                    var strengthOne = Common.Get(secureField.Name + 'StrengthDotsOne');
                    var strengthTwo = Common.Get(secureField.Name + 'StrengthDotsTwo');
                    var strengthThree = Common.Get(secureField.Name + 'StrengthDotsThree');
                    var strengthFour = Common.Get(secureField.Name + 'StrengthDotsFour');

                    // Position requirements drop down and show it
                    var secureFieldPosition = Common.Position(secureFieldObject);
                    var posLeft = secureFieldPosition.left;
                    var posTop = secureFieldPosition.top + Common.Height(secureFieldObject, true);
                    var secureFieldWidth = Common.Width(secureFieldObject, true);
                    var requirementsSection = Common.Get(secureField.Name + 'Requirements');
                    var requirementsStyle = requirementsSection.style;
                    requirementsStyle.left = posLeft + 'px';
                    requirementsStyle.width = secureFieldWidth + 'px';
                    requirementsStyle.top = posTop + 'px';
                    Velocity(requirementsSection, 'slideDown', 'slow');

                    // Adjust screen height if needed
                    var calendarDisplayHeight = Common.Height(requirementsSection, true);
                    var coords = Common.Offset(requirementsSection.previousSibling);
                    if (Common.IsModal()) {
                        var modalSecureField = Common.Query('.gtc-modal-iframe', null, true);
                        var modalBottom = Common.Height(modalSecureField.parentNode) + Common.Offset(modalSecureField.parentNode).top;
                        var secureFieldBottom = calendarDisplayHeight + Common.Offset(secureFieldObject.parentNode).top + coords.top + Common.Height(secureFieldObject.parentNode) + Common.Offset(modalSecureField.parentNode).top;
                        if (secureFieldBottom > modalBottom) {
                            Cache.Set(secureFieldObject, 'IsHeightIncreased', true);
                            Cache.Set(secureFieldObject, 'HeightIncrease', secureFieldBottom - modalBottom + (parseInt(calendarDisplayHeight) * 2));
                            var currentHeight = parseInt(modalSecureField.parentNode.style.height, 10);
                            modalSecureField.parentNode.style.height = (currentHeight + Cache.Get(secureFieldObject, 'HeightIncrease')) + 'px';
                        }
                    }

                    // Setup password strength check
                    Events.On(secureFieldObject, 'keyup keydown',
                        function () {
                            // Get currently entered password
                            var currentValue = this.value;

                            // If field empty remove all styling or update requirements and strength test
                            if (currentValue.length > 0) {
                                var requirementsPass = true;

                                // Check length requirement and update drop down
                                if (currentValue.length < passwordLengthInt) {
                                    requirementsPass = false;
                                    StrengthClass('Remove', passwordLength, 'gtc-requirement-pass');
                                    StrengthClass('Add', passwordLength, 'gtc-requirement-fail');

                                }
                                else {
                                    StrengthClass('Remove', passwordLength, 'gtc-requirement-fail');
                                    StrengthClass('Add', passwordLength, 'gtc-requirement-pass');
                                }

                                // Define complexity points value
                                var currentPoints = 0;

                                // Test lower case requirement and update drop down
                                if (/[a-z]/.test(currentValue)) {
                                    currentPoints++;
                                    StrengthClass('Add', lowerCase, 'gtc-requirement-pass');
                                }
                                else {
                                    StrengthClass('Remove', lowerCase, 'gtc-requirement-pass');
                                }

                                // Test upper case requirement and update drop down
                                if (/[A-Z]/.test(currentValue)) {
                                    currentPoints++;
                                    StrengthClass('Add', upperCase, 'gtc-requirement-pass');
                                }
                                else {
                                    StrengthClass('Remove', upperCase, 'gtc-requirement-pass');
                                }

                                // Test number requirement and update drop down
                                if (/[0-9]/.test(currentValue)) {
                                    currentPoints++;
                                    StrengthClass('Add', number, 'gtc-requirement-pass');
                                }
                                else {
                                    StrengthClass('Remove', number, 'gtc-requirement-pass');
                                }

                                // Test symbol requirement and update drop down
                                if (/[!@#$%^&*()\-_=+<>.?]/.test(currentValue)) {
                                    currentPoints++;
                                    StrengthClass('Add', symbol, 'gtc-requirement-pass');
                                }
                                else {
                                    StrengthClass('Remove', symbol, 'gtc-requirement-pass');
                                }

                                // Check complexity requirement and update drop down
                                if (currentPoints < passwordComplexityInt) {
                                    requirementsPass = false;
                                    StrengthClass('Remove', complexity, 'gtc-requirement-pass');
                                    StrengthClass('Add', complexity, 'gtc-requirement-fail');
                                }
                                else {
                                    StrengthClass('Remove', complexity, 'gtc-requirement-fail');
                                    StrengthClass('Add', complexity, 'gtc-requirement-pass');
                                }

                                // If we fail requirements update strength dots to show failure
                                if (!requirementsPass) {
                                    StrengthClass('Remove', strengthOne, 'gtc-strength-dot-weak gtc-strength-dot-medium gtc-strength-dot-good');
                                    StrengthClass('Remove', strengthTwo, 'gtc-strength-dot-weak gtc-strength-dot-medium gtc-strength-dot-good');
                                    StrengthClass('Remove', strengthThree, 'gtc-strength-dot-medium gtc-strength-dot-good');
                                    StrengthClass('Remove', strengthFour, 'gtc-strength-dot-good');
                                    StrengthClass('Add', strengthOne, 'gtc-strength-dot-fail');
                                }
                                else {
                                    // Test password strength
                                    var strength = zxcvbn(currentValue);

                                    // Update dots to display weak, medium or good password strength
                                    if (strength.score == 0 || strength.score == 1) {
                                        StrengthClass('Remove', strengthOne, 'gtc-strength-dot-fail gtc-strength-dot-medium gtc-strength-dot-good');
                                        StrengthClass('Remove', strengthTwo, 'gtc-strength-dot-medium gtc-strength-dot-good');
                                        StrengthClass('Remove', strengthThree, 'gtc-strength-dot-medium gtc-strength-dot-good');
                                        StrengthClass('Remove', strengthFour, 'gtc-strength-dot-good');
                                        StrengthClass('Add', strengthOne, 'gtc-strength-dot-weak');
                                        StrengthClass('Add', strengthTwo, 'gtc-strength-dot-weak');
                                    }
                                    else if (strength.score == 2) {
                                        StrengthClass('Remove', strengthOne, 'gtc-strength-dot-fail gtc-strength-dot-weak gtc-strength-dot-good');
                                        StrengthClass('Remove', strengthTwo, 'gtc-strength-dot-weak gtc-strength-dot-good');
                                        StrengthClass('Remove', strengthThree, 'gtc-strength-dot-good');
                                        StrengthClass('Remove', strengthFour, 'gtc-strength-dot-good');
                                        StrengthClass('Add', strengthOne, 'gtc-strength-dot-medium');
                                        StrengthClass('Add', strengthTwo, 'gtc-strength-dot-medium');
                                        StrengthClass('Add', strengthThree, 'gtc-strength-dot-medium');
                                    }
                                    else if (strength.score == 3 || strength.score == 4) {
                                        StrengthClass('Remove', strengthOne, 'gtc-strength-dot-fail gtc-strength-dot-weak gtc-strength-dot-medium');
                                        StrengthClass('Remove', strengthTwo, 'gtc-strength-dot-weak gtc-strength-dot-medium');
                                        StrengthClass('Remove', strengthThree, 'gtc-strength-dot-medium');
                                        StrengthClass('Add', strengthOne, 'gtc-strength-dot-good');
                                        StrengthClass('Add', strengthTwo, 'gtc-strength-dot-good');
                                        StrengthClass('Add', strengthThree, 'gtc-strength-dot-good');
                                        StrengthClass('Add', strengthFour, 'gtc-strength-dot-good');
                                    }
                                }
                            }
                            else {
                                // Field empty, clear all requirement and strength styling
                                StrengthClass('Remove', passwordLength, 'gtc-requirement-fail gtc-requirement-pass');
                                StrengthClass('Remove', lowerCase, 'gtc-requirement-pass');
                                StrengthClass('Remove', upperCase, 'gtc-requirement-pass');
                                StrengthClass('Remove', number, 'gtc-requirement-pass');
                                StrengthClass('Remove', symbol, 'gtc-requirement-pass');
                                StrengthClass('Remove', complexity, 'gtc-requirement-fail gtc-requirement-pass');
                                StrengthClass('Remove', strengthOne, 'gtc-strength-dot-fail gtc-strength-dot-weak gtc-strength-dot-medium gtc-strength-dot-good');
                                StrengthClass('Remove', strengthTwo, 'gtc-strength-dot-fail gtc-strength-dot-weak gtc-strength-dot-medium gtc-strength-dot-good');
                                StrengthClass('Remove', strengthThree, 'gtc-strength-dot-fail gtc-strength-dot-weak gtc-strength-dot-medium gtc-strength-dot-good');
                                StrengthClass('Remove', strengthFour, 'gtc-strength-dot-fail gtc-strength-dot-weak gtc-strength-dot-medium gtc-strength-dot-good');
                            }
                        }
                    );
                }
            );

            // Attack focus out event to hide requirement drop down and remove key events
            Events.On(document.body, 'focusout.testpassword.' + secureField.Name, '#' + secureField.Name,
                function () {
                    var secureFieldObject = Common.Get(secureField.Name);
                    Velocity(Common.Get(secureField.Name + 'Requirements'), 'slideUp', 100);
                    Events.Off(secureFieldObject, 'keyup keydown');

                    // Adjust Height if it was added
                    if (Cache.Get(secureFieldObject, 'IsHeightIncreased')) {
                        Cache.Set(secureFieldObject, 'IsHeightIncreased', false);
                        if (Common.IsModal()) {
                            var modalSecureField = Common.Query('.gtc-modal-iframe', null, true);
                            var currentHeight = parseInt(modalSecureField.parentNode.style.height, 10);
                            modalSecureField.parentNode.style.height = (currentHeight - Cache.Get(secureFieldObject, 'HeightIncrease')) + 'px';
                        }
                    }
                }
            );
        }

        // @Data-NameSpace, @Data-FieldType, Type@, Input/> + extra password setup markup
        secureFieldMarkup += ' data-namespace="SecureField" data-configure="Pre" type="password" />' + strengthRequirementMarkup;

        // configuresecurefield event: Setup configuring of secure (triggered from Page.Configure)
        Events.One(document.body, 'configuresecurefield',
            function (event) {
                var secureFieldObject = Common.Get(secureField.Name);

                // Handle locked field
                if (secureField.IsLocked == 'Yes') {
                    Common.SetAttr(secureFieldObject, 'data-locked', 'true');
                    Common.SetAttr(secureFieldObject, 'disabled', 'disabled');
                    Common.SetAttr(secureFieldObject, 'data-focusindex', Common.GetAttr(secureFieldObject, 'tabindex'));
                    Common.SetAttr(secureFieldObject, 'tabindex', '-1');
                    Common.AddClass(secureFieldObject, 'gtc-input-locked');
                    secureFieldObject.insertAdjacentHTML('afterend', '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
                    if (secureField.SetupPassword == 'Yes') {
                        Common.Get(secureFieldObject.id + 'StrengthDots').style.display = 'none';
                    }
                }
            }
        );

        // Icon
        if (Common.IsDefined(secureField.Icon)) {
            secureFieldMarkup += Icon.Render(secureField.Icon, true, labelExists);
        }
        return secureFieldMarkup;

    };

    SecureField.Configure = function (field, configureStage) {

        Events.Trigger(field, 'configuresecurefield');

    };

    SecureField.OnChange = function(event) {

        // Remove Prefix_
        var fieldParameterName = Common.RemovePrefix(this.name);

        // Field Value
        var fieldValueUiParameter = [
            {
                Name: fieldParameterName,
                Value:  this.value,
                UiParameters: null
            }
        ];

        // Call OnChange
        Field.OnChange(this, fieldValueUiParameter);

    };

    SecureField.Lock = function (field) {

        if (Common.IsNotDefined(Common.GetAttr(field, 'data-locked'))) {
            Common.SetAttr(field, 'data-locked', 'true');
            Common.SetAttr(field, 'disabled', 'disabled');
            Common.SetAttr(field, 'data-focusindex', Common.GetAttr(field, 'tabindex'));
            Common.SetAttr(field, 'tabindex', '-1');
            Common.AddClass(field, 'gtc-input-locked');
            field.insertAdjacentHTML('afterend', '<span class="gtc-input-system"><i class="gtc-icon-styles fa fa-lock"></i></span>');
            var strengthDots = Common.GetAllSibling(field, Common.SiblingType.Next, '.gtc-strength-dots')
            if (strengthDots.length == 1) {
                strengthDots[0].style.display = 'none';
            }
        }

    };

    SecureField.Unlock = function (field) {

        if (Common.IsDefined(Common.GetAttr(field, 'data-locked'))) {
            Common.RemoveAttr(field, 'data-locked');
            Common.RemoveAttr(field, 'disabled');
            Common.SetAttr(field, 'tabindex', Common.GetAttr(field, 'data-focusindex'));
            Common.RemoveClass(field, 'gtc-input-locked');
            Common.Remove(Common.Query('.gtc-input-system', field.parentNode));
            var strengthDots = Common.GetAllSibling(field, Common.SiblingType.Next, '.gtc-strength-dots')
            if (strengthDots.length == 1) {
                strengthDots[0].style.display = '';
            }
        }

    };

    SecureField.HasValue = function (secureField) {

        return ValueField.HasValue(secureField);

    };

    SecureField.IsCompleted = function (field) {

        return ValueField.IsCompleted(field);

    };

    SecureField.UpdateValue = function (field, fieldValue) {

        ValueField.UpdateValue(field, fieldValue);

    };

    SecureField.UpdateLabel = function (field, fieldLabel, promises, context) {

        Field.UpdateLabel(field, fieldLabel, promises, context);

    };

    SecureField.ShowPinwheel = function (field) {

        Field.ShowPinwheel(field, 'FadingCircle');

    };

    SecureField.HidePinwheel = function (field) {

        Field.HidePinwheel(field);

    };

    // Private Methods
    function StrengthClass (which, object, classString) {

        var classes = classString.split(' ');
        var className, index = 0, length = classes.length;
        for ( ; index < length; index++) {
            className = classes[index];
            var hasClass = Common.HasClass(object, className);
            if (which == 'Add') {
                if (!hasClass) {
                    Common.AddClass(object, className);
                }
            }
            else {
                if (hasClass) {
                    Common.RemoveClass(object, className);
                }
            }
        }

    };

} (window.SecureField = window.SecureField || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class CheckboxField
 * @classdesc Supports the CheckboxField View Element<br>
 *            Based On: ViewElement > Field
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (CheckboxField, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function CheckboxField.Render
     * @param {object} checkboxField - The CheckboxField View Element in JSON format
     * @description Generates the HTML markup for the CheckboxField View Element 
     * @returns {string} HTML Markup of the CheckboxField View Element
     * @listens click (id = <var>checkboxFieldName</var>Wrapper)
     * @listens click (window)
     */
    CheckboxField.Render = function (checkboxField) {

        // Label Exists (needed for Icon rendering)
        var labelExists = true;
        if (Common.IsNotDefined(checkboxField.Label)) {
            labelExists = false;
        }

        // 508 Compliance
        var className = '';
        if (Common.IsNotDefined(checkboxField.Label)) {
            var generatedLabel = {
                TextString: checkboxField.Name,
                ScreenReaderOnly: true
            };
            if (Common.IsDefined(checkboxField.Placeholder)) {
                generatedLabel.TextString = checkboxField.Placeholder;
            }
            checkboxField.Label = generatedLabel;
        }

        // 508 Compliance
        if (checkboxField.Label.ScreenReaderOnly == true) {
            className += ' gtc-sr-only';
        }

        // Choice Type?
        var choiceType = '';
        if (Common.IsDefined(checkboxField.ChoiceDetail) && Common.IsDefined(checkboxField.ChoiceDetail.Source)) {
            choiceType = checkboxField.ChoiceDetail.Source;
        }

        // FieldSet<, @Data-TranslateContent, Legend<
        var checkboxFieldMarkup = '<fieldset class="gtc-input-checkbox-group';
        if (Common.IsDefined(checkboxField.Icon)) {
            if (labelExists == false) {
                checkboxFieldMarkup += ' gtc-input__icon-left';
            }
            else {
                checkboxFieldMarkup += ' gtc-input__icon-label-left';
            }
        }
        checkboxFieldMarkup += '" id="' + checkboxField.Name + '" name="' + checkboxField.Name + '" data-serializable role="checkboxgroup" data-namespace="CheckboxField" data-configure="Pre"';
        checkboxFieldMarkup += ' data-choicetype="' + choiceType + '" data-translatecontent="' + checkboxField.TranslateContent + '"><legend class="gtc-input-checkbox-label gtc-label' + className + '" for="' + checkboxField.Name + '"><span';

        // Translations
        if (Common.IsDefined(checkboxField.Label) && Common.IsDefined(checkboxField.Label.TextString)) {
            checkboxFieldMarkup += ' data-translate="' + checkboxField.Label.TextString + '"';
        }

        // Span>, Label, Span</>
        checkboxFieldMarkup += '>' + Common.TranslateKey(checkboxField.Label.TextString) + '</span>';
        checkboxFieldMarkup += Field.RenderLabel(checkboxField, true) + '</legend>';

        // Tooltip
        if (Common.IsDefined(checkboxField.Label.Tooltip)) {
            checkboxFieldMarkup += '<a class="gtc-tooltip gtc-label-tooltip" data-translate="[data-tooltip]' + checkboxField.Label.Tooltip + '" data-tooltip="' + Common.TranslateKey(checkboxField.Label.Tooltip) + '"></a>';
        }

        // Data-Disabled@
        var fieldAttributesMarkup = Field.RenderAttributes(checkboxField);
        
        // Vertical Checkbox markup
        var idNamespaces = '';
        if (checkboxField.Orientation == 'Vertical') {
            // Div<, Span</>, Anchor</>, Div<
            checkboxFieldMarkup += '<div class="gtc-vertical-checkbox-wrapper"><div class="gtc-vertical-checkbox" id="' + checkboxField.Name + 'Wrapper"><span class="gtc-vertical-TagsSpan gtc-classSpanSelectbox"><a class="gtc-vertical-tags" role="button">&nbsp;</a></span></div><div id="' + checkboxField.Name + 'DropdownWrapper" class="gtc-dropdown-wrapper">';
            idNamespaces += '.' + checkboxField.Name + 'Wrapper';
        }

        // Build Checkbox
        checkboxFieldMarkup += '<div class="gtc-checkboxgroup-divforlabels">';
        if (Common.IsDefined(checkboxField.ChoiceDetail) && Common.IsDefined(checkboxField.ChoiceDetail.Choices)) {
            var choice, index = 0, length = checkboxField.ChoiceDetail.Choices.length;
            for ( ; index < length; index++) {
                // Choice
                choice = checkboxField.ChoiceDetail.Choices[index];
                checkboxFieldMarkup += Choice.Render(checkboxField, choice, fieldAttributesMarkup);
            }
        }

        // Vertical Checkbox Div>, Div>
        if (checkboxField.Orientation == 'Vertical') {
            checkboxFieldMarkup += '</div></div>';
        }

        // Div>, Fieldset>
        checkboxFieldMarkup += '</div></fieldset>';

        // Icon
        if (Common.IsDefined(checkboxField.Icon)) {
            checkboxFieldMarkup += Icon.Render(checkboxField.Icon, true, labelExists);
        }

        // Attach click event
        if (checkboxField.Orientation == 'Vertical') {
            var mobileEventType = '';
            if (Common.CheckMedia('Mobile') || Common.CheckMedia('Tablet')) {
                mobileEventType += ' touchstart' + idNamespaces;
            }
            Events.On(document.body, 'click' + mobileEventType, '#' + checkboxField.Name + 'Wrapper',
                function (event) {
                    var checkBox = event.currentTarget.nextSibling;
                    CloseCheckboxDropDowns();
                    if (Common.IsHidden(checkBox)) {
                        Common.AddClass(event.currentTarget, 'gtc-tagsDropdown-upArrow');
                        Velocity(checkBox, 'slideDown', 200);
                    } 
                    else {
                        Common.RemoveClass(event.currentTarget, 'gtc-tagsDropdown-upArrow');
                        Velocity(checkBox, 'slideUp', 200);
                    }
                }
            );

            // Outside click event handling
            Events.On(window, 'click',
                function (event) {
                    if (Common.IsDefined(event.target.parentElement)) {
                        var currentClass = Common.GetAttr(event.target.parentElement, 'class');
                        if (Common.IsDefined(currentClass)) {
                            if (currentClass.indexOf('gtc-vertical') == '-1' && currentClass.indexOf('gtc-input-checkbox') == '-1' && currentClass.indexOf('gtc-checkboxgroup-divforlabels') == '-1') {
                                CloseCheckboxDropDowns();
                            } 
                        }
                    }
                }
            );
        }

        // Return
        return checkboxFieldMarkup;

    };

    /**
     * @function CheckboxField.Configure
     * @param {object} field - The CheckboxField DOM element
     * @param {string} configureStage - Pre for Configuration before Translations or Post for Configuration after Translations
     * @description Called by Page.Configure after the dynamic HTML markup is added to the DOM
     */
    CheckboxField.Configure = function (field, configureStage) {

        var checkboxChoices = Common.QueryAll('.gtc-input-checkbox-choice', field);
        if (checkboxChoices.length > 0) {
            Widgets.checkbox(checkboxChoices, { ClassLabelCheckboxUnchecked: 'gtc-classLabelCheckboxUnchecked', ClassLabelCheckboxUncheckedHover: 'gtc-classLabelCheckboxUncheckedHover', ClassLabelCheckboxChecked: 'gtc-input-checkbox-selected', ClassLabelCheckboxCheckedHover: 'gtc-classLabelCheckboxCheckedHover' });
        }

    };

    /**
     * @function CheckboxField.SerializeArray
     * @param {object} serializable - The CheckboxField DOM element
     * @description Serializes the choices in the CheckboxField
     * @returns {UiParameter} An UiParameter with the property UiParameters set to the checked choices of the CheckboxField
     */
    CheckboxField.SerializeArray = function (serializable) {

        // Serialize Checkboxes
        fieldParameterName = Common.RemovePrefix(serializable.id);
        var choiceType = Common.GetAttr(serializable, 'data-choicetype');
		var checkboxes = Common.QueryAll('.gtc-input-checkbox-choice', serializable);
		uiParameters = [];
		var checkbox, entityParameter, uiParameter, index = 0, length = checkboxes.length;
		for ( ; index < length; index++) {
			checkbox = checkboxes[index];
			entityParameter = {
				Name: choiceType,
				Value: null,
				UiParameters: []
			};
			if (checkbox.checked == true) {
				if (choiceType == 'Text') {
					entityParameter.Value = Common.GetAttr(checkbox, 'data-id');
				}
				else {
					entityParameter.UiParameters.push({
						Name: 'Id',
						Value: Common.GetAttr(checkbox, 'data-id')
					});
				}
				uiParameters.push(entityParameter);
			}
		}    

        // Field UiParameter
        var uiParameter = {
            Name: fieldParameterName,
            Value: null,
            UiParameters: uiParameters
        }
        return uiParameter;

    };

    /**
     * @function CheckboxField.OnChange
     * @param {event} event - A DOM click Event
     * @description Calls Field.OnChange (which will call the OnChange<i>CheckboxField</i> Behavior)
     */
    CheckboxField.OnChange = function (event) {

        // Serialize
        var fieldValueUiParameter = [];
        serializable = event.target.parentElement;
        fieldValueUiParameter.push(CheckboxField.SerializeArray(serializable));

        // Call OnChange
        Field.OnChange(this, fieldValueUiParameter);

    };

    /**
     * @function CheckboxField.IsCompleted
     * @param {object} field - The CheckboxField DOM element
     * @description Returns <i>true</i>
     * @returns {boolean} Returns <i>true</i>
     */
    CheckboxField.IsCompleted = function (field) {

        return true;

    };

    /**
     * @function CheckboxField.HasValue
     * @param {object} field - The CheckboxField DOM element
     * @description Returns <i>true</i>
     * @returns {boolean} Returns <i>true</i>
     */
    CheckboxField.HasValue = function (field) {

        return true;

    };

    /**
     * @function CheckboxField.ReplaceElement
     * @param {object} field - The CheckboxField DOM element
     * @param {object[]} viewElements -  An array that contains one CheckboxField View Element in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @description Replaces the choices inside a CheckboxField
     * @fires focusout (CheckboxField)
     */
    CheckboxField.ReplaceElement = function (field, viewElements, promises) {

        // Build Choice Array
        var choiceArray = [];
        var choiceDetail = viewElements[0].ChoiceDetail;
        var checkboxChoice, choiceIndex = 0, choiceLength = choiceDetail.Choices.length;
        for (; choiceIndex < choiceLength; choiceIndex++) {
            checkboxChoice = choiceDetail.Choices[choiceIndex];
            var checkBoxName = field.name + Common.SanitizeToken(checkboxChoice.Name);
            var checkBoxValue = (checkboxChoice.IsChecked == "Yes") ? true : false;
            choiceArray.push(
                {
                    Name: checkBoxName,
                    Value: checkBoxValue
                }
            );
        }

        // Update checkboxes
        var checkboxes = Common.QueryAll('.gtc-input-checkbox-choice');
        var checkbox, index = 0, length = checkboxes.length;
        for (; index < length; index++) {
            checkbox = checkboxes[index];
            if (IsChecked(choiceArray, checkbox)) {
                Common.SetAttr(checkbox, "checked", "checked");
                checkbox.checked = true;
            }
            else {
                Common.RemoveAttr(checkbox, "checked");
                checkbox.checked = false;
            }
            GTC.TriggerEvent(checkbox, 'widgetUpdateValue');
        }
        Events.Trigger(field, 'focusout');

    };

    /**
     * @function CheckboxField.UpdateLabel
     * @param {object} field - The CheckboxField DOM element
     * @param {string} fieldLabel - The new label for the Field
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the label of the CheckboxField
     */
    CheckboxField.UpdateLabel = function (field, fieldLabel, promises, context) {

        var label = Common.Query('legend', field);
        Label.UpdateLabel(label, fieldLabel, promises, context, Common.IsHidden(field));

    };

    // Private Methods
    function IsChecked (choiceArray, checkbox) {

        var checkboxChoice, choiceIndex = 0, choiceLength = choiceArray.length;
        for (; choiceIndex < choiceLength; choiceIndex++) {
            checkboxChoice = choiceArray[choiceIndex];
            if (checkboxChoice.Name == checkbox.name) {
                return checkboxChoice.Value;
            }
        }
        return false;

    };

    function CloseCheckboxDropDowns () {

        var index = 0, checkBoxWrapper = Common.QueryAll('.gtc-vertical-checkbox-wrapper');
        for (; index < checkBoxWrapper.length; index++) {
            var boxWrapperChildren = Common.GetChildren(checkBoxWrapper[index], '.gtc-dropdown-wrapper');
            var tagDropDownArrow = Common.GetChildren(checkBoxWrapper[index], '.gtc-vertical-checkbox');
            var checkBoxDropdownDiv = Common.GetByClass('gtc-dropdown-wrapper', checkBoxWrapper[index]);
            if (Common.IsVisible(checkBoxDropdownDiv[0])) {
                Velocity(boxWrapperChildren, 'slideUp', 300);
            }
            Common.RemoveClass(tagDropDownArrow[0], 'gtc-tagsDropdown-upArrow');
        }

    };

} (window.CheckboxField = window.CheckboxField || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class Choice
 * @classdesc Supports the Choice property inside the CheckboxField<br>
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (Choice, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function Choice.Render
     * @param {object} checkboxField - The CheckboxField View Element in JSON format
     * @param {object} choice - The Choice in JSON format
     * @param {string} fieldAttributesMarkup - The Field attributes of the CheckboxField
     * @description Generates the HTML markup for a Choice inside a CheckboxField View Element 
     * @returns {string} HTML Markup of the Choice
     * @listens change.fieldvaluechange (id = <var>checkboxFieldNamechoiceName</var>)
     */
    Choice.Render = function (checkboxField, choice, fieldAttributesMarkup) {

        // Initialize
        var convertedToken = Common.SanitizeToken(choice.Name);

        // Label<, For@, Display, Input<, @Data-NameSpace, @Data-FieldType, @Data-Translate
        var choiceMarkup = '<label role="checkbox" class="gtc-input-checkbox" for="' + checkboxField.Name + convertedToken + '"><span';
        if (checkboxField.TranslateContent == 'Yes') {
            choiceMarkup += ' data-translate="' + choice.Display + '">' + Common.TranslateKey(choice.Display);
        }
        else {
            choiceMarkup += '>' + choice.Display;
        }
        choiceMarkup += '</span><input ';

        // Data-Disabled@
        choiceMarkup += fieldAttributesMarkup;

        // Checked@
        if (choice.IsChecked == 'Yes') {
            choiceMarkup += ' checked="checked"';
        }

        // Data-Serializable@
        if (checkboxField.IsSerializable == 'Yes') {
            Events.On(document.body, 'change.fieldvaluechange.' + checkboxField.Name + convertedToken, '#' + checkboxField.Name + convertedToken,
                function () {
                    Common.SetAttr(this, 'data-haschanged', 'Yes');
                }
            );
        }

        // Data-ControllerPath/ActionName@, Wire OnChange!
        if (Common.IsEventViewElementDefined(checkboxField.OnChange)) {
            choiceMarkup += Field.AttachOnChange(checkboxField, CheckboxField.OnChange, convertedToken);
        }

        // 508 Compliance
        if (checkboxField.IsRequired == 'Yes') {
            choiceMarkup += ' aria-required="true"';
        }

        // Data-CheckboxGroup@, @Name, @Value, @TabIndex, @Class, @Id, @Type
        choiceMarkup += ' data-namespace="Choice" data-checkboxgroup="' + checkboxField.Name + '" name="' + checkboxField.Name + convertedToken + '" data-id="' + choice.Name + '"';
        choiceMarkup += ' tabindex="' + checkboxField.FocusIndex + '" id="' + checkboxField.Name + convertedToken + '" type="checkbox" class="gtc-input-checkbox-choice" />';

        // Label</>
        choiceMarkup += '</label>';

        // Return
        return choiceMarkup;

    };

    /**
     * @function Choice.ShowPinwheel
     * @param {object} field - The CheckboxField DOM element
     * @description Shows Pinwheel on the View Element
     */
    Choice.ShowPinwheel = function (field) {

        Field.ShowPinwheel(field, 'FadingCircle');

    };

    /**
     * @function Choice.HidePinwheel
     * @param {object} field - The CheckboxField DOM element
     * @description Hides Pinwheel on the View Element
     */
    Choice.HidePinwheel = function (field) {

        Field.HidePinwheel(field);

    };

} (window.Choice = window.Choice || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class CardPanel
 * @classdesc Supports the CardPanel View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (CardPanel, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function CardPanel.Render
     * @param {object} cardPanel - The CardPanel View Element in JSON format
     * @description Generates the HTML markup for the CardPanel View Element 
     * @returns {string} HTML Markup of the CardPanel View Element
     */
    CardPanel.Render = function (cardPanel) {

        // Div<, TabIndex@, Class@, Id@, Div>
        var cardPanelMarkup = '<div class="gtc-card-panel" data-namespace="CardPanel"' + ViewElement.RenderAttributes(cardPanel);

        // On Add Event
        if (Common.IsEventViewElementDefined(cardPanel.OnAdd)) {
            // Data-ControllerPath/ActionName
            cardPanelMarkup += ' data-add=\'' + JSON.stringify(cardPanel.OnAdd) + '\'';
        }
        cardPanelMarkup += '>';

        // Dimension
        var dimensionClass = '';
        var hasFixedHeight = false;
        var dimensionStyle = StyleHelper.BuildDimensionStyle(cardPanel.Dimension);
        if (Common.IsDefined(dimensionStyle) && Common.IsOneDefined([dimensionStyle.Height, dimensionStyle.Width])) {
            var styleClass = 'gtc-card-panel-' + cardPanel.Name.toLowerCase();
            cardPanelMarkup += '<style>.' + styleClass + ' {';
            if (Common.IsDefined(dimensionStyle.Height)) {
                cardPanelMarkup += 'height:' + dimensionStyle.Height;
                if (cardPanel.Dimension.Scale != '%') {
                    hasFixedHeight = true;
                }
            }
            cardPanelMarkup += '}</style>';
            dimensionClass = ' gtc-card-panel-background ' + styleClass;
        }

        // Header Area
        cardPanelMarkup += '<div class="gtc-card-panel-header">';

        // Title
        if (Common.IsDefined(cardPanel.Title)) {
            cardPanelMarkup += '<h2 id="' + cardPanel.Name + 'Title" class="gtc-page-theme-color" data-translate="' + cardPanel.Title + '">' + Common.TranslateKey(cardPanel.Title) + '</h2>';
        }

        // Links
        if (Common.IsDefined(cardPanel.Links) && cardPanel.Links.length > 0) {
            cardPanelMarkup += '<div class="gtc-card-panel-links">';

            // Links
            var link, index = 0, length = cardPanel.Links.length;
            for ( ; index < length; index++) {
                link = cardPanel.Links[index];

                // Id?
                if (Common.IsDefined(cardPanel.Id)) {
                    // Update name to be unique
                    link.Name += Common.SanitizeToken(cardPanel.Id);
                }

                // Li<>, Anchor, Li</>
                cardPanelMarkup += Link.Render(link);
            }
            cardPanelMarkup += '</div>';
        }

        // Close Header Area
        cardPanelMarkup += '</div>';

        // Cards container
        var scrollClass = '';
        if (hasFixedHeight) {
            scrollClass = ' gtc-cfscroll-y';
        }
        cardPanelMarkup += '<div id="' + cardPanel.Name + '-container" class="gtc-card-panel-body' + dimensionClass + ' gtc-columns-' + cardPanel.CardsPerLine + scrollClass + '">';

        // Cards
        var cardType = 'Default';
        if (Common.IsDefined(cardPanel.Cards)) {
            var card, index = 0, length = cardPanel.Cards.length;
            for ( ; index < length; index++) {
                card = cardPanel.Cards[index];
                cardPanelMarkup += Card.Render(card);
            }
        }

        // Div</>
        cardPanelMarkup += '</div></div>';
        return cardPanelMarkup;

    };

    /**
     * @function CardPanel.ReplaceContent
     * @param {object} cardPanel - The CardPanel DOM element
     * @param {object[]} viewElements -  An array that contains one or more Card View Elements in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @description Replaces a set of Cards to the CardPanel
     */
    CardPanel.ReplaceContent = function (cardPanel, viewElements, promises) {

        var cardPanelContainer = Common.Get(cardPanel.id + '-container');
        var foundCards = Common.QueryAll('.gtc-card:not(.gtc-card-add-new)', cardPanelContainer);
        if (foundCards.length == 0 && (Common.IsNotDefined(viewElements) || viewElements.length == 0)) {
            return;
        }
        else {
            var animationPromise = Common.Promise();
            promises.push(animationPromise.promise);
            var replaceContentFunction = function () {
                // TODO: Find a way during Common.Remove to find elements that have delegated events but no event data cache themselves!
                var i = 0, foundLength = foundCards.length;
                for ( ; i < foundLength; i++) {
                    Cache.CleanDelegatedElementsData(foundCards[i]);
                }
                Common.Remove(foundCards);
                if (Common.IsDefined(viewElements)) {
                    var cardMarkup = '';
                    var card, index = 0, length = viewElements.length;
                    for ( ; index < length; index++) {
                        card = viewElements[index];
                        cardMarkup += Card.Render(card);
                    }
                    var addNewCard = Common.Query('.gtc-card-add-new');
                    cardPanelContainer.appendChild(Common.GenerateFragment(cardMarkup));
                    if (Common.IsHidden(cardPanel)) {
                        Velocity(cardPanel, 'slideDown', 'slow',
                            function () {
                                animationPromise.resolve();
                            }
                        );
                    }
                    else {
                        animationPromise.resolve();
                    }
                }
            };
            if (Common.IsVisible(cardPanel)) {
                Velocity(cardPanel, 'slideUp', 'slow', replaceContentFunction);
            }
            else {
                replaceContentFunction();
            }
        }

    };

    /**
     * @function CardPanel.UpdateTitle
     * @param {object} cardPanel - The CardPanel DOM element
     * @param {string} updatedTitle - The new Title of the CardPanel
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Title of the CardPanel
     */
    CardPanel.UpdateTitle = function (cardPanel, updatedTitle, promises, context) {

        // Get deferred object for animation
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Initialize
        var onParent = context == 'Parent';
        var title = Common.Get(cardPanel.id + 'Title', onParent);
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(updatedTitle);
            Common.SetAttr(title, 'data-translate', updatedTitle);
        };
        if (Common.IsHidden(cardPanel)) {
            updateTitleFunction();
            animationPromise.resolve();
        }
        else {
            // Animate
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

} (window.CardPanel = window.CardPanel || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class Card
 * @classdesc Supports the Card View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (Card, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function Card.Render
     * @param {object} card - The Card View Element in JSON format
     * @description Generates the HTML markup for the Card View Element 
     * @returns {string} HTML Markup of the Card View Element
     * @listens click/tap (body)
     * @listens focusin (id = <var>cardName</var>)
     * @listens focusout (id = <var>cardName</var>)
     * @listens focusin (id = <var>cardName</var>FlipFromFrontLink)
     * @listens focusout (id = <var>cardName</var>FlipFromFrontLink)
     * @listens focusin (id = <var>cardName</var>FlipFromBackLink)
     * @listens focusout (id = <var>cardName</var>FlipFromBackLink)
     * @listens click (id = <var>cardName</var>FlipFromFrontLink)
     * @listens click (id = <var>cardName</var>FlipFromBackLink)
     */
    Card.Render = function (card) {

        // Id?
        if (Common.IsDefined(card.Id)) {
            // Update Id to be unique
            card.Name += Common.SanitizeToken(card.Id);
        }

        // Need flip structuring?
        var hasFlip = Common.IsDefined(card.FlipElement);
        var extraClassing = ' gtc-text-' + card.TextAlignment.toLowerCase();
        var extraFlipAttribute = ' data-card-flippable="false"';
        var extraImageAttribute = '';
        var roleAttribute = '';
        if (hasFlip) {
            extraClassing += ' gtc-card-flippable';
            extraFlipAttribute = ' data-card-flippable="true"';
        }
        if (Common.IsDefined(card.ImageSource)) {
            extraImageAttribute = ' data-image-position="' + card.ImagePosition.toLowerCase() + '"';
        }
        if (Common.IsEventViewElementDefined(card.OnClick)) {
            roleAttribute = ' role="button"';
        }

        // Div<, TabIndex@, Class@, Id@, Div>
        var cardMarkup = '<div class="gtc-card' + extraClassing + '"' + extraFlipAttribute + ' data-namespace="Card"' + roleAttribute + ViewElement.RenderAttributes(card);

        // Wire OnClick!
        if (Common.IsEventViewElementDefined(card.OnClick)) {
            // Data-ControllerPath/ActionName
            cardMarkup += ' data-click=\'' + JSON.stringify(card.OnClick) + '\'';
            var eventType = 'click';
            if (Common.CheckMedia('Mobile') || Common.CheckMedia('Tablet')) {
                eventType = 'tap';
                Touch.InitializeTouchEvents();
            }
            Events.On(document.body, eventType + '.' + card.Name, '#' + card.Name, Card.OnClick);

            // 508 Compliance - Focus In/Focus Out
            Events.On(document.body, 'focusin.' + card.Name, '#' + card.Name,
                function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    Events.On(document, 'keyup.' + card.Name,
                        function (keyupEvent) {
                            keyupEvent.preventDefault();
                            keyupEvent.stopPropagation();
                            var pressedKeyCode = (keyupEvent.keyCode ? keyupEvent.keyCode : keyupEvent.which);
                            if (pressedKeyCode == GTC.Keyboard.Enter) {
                                document.activeElement.blur();
                                var element = Common.Get(card.Name);
                                Events.Trigger(element, 'click');
                            }
                        }
                    );
                }
            );
            Events.On(document.body, 'focusout.' + card.Name, '#' + card.Name,
                function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    Events.Off(document, 'keyup.' + card.Name);
                }
            );
        }
        cardMarkup += '>';
        if (hasFlip) {
            cardMarkup += '<div class="gtc-card-flip-container">';
        }
        cardMarkup += '<div class="gtc-card-front"' + extraImageAttribute + '>';

        // Image
        if (Common.IsDefined(card.ImageSource)) {
            cardMarkup += '<div class="gtc-card-image"><img src="' + Common.BuildResourcePath(card.ImageSource) + '" /></div>';
        }

        // If title or descriptipn add content div
        if (Common.IsDefined(card.Title) || Common.IsDefined(card.Description)) {

            // Card Content
            cardMarkup += '<div id="' + card.Name + 'Content" class="gtc-card-content">';

            // Title
            if (Common.IsDefined(card.Title)) {
                cardMarkup += '<h3 id="' + card.Name + 'Title" class="gtc-page-theme-color" data-translate="' + card.Title + '">' + Common.TranslateKey(card.Title) + '</h3>';
            }

            // Description
            if (Common.IsDefined(card.Description)) {
                cardMarkup += '<p id="' + card.Name + 'Description" data-translate="' + card.Description + '">' + Common.TranslateKey(card.Description) + '</p>';
            }

            // Close Card Content
            cardMarkup += '</div>';
        }

        // Badge
        var badgeInt = parseInt(card.Badge, 10);
        if (Common.IsDefined(card.Badge) && Common.IsNotEmptyString(card.Badge) && (isNaN(card.Badge) || badgeInt > 1)) {
            var badgeClass = 'gtc-card-badge gtc-page-theme-background';
            if (!isNaN(card.Badge)) {
                if (badgeInt > 9) {
                    badgeClass += ' gtc-card-badge-doubledigit';
                }
                else {
                    badgeClass += ' gtc-card-badge-singledigit';
                }
            }
            cardMarkup += '<div class="' + badgeClass + '"><span class="gtc-card-badge-title">' + card.Badge + '</span></div>';
        }

        // Links
        if (Common.IsDefined(card.Links) && card.Links.length > 0) {
            // Div<>
            cardMarkup += '<div class="gtc-card-links">';

            // Links
            var link, index = 0, length = card.Links.length;
            for ( ; index < length; index++) {
                link = card.Links[index];

                // Id?
                if (Common.IsDefined(card.Id)) {
                    // Update Id to be unique
                    link.Name += Common.SanitizeToken(card.Id);
                }

                // Li<>, Anchor, Li</>
                cardMarkup += Link.Render(link);
            }

            // Div</>
            cardMarkup += '</div>';
        }

        // Front Element
        if (Common.IsDefined(card.FrontElement)) {
            cardMarkup += '<div class="gtc-card-front-element">';
            var frontElementNamespace = window[card.FrontElement.Type];
            ViewElement.TestExists(card.FrontElement.Type, frontElementNamespace);
            cardMarkup += frontElementNamespace.Render(card.FrontElement);
            cardMarkup += '</div>';
        }

        // Add flip button
        if (hasFlip) {
            cardMarkup += '<a id="' + card.Name + 'FlipFromFrontLink" class="gtc-card-flip-button"';
            if (card.FocusIndex > 0) {
                cardMarkup += ' tabindex="' + card.FocusIndex + '"';
            }
            cardMarkup += '><i class="gtc-icon-styles fa fa-retweet"></i><span class="gtc-sr-only" translate="FlipToBack">FlipToBack</span></a>';

            // 508 Compliance - Focus In/Focus Out
            Events.On(document.body, 'focusin.' + card.Name + 'FlipFromFrontLink', '#' + card.Name + 'FlipFromFrontLink',
                function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    Events.On(document, 'keyup.' + card.Name + 'FlipFromFrontLink',
                        function (keyupEvent) {
                            keyupEvent.preventDefault();
                            keyupEvent.stopPropagation();
                            var pressedKeyCode = (keyupEvent.keyCode ? keyupEvent.keyCode : keyupEvent.which);
                            if (pressedKeyCode == GTC.Keyboard.Enter) {
                                document.activeElement.blur();
                                var element = Common.Get(card.Name + 'FlipFromFrontLink');
                                Events.Trigger(element, 'click');
                                Common.Get(card.Name + 'FlipFromBackLink').focus();
                            }
                        }
                    );
                }
            );
            Events.On(document.body, 'focusout.' + card.Name + 'FlipFromFrontLink', '#' + card.Name + 'FlipFromFrontLink',
                function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    Events.Off(document, 'keyup.' + card.Name + 'FlipFromFrontLink');
                }
            );
        }

        // Div</>, Div</>
        cardMarkup += '</div>';

        // Add flip element
        if (hasFlip) {
            cardMarkup += '<div class="gtc-card-back">';
            var viewElementNamespace = window[card.FlipElement.Type];
            ViewElement.TestExists(card.FlipElement.Type, viewElementNamespace);
            cardMarkup += viewElementNamespace.Render(card.FlipElement);
            cardMarkup += '<a id="' + card.Name + 'FlipFromBackLink" class="gtc-card-flip-button"';
            if (card.FocusIndex > 0) {
                cardMarkup += ' tabindex="' + card.FocusIndex + '"';
            }
            cardMarkup += '><i class="gtc-icon-styles fa fa-retweet"></i><span class="gtc-sr-only" translate="FlipToFront">FlipToFront</span></a>';
            cardMarkup += '</div>';

            // 508 Compliance - Focus In/Focus Out
            Events.On(document.body, 'focusin.' + card.Name + 'FlipFromBackLink', '#' + card.Name + 'FlipFromBackLink',
                function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    Events.On(document, 'keyup.' + card.Name + 'FlipFromBackLink',
                        function (keyupEvent) {
                            keyupEvent.preventDefault();
                            keyupEvent.stopPropagation();
                            var pressedKeyCode = (keyupEvent.keyCode ? keyupEvent.keyCode : keyupEvent.which);
                            if (pressedKeyCode == GTC.Keyboard.Enter) {
                                document.activeElement.blur();
                                var element = Common.Get(card.Name + 'FlipFromBackLink');
                                Events.Trigger(element, 'click');
                                Common.Get(card.Name + 'FlipFromFrontLink').focus();
                            }
                        }
                    );
                }
            );
            Events.On(document.body, 'focusout.' + card.Name + 'FlipFromBackLink', '#' + card.Name + 'FlipFromBackLink',
                function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    Events.Off(document, 'keyup.' + card.Name + 'FlipFromBackLink');
                }
            );

            // Add events
            Events.On(document.body, 'click.' + card.Name + 'FlipFromFrontLink', '#' + card.Name + 'FlipFromFrontLink',
                function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    Common.AddClass(Common.Closest('.gtc-card-flip-container', this), 'gtc-flipped');
                }
            );
            Events.On(document.body, 'click.' + card.Name + 'FlipFromBackLink', '#' + card.Name + 'FlipFromBackLink',
                function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    Common.RemoveClass(Common.Closest('.gtc-card-flip-container', this), 'gtc-flipped');
                }
            );
        }
        if (hasFlip) {
            cardMarkup += '</div>';
        }
        cardMarkup += '</div>';

        // Return markup
        return cardMarkup;

    };

    /**
     * @function Card.OnClick
     * @param {event} event - A DOM click Event
     * @description Calls the OnClick<i>Card</i> Behavior of the Card in the CardPanel
     */
    Card.OnClick = function (event) {

        event.preventDefault();
        event.stopPropagation();
        if (Common.IsNotDefined(Common.Closest('.gtc-card-links', event.target))) {
            // Initialize
            var onClickParameters = [];

            // Get OnClickEvent object
            var onClickEvent = JSON.parse(Common.GetAttr(this, 'data-click'));
            if (Common.IsDefined(onClickEvent.UiParameters)) {
                onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
            }

            // Serialize Form?
            if (Common.IsDefined(onClickEvent.FormToSerialize)) {
                onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
            }

            // Execute View Behavior
            Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, this);
        }

    };

    /**
     * @function Card.ShowPinwheel
     * @param {object} card - The Card DOM element
     * @description Shows Pinwheel on the View Element
     */
    Card.ShowPinwheel = function (card) {

        SpinKit.Show(card, 'FadingCircle');

    };

    /**
     * @function Card.HidePinwheel
     * @param {object} card - The Card DOM element
     * @description Hides Pinwheel on the View Element
     */
    Card.HidePinwheel = function (card) {

        setTimeout(
            function () {
                SpinKit.Hide(card);
            }, 1000
        );

    };

    /**
     * @function Card.UpdateTitle
     * @param {object} card - The Card DOM element
     * @param {string} updatedTitle - The new Title of the card
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Updates the Title of the Card<br>
     *              One of the most confusing update title functions since chance some html may not exist
     */
    Card.UpdateTitle = function (card, updatedTitle, promises, context) {

        // Get deferred object for animation/work
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Initialize
        var isHidden = Common.IsHidden(card);
        var onParent = context == 'Parent';
        var title = Common.Get(card.id + 'Title', onParent);

        // Insert title if it didnt exist
        if (Common.IsNotDefined(title)) {

            // First check if content is there and insert content if it didnt exist
            InsertContent(card);

            // Now handle title
            var titleMarkup = '<h3 id="' + card.id + 'Title" class="gtc-page-theme-color" data-translate=""></h3>';
            var content = Common.Get(card.id + 'Content', onParent);
            Common.InsertHTMLString(content, Common.InsertType.Prepend, titleMarkup);
            title = Common.Get(card.id + 'Title', onParent);
        }

        // Define title update and translation update function
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(updatedTitle);
            Common.SetAttr(title, 'data-translate', updatedTitle);
        };

        // Update or animate
        if (isHidden) {
            updateTitleFunction();
            animationPromise.resolve();
        }
        else {
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    /**
     * @function Card.UpdateBadge
     * @param {object} card - The Card DOM element
     * @param {string} value - The new value of the badge on the card
     * @description Updates the badge of the Card<br>
     */
    Card.UpdateBadge = function (card, value) {

        var cardBadge = Common.Query('.gtc-card-badge', card);
        var valueInt = parseInt(value, 10);
        if (Common.IsNotDefined(cardBadge)) {
            var badgeClass = 'gtc-card-badge gtc-page-theme-background';
            if (!isNaN(value)) {
                if (valueInt > 9) {
                    badgeClass += ' gtc-card-badge-doubledigit';
                }
                else {
                    badgeClass += ' gtc-card-badge-singledigit';
                }
            }
            var badgeMarkup = '<div style="display: none;" class="' + badgeClass + '"><span>' + value + '</span></div>';
            card.appendChild(Common.GenerateFragment(badgeMarkup));
            cardBadge = Common.Query('.gtc-card-badge', card);
            Velocity(cardBadge, 'fadeIn', 'slow');
        }
        else {
            Velocity(cardBadge, { 'opacity': 0 }, 'slow',
                function () {
                    if (!isNaN(value)) {
                        Common.RemoveClasses(this[0], 'gtc-card-badge-singledigit gtc-card-badge-doubledigit');
                        if (valueInt > 9) {
                            Common.AddClass(this[0], 'gtc-card-badge-doubledigit');
                        }
                        else if (valueInt == 1) {
                            Common.Remove(this[0]);
                            return;
                        }
                        else {
                            Common.AddClass(this[0], 'gtc-card-badge-singledigit');
                        }
                    }
                    Common.Query('.gtc-card-badge-title', this[0]).textContent = value;
                    Velocity(this[0], 'reverse', Common.RemoveOpacity);
                }
            );
        }

    };

    // Private Methods
    function InsertContent (card) {

        var content = Common.Query('.gtc-card-content', card);
        if (Common.IsNotDefined(content)) {
            var cardFront = Common.Query('.gtc-card-front', card);
            var cardImage = Common.Query('.gtc-card-image', cardFront);
            var contentMarkup = '<div id="' + card.id + 'Content" class="gtc-card-content"></div>';
            if (Common.IsNotDefined(cardImage)) {
                Common.InsertHTMLString(cardFront, Common.InsertType.Append, contentMarkup);
            }
            else {
                Common.InsertHTMLString(cardImage, Common.InsertType.After, contentMarkup);
            }
        }

    };

} (window.Card = window.Card || {}, window, document, Common, Cache, Events, Velocity));
// BarGraph
// Based On: BarGraph -> VectorGraph -> Graph -> ViewElement
(function (BarGraph, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    BarGraph.Render = function (dataGraph) {

        var chartOptions = {
            alignCaptionWithCanvas: '0',
            axisLineAlpha: '10',
            canvasBgAlpha: '0',
            divLineAlpha: '10',
            placeValuesInside: '1',
            plotBorderAlpha: '0',
            plotFillAlpha: '100',
            showCanvasBorder: '0',
            showXAxisLine: '1',
            showYAxisLine: '1',
            subcaptionFontBold: '1',
            subcaptionFontSize: '10',
            toolTipBgAlpha: '100',
            toolTipBgColor: '#000000',
            toolTipBorderRadius: '0',
            toolTipBorderThickness: '0',
            toolTipColor: '#FFFFFF',
            toolTipPadding: '5',
            usePlotGradientColor: '0',
            use3DLighting: '0',
            valueFontColor: '#FFFFFF'
        };

        // Intialize
        var fusionGraphData = {};
        Graph.BuildCommonProperties(dataGraph, fusionGraphData);

        // Set Type
        fusionGraphData.type = dataGraph.ViewType + dataGraph.GraphModel;
        if (dataGraph.IsMultiSeries == 'Yes') {
            fusionGraphData.type = 'MS' + fusionGraphData.type;
        }

        // Set Chart Properties
        Graph.BuildCommonOptions(dataGraph, chartOptions);
        Graph.BuildAxisOptions(dataGraph, chartOptions, false);
        chartOptions.showValues = (dataGraph.ShowValues == 'Yes') ? '1' : '0';
        chartOptions.isMultiSeries = dataGraph.IsMultiSeries;
        if (dataGraph.IsMultiSeries == 'Yes') {
            chartOptions.legendBgAlpha = '0';
            chartOptions.legendBorderAlpha = '10';
            chartOptions.legendBorderColor = '#000000';
            chartOptions.legendShadow = '0';
            chartOptions.rotateValues = '1';
            chartOptions.showAlternateHGridColor = '1';
            chartOptions.showLegend = (dataGraph.ShowLegend == 'Yes') ? '1' : '0';
        }
        else {
            chartOptions.showAlternateVGridColor = '1';
        }
        fusionGraphData.dataSource = {};
        fusionGraphData.dataSource.chart = chartOptions;

        // Add Data Points to the Graph
        if (Common.IsDefined(dataGraph.Series)) {
            if (dataGraph.IsMultiSeries == 'No') {
                Graph.BuildSingleSeries(dataGraph, fusionGraphData.dataSource);
            }
            else {
                Graph.BuildMultiSeries(dataGraph, fusionGraphData.dataSource);
            }
        }

        return fusionGraphData;
    };

    BarGraph.Translate = function (fusionGraphData) {

        Graph.TranslateAxisTitles(fusionGraphData);

    };

    BarGraph.ReplaceElement = function (graphElement, fusionGraphData, viewElements) {

        var dataSource = fusionGraphData.getChartData('json');
        var isMultiSeries = fusionGraphData.getChartAttribute('isMultiSeries');
        if (isMultiSeries == 'No') {
            Graph.BuildSingleSeries(viewElements[0], dataSource);
            fusionGraphData.setChartAttribute(dataSource.data);
        }
        else {
            Graph.BuildMultiSeries(viewElements[0], dataSource);
            fusionGraphData.setChartAttribute(dataSource.categories);
            fusionGraphData.setChartAttribute(dataSource.dataset);
        }

    };

} (window.BarGraph = window.BarGraph || {}, window, document, Common, Cache, Events, Velocity));

// Graph
// Based On: Graph -> ViewElement
(function (Graph, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Variables
    Graph.CommonChartOptions = {
        animation: '1',
        bgColor: 'transparent',
        captionFontSize: '12',
        showBorder: '0'
    };

    Graph.PaletteColors = {
        'Default': '#0166D8,#98CB02,#FFF000,#7794A9,#66CCFF,#D9F87C,#409EFD,#C9DDED,#919191,#B6EA1D',
        'Fusion': '',
        'Sublime': '#77C7B0,#F0B853,#69AEC3,#F06D51,#6671D2,#969FE1,#B7C1E9'
    };

    // Public Methods
    Graph.Render = function (dataGraph) {

        // Div<, Class@, Id@, Data-Graph@
        var graphMarkup = '<div class="gtc-graph-container" data-namespace="Graph" data-configure="Post"' + ViewElement.RenderAttributes(dataGraph) + ' data-graph=\'' + JSON.stringify(dataGraph) + '\'';

        // Graph style
        graphMarkup += ' style="';
        if (Common.IsDefined(dataGraph.Dimension)) {
            // Height
            if (Common.IsDefined(dataGraph.Dimension.Height)) {
                graphMarkup += 'height: ' + dataGraph.Dimension.Height + dataGraph.Dimension.Scale + ';';
            }

            // Width
            if (Common.IsDefined(dataGraph.Dimension.Width)) {
                graphMarkup += 'width: ' + dataGraph.Dimension.Width + dataGraph.Dimension.Scale + ';';
            }
        }

        // Div</>
        graphMarkup += '"></div>';

        // Return markup
        return graphMarkup;

    };

    Graph.Configure = function (graph, configureStage) {

        Graph.ShowGraph(graph);

    };

    Graph.ShowGraph = function (graph) {

        var grapArray = [];
        grapArray.push(graph);
        Graph.ShowGraphs(grapArray);

    };

    Graph.ShowGraphs = function (graphArray) {

        var graphElement, dataGraph, fusionGraphData, fusionGraph, index = 0, length = graphArray.length;
        for ( ; index < length; index++) {
            graphElement = graphArray[index];
            dataGraph = JSON.parse(Common.GetAttr(graphElement, 'data-graph'));
            Common.SetAttr(graphElement, 'data-graphtype', dataGraph.GraphType);

            // Get Fusion Data Structure
            var graphNamespace = window[dataGraph.GraphType + 'Graph'];
            fusionGraphData = graphNamespace.Render(dataGraph);

            // Add renderComplete event
            fusionGraphData.events = {};
            fusionGraphData.events.renderComplete = function () {
                // Wait for chart to animate in per FC docs
                setTimeout(
                    function () {
                        Page.SetPageHeight();
                    }, 200
                );
            };

            // Initialize and Render
            fusionGraph = new FusionCharts(fusionGraphData);
            fusionGraph.render();

            // Cleanup data
            Common.RemoveAttr(graphElement, 'data-graph');
        }

    };

    Graph.BuildCommonProperties = function (dataGraph, fusionGraphData) {

        fusionGraphData.id = dataGraph.Name + 'Graph';
        fusionGraphData.renderAt = dataGraph.Name;
        if (Common.IsDefined(dataGraph.Dimension)) {
            if (Common.IsDefined(dataGraph.Dimension.Height)) {
                fusionGraphData.height = dataGraph.Dimension.Height + dataGraph.Dimension.Scale;
            }
            if (Common.IsDefined(dataGraph.Dimension.Width)) {
                fusionGraphData.width = dataGraph.Dimension.Width + dataGraph.Dimension.Scale;
            }
            else {
                fusionGraphData.width = '100%';
            }
        }
        else {
            fusionGraphData.width = '100%';
        }
        fusionGraphData.renderer = 'javascript';
        fusionGraphData.dataFormat = 'json';

    };

    Graph.BuildCommonOptions = function (dataGraph, chartOptions) {

        var exportFilename = dataGraph.Name;
        if (Common.IsDefined(dataGraph.Title)) {
            chartOptions.captionTranslationKey = dataGraph.Title;
            chartOptions.caption = Common.TranslateKey(dataGraph.Title);
            exportFilename = dataGraph.Title;
        }
        if (Common.IsDefined(dataGraph.Subtitle)) {
            chartOptions.subCaptionTranslationKey = dataGraph.Subtitle;
            chartOptions.subCaption = Common.TranslateKey(dataGraph.Subtitle);
            exportFilename = exportFilename + dataGraph.Subtitle;
        }
        if (dataGraph.EnableExport == 'Yes') {
            chartOptions.exportEnabled = '1';
            chartOptions.exportAtClientSide = '1';
            chartOptions.exportFileName = exportFilename;
        }
        chartOptions.paletteColors = Graph.PaletteColors[dataGraph.PaletteColors];
        Common.MergeObjects(chartOptions, Graph.CommonChartOptions);

    };

    Graph.BuildLimitOptions = function (dataGraph, chartOptions) {

        if (Common.IsDefined(dataGraph.LowerLimit)) {
            chartOptions.lowerLimit = dataGraph.LowerLimit;
        }
        if (Common.IsDefined(dataGraph.LowerLimitTitle)) {
            chartOptions.lowerLimitTranslationKey = dataGraph.LowerLimitTitle;
            chartOptions.lowerLimitDisplay = Common.TranslateKey(dataGraph.LowerLimitTitle);
        }
        if (Common.IsDefined(dataGraph.UpperLimit)) {
            chartOptions.upperLimit = dataGraph.UpperLimit;
        }
        if (Common.IsDefined(dataGraph.UpperLimitTitle)) {
            chartOptions.upperLimitTranslationKey = dataGraph.UpperLimitTitle;
            chartOptions.upperLimitDisplay = Common.TranslateKey(dataGraph.UpperLimitTitle);
        }

    };

    Graph.BuildAxisOptions = function (dataGraph, chartOptions, titleOnly) {

        if (Common.IsDefined(dataGraph.Axis)) {
            if (Common.IsDefined(dataGraph.Axis.XAxisTitle)) {
                chartOptions.xAxisTranslationKey = dataGraph.Axis.XAxisTitle;
                chartOptions.xAxisName = Common.TranslateKey(dataGraph.Axis.XAxisTitle);
            }
            if (titleOnly == false) {
                if (Common.IsDefined(dataGraph.Axis.Maximum)) {
                    chartOptions.yAxisMaxValue = dataGraph.Axis.Maximum;
                }
                if (Common.IsDefined(dataGraph.Axis.Minimum)) {
                    chartOptions.yAxisMinValue = dataGraph.Axis.Minimum;
                }
            }
            if (Common.IsDefined(dataGraph.Axis.YAxisTitle)) {
                chartOptions.yAxisTranslationKey = dataGraph.Axis.YAxisTitle;
                chartOptions.yAxisName = Common.TranslateKey(dataGraph.Axis.YAxisTitle);
            }
        }

    };

    Graph.BuildSingleSeries = function (dataGraph, dataSource) {

        // Special Build?
        var namespace = window[dataGraph.GraphType + 'Graph'];
        if (Common.IsDefined(namespace) && Common.IsFunction(namespace.BuildSingleSeries)) {
            namespace.BuildSingleSeries(dataGraph, dataSource);
        }
        else {
            // Set Data
            var singleSeries = dataGraph.Series[0];
            dataSource.data = [];
            var dataPoint, dataPointIndex = 0, length = singleSeries.Points.length;
            for ( ; dataPointIndex < length; dataPointIndex++) {
                dataPoint = singleSeries.Points[dataPointIndex];
                dataSource.data.push(
                    {
                        label: dataPoint.X,
                        value: dataPoint.Y,
                        displayValue: dataPoint.Label
                    }
                );
            }
        }

    };

    Graph.BuildMultiSeries = function (dataGraph, dataSource) {

        // Set Catagories
        dataSource.categories = [];
        var categoryItem = {};
        categoryItem.category = [];
        var singleSeries = dataGraph.Series[0];
        var dataPoint, dataPointIndex = 0, pointsLength = singleSeries.Points.length;
        for ( ; dataPointIndex < pointsLength; dataPointIndex++) {
            dataPoint = singleSeries.Points[dataPointIndex];
            categoryItem.category.push(
                {
                    label: dataPoint.X
                }
            );
        }
        dataSource.categories.push(categoryItem);

        // Set Dataset
        dataSource.dataset = [];
        var dataSeries, dataSeriesIndex = 0, seriesLength = dataGraph.Series.length;
        for ( ; dataSeriesIndex < seriesLength; dataSeriesIndex++) {
            dataSeries = dataGraph.Series[dataSeriesIndex];
            var seriesItem = {
                seriesname: dataSeries.Name,
                data: []
            };
            var seriesPoint, seriesPointIndex = 0, seriesPointsLength = dataSeries.Points.length;
            for ( ; seriesPointIndex < seriesPointsLength; seriesPointIndex++) {
                seriesPoint = dataSeries.Points[seriesPointIndex];
                seriesItem.data.push(
                    {
                        value: seriesPoint.Y,
                        displayValue: seriesPoint.Label
                    }
                );
            }
            dataSource.dataset.push(seriesItem);
        }

    };

    Graph.Translate = function (graph) {

        var grapArray = [];
        grapArray.push(graph);
        Graph.TranslateGraphs(grapArray);

    };

    Graph.TranslateGraphs = function (graphArray) {

        var index = 0, length = graphArray.length;
        for ( ; index < length; index++) {
            var graphElement = graphArray[index];
            var fusionGraphData = FusionCharts.items[graphElement.id + 'Graph'];

            // Change Common Attributes
            var commonAttributes = {};
            commonAttributes.caption = Common.TranslateKey(fusionGraphData.getChartAttribute('captionTranslationKey'));
            commonAttributes.subCaption = Common.TranslateKey(fusionGraphData.getChartAttribute('subCaptionTranslationKey'));
            fusionGraphData.setChartAttribute(commonAttributes);

            // Change Specific Attributes
            var graphType = Common.GetAttr(graphElement, 'data-graphtype');
            var graphNamespace = window[graphType + 'Graph'];
            graphNamespace.Translate(fusionGraphData);
        }

    };

    Graph.TranslateLimitTitles = function (fusionGraphData) {

        var limitAttributes = {};
        limitAttributes.lowerLimitDisplay = Common.TranslateKey(fusionGraphData.getChartAttribute('lowerLimitTranslationKey'));
        limitAttributes.upperLimitDisplay = Common.TranslateKey(fusionGraphData.getChartAttribute('upperLimitTranslationKey'));
        fusionGraphData.setChartAttribute(limitAttributes);

    };

    Graph.TranslateAxisTitles = function (fusionGraphData) {

        var axisAttributes = {};
        axisAttributes.xAxisName = Common.TranslateKey(fusionGraphData.getChartAttribute('xAxisTranslationKey'));
        axisAttributes.yAxisName = Common.TranslateKey(fusionGraphData.getChartAttribute('yAxisTranslationKey'));
        fusionGraphData.setChartAttribute(axisAttributes);

    };

    Graph.UpdateValue = function (graphElement, value, promises, context) {

        var fusionGraphData = FusionCharts.items[graphElement.id + 'Graph'];
        var graphType = Common.GetAttr(graphElement, 'data-graphtype');
        var graphNamespace = window[graphType + 'Graph'];
        graphNamespace.UpdateValue(graphElement, fusionGraphData, value);

    };

    Graph.ReplaceElement = function (graphElement, viewElements, promises, context) {

        var fusionGraphData = FusionCharts.items[graphElement.id + 'Graph'];
        var graphType = Common.GetAttr(graphElement, 'data-graphtype');
        var graphNamespace = window[graphType + 'Graph'];
        graphNamespace.ReplaceElement(graphElement, fusionGraphData, viewElements);

    };

} (window.Graph = window.Graph || {}, window, document, Common, Cache, Events, Velocity));
// AreaGraph
// Based On: AreaGraph -> VectorGraph -> Graph -> ViewElement
(function (AreaGraph, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    AreaGraph.Render = function (dataGraph) {

        var chartOptions = {
            alignCaptionWithCanvas: '0',
            axisLineAlpha: '10',
            divLineAlpha: '10',
            plotBorderAlpha: '0',
            plotFillAlpha: '100',
            showAlternateHGridColor: '1',
            showCanvasBorder: '0',
            showXAxisLine: '1',
            showYAxisLine: '1',
            toolTipBgAlpha: '100',
            toolTipBgColor: '#000000',
            toolTipBorderRadius: '0',
            toolTipBorderThickness: '0',
            toolTipColor: '#FFFFFF',
            toolTipPadding: '5',
            usePlotGradientColor: '1'
        };

        // Intialize
        var fusionGraphData = {};
        Graph.BuildCommonProperties(dataGraph, fusionGraphData);

        // Set Type
        fusionGraphData.type = 'Area2D';
        if (dataGraph.IsMultiSeries == 'Yes') {
            fusionGraphData.type = 'MSArea';
        }

        // Set Chart Properties
        Graph.BuildCommonOptions(dataGraph, chartOptions);
        Graph.BuildAxisOptions(dataGraph, chartOptions, false);
        chartOptions.showValues = (dataGraph.ShowValues == 'Yes') ? '1' : '0';
        chartOptions.isMultiSeries = dataGraph.IsMultiSeries;
        if (dataGraph.IsMultiSeries == 'Yes') {
            chartOptions.legendBorderAlpha = '10';
            chartOptions.legendShadow = '0';
            chartOptions.plotFillAlpha = '80';
            chartOptions.showLegend = dataGraph.ShowLegend;
            chartOptions.showValues = '0';
            chartOptions.usePlotGradientColor = '0';
        }
        fusionGraphData.dataSource = {};
        fusionGraphData.dataSource.chart = chartOptions;

        // Add Data Points to the Graph
        if (Common.IsDefined(dataGraph.Series)) {
            if (dataGraph.IsMultiSeries == 'No') {
                Graph.BuildSingleSeries(dataGraph, fusionGraphData.dataSource);
            }
            else {
                Graph.BuildMultiSeries(dataGraph, fusionGraphData.dataSource);
            }
        }

        return fusionGraphData;
    };

    AreaGraph.Translate = function (fusionGraphData) {

        Graph.TranslateAxisTitles(fusionGraphData);

    };

    AreaGraph.ReplaceElement = function (graphElement, fusionGraphData, viewElements) {

        var dataSource = fusionGraphData.getChartData('json');
        var isMultiSeries = fusionGraphData.getChartAttribute('isMultiSeries');
        if (isMultiSeries == 'No') {
            Graph.BuildSingleSeries(viewElements[0], dataSource);
            fusionGraphData.setChartAttribute(dataSource.data);
        }
        else {
            Graph.BuildMultiSeries(viewElements[0], dataSource);
            fusionGraphData.setChartAttribute(dataSource.categories);
            fusionGraphData.setChartAttribute(dataSource.dataset);
        }

    };

} (window.AreaGraph = window.AreaGraph || {}, window, document, Common, Cache, Events, Velocity));

// Tree Panel
// Based On: TreePanel -> ViewElement
(function (TreePanel, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var xAxisDrag;
    var resizer;
    var treeSection;
    var displaySection;
    var treeSectionWidth;
    var displaySectionWidth;
    var treePanelName;

    // Public Methods
    TreePanel.Render = function (treePanel) {

        // Initial State Class
        var additionalClass = '';
        var treeDisplayGroupStyle = '';
        var iconRotateClass = '';
        if (treePanel.InitialState == 'Open') {
            additionalClass = ' gtc-treepanel-open';
            iconRotateClass = ' fa-rotate-180';
        }
        else {
            treeDisplayGroupStyle = ' style="display:none;"';
        }

        // Div<, TabIndex@, Class@, Id@
        var treePanelMarkup = '<div class="gtc-treepanel' + additionalClass + '" data-namespace="TreePanel" data-configure="Pre"' + ViewElement.RenderAttributes(treePanel);

        // Div>
        treePanelMarkup += '><div class="gtc-treepanel-titlebar">';

        // H2<>, Title, H2</>
        if (Common.IsDefined(treePanel.Title)) {
            treePanelMarkup += '<h2 class="gtc-page-theme-color"';

            // Translations
            treePanelMarkup += ' data-translate="' + treePanel.Title + '"';
            treePanelMarkup += '>' + Common.TranslateKey(treePanel.Title) + '</h2>';
        }
        treePanelMarkup += '<a id="' + treePanel.Name + '-ExpandLink" class="gtc-treepanel-expand"><i class="gtc-icon-styles fa fa-arrow-circle-down' + iconRotateClass + '"></i></a>';

        // Links
        if (Common.IsDefined(treePanel.Links) && treePanel.Links.length > 0) {

            // Links
            var index = 0, length = treePanel.Links.length;
            for ( ; index < length; index++) {
                // Li<>, Anchor, Li</>
                treePanelMarkup += Link.Render(treePanel.Links[index]);
            }
        }
        treePanelMarkup += '</div><div class="gtc-treepanel-treedisplaygroup"' + treeDisplayGroupStyle + '>';

        // Tree Section
        treePanelMarkup += '<div id="' + treePanel.Name + '-TreeSectionScrollTarget" class="gtc-treepanel-tree-scrolltarget gtc-cfscroll-y"><div class="gtc-treepanel-tree" id="' + treePanel.Name + 'TreeSection">';
        if (Common.IsDefined(treePanel.Tree)) {
            treePanelMarkup += Tree.Render(treePanel.Tree, true);
        }
        treePanelMarkup += '</div></div><div class="gtc-treepanel-resizer" id="' + treePanel.Name + 'Resizer"></div>';

        // Display Panel Section
        treePanelMarkup += '<div id="' + treePanel.Name + '-DisplayPanelSectionScrollTarget" class="gtc-treepanel-displaypanel-scrolltarget gtc-cfscroll-y"><div id="' + treePanel.Name + '-DisplayPanelSection" class="gtc-treepanel-displaypanel">';
        if (Common.IsDefined(treePanel.DisplayPanel)) {
            var displayPanelNamespace = window[treePanel.DisplayPanel.Type.toString()];
            treePanelMarkup += displayPanelNamespace.Render(treePanel.DisplayPanel);
        }
        treePanelMarkup += '</div></div>';

        // Attach Expand Link Event
        Events.On(document.body, 'click.' + treePanel.Name + '-ExpandLink', '#' + treePanel.Name + '-ExpandLink',
            function () {
                var treePanelElement = Common.Get(treePanel.Name);
                if (Common.HasClass(treePanelElement, 'gtc-treepanel-open')) {
                    Common.RemoveClass(Common.Query('i', this), 'fa-rotate-180');
                    Velocity(Common.Query('.gtc-treepanel-treedisplaygroup', treePanelElement), 'slideUp', 'slow',
                        function () {
                            Common.ResizeView();
                        }
                    );
                }
                else {
                    Common.AddClass(Common.Query('i', this), 'fa-rotate-180');
                    Velocity(Common.Query('.gtc-treepanel-treedisplaygroup', treePanelElement), 'slideDown', 'slow',
                        function () {
                            Common.ResizeView();
                        }
                    );
                }
                Common.ToggleClass(treePanelElement, 'gtc-treepanel-open');
            }
        );

        Events.One(document.body, 'configuretreepanel',
            function (event) {
                treePanelName = treePanel.Name;
                makeResizable(treePanelName);
            }
        );

        // Div</>
        treePanelMarkup += '</div></div>';
        return treePanelMarkup;

    };

    TreePanel.Configure = function (treePanel, configureStage) {

        Events.Trigger(treePanel, 'configuretreepanel');

    };

    function makeResizable (id) {

        resizer = Common.Get(id + 'Resizer');
        treeSection = Common.Get(id + '-TreeSectionScrollTarget');
        displaySection = Common.Get(id + '-DisplayPanelSectionScrollTarget');
        Events.On(resizer, 'mousedown', initializeDrag);

    };

    function initializeDrag (event) {

        Common.AddClass(document.body, 'gtc-unselectable');
        xAxisDrag = event.clientX;
        treeSectionWidth = Common.Width(treeSection);
        displaySectionWidth = Common.Width(displaySection);
        Events.On(document, 'mousemove.treePanelResizer.' + treePanelName, onResizerDrag);
        Events.On(document, 'mouseup.treePanelResizer.' + treePanelName, onStopResizerDrag);

    };

    function onResizerDrag (event) {

        var newTreeSectionWidth = treeSectionWidth + event.clientX - xAxisDrag;
        var newDisplaySectionWidth = displaySectionWidth - event.clientX + xAxisDrag;
        if (newTreeSectionWidth <= 200 || newDisplaySectionWidth <= 200) {
            return;
        }
        treeSection.style.width = newTreeSectionWidth + 'px';

    };

    function onStopResizerDrag (event) {

        Events.Off(document, 'mousemove.treePanelResizer', onResizerDrag);
        Events.Off(document, 'mouseup.treePanelResizer', onStopResizerDrag);
        Common.RemoveClass(document.body, 'gtc-unselectable');

    };

} (window.TreePanel = window.TreePanel || {}, window, document, Common, Cache, Events, Velocity));
// ProgressBar
// Based On: ProgressBar -> ViewElement
(function (ProgressBar, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    ProgressBar.Render = function (progressBar) {

        // Div<, TabIndex@, Class@, Id@, Div>
        var className = 'gtc-progressbar';
        if (progressBar.IsRounded == 'Yes') {
            className += ' gtc-progressbar-rounded';
        }
        var progressBarMarkup = '<div role="progressbar" aria-valuenow="0" class="' + className + '" data-namespace="ProgressBar"' + ViewElement.RenderAttributes(progressBar);

        // On Complete Event
        if (Common.IsEventViewElementDefined(progressBar.OnComplete)) {
            // Data-ControllerPath/ActionName
            progressBarMarkup += ' data-complete=\'' + JSON.stringify(progressBar.OnComplete) + '\'';
        }

        // Build Widget Options
        var widgetOptions = BuildWidgetOptions(progressBar);

        // Configure progress bar on ready
        Events.One(document.body, 'configureprogressbar',
            function () {
                Widgets.progressbar(Common.Get(progressBar.Name), widgetOptions);
            }
        );

        // Div</>
        progressBarMarkup += '></div>';
        return progressBarMarkup;

    };

    ProgressBar.OnComplete = function (progressBar) {

        // Initialize
        var onCompleteParameters = [];

        // Get OnCompleteEvent object
        var onCompleteEvent = JSON.parse(Common.GetAttr(progressBar, 'data-complete'));
        if (Common.IsDefined(onCompleteEvent.UiParameters)) {
            onCompleteParameters = onCompleteParameters.concat(onCompleteEvent.UiParameters);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onCompleteEvent.ControllerPath + onCompleteEvent.ActionName, onCompleteParameters, Page.RunInstructions, progressBar);

    };

    ProgressBar.UpdateValue = function (progressBar, fillToPercentageOrInstruction) {

        if (fillToPercentageOrInstruction == "Start") {
            Widgets.progressbar(progressBar, 'StartControl');
        }
        else if (fillToPercentageOrInstruction == "Complete") {
            Widgets.progressbar(progressBar, 'CompleteAnimation');
        }
        else {
            Widgets.progressbar(progressBar, 'UpdateValue', fillToPercentageOrInstruction);
        }

    };

    ProgressBar.ReplaceElement = function (progressBar, viewElements, promises) {

        // Build Markup
        var progressBarMarkup = '';
        if (Common.IsDefined(viewElements) && viewElements.length == 1) {
            var progressBarViewElement = viewElements[0];
            progressBarViewElement.IsDisplayed = 'No';
            progressBarViewElement.WaitsForFillInstructions = true;
            progressBarMarkup += ProgressBar.Render(progressBarViewElement);
            var widgetOptions = BuildWidgetOptions(progressBarViewElement);

            // Get deferred object for animation
            var animationPromise = Common.Promise();
            promises.push(animationPromise.promise);

            // Append
            Common.InsertHTMLString(progressBar, Common.InsertType.Append, progressBarMarkup);
            Widgets.progressbar(Common.Get(progressBarViewElement.Name), widgetOptions);
            Velocity(Common.Get(progressBarViewElement.Name), 'slideDown', 'slow',
                function () {
                    Widgets.progressbar(this, 'StartControl');
                    animationPromise.resolve();
                }
            );
        }

    };

    // Private Methods
    function BuildWidgetOptions (progressBar) {

        // Initialize
        var widgetOptions = {};

        // Color
        if (Common.IsDefined(progressBar.Color)) {
            widgetOptions.Color = progressBar.Color;
        }

        // Add Striping?
        if (progressBar.HasStriping == 'Yes') {
            widgetOptions.HasStriping = true;
        }
        else {
            widgetOptions.HasStriping = false;
        }

        // Dimension
        var dimensionStyle = StyleHelper.BuildDimensionStyle(progressBar.Dimension);
        if (Common.IsDefined(dimensionStyle)) {
            if (Common.IsDefined(dimensionStyle.Height)) {
                widgetOptions.Height = dimensionStyle.Height.replace(';', '');
            }
            if (Common.IsDefined(dimensionStyle.Width)) {
                widgetOptions.Width = dimensionStyle.Width.replace(';', '');
            }
        }

        // On Complete
        if (Common.IsDefined(progressBar.OnComplete)) {
            widgetOptions.OnCompleteEvent = true;
        }

        // Timed Fill?
        if (Common.IsDefined(progressBar.FillTime)) {
            widgetOptions.FillTime = progressBar.FillTime;
        }

        // Hide On Complete?
        if (progressBar.HideOnComplete == 'Yes') {
            widgetOptions.HideOnComplete = true;
        }
        else {
            widgetOptions.HideOnComplete = false;
        }

        // Added option for page inserts (WaitToStart)
        if (progressBar.WaitsForFillInstructions == 'Yes') {
            widgetOptions.WaitForStart = true;
        }
        else {
            widgetOptions.WaitForStart = false;
        }
        return widgetOptions;

    };

} (window.ProgressBar = window.ProgressBar || {}, window, document, Common, Cache, Events, Velocity));
// Progress Poll
// Based On: ProgressPoll -> ViewElement
(function (ProgressPoll, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    ProgressPoll.Render = function (progressPoll) {

        // Div<, TabIndex@, Class@, Id@, Div>
        var progressPollMarkup = '<div class="gtc-progresspoll" data-currentstep="1" data-namespace="ProgressPoll"' + ViewElement.RenderAttributes(progressPoll);

        // Wait for Start / Polling Now(No)
        progressPollMarkup += '  data-waitforstart="' + progressPoll.WaitForStartInstruction + '"';
        progressPollMarkup += '  data-pollingnow="No"';

        // Polling Interval
        if (Common.IsDefined(progressPoll.PollingInterval)) {
            progressPollMarkup += '  data-pollinginterval="' + progressPoll.PollingInterval + '"';
        }

        // Steps
        if (Common.IsDefined(progressPoll.NumberOfSteps)) {
            progressPollMarkup += '  data-numberofsteps="' + progressPoll.NumberOfSteps + '"';
        }

        // On Poll Event
        if (Common.IsEventViewElementDefined(progressPoll.OnPoll)) {
            // Data-ControllerPath/ActionName
            progressPollMarkup += ' data-poll=\'' + JSON.stringify(progressPoll.OnPoll) + '\'';
        }

        // On Error Event
        if (Common.IsEventViewElementDefined(progressPoll.OnError)) {
            // Data-ControllerPath/ActionName
            progressPollMarkup += ' data-error=\'' + JSON.stringify(progressPoll.OnError) + '\'';
        }

        // On Complete Event
        if (Common.IsEventViewElementDefined(progressPoll.OnComplete)) {
            // Data-ControllerPath/ActionName
            progressPollMarkup += ' data-complete=\'' + JSON.stringify(progressPoll.OnComplete) + '\'';
        }
        progressPollMarkup += '>';

        // H2<>, Title, H2</>
        if (Common.IsDefined(progressPoll.Title)) {
            progressPollMarkup += '<h2 id="' + progressPoll.Name + 'Title" class="gtc-page-theme-color"';
            progressPollMarkup += ' data-translate="' + progressPoll.Title + '"';
            progressPollMarkup += '>' + Common.TranslateKey(progressPoll.Title) + '</h2>';
        }

        // P<>, Subtitle, P</>
        if (Common.IsDefined(progressPoll.Subtitle)) {
            progressPollMarkup += '<p id="' + progressPoll.Name + 'Badge"';
            progressPollMarkup += ' data-translate="' + progressPoll.Subtitle + '"';
            progressPollMarkup += '>' + Common.TranslateKey(progressPoll.Subtitle) + '</p>';
        }

        // Progress Steps
        progressPollMarkup += '<div class="gtc-progresspoll-steps">';
        if (Common.IsDefined(progressPoll.ProgressSteps)) {
            var index = 0, length = progressPoll.ProgressSteps.length;
            for ( ; index < length; index++) {
                progressPollMarkup += ProgressStep.Render(progressPoll.ProgressSteps[index], index + 1);
            }
        }
        progressPollMarkup += '</div>';

        // Configure polling on ready
        Events.One(document.body, 'configureprogresspoll',
            function () {
                var progressPollElement = Common.Get(progressPoll.Name);
                var waitForStart = Common.GetAttr(progressPollElement, 'data-waitforstart');
                if (waitForStart != 'Yes') {
                    StartPollingStep(progressPollElement);
                }
            }
        );

        // Render ProgressBar
        if (Common.IsDefined(progressPoll.ProgressBar)) {
            if (progressPoll.WaitForStartInstruction == 'Yes') {
                progressPoll.ProgressBar.WaitsForFillInstructions = 'Yes';
            }
            progressPollMarkup += ProgressBar.Render(progressPoll.ProgressBar);
        }

        // Div</>
        progressPollMarkup += '</div>';
        return progressPollMarkup;

    };

    ProgressPoll.OnPoll = function (progressPoll) {

        // Initialize
        var onPollParameters = [];

        // Get OnPoll object
        var onPollData = Common.GetAttr(progressPoll, 'data-poll');
        if (Common.IsDefined(onPollData)) {
            // Set/Update CurrentPollCount
            var currentPollCount = Common.GetAttr(progressPoll, 'data-currentpollcount');
            if (Common.IsDefined(currentPollCount)) {
                currentPollCount = parseInt(currentPollCount, 10) + 1;
            }
            else {
                currentPollCount = 1;
            }
            Common.SetAttr(progressPoll, 'data-currentpollcount', currentPollCount);

            // Get OnPoll Parameters
            var onPollEvent = JSON.parse(onPollData);
            if (Common.IsDefined(onPollEvent.UiParameters)) {
                onPollParameters = onPollParameters.concat(onPollEvent.UiParameters);
            }

            // Add CurrentPollCount Parameter
            var currentPollCountParameter = [
                {
                    Name: 'CurrentPollCount',
                    Value: currentPollCount,
                    UiParameters: null
                }
            ];
            onPollParameters = onPollParameters.concat(currentPollCountParameter);

            // Add CurrentPollStep Parameter
            var currentPollStep = Common.GetAttr(progressPoll, 'data-currentstep');
            var currentPollStepParameter = [
                {
                    Name: 'CurrentPollStep',
                    Value: currentPollStep,
                    UiParameters: null
                }
            ];
            onPollParameters = onPollParameters.concat(currentPollStepParameter);

            // Execute View Behavior
            Common.ExecuteViewBehavior(onPollEvent.ControllerPath + onPollEvent.ActionName, onPollParameters, Page.RunInstructions, progressPoll);
        }

    };

    ProgressPoll.OnError = function (progressPoll) {

        // Get OnError object
        var onErrorData = Common.GetAttr(progressPoll, 'data-error');
        if (Common.IsDefined(onErrorData)) {
            var onErrorEvent = JSON.parse(onErrorData);

            // Get OnError Parameters
            var onErrorParameters = [];
            if (Common.IsDefined(onErrorEvent.UiParameters)) {
                onErrorParameters = onErrorParameters.concat(onErrorEvent.UiParameters);
            }

            // Add CurrentPollStep Parameter
            var currentPollStep = Common.GetAttr(progressPoll, 'data-currentstep');
            var currentPollStepParameter = [
                {
                    Name: 'CurrentPollStep',
                    Value: currentPollStep,
                    UiParameters: null
                }
            ];
            onErrorParameters = onErrorParameters.concat(currentPollStepParameter);

            // Execute View Behavior
            Common.ExecuteViewBehavior(onErrorEvent.ControllerPath + onErrorEvent.ActionName, onErrorParameters, Page.RunInstructions, progressPoll);
        }

    };

    ProgressPoll.OnComplete = function (progressPoll) {

        // Get OnComplete object
        var onCompleteData = Common.GetAttr(progressPoll, 'data-complete');
        if (Common.IsDefined(onCompleteData)) {
            var onCompleteEvent = JSON.parse(onCompleteData);

            // Get OnComplete Parameters
            var onCompleteParameters = [];
            if (Common.IsDefined(onCompleteEvent.UiParameters)) {
                onCompleteParameters = onCompleteParameters.concat(onCompleteEvent.UiParameters);
            }

            // Execute View Behavior
            Common.ExecuteViewBehavior(onCompleteEvent.ControllerPath + onCompleteEvent.ActionName, onCompleteParameters, Page.RunInstructions, progressPoll);
        }

    };

    ProgressPoll.UpdateTitle = function (progressPoll, updatedTitle, promises, context) {

        // Initialize
        var onParent = context == 'Parent';
        var title = Common.Get(progressPoll.id + 'Title', onParent);
        var updateTitleFunction = function () {
            title.textContent = Common.TranslateKey(updatedTitle);
            Common.SetAttr(title, 'data-translate', updatedTitle);
        };
        if (Common.IsHidden(progressPoll)) {
            updateTitleFunction();
        }
        else {
            // Get deferred object for animation
            var animationPromise = Common.Promise();
            promises.push(animationPromise.promise);

            // Animate
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    updateTitleFunction();
                    Velocity(title, 'reverse',
                        function () {
                            Common.RemoveOpacity(title);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    ProgressPoll.UpdateBadge = function (progressPoll, updatedBadge, promises, context) {

        // Initialize
        var onParent = context == 'Parent';
        var badge = Common.Get(progressPoll.id + 'Badge', onParent);
        var updateBadgeFunction = function () {
            badge.textContent = Common.TranslateKey(updatedBadge);
            Common.SetAttr(badge, 'data-translate', updatedBadge);
        };
        if (Common.IsHidden(progressPoll)) {
            updateBadgeFunction();
        }
        else {
            // Get deferred object for animation
            var animationPromise = Common.Promise();
            promises.push(animationPromise.promise);

            // Animate
            Velocity(badge, { 'opacity': 0 }, 'slow',
                function () {
                    updateBadgeFunction();
                    Velocity(badge, 'reverse',
                        function () {
                            Common.RemoveOpacity(badge);
                            animationPromise.resolve();
                        }
                    );
                }
            );
        }

    };

    ProgressPoll.UpdatePollingStep = function (progressPoll, pollingStepAction) {

        if (pollingStepAction == 'Start') {
            StartPollingStep(progressPoll);
        }
        else if (pollingStepAction == 'Continue') {
            NextPollingStep(progressPoll);
        }
        else if (pollingStepAction == 'Error') {
            ErrorPollingStep(progressPoll);
        }
        else if (pollingStepAction == 'Complete') {
            CompletePollingStep(progressPoll);
        }

    };

    // Private Methods
    function StartPollingStep (progressPoll) {

        // Polling now?
        var pollingNow = Common.GetAttr(progressPoll, 'data-pollingnow');
        if (pollingNow != 'Yes') {
            // Set PollingNow to Yes
            Common.SetAttr(progressPoll, 'data-pollingnow', 'Yes');

            // Set current ProgressStep to Running
            var currentStep = parseInt(Common.GetAttr(progressPoll, 'data-currentstep'), 10);
            var currentProgressStep = Common.Query('.gtc-progressstep[data-step="' + currentStep + '"]', progressPoll);
            ProgressStep.SetStatus(currentProgressStep, 'Running');

            // Start Polling
            var intervalId = setInterval(
                function () {
                    // Call OnPoll Behavior
                    ProgressPoll.OnPoll(progressPoll);
                }, parseInt(Common.GetAttr(progressPoll, 'data-pollinginterval'), 10) * 1000
            );
            Common.SetAttr(progressPoll, 'data-intervalid', intervalId);

            // Start ProgressBar
            var progressbar = Common.Query('.gtc-progressbar', progressPoll);
            if (Common.IsDefined(progressbar)) {
                Widgets.progressbar(progressbar, 'StartControl');
            }
        }

    };

    function NextPollingStep (progressPoll) {

        var currentStep = parseInt(Common.GetAttr(progressPoll, 'data-currentstep'), 10);
        var numberOfSteps = parseInt(Common.GetAttr(progressPoll, 'data-numberofsteps'), 10);
        if (currentStep < numberOfSteps) {
            // Set next CurrentStep
            var nextStep = currentStep + 1;
            Common.SetAttr(progressPoll, 'data-currentstep', nextStep);

            // Remove CurrentPollCount
            Common.RemoveAttr(progressPoll, 'data-currentpollcount');

            // Set current ProgressStep to Complete
            var currentProgressStep = Common.Query('.gtc-progressstep[data-step="' + currentStep + '"]', progressPoll);
            ProgressStep.SetStatus(currentProgressStep, 'Complete');

            // Set next ProgressStep to Running
            var nextProgressStep = Common.Query('.gtc-progressstep[data-step="' + nextStep + '"]', progressPoll);
            ProgressStep.SetStatus(nextProgressStep, 'Running');
        }
        else {
            // Stop Polling
            clearInterval(Common.GetAttr(progressPoll, 'data-intervalid'));

            // Remove CurrentPollCount
            Common.RemoveAttr(progressPoll, 'data-currentpollcount');

            // Set current ProgressStep to Complete
            var currentProgressStep = Common.Query('.gtc-progressstep[data-step="' + currentStep + '"]', progressPoll);
            ProgressStep.SetStatus(currentProgressStep, 'Complete');

            // Call OnComplete Behavior
            ProgressPoll.OnComplete(progressPoll);
        }

    };

    function ErrorPollingStep (progressPoll) {

        // Stop Polling
        clearInterval(Common.GetAttr(progressPoll, 'data-intervalid'));

        // Set current ProgressStep to Error
        var currentStep = parseInt(Common.GetAttr(progressPoll, 'data-currentstep'), 10);
        var currentProgressStep = Common.Query('.gtc-progressstep[data-step="' + currentStep + '"]', progressPoll);
        ProgressStep.SetStatus(currentProgressStep, 'Error');

        // Call OnError Behavior
        ProgressPoll.OnError(progressPoll);

    };

    function CompletePollingStep (progressPoll) {

        // Stop Polling
        clearInterval(Common.GetAttr(progressPoll, 'data-intervalid'));

        // Complete Steps
        var allProgressSteps = Common.QueryAll('.gtc-progressstep', progressPoll);
        var progressStep, index = 0, length = allProgressSteps.length;
        for ( ; index < length; index++) {
            progressStep = allProgressSteps[index];
            (function (progressStep, currentStatus) {
                ProgressStep.SetStatus(progressStep, 'Complete');
            }(progressStep));
        }

        // Call OnComplete Behavior
        ProgressPoll.OnComplete(progressPoll);

        // Complete ProgressBar
        var progressbar = Common.Query('.gtc-progressbar', progressPoll);
        if (Common.IsDefined(progressbar)) {
            Widgets.progressbar(progressbar, 'CompleteAnimation');
        }

    };

} (window.ProgressPoll = window.ProgressPoll || {}, window, document, Common, Cache, Events, Velocity));
// Progress Bar Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var ProgressBarWidget = {

        // Options
        options: {
            HasStriping: true,
            OnCompleteEvent: false,
            FillTime: null,
            CurrentFill: '0',
            HideOnComplete: true,
            WaitForStart: false
        },

        // Public Methods
        StartControl: function () {

            this._startControl();

        },

        CompleteAnimation: function () {

            this._completeAnimation();

        },

        UpdateValue: function (fillToPercentage) {

            // Initialize
            var thisWidget = this;

            // Update fill
            thisWidget.options.CurrentFill = fillToPercentage;
            thisWidget._fill(fillToPercentage);

        },

        UpdateColor: function (fillColor) {

            // Initialize
            var thisWidget = this;

            // Update fill
            thisWidget._updateInnerFill(fillColor);

        },

        // Private Methods
        _startControl: function () {

            // Initialize
            var thisWidget = this;

            // Start
            if (Common.IsDefined(thisWidget.options.FillTime)) {
                thisWidget._fill(100);
            }

        },

        _completeAnimation: function () {

            // Initialize
            var thisWidget = this;

            // Stop and complete animation
            var span = Common.Query('span:first-child', thisWidget.element);
            Velocity(span, 'stop');
            Velocity(span, { 'width': '100%' }, 1500,
                function () {
                    // Call complete and hide?
                    if (thisWidget.options.OnCompleteEvent) {
                        ProgressBar.OnComplete(thisWidget.element);
                    }
                    if (thisWidget.options.HideOnComplete) {
                        Velocity(thisWidget.element, 'slideUp', 'slow',
                            function () {
                                Common.Remove(thisWidget.element);
                            }
                        );
                    }
                }
            );

        },

        _fill: function (fillToPercentage) {

            // Initialize
            var thisWidget = this;
            var speed = (Common.IsDefined(thisWidget.options.FillTime)) ? thisWidget.options.FillTime : 1;

            // Fill
            var span = Common.Query('span:first-child', thisWidget.element);
            Velocity(span, { 'width': fillToPercentage + '%' }, { duration: parseInt(speed, 10) * 1000,
                complete: function () {
                    // Call complete and hide?
                    if (parseInt(fillToPercentage, 10) == 100) {
                        if (thisWidget.options.OnCompleteEvent) {
                            ProgressBar.OnComplete(thisWidget.element);
                        }
                        if (thisWidget.options.HideOnComplete) {
                            Velocity(thisWidget.element, 'slideUp', 'slow',
                                function () {
                                    Common.Remove(thisWidget.element);
                                }
                            );
                        }
                    }
                },
                progress: function (elements) {
                    Common.SetAttr(thisWidget.element, 'aria-valuenow', elements[0].style.width);
                }}
            );

        },

        _applyElementStyles: function () {

            // Initialize
            var thisWidget = this;

            // Add dimensions
            var elementStyle = thisWidget.element.style;
            elementStyle.width = thisWidget.options.Width;
            elementStyle.height = thisWidget.options.Height;

        },

        _buildInnerFill: function (isUpdate) {

            // Initialize
            var thisWidget = this;

            // Generate Color
            var colorStyle = '';
            if (Colors.IsGradient(thisWidget.options.Color) === true) {
                var gradientValues = Colors.ProcessValue(thisWidget.options.Color, false, null);
                gradientUpperValue = gradientValues[0];
                gradientLowerValue = gradientValues[1];
                colorStyle += 'background: -moz-linear-gradient(' + gradientUpperValue + ', ' + gradientLowerValue + ');';
                colorStyle += 'background: -ms-linear-gradient(' + gradientUpperValue + ', ' + gradientLowerValue + ');';
                colorStyle += 'background: -o-linear-gradient(' + gradientUpperValue + ', ' + gradientLowerValue + ');';
                colorStyle += 'background: -webkit-gradient(linear, left top, left bottom, from(' + gradientUpperValue + '), to(' + gradientLowerValue + '));';
                colorStyle += 'background: -webkit-linear-gradient(' + gradientUpperValue + ', ' + gradientLowerValue + ');';
                colorStyle += 'background: linear-gradient(' + gradientUpperValue + ', ' + gradientLowerValue + ');';
                colorStyle += 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\'' + gradientUpperValue + '\', endColorstr=\'' + gradientLowerValue + '\');';
            }
            else {
                colorStyle += 'background: ' + Colors.ProcessValue(thisWidget.options.Color, false, null);
            }

            // Add inner span with striping and custom colors if set
            var spanMarkup = '<span class="gtc-progressbar-meter';
            if (thisWidget.options.HasStriping) {
              spanMarkup += ' gtc-progressbar-meter-striped';
            }
            spanMarkup += '" style="width: ' + thisWidget.options.CurrentFill + '%;';
            if (isUpdate) {
                spanMarkup += 'display:none;';
            }
            if (thisWidget.options.Color) {
              spanMarkup += ' ' + colorStyle;
            }
            spanMarkup += '"></span>';
            if (isUpdate) {
                var oldValue = Common.Query('.gtc-progressbar-meter', thisWidget.element);
                if (Common.IsDefined(oldValue)) {
                    Velocity(oldValue, 'fadeOut', 400,
                        function () {
                            Common.Remove(this);
                        }
                    );
                }
                Common.InsertHTMLString(thisWidget.element, Common.InsertType.Append, spanMarkup);
                var newValue = Common.Query('span.gtc-progressbar-meter:last-of-type', thisWidget.element);
                Velocity(newValue, 'fadeIn', { duration: 400, display: 'block' });
            }
            else {
                Common.InsertHTMLString(thisWidget.element, Common.InsertType.Append, spanMarkup);
            }

        },

        _updateInnerFill: function (fillColor) {

            // Initialize
            var thisWidget = this;

            // Update widget options with new color
            thisWidget.options.Color = fillColor;

            // Rebuild fill
            thisWidget._buildInnerFill(true);

        },

        _init: function () {
        },

        _create: function () {

            // Initialize
            var thisWidget = this;

            // Add configured element styling
            thisWidget._applyElementStyles();

            // Create inner fill
            thisWidget._buildInnerFill(false);

            // Don't Wait for instructions then use FillTime
            if (!thisWidget.options.WaitForStart && Common.IsDefined(thisWidget.options.FillTime)) {
                thisWidget._fill(100);
            }

        }

    };

    WidgetFactory.Register('gtc.progressbar', ProgressBarWidget);

} (window, document, Common, Cache, Events, Velocity));
/** 
 * @class CoupledFieldSet
 * @classdesc Supports the CoupledFieldSet View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (CoupledFieldSet, window, document, Common, Cache, Events, Velocity, undefined) {

    /**
     * @function CoupledFieldSet.Render
     * @param {object} coupledFieldSet - The CoupledFieldSet View Element in JSON format
     * @description Generates the HTML markup for the CoupledFieldSet View Element 
     * @returns {string} HTML Markup of the CoupledFieldSet View Element
     */
    CoupledFieldSet.Render = function (coupledFieldSet) {

        // Fieldset<, TabIndex@, Class@, Id@, Fieldset>
        var additionalClass = '';
        if (coupledFieldSet.IsRightDisplayed == 'No') {
            additionalClass = ' gtc-coupledfieldset-norightdisplayed';
        }
        var coupledFieldSetMarkup = '<fieldset data-namespace="CoupledFieldSet"' + ViewElement.RenderAttributes(coupledFieldSet) + ' class="gtc-coupledfieldset' + additionalClass + '">';

        // Legend<>, Title, SubTitle, Legend</>
        if (Common.IsOneDefined([coupledFieldSet.Title, coupledFieldSet.SubTitle])) {
            coupledFieldSetMarkup += '<legend class="gtc-legend gtc-page-theme-color">';
            if (Common.IsDefined(coupledFieldSet.Title)) {
                coupledFieldSetMarkup += '<span class="gtc-coupledfieldset-legend-title" data-translate="' + coupledFieldSet.Title + '">' + Common.TranslateKey(coupledFieldSet.Title) + '</span>';
            }
            if (Common.IsDefined(coupledFieldSet.SubTitle)) {
                coupledFieldSetMarkup += '<span class="gtc-coupledfieldset-legend-subtitle" data-translate="' + coupledFieldSet.SubTitle + '">' + Common.TranslateKey(coupledFieldSet.SubTitle) + '</span>';
            }
            coupledFieldSetMarkup += '</legend>';
        }

        // Render Fields
        if (Common.IsOneDefined([coupledFieldSet.LeftFields, coupledFieldSet.RightFields, coupledFieldSet.LongFields])) {
            // Ol<>
            coupledFieldSetMarkup += '<ol>';

            // Li<>, LeftTitle, RightTitle, Li</>
            if (Common.IsOneDefined([coupledFieldSet.LeftTitle, coupledFieldSet.RightTitle])) {
                coupledFieldSetMarkup += '<li class="gtc-field gtc-coupledfieldset-titles">';
                if (Common.IsDefined(coupledFieldSet.LeftTitle)) {
                    coupledFieldSetMarkup += '<span class="gtc-coupledfieldset-left-title" data-translate="' + coupledFieldSet.LeftTitle + '">' + Common.TranslateKey(coupledFieldSet.LeftTitle) + '</span>';
                }
                if (Common.IsDefined(coupledFieldSet.RightTitle)) {
                    coupledFieldSetMarkup += '<span class="gtc-coupledfieldset-right-title"';
                    if (coupledFieldSet.IsRightDisplayed == 'No') {
                        coupledFieldSetMarkup += ' style="display: none;"';
                    }
                    coupledFieldSetMarkup += ' data-translate="' + coupledFieldSet.RightTitle + '">' + Common.TranslateKey(coupledFieldSet.RightTitle) + '</span>';
                }
                coupledFieldSetMarkup += '</li>';
            }

            // Render Left\Right Fields
            var length, fieldNamespace;
            if (Common.IsOneDefined([coupledFieldSet.LeftFields, coupledFieldSet.RightFields])) {

                // Initialize if no fields on one side
                if (Common.IsNotDefined(coupledFieldSet.LeftFields)) {
                    coupledFieldSet.LeftFields = [];
                }
                if (Common.IsNotDefined(coupledFieldSet.RightFields)) {
                    coupledFieldSet.RightFields = [];
                }

                // Get larger array for padding if lengths are not equal
                if (coupledFieldSet.LeftFields.length != coupledFieldSet.RightFields.length) {
                    var paddingIndex;
                    if (coupledFieldSet.LeftFields.length > coupledFieldSet.RightFields.length) {
                        paddingIndex = coupledFieldSet.RightFields.length, length = coupledFieldSet.LeftFields.length;
                        for ( ; paddingIndex < length; paddingIndex++) {
                            coupledFieldSet.RightFields.push({ Padding: true });
                        }
                    }
                    else {
                        paddingIndex = coupledFieldSet.LeftFields.length, length = coupledFieldSet.RightFields.length;
                        for ( ; paddingIndex < length; paddingIndex++) {
                            coupledFieldSet.LeftFields.push({ Padding: true });
                        }
                    }
                }

                // Fields
                var leftField, leftFieldIndex = 0;
                length = coupledFieldSet.LeftFields.length;
                for ( ; leftFieldIndex < length; leftFieldIndex++) {
                    leftField = coupledFieldSet.LeftFields[leftFieldIndex];

                    // Li<>, Span<>
                    coupledFieldSetMarkup += '<li class="gtc-field"><span';

                    // Render Left Field
                    if (leftField.Padding != true) {
                        coupledFieldSetMarkup += '>';
                        fieldNamespace = window[leftField.Type];
                        ViewElement.TestExists(leftField.Type, fieldNamespace);
                        coupledFieldSetMarkup += fieldNamespace.Render(leftField);
                    }
                    else {
                        coupledFieldSetMarkup += ' class="gtc-coupledfieldset-empty-leftfield">';
                    }

                    // Span<>, Span</>
                    coupledFieldSetMarkup += '</span><span';

                    if (coupledFieldSet.IsRightDisplayed == 'No') {
                        coupledFieldSetMarkup += ' style="display: none;"';
                    }

                    // Render Right Field
                    var rightField = coupledFieldSet.RightFields[leftFieldIndex];
                    if (rightField.Padding != true) {
                        coupledFieldSetMarkup += '>';
                        fieldNamespace = window[rightField.Type];
                        ViewElement.TestExists(rightField.Type, fieldNamespace);
                        coupledFieldSetMarkup += fieldNamespace.Render(rightField);
                    }
                    else {
                        coupledFieldSetMarkup += ' class="gtc-coupledfieldset-empty-rightfield">';
                    }

                    // Span</>, Li</>
                    coupledFieldSetMarkup += '</span></li>';
                }
            }

            // Long Fields
            if (Common.IsDefined(coupledFieldSet.LongFields)) {
                // Render Long Fields
                var longField, index = 0;
                length = coupledFieldSet.LongFields.length;
                for ( ; index < length; index++) {
                    longField = coupledFieldSet.LongFields[index];

                    // Li<>
                    coupledFieldSetMarkup += '<li class="gtc-field gtc-coupledfieldset-longfield">';

                    // Field
                    fieldNamespace = window[longField.Type];
                    ViewElement.TestExists(longField.Type, fieldNamespace);
                    coupledFieldSetMarkup += fieldNamespace.Render(longField);

                    // Li</>
                    coupledFieldSetMarkup += '</li>';
                }
            }

            // Ol</>
            coupledFieldSetMarkup += '</ol>';
        }

        // Fieldset</>
        coupledFieldSetMarkup += '</fieldset>';
        return coupledFieldSetMarkup;

    };

    /**
     * @function CoupledFieldSet.HideRightFields
     * @param {object} coupledFieldSet - The CoupledFieldSet DOM element
     * @description Hides the right column in the CoupledFieldSet DOM element
     */
    CoupledFieldSet.HideRightFields = function (coupledFieldSet) {

        Common.AddClass(coupledFieldSet, 'gtc-coupledfieldset-norightdisplayed');
        Common.SlideElements(Common.QueryAll('ol > li > span:last-child', coupledFieldSet), 'hide', 'left', 'fast');

    };

    /**
     * @function CoupledFieldSet.ShowRightFields
     * @param {object} coupledFieldSet - The CoupledFieldSet DOM element
     * @description Shows the right column in the CoupledFieldSet DOM element
     */
    CoupledFieldSet.ShowRightFields = function (coupledFieldSet) {

        Common.RemoveClass(coupledFieldSet, 'gtc-coupledfieldset-norightdisplayed');
        Common.SlideElements(Common.QueryAll('ol > li > span:last-child', coupledFieldSet), 'show', 'left', 'fast');

    };

} (window.CoupledFieldSet = window.CoupledFieldSet || {}, window, document, Common, Cache, Events, Velocity));
// Print Button
// Based On: PrintButton -> Button -> Link -> ViewElement
(function (PrintButton, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    PrintButton.Render = function (printButton) {

        // 508 Compliance
        if (Common.IsNotDefined(printButton.Title)) {
            printButton.Title = printButton.Name;
            printButton.ScreenReaderOnly = true;
        }

        // Button<, TabIndex@, Class@, Id@, Data-ControllerPath/ActionName@, Wire OnClick!
        var className = Link.RenderClassing(printButton, 'btn');
        var printButtonMarkup = '<button data-namespace="PrintButton" class="' + className + '"' + ViewElement.RenderAttributes(printButton) + EventElement.AttachEvent(printButton.Name, 'click', printButton.OnClick, PrintButton.OnClick);

        // Setup opening print dialog if no OnCLick defined, else onclick handles it
        if (Common.IsNotDefined(printButton.OnClick)) {
            Events.On(document.body, 'click.' + printButton.Name, '#' + printButton.Name,
                function () {
                    window.print();
                }
            );
        }

        // Translations, Tooltip, 508 Compliance, Confirmation
        printButtonMarkup += Button.RenderAttributes(printButton);

        // Button>
        printButtonMarkup += ' type="button">';

        // Icon
        if (Common.IsDefined(printButton.Icon)) {
            printButtonMarkup += Icon.Render(printButton.Icon, false);
        }

        // Attach Key
        if (Common.IsDefined(printButton.AttachedKey)) {
            GTC.AttachKey(printButton.Name, printButton.AttachedKey);
        }

        // Link Text
        printButtonMarkup += Link.RenderTitle(printButton, 'button');

        // Button</>
        printButtonMarkup += '</button>';
        return printButtonMarkup;

    };

    PrintButton.OnClick = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();
        var onClickParameters = [];
        var extraLogic = function () {

            // Setup opening print dialog
            Events.One(document.body, 'pageinstructionscomplete',
                function () {
                    window.print();
                }
            );

        };

        // Call OnClick
        Button.CompleteConfirmation(this, onClickParameters, extraLogic);

    };

    PrintButton.UpdateTitle = function (printButton, newTitle, promises, context) {

        Link.UpdateTitle(printButton, newTitle, promises, context);

    };

    PrintButton.ShowPinwheel = function (printButton) {

        SpinKit.Show(printButton, 'FadingCircle');

    };

    PrintButton.HidePinwheel = function (printButton) {

        SpinKit.Hide(printButton);

    };

} (window.PrintButton = window.PrintButton || {}, window, document, Common, Cache, Events, Velocity));
// Table
// Based On: Table -> ViewElement
(function (Table, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var responsiveWrapper = null;
    var tableBody = null;
    var scrollSemaphore = false;

    // Public Methods
    Table.Render = function (table) {

        // Setup ordering?
        var orderedAttribute = '';
        if (Common.IsDefined(table.OrderedColumn)) {
            orderedAttribute = ' data-currentsort="' + table.OrderedColumn + '"';
            if (Common.IsDefined(table.SortOrder)) {
                orderedAttribute = ' data-currentorder="' + table.SortOrder + '"';
            }
        }

        // Div<, TabIndex@, Class@, Id@, Div>
        var tableMarkup = '<div class="gtc-table-container" data-namespace="Table" data-configure="Pre"' + orderedAttribute + ViewElement.RenderAttributes(table) + ' data-columns=\'' + JSON.stringify(table.Columns) + '\' data-canfocus="' + table.CanFocus + '" data-canhidecolumns="' + table.CanHideColumns + '"';

        // Paging On Scroll?
        if (Common.IsEventViewElementDefined(table.OnScroll)) {
            if (Common.IsDefined(table.FormToSerialize)) {
                table.OnScroll.FormToSerialize = table.FormToSerialize;
            }
            tableMarkup += ' data-onscroll=\'' + JSON.stringify(table.OnScroll) + '\' data-pagenumber="1"';

            // Attach configure event
            Events.One(document.body, 'configuretableonscroll',
                function () {
                    SetScrolling(table.Name);
                }
            );
        }

        // Div>
        tableMarkup += '>';

        // H2<>, Title, H2</>
        if (Common.IsDefined(table.Title)) {
            tableMarkup += '<h2 class="gtc-page-theme-color"';

            // Translations
            tableMarkup += ' data-translate="' + table.Title + '"';
            tableMarkup += '>' + Common.TranslateKey(table.Title) + '</h2>';
        }

        // Styling
        var classNames = 'gtc-table';
        if (table.Borders === 'Yes') {
            classNames += ' gtc-table--borders';
        }
        if (table.Hover === 'Yes') {
            classNames += ' gtc-table--hover';
        }
        if (table.Stripes === 'Yes') {
            classNames += ' gtc-table--stripes';
        }
        if (table.EqualColumnWidth === 'Yes') {
            classNames += ' gtc-table--fixed';
        }
        if (Common.IsDefined(table.PaddingSize)) {
            classNames += ' gtc-table--size-' + table.PaddingSize.toLowerCase();
        }
        classNames += ' gtc-text-' + table.Alignment.toLowerCase();

        // Columns
        tableMarkup += '<div id="' + table.Name + '-ResponsiveTableWrapperDiv" class="gtc-table-responsive"><table id="' + table.Name + '-TableElement" class="' + classNames + '"><thead><tr>'
        if (Common.IsDefined(table.Columns)) {
            var columnIndex = 0, columnLength = table.Columns.length;
            for ( ; columnIndex < columnLength; columnIndex++) {
                tableMarkup += Column.Render(table.Columns[columnIndex]);
            }
        }
        tableMarkup += '</tr></thead>';

        // Rows
        var columnScope = table.Columns;
        tableMarkup += '<tbody id="' + table.Name + '-TableBody">';
        if (Common.IsDefined(table.Rows)) {
            var row, rowIndex = 0, rowLength = table.Rows.length;
            for ( ; rowIndex < rowLength; rowIndex++) {
                row = table.Rows[rowIndex];
                tableMarkup += '<tr ' + ViewElement.RenderAttributes(row) + '>';
                if (Common.IsDefined(row.Cells)) {
                    var cell, cellIndex = 0, cellLength = row.Cells.length;
                    for ( ; cellIndex < cellLength; cellIndex++) {
                        cell = row.Cells[cellIndex];
                        tableMarkup += '<td data-columnid="' + columnScope[cellIndex].Name + '" colspan="' + cell.ColumnSpan + '"';

                        // Alignment?
                        if (Common.IsDefined(cell.Alignment)) {
                            tableMarkup += ' class="gtc-text-' + cell.Alignment.toLowerCase() + '"';
                        }
                        tableMarkup += '>';

                        // Cell Element
                        if (Common.IsDefined(cell.CellElement)) {
                            // Color
                            if (Common.IsDefined(cell.TextColor)) {
                                tableMarkup += '<style>';
                                tableMarkup += '#' + cell.CellElement.Name + ' { ';
                                if (Common.IsDefined(cell.TextColor)) {
                                    tableMarkup += 'color: ' + Colors.ProcessValue(cell.TextColor, false, null) + ' !important;';
                                }
                                tableMarkup += ' }';
                                tableMarkup += '</style>';
                            }

                            // Render Cell Element
                            var viewElementNamespace = window[cell.CellElement.Type.toString()];
                            ViewElement.TestExists(cell.CellElement.Type, viewElementNamespace);
                            tableMarkup += viewElementNamespace.Render(cell.CellElement);
                        }
                        tableMarkup += '</td>';
                    }
                }
                tableMarkup += '</tr>';
            }
        }
        tableMarkup += '</tbody>';

        // Table</>, Div</>
        tableMarkup += '</table></div></div>';

        // Build widget options
        var options = {};
        if (table.CanFocus == 'Yes') {
            options.CanFocus = true;
        }
        else {
            options.CanFocus = false;
        }
        if (table.CanHideColumns == 'Yes') {
            options.CanHideColumns = true;
        }
        else {
            options.CanHideColumns = false;
        }
        if (table.IsDisplayed == 'No') {
            options.InitiallyHidden = true;
        }

        // Configure table to be responsive once in DOM
        Events.One(document.body, 'configureresponsivetable',
            function () {
                if (table.IsDisplayed != 'No' && Common.IsHidden(Common.Get(table.Name), true)) {
                    options.InitiallyHidden = true;
                }

                // Cache commonly used elements
                responsiveWrapper = Common.Get(table.Name + '-ResponsiveTableWrapperDiv');
                tableBody = Common.Query('#' + table.Name + '-TableBody', responsiveWrapper);

                // Initialize widget
                Widgets.table(responsiveWrapper, options);
            }
        );
        return tableMarkup;

    };

    Table.Configure = function (table, configureStage) {

        if (Common.IsDefined(table.dataset.onscroll)) {
            Events.Trigger(table, 'configuretableonscroll');
        }

    };

    Table.OnClickColumn = function (event) {

        // Initialize
        var thParent = this.parentNode;
        var onClickParameters = [
            {
                Name: 'ClickedColumn',
                Value: thParent.id,
                UiParameters: null
            },
            {
                Name: 'CurrentOrder',
                Value: Common.GetAttr(Common.Closest('.gtc-table-responsive', this), 'data-currentorder'),
                UiParameters: null
            }
        ];

        // Get OnClickEvent object
        var onClickEvent = JSON.parse(Common.GetAttr(thParent, 'data-click'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, this);

    };

    Table.OnScroll = function (table, pageNumber) {

        // Initialize
        var onScrollParameters = [];

        // Get OnScrollEvent object
        var onScrollEvent = JSON.parse(Common.GetAttr(table, 'data-onscroll'));
        if (Common.IsDefined(onScrollEvent.UiParameters)) {
            onScrollParameters = onScrollParameters.concat(onScrollEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onScrollEvent.FormToSerialize)) {
            onScrollParameters = onScrollParameters.concat(Form.SerializeArray(Common.Get(onScrollEvent.FormToSerialize)));
        }

        // Page Number
        var newPageNumber = parseInt(pageNumber, 10) + 1;
        onScrollParameters.push(
            {
                Name: 'PageNumber',
                Value: newPageNumber,
                UiParameters: null
            }
        );

        // Execute View Behavior
        Common.ExecuteViewBehavior(onScrollEvent.ControllerPath + onScrollEvent.ActionName, onScrollParameters,
            function (pageInstructionData) {
                // Return if no page instructions
                if (Common.IsNotDefined(pageInstructionData.PageInstructions) || pageInstructionData.PageInstructions.length == 0) {
                    RemoveSemaphore(table);
                    return;
                }

                // Remove instruction from list
                var pagingInstruction = null;
                pageInstructionData.PageInstructions = Common.FilterArray(pageInstructionData.PageInstructions,
                    function(pageInstruction) {
                        if (pageInstruction.Instruction != 'Page') {
                            return true;
                        }
                        else {
                            pagingInstruction = pageInstruction;
                            return false;
                        }
                    }
                );

                // Insert new paging data if there are view elements
                var delayValue = 300;
                if (Common.IsDefined(pagingInstruction.ViewElements) && pagingInstruction.ViewElements.length > 0) {
                    Widgets.table(responsiveWrapper, 'destroy');
                    Common.SetAttr(table, 'data-pagenumber', newPageNumber);
                    var tableMarkup = BuildContent(table, pagingInstruction.ViewElements);
                    Common.InsertHTMLString(tableBody, Common.InsertType.Append, tableMarkup);

                    // Build widget options and initialize
                    var options = {};
                    if (Common.GetAttr(table, 'data-canfocus') == 'Yes') {
                        options.CanFocus = true;
                    }
                    else {
                        options.CanFocus = false;
                    }
                    if (Common.GetAttr(table, 'data-canhidecolumns') == 'Yes') {
                        options.CanHideColumns = true;
                    }
                    else {
                        options.CanHideColumns = false;
                    }
                    options.InitiallyHidden = false;
                    Widgets.table(responsiveWrapper, options);
                    Events.Trigger(document.body, 'configureimages');
                    Page.SetPageHeight();
                    Common.RetranslatePage();
                }
                else {
                    delayValue = 0;
                }

                // Remove loader
                RemoveSemaphore(table);

                // Run remaining instructions if they exist
                if (pageInstructionData.PageInstructions.length > 0) {
                    Page.RunInstructions(pageInstructionData);
                }
            }, table
        );

    };

    Table.UpdateValues = function (table, uiParameters, promises) {

        if (Common.IsDefined(uiParameters)) {
            var uiParameter, index = 0, length = uiParameters.length;
            for ( ; index < length; index++) {
                uiParameter = uiParameters[index];
                var cell = Common.Query('#' + uiParameter.Name, table);
                if (Common.IsDefined(cell)) {
                    cell = Common.Query('input[name="' + uiParameter.Name + '"]', table);
                }
                if (Common.IsDefined(cell)) {
                    // Element Type
                    var elementType = Common.GetAttr(cell, 'data-namespace');

                    // Update
                    var elementNamespace = window[elementType];
                    ViewElement.TestExists(elementType, elementNamespace, null, 'UpdateValue');
                    elementNamespace.UpdateValue(cell, uiParameter.Value, promises);
                }
            }
        }

    };

    Table.ReplaceElement = function (table, viewElements, promises) {

        // Animation Promise
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Remove delegated events before building HTML which will attach delegated events with same id!
        Cache.CleanDelegatedElementsData(table);

        // Replace element
        Velocity(table, 'slideUp', 'slow',
            function () {
                // Build Markup
                var viewElement, index = 0, length = viewElements.length;
                for ( ; index < length; index++) {
                    viewElement = viewElements[index];
                    var tableElement = Common.Get(viewElement.Name);
                    var responsiveElement = Common.Get(viewElement.Name + '-ResponsiveTableWrapperDiv');
                    Widgets.table(responsiveElement, 'destroy');
                    var tableMarkup = Table.Render(viewElement);
                    Common.InsertHTMLString(tableElement, Common.InsertType.After, tableMarkup);
                    Common.Remove(tableElement, false, true);
                }

                // Reset Paging if needed
                ResetPaging(table);

                // Trigger event to call responsive table widget
                Events.Trigger(document.body, 'configureresponsivetable');
                Velocity(table, 'slideDown', 'slow',
                    function () {
                        animationPromise.resolve();
                    }
                );
            }
        );

    };

    Table.ReplaceContent = function (table, viewElements, promises) {

        // Get Table Details
        responsiveWrapper = Common.Get(table.id + '-ResponsiveTableWrapperDiv');
        tableBody = Common.Query('#' + table.id + '-TableBody', responsiveWrapper);

        // Animation Promise
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Clean delegated events on elements being removed before building HTML which will attach delegated events with same id!
        // Only on children elements since this is replace content. (1st tbody in sticky header, 2nd in main tbody)
        Cache.CleanDelegatedElementsData(Common.Query('tbody', table));
        Cache.CleanDelegatedElementsData(tableBody);

        // Hide existing table
        Velocity(table, 'slideUp', 'slow',
            function () {
                var columnScope = JSON.parse(Common.GetAttr(table, 'data-columns'));
                Widgets.table(responsiveWrapper, 'destroy');
                var rowMarkup = '<tbody id="' + table.id + '-TableBody">';

                // Build Markup
                var row, rowIndex = 0, rowLength = viewElements.length;
                for ( ; rowIndex < rowLength; rowIndex++) {
                    row = viewElements[rowIndex];

                    // Rows
                    rowMarkup += '<tr ' + ViewElement.RenderAttributes(row) + '>';
                    if (Common.IsDefined(row.Cells)) {
                        var cell, cellIndex = 0, cellLength = row.Cells.length;
                        for ( ; cellIndex < cellLength; cellIndex++) {
                            cell = row.Cells[cellIndex];
                            rowMarkup += '<td data-columnid="' + columnScope[cellIndex].Name + '" colspan="' + cell.ColumnSpan + '"';

                            // Alignment?
                            if (Common.IsDefined(cell.Alignment)) {
                                rowMarkup += ' class="gtc-text-' + cell.Alignment.toLowerCase() + '"';
                            }
                            rowMarkup += '>';

                            // Cell Element
                            if (Common.IsDefined(cell.CellElement)) {
                                // Color
                                if (Common.IsDefined(cell.TextColor)) {
                                    rowMarkup += '<style>';
                                    rowMarkup += '#' + cell.CellElement.Name + ' { ';
                                    if (Common.IsDefined(cell.TextColor)) {
                                        rowMarkup += 'color: ' + Colors.ProcessValue(cell.TextColor, false, null) + ' !important;';
                                    }
                                    rowMarkup += ' }';
                                    rowMarkup += '</style>';
                                }

                                // Render Cell Element
                                var viewElementNamespace = window[cell.CellElement.Type];
                                ViewElement.TestExists(cell.CellElement.Type, viewElementNamespace);
                                rowMarkup += viewElementNamespace.Render(cell.CellElement);
                            }
                            rowMarkup += '</td>';
                        }
                    }
                    rowMarkup += '</tr>';
                }
                rowMarkup += '</tbody>';

                // Replace rows
                Common.Remove(tableBody, false, true);
                var tableElement = Common.Query('#' + table.id + '-TableElement', responsiveWrapper);
                Common.InsertHTMLString(tableElement, Common.InsertType.Append, rowMarkup);

                // Reset Paging if needed
                ResetPaging(table);

                // Build widget options and initialize
                var options = {};
                if (Common.GetAttr(table, 'data-canfocus') == 'Yes') {
                    options.CanFocus = true;
                }
                else {
                    options.CanFocus = false;
                }
                if (Common.GetAttr(table, 'data-canhidecolumns') == 'Yes') {
                    options.CanHideColumns = true;
                }
                else {
                    options.CanHideColumns = false;
                }
                options.InitiallyHidden = true;
                Widgets.table(responsiveWrapper, options);

                // Show table and resolve promise
                Velocity(table, 'slideDown', 'slow',
                    function () {
                        animationPromise.resolve();
                    }
                );
            }
        );

    };

    Table.ShowPinwheel = function (table) {

        SpinKit.Show(table, 'FadingCircle');

    };

    Table.HidePinwheel = function (table) {

        SpinKit.Hide(table);

    };

    // Private Methods
    function BuildContent (table, viewElements) {

        // Columns
        var columnScope = JSON.parse(Common.GetAttr(table, 'data-columns'));

        // Build Markup
        var tableMarkup = '';
        if (Common.IsDefined(viewElements)) {
            var row, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                row = viewElements[index];

                // Rows
                tableMarkup += '<tr ' + ViewElement.RenderAttributes(row) + '>';
                if (Common.IsDefined(row.Cells)) {
                    var cell, cellIndex = 0, cellLength = row.Cells.length;
                    for ( ; cellIndex < cellLength; cellIndex++) {
                        cell = row.Cells[cellIndex];
                        tableMarkup += '<td data-columnid="' + columnScope[cellIndex].Name + '"';

                        // Alignment?
                        if (Common.IsDefined(cell.Alignment)) {
                            tableMarkup += ' class="gtc-text-' + cell.Alignment.toLowerCase() + '"';
                        }
                        tableMarkup += '>';

                        // Cell Element
                        if (Common.IsDefined(cell.CellElement)) {
                            // Color
                            if (Common.IsDefined(cell.TextColor)) {
                                tableMarkup += '<style>';
                                tableMarkup += '#' + cell.CellElement.Name + ' { ';
                                if (Common.IsDefined(cell.TextColor)) {
                                    tableMarkup += 'color: ' + Colors.ProcessValue(cell.TextColor, false, null) + ' !important;';
                                }
                                tableMarkup += ' }';
                                tableMarkup += '</style>';
                            }

                            // Render Cell Element
                            var viewElementNamespace = window[cell.CellElement.Type];
                            ViewElement.TestExists(cell.CellElement.Type, viewElementNamespace);
                            tableMarkup += viewElementNamespace.Render(cell.CellElement);
                        }
                        tableMarkup += '</td>';
                    }
                }
                tableMarkup += '</tr>';
            }
        }
        return tableMarkup;

    };

    function SetScrolling(tableName) {

        var tableElement = Common.Get(tableName);

        // Attach scroll event
        Events.On(window, 'scroll.paging' + tableName + '.' + tableName,
            function () {
                HandleScrollEvent(tableElement);
            }
        );

        // Attach wheel event
        Events.On(tableElement, 'wheel.paging' + tableName + '.' + tableName,
            function () {
                if (event.deltaY < 0) {
                    return;
                }
                HandleScrollEvent(tableElement);
            }
        );

    };

    function HandleScrollEvent (tableElement) {

        if (!scrollSemaphore) {
            if (Math.round(window.pageYOffset) == Common.Height(document) - Common.Height(window)) {
                scrollSemaphore = true;
                Table.ShowPinwheel(tableElement);
                Table.OnScroll(tableElement, Common.GetAttr(tableElement, 'data-pagenumber'));
            }
        }

    };

    function RemoveSemaphore (tableElement) {

        scrollSemaphore = false;
        Table.HidePinwheel(tableElement);

    };

    function ResetPaging (table) {

        if (Common.IsDefined(table.dataset.onscroll)) {
            Common.SetAttr(table, 'data-pagenumber', 1);
        }

    };

} (window.Table = window.Table || {}, window, document, Common, Cache, Events, Velocity));
// Table Widget
(function (window, document, Common, Cache, Events, Velocity, undefined) {

    var TableWidget = {

        // Options
        options: {
            CanFocus: true,
            CanHideColumns: true,
            TableWrapper: null,
            TableScrollWrapper: null,
            Table: null,
            TableClone: null,
            StickyTableHeader: null,
            TableHead: null,
            TableBody: null,
            HeaderCells: null,
            BodyRows: null,
            ColumnDisplaySelectbox: null,
            ColumnDisplayOptions: null,
            DisplayAllButton: null,
            FocusButton: null,
            iOS: false,
            ElementId: null,
            DisplayAllEventName: null,
            InitiallyHidden: false
        },

        // Public Methods
        UpdateStickyHeaderValues: function () {

            // Initialize
            var thisWidget = this;

            // Update sticky header
            thisWidget._updateStickyHeaderValues();

        },

        // Private Methods
        _wrapTable: function () {

            // Initialize
            var thisWidget = this;

            // Add responsive wrapper
            var wrapper = Common.Create('div', null, 'gtc-table-wrapper');
            Common.Wrap(thisWidget.options.TableScrollWrapper, wrapper);
            thisWidget.options.TableWrapper = thisWidget.options.TableScrollWrapper.parentNode;

        },

        _createDisplayButtons: function () {

            // Initialize
            var thisWidget = this;

            // Setup focus button
            if (thisWidget.options.CanFocus) {
                thisWidget.options.FocusButton = Common.GenerateHTML('<a class="gtc-focus-link"><i class="gtc-icon-styles fa fa-eye"></i></a>');

                // Bind click for focus
                Events.On(thisWidget.options.FocusButton, 'click',
                    function () {
                        thisWidget._activateFocus();
                    }
                );

                // Bind click on rows
                Events.On(thisWidget.options.BodyRows, 'click',
                    function () {
                        thisWidget._focusOnRow(this);
                    }
                );
            }

            // Setup column hiding
            if (thisWidget.options.CanHideColumns) {
                // Create necessary markup
                thisWidget.options.ColumnDisplaySelectbox = Common.GenerateHTML('<a class="gtc-column-display-link"><i class="gtc-icon-styles fa fa-bars fa-rotate-90"></i></a>');
                thisWidget.options.ColumnDisplayOptions = Common.GenerateHTML('<ul class="gtc-column-display-dropdown"></ul>');

                // Attach column dropdown display event
                var isWidthCalculated = false;
                var columnDisplayWidth = 0;
                Events.On(thisWidget.options.ColumnDisplaySelectbox, 'click',
                    function () {
                        var columnDisplayOptionsStyle = thisWidget.options.ColumnDisplayOptions.style;
                        if (isWidthCalculated != true) {
                            columnDisplayOptionsStyle.position = 'absolute';
                            columnDisplayOptionsStyle.zIndex = '-150';
                            columnDisplayOptionsStyle.display = 'block';
                            columnDisplayWidth = Common.Width(thisWidget.options.ColumnDisplayOptions, true);
                            columnDisplayOptionsStyle.display = '';
                            columnDisplayOptionsStyle.zIndex = '';
                            isWidthCalculated = true;
                        }
                        if (Common.HasClass(this, 'gtc-menu-open')) {
                            Common.RemoveClass(this, 'gtc-menu-open');
                            columnDisplayOptionsStyle.display = 'none';
                            columnDisplayOptionsStyle.zIndex = '';
                        }
                        else {
                            Common.AddClass(this, 'gtc-menu-open');
                            columnDisplayOptionsStyle.zIndex = '150';
                            columnDisplayOptionsStyle.top = Common.Height(this, true) + 'px';
                            columnDisplayOptionsStyle.left = '-' + columnDisplayWidth + 'px';
                            columnDisplayOptionsStyle.display = 'block';
                        }
                    }
                );

                // Create display all button
                thisWidget.options.DisplayAllButton = Common.GenerateHTML('<a class="gtc-display-all-link"><i class="gtc-icon-styles gtc-icon gtc-icon-landscape"></i></a>');

                // Bind click for display all
                Events.On(thisWidget.options.DisplayAllButton, 'click',
                    function () {
                        thisWidget._displayAll();
                    }
                );

                // Add columns options to selectbox
                thisWidget.options.ColumnDisplaySelectbox.appendChild(thisWidget.options.ColumnDisplayOptions);
            }

            // Append buttons to table wrapper
            var tableWrapper = thisWidget.options.TableWrapper;
            var tableWrapperParent = tableWrapper.parentNode;
            if (thisWidget.options.CanFocus) {
                tableWrapperParent.insertBefore(thisWidget.options.FocusButton, tableWrapper);
            }
            if (thisWidget.options.CanHideColumns) {
                tableWrapperParent.insertBefore(thisWidget.options.ColumnDisplaySelectbox, tableWrapper);
                tableWrapperParent.insertBefore(thisWidget.options.DisplayAllButton, tableWrapper);
            }

        },

        _setupHeader: function () {

            // Initialize
            var thisWidget = this;

            // Loop over column headers
            var index = 0, length = thisWidget.options.HeaderCells.length;
            for ( ; index < length; index++) {
                var headerCell = thisWidget.options.HeaderCells[index];
                var headerCellId = headerCell.id;
                var headerCellText = headerCell.textContent;

                // Create the hide/show for column
                if (Common.HasAttr(headerCell, 'data-priority')) {

                    // For loops have no scope! Give it some. (IIFE)
                    (function (headerCell, headerCellId, headerCellText) {

                        var checkboxSection = Common.GenerateHTML('<li class="gtc-checkbox-row"><input type="checkbox" class="gtc-checkbox-displaycolumn" name="DisplayColumn-' + headerCellId + '" id="DisplayColumn-' + headerCellId + '" value="' + headerCellId + '" /><label data-translate="' + headerCellText + '" for="DisplayColumn-' + headerCellId + '">' + Common.TranslateKey(headerCellText) + '</label></li>');
                        var checkboxInput = Common.Query('input', checkboxSection);
                        thisWidget.options.ColumnDisplayOptions.appendChild(checkboxSection);

                        // Bind click of checkbox section
                        Events.On(checkboxSection, 'click',
                            function () {
                                checkboxInput.checked = !checkboxInput.checked;
                                Events.Trigger(checkboxInput, 'change');
                            }
                        );

                        // Stop click of label from unchecking
                        Events.On(Common.Query('label', checkboxSection), 'click',
                            function (event) {
                                event.stopPropagation();
                            }
                        );

                        // Stop click of checkbox from unchecking
                        Events.On(checkboxInput, 'click',
                            function (event) {
                                event.stopPropagation();
                            }
                        );
                        Events.On(checkboxInput, 'change',
                            function () {
                                var value = this.value;
                                var cells = Common.QueryAll('#' + value + ', #' + value + '-Clone, [data-columnid=' + value + ']', thisWidget.options.TableWrapper);

                                // Save display all state
                                if (Common.HasClass(thisWidget.options.Table, 'gtc-display-all')) {
                                    thisWidget._preserveDisplayAll();
                                    Common.RemoveClass(thisWidget.options.Table, 'gtc-display-all');
                                    if (thisWidget.options.TableClone) {
                                        Common.RemoveClass(thisWidget.options.TableClone, 'gtc-display-all');
                                    }
                                    Common.RemoveClass(thisWidget.options.DisplayAllButton, 'gtc-btn-isselected');
                                }

                                // Show/hide cells
                                var cell, cellIndex = 0, cellLength = cells.length;
                                for ( ; cellIndex < cellLength; cellIndex++) {
                                    cell = cells[cellIndex];
                                    if (this.checked) {
                                        cell.style.display = 'table-cell';
                                    }
                                    else {
                                        cell.style.display = 'none';
                                    }
                                }
                            }
                        );
                        Events.On(checkboxInput, 'UpdateCheckboxes',
                            function () {
                                if (Common.GetStyle(headerCell, 'display') != 'none') {
                                    this.checked = true;
                                }
                                else {
                                    this.checked = false;
                                }
                            }
                        )
                        Events.Trigger(checkboxInput, 'UpdateCheckboxes');

                    }(headerCell, headerCellId, headerCellText));

                }
            }
        },

        _setupCells: function () {

            // Initialize
            var thisWidget = this;

            // Loop over all rows in body
            var rowIndex = 0, rowLength = thisWidget.options.BodyRows.length;
            for ( ; rowIndex < rowLength; rowIndex++) {
                var cells = Common.QueryAll('th, td', thisWidget.options.BodyRows[rowIndex]);

                // Loop over all cells in row
                var cellIndex = 0, cellLength = cells.length;
                for ( ; cellIndex < cellLength; cellIndex++) {
                    var cell = cells[cellIndex];
                    var columnId = Common.GetAttr(cell, 'data-columnid');

                    // Get column
                    var column = Common.Query('#' + columnId, thisWidget.options.TableScrollWrapper);

                    // Copy priority attribute from column
                    var dataPriority = Common.GetAttr(column, 'data-priority');
                    if (dataPriority) {
                        Common.SetAttr(cell, 'data-priority', dataPriority);
                    }
                }
            }

        },

        _updateStickyHeaderValues: function () {

            // Initialize
            var thisWidget = this;

            // Remove events
            Events.Off(window, 'scroll.responsivetable-' + thisWidget.options.ElementId + ' resize.responsivetable-' + thisWidget.options.ElementId);
            Events.Off(thisWidget.options.TableScrollWrapper, 'scroll');

            // Remove current stickey header
            Common.Remove(thisWidget.options.StickyTableHeader);

            // Recreate sticky header
            thisWidget._setupStickyHeader();

        },

        _setupStickyHeader: function () {

            // Initialize
            var thisWidget = this;

            // Clone table
            thisWidget.options.TableClone = thisWidget.options.Table.cloneNode(true);

            // Replace ids
            Common.SetAttr(thisWidget.options.TableClone, 'id', thisWidget.options.ElementId + '-Clone');
            var cloneIds = Common.QueryAll('[id]', thisWidget.options.TableClone);
            var cloneId, index = 0, length = cloneIds.length;
            for ( ; index < length; index++) {
                cloneId = cloneIds[index];
                Common.SetAttr(cloneId, 'id', cloneId.id + '-Clone');
            }

            // Wrap table clone to be sticky header
            Common.Wrap(thisWidget.options.TableClone, Common.GenerateHTML('<div class="gtc-sticky-table-header"></div>'));
            thisWidget.options.StickyTableHeader = thisWidget.options.TableClone.parentNode;

            // Give same height as original header
            thisWidget.options.StickyTableHeader.style.height = (Common.Height(thisWidget.options.TableHead) + 2) + 'px';

            // Insert sticky table header and position it
            thisWidget.options.Table.parentNode.insertBefore(thisWidget.options.StickyTableHeader, thisWidget.options.Table);
            thisWidget._updateStickyHeader();

            // Bind scroll and resize to update sticky header
            Events.On(window, 'scroll.responsivetable-' + thisWidget.options.ElementId + ' resize.responsivetable-' + thisWidget.options.ElementId + '.' + thisWidget.options.ElementId,
                function () {
                    thisWidget._updateStickyHeader();
                }
            );
            Events.On(thisWidget.options.TableScrollWrapper, 'scroll',
                function () {
                    thisWidget._updateStickyHeader();
                }
            );

        },

        _updateStickyHeader: function () {

            // Initialize
            var thisWidget = this;
            var top = 0;
            var offsetTop = Common.Offset(thisWidget.options.Table).top;
            var header = Common.Get('PageHeader');
            if (Common.IsDefined(header) && Common.GetStyle(header, 'position') == 'fixed') {
                var headerHeight = Common.Height(header, true);
                top += headerHeight;
                offsetTop -= headerHeight;
            }
            var pageYOffset = window.pageYOffset;
            var scrollTop = pageYOffset - 1;
            var tableHeight = Common.Height(thisWidget.options.Table);
            var stickyHeaderHeight = Common.Height(thisWidget.options.StickyTableHeader);
            var maxTop = tableHeight - stickyHeaderHeight;
            var rubberBandOffset = (scrollTop + Common.Height(window)) - Common.Height(document);
            var useFixedSolution = !thisWidget.options.iOS;
            var shouldBeVisible = (pageYOffset != 0) && (scrollTop > offsetTop) && (scrollTop < offsetTop + tableHeight);

            var stickyHeaderStyle = thisWidget.options.StickyTableHeader.style;
            if (useFixedSolution) {
                thisWidget.options.StickyTableHeader.scrollLeft = thisWidget.options.TableScrollWrapper.scrollLeft;
                Common.AddClass(thisWidget.options.StickyTableHeader, 'gtc-fixed-solution');

                // Move sticky header up when table passes it
                if (((scrollTop - offsetTop) > maxTop)) {
                    top -= ((scrollTop - offsetTop) - maxTop);
                    Common.AddClass(thisWidget.options.StickyTableHeader, 'gtc-border-radius-fix');
                }
                else {
                    Common.RemoveClass(thisWidget.options.StickyTableHeader, 'gtc-border-radius-fix');
                }

                if (shouldBeVisible) {
                    stickyHeaderStyle.visibility = 'visible';
                    stickyHeaderStyle.top = top + 'px';
                    // TODO: Calculate without borders? innerWidth
                    stickyHeaderStyle.width = Common.Width(thisWidget.options.TableScrollWrapper) + 'px';
                    return;
                }
                else {
                    stickyHeaderStyle.visibility = 'hidden';
                    stickyHeaderStyle.width = 'auto';
                }
            }
            else {
                var animationDuration = 400;
                Common.RemoveClass(thisWidget.options.StickyTableHeader, 'gtc-fixed-solution');
                top = scrollTop - offsetTop - 1;

                // Determine if header is too high or low
                if (top < 0) {
                    top = 0;
                }
                else if (top > maxTop) {
                    top = maxTop;
                }
                if (rubberBandOffset > 0) {
                    top = top - rubberBandOffset;
                }

                if (shouldBeVisible) {
                    stickyHeaderStyle.visibility = 'visible';
                    Velocity(thisWidget.options.StickyTableHeader, { 'top': top + 'px' }, animationDuration);
                    thisWidget.options.TableHead.style.visibility = 'hidden';
                }
                else {
                    Velocity(thisWidget.options.StickyTableHeader, { 'top': '0' }, animationDuration,
                        function () {
                            thisWidget.options.TableHead.style.visibility = 'visible';
                            stickyHeaderStyle.visibility = 'hidden';
                        }
                    );
                }
            }

        },

        _clearAllFocus: function () {

            // Initialize
            var thisWidget = this;
            Common.RemoveClassFromElements(thisWidget.options.BodyRows, 'gtc-unfocused');
            Common.RemoveClassFromElements(thisWidget.options.BodyRows, 'gtc-focused');

        },

        _activateFocus: function () {

            // Initialize
            var thisWidget = this;
            thisWidget._clearAllFocus();
            if (thisWidget.options.FocusButton) {
                Common.ToggleClass(thisWidget.options.FocusButton, 'gtc-btn-isselected');
            }
            Common.ToggleClass(thisWidget.options.Table, 'gtc-focus-on');

        },

        _focusOnRow: function (row) {

            // Initialize
            var thisWidget = this;
            if (Common.HasClass(thisWidget.options.Table, 'gtc-focus-on')) {
                var alreadyFocused = Common.HasClass(row, 'gtc-focused');
                thisWidget._clearAllFocus();
                if (!alreadyFocused) {
                    Common.AddClassToElements(thisWidget.options.BodyRows, 'gtc-unfocused');
                    Common.AddClass(row, 'gtc-focused');
                }
            }

        },

        _displayAll: function () {

            // Initialize
            var thisWidget = this;
            if (thisWidget.options.DisplayAllButton) {
                Common.ToggleClass(thisWidget.options.DisplayAllButton, 'gtc-btn-isselected');
            }
            Common.ToggleClass(thisWidget.options.Table, 'gtc-display-all');
            if (thisWidget.options.TableClone) {
                Common.ToggleClass(thisWidget.options.TableClone, 'gtc-display-all');
            }
            Events.Trigger(window, thisWidget.options.DisplayAllEventName);

        },

        _preserveDisplayAll: function () {

            // Initialize
            var thisWidget = this;
            var headerDataCells = Common.QueryAll('th, td', thisWidget.options.Table);
            var index = 0, length = headerDataCells.length;
            for ( ; index < length; index++) {
                headerDataCells[index].style.display = 'table-cell';
            }
            if (thisWidget.options.TableClone) {
                headerDataCells = Common.QueryAll('th, td', thisWidget.options.TableClone);
                index = 0, length = headerDataCells.length;
                for ( ; index < length; index++) {
                    headerDataCells[index].style.display = 'table-cell';
                }
            }

        },

        _hasTouch: function () {

            if ('ontouchstart' in window) {
                Common.AddClass(Common.Query('html'), 'gtc-touch');
            }
            else {
                Common.AddClass(Common.Query('html'), 'gtc-no-touch');
            }

        },

        _destroy: function () {

            // Initialize
            var thisWidget = this;

            // Unbind events
            Events.Off(thisWidget.options.BodyRows, 'click');
            Events.Off(window, 'orientationchange.responsivetable-' + thisWidget.options.ElementId + ' resize.responsivetable-' + thisWidget.options.ElementId + ' ' + thisWidget.options.DisplayAllEventName);
            Events.Off(window, 'scroll.responsivetable-' + thisWidget.options.ElementId + ' resize.responsivetable-' + thisWidget.options.ElementId);
            Events.Off(thisWidget.options.TableScrollWrapper, 'scroll');

            // Remove all added markup
            Common.RemoveClasses(Common.Query('html'), 'gtc-touch gtc-no-touch');

            if (thisWidget.options.CanHideColumns) {
                Common.Remove(thisWidget.options.ColumnDisplaySelectbox);
                Common.Remove(thisWidget.options.DisplayAllButton);
            }
            if (thisWidget.options.CanFocus) {
                Common.Remove(thisWidget.options.FocusButton);
            }
            Common.Unwrap(thisWidget.element);
            Common.Remove(thisWidget.options.StickyTableHeader);
            var tds = [], index = 0, length = thisWidget.options.BodyRows.length;
            for ( ; index < length; index++) {
                tds = tds.concat(Common.QueryAll('td', thisWidget.options.BodyRows[index]));
            }
            var td, index = 0, length = tds.length;
            for ( ; index < length; index++) {
                td = tds[index];
                Common.RemoveAttr(td, 'data-priority');
            }

        },

        _isIOS: function () {

            return !!(navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i));

        },

        _init: function () {

        },

        _create: function () {

            // Initialize
            var thisWidget = this;
            thisWidget._hasTouch();
            thisWidget.options.TableScrollWrapper = thisWidget.element;
            thisWidget.options.Table = Common.Query('table', thisWidget.element);
            thisWidget.options.TableHead = Common.Query('thead', thisWidget.element);
            thisWidget.options.TableBody = Common.Query('tbody', thisWidget.element);
            thisWidget.options.HeaderCells = Common.QueryAll('th', thisWidget.options.TableHead);
            thisWidget.options.BodyRows = Common.QueryAll('tr', thisWidget.options.TableBody);
            thisWidget.options.iOS = thisWidget._isIOS();
            thisWidget.options.ElementId = thisWidget.element.id;
            thisWidget.options.DisplayAllEventName = 'display-all-' + thisWidget.options.ElementId;

            // Wrap the table for responsive
            thisWidget._wrapTable();

            // Create toolbar with buttons
            thisWidget._createDisplayButtons();

            // Setup header cells
            if (thisWidget.options.CanHideColumns) {
                thisWidget._setupHeader();
            }

            // Setup body cells
            thisWidget._setupCells();

            // Create sticky table header
            thisWidget._setupStickyHeader();

            // Hide column display button if no columns can be hidden
            if (thisWidget.options.CanHideColumns && Common.IsEmptyElement(thisWidget.options.ColumnDisplayOptions)) {
                thisWidget.options.ColumnDisplaySelectbox.style.display = 'none';
                thisWidget.options.DisplayAllButton.style.display = 'none';
            }

            // Setup orientationchange, resize and display all click event
            Events.On(window, 'orientationchange.responsivetable-' + thisWidget.options.ElementId + ' resize.responsivetable-' + thisWidget.options.ElementId + '.' + thisWidget.options.ElementId + ' ' + thisWidget.options.DisplayAllEventName,
                function () {
                    Events.Trigger(Common.QueryAll('input', thisWidget.options.ColumnDisplayOptions), 'UpdateCheckboxes');
                }
            );

            // Update sticky header height if table is hidden during initialization
            if (thisWidget.options.InitiallyHidden) {
                Common.AttachVisibilityEvent(thisWidget.options.ElementId,
                    function (event, eventData) {
                        if (eventData.Visible == true) {
                            thisWidget.options.StickyTableHeader.style.height = (Common.Height(thisWidget.options.TableHead) + 2) + 'px';
                            Common.DetachVisibilityEvent(eventData);
                        }
                    }, null, null, 'No'
                );
            }

        }

    };

    WidgetFactory.Register('gtc.table', TableWidget);

} (window, document, Common, Cache, Events, Velocity));
/** 
 * @class Column
 * @classdesc Supports the Column View Element<br>
 *            Based On: ViewElement
 * @category Core
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (Column, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var Priorities = {
        Highest: '0',
        High: '1',
        Medium: '2',
        MediumLow: '3',
        Low: '4',
        Lowest: '5',
        NoPriority: '6'
    };

    /**
     * @function Column.Render
     * @param {object} column - The Column View Element in JSON format
     * @description Generates the HTML markup for the Column View Element 
     * @returns {string} HTML Markup of the Column View Element
     */
    Column.Render = function (column) {

        // Th<, TabIndex@, Id@, Th>
        var columnMarkup = '<th scope="col" data-namespace="Column" ' + ViewElement.RenderAttributes(column);

        // Priority
        var priority = Priorities[column.Priority];
        var canSort = false;
        if (Common.IsEventViewElementDefined(column.OnClick)) {
            canSort = true;
        }

        // Alignment?
        if (Common.IsDefined(column.Alignment)) {
            columnMarkup += ' class="gtc-text-' + column.Alignment.toLowerCase() + '"';
        }

        // Data-Mask@
        var maskingOptions;
        if (Common.IsDefined(column.Mask)) {
            // Mask Options
            maskingOptions = MaskField.MaskingOptions[column.Mask];
            if (Common.IsNotDefined(maskingOptions)) {
                maskingOptions = Mask.BuildMaskingOptions(column.Mask);
                MaskField.MaskingOptions[column.Mask] = maskingOptions;
            }
            columnMarkup += ' data-mask=\'' + JSON.stringify(maskingOptions) + '\'';
        }
        if (priority != '0') {
            columnMarkup += ' data-priority="' + priority + '"';
        }
        if (canSort) {
            columnMarkup += EventElement.AttachEvent(column.Name + '-SortAnchor', 'click', column.OnClick, Table.OnClickColumn);
        }
        columnMarkup += '>';
        if (canSort) {
            columnMarkup += '<a id="' + column.Name + '-SortAnchor">';
        }
        columnMarkup += '<span class="gtc-column-span"';

        // Masking/Translations (Don't translate if masking is defined)
        var columnLabel = column.Label;
        if (Common.IsDefined(column.Mask) && Common.IsDefined(columnLabel)) {
            // Format Value
            if (Common.IsObject(maskingOptions)) {
                var formatResult = Mask.Format(columnLabel, maskingOptions);
                columnLabel = formatResult.Text;
            }
        }
        else if (Common.IsDefined(columnLabel)) {
            columnMarkup += ' data-translate="' + columnLabel + '"';
        }
        columnMarkup += '>';
        columnMarkup += Common.TranslateKey(columnLabel) + '</span>';
        if (canSort) {
            columnMarkup += '</a>';
        }
        columnMarkup += '</th>';
        return columnMarkup;

    };

    /**
     * @function Column.UpdateValue
     * @param {object} column - The Column DOM element
     * @param {string} columnValue - The new Value of the Column
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @description Updates the Value of the Column
     */
    Column.UpdateValue = function (column, columnValue, promises) {

        // Animation hide promise
        var animationHidePromise = Common.Promise();
        promises.push(animationHidePromise.promise);

        // Sanity Check
        columnValue = (Common.IsNotDefined(columnValue)) ? '' : columnValue;

        // Check for Mask
        var maskString = Common.GetAttr(column, 'data-mask');
        if (Common.IsString(maskString)) {
            if (maskString.length > 0 && columnValue.length > 0) {
                formatResult = Mask.Format(columnValue, Mask.BuildMaskingOptions(maskString), true);
                columnValue = formatResult.Text;
            }
        }

        // Set Value
        Velocity(Common.Query('.gtc-column-span', column), { 'opacity': 0 }, 'slow',
            function () {
                var animationPromise = Common.Promise();
                promises.push(animationPromise.promise);
                var columnSpan = this[0];
                if (columnValue.length > 0) {
                    columnValue = Common.TranslateKey(columnValue);
                }
                columnSpan.textContent = columnValue;
                Common.SetAttr(columnSpan, 'data-translate', columnValue);
                Velocity(columnSpan, 'reverse',
                    function () {
                        Common.RemoveOpacity(columnSpan);
                        var table = Common.Closest('.gtc-table-responsive', column);
                        if (Common.IsModal()) {
                            if (Common.IsNotDefined(Common.Get(table.id))) {
                                window.parent.Widgets.table(table, 'UpdateStickyHeaderValues');
                            }
                        }
                        else {
                            Widgets.table(table, 'UpdateStickyHeaderValues');
                        }
                        animationHidePromise.resolve();
                        animationPromise.resolve();
                    }
                );
            }
        );

    };

} (window.Column = window.Column || {}, window, document, Common, Cache, Events, Velocity));
// Paragraph
// Based On: Paragraph -> ViewElement
(function (Paragraph, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    Paragraph.Render = function (paragraph) {

        // Sanity Check
        if (Common.IsNotDefined(paragraph)) {
            return '';
        }

        // Paragraph<, TabIndex@, Class@, Id@, Paragraph>
        var paragraphMarkup = '<p class="gtc-paragraph" data-namespace="Paragraph"' + ViewElement.RenderAttributes(paragraph);

        // Translations
        if (Common.IsDefined(paragraph.TextString)) {
            paragraphMarkup += ' data-translate="' + paragraph.TextString + '"';
        }
        paragraphMarkup += '>';

        // Paragraph
        paragraphMarkup += Common.TranslateKey(paragraph.TextString);

        // Paragraph</>
        paragraphMarkup += '</p>';

        // Return markup
        return paragraphMarkup;

    };

} (window.Paragraph = window.Paragraph || {}, window, document, Common, Cache, Events, Velocity));
// PDFElement
// Based On: PDFElement -> ViewElement
(function (PDFElement, window, document, Common, Cache, Events, Velocity, undefined) {

    // Public Methods
    PDFElement.Render = function (pdfElement) {

        // Div<, Data-NameSpace@, TabIndex@, Class@, Id@, @Data-Height, Div>
        var pdfElementMarkup = '<div class="gtc-pdfelement" data-namespace="PDFElement"' + ViewElement.RenderAttributes(pdfElement);

        // object<
        var pdfSource = null;
        var isBase64 = (Common.IsDefined(pdfElement.PDFData) && pdfElement.PDFData.indexOf('data:') == 0) ? true : false;
        if (!isBase64) {
            if (Common.IsDefined(pdfElement.PDFData)) {
                pdfSource = Common.BuildResourcePath(pdfElement.PDFData);
            }
        }
        else {
            pdfSource = pdfElement.PDFData;
        }
        var objectElementMarkup = '<object class="gtc-pdfelement-embed" type="application/pdf" data="' + pdfSource + '"';

        // Dimension styles
        if (Common.IsDefined(pdfElement.Dimension)) {
            if (Common.IsDefined(pdfElement.Dimension.Height)) {
                pdfElementMarkup += ' data-height="' + pdfElement.Dimension.Height + '"';
                objectElementMarkup += ' height="' + pdfElement.Dimension.Height + '"';
            }
            if (Common.IsDefined(pdfElement.Dimension.Width)) {
                pdfElementMarkup += ' data-width="' + pdfElement.Dimension.Width + '"';
                objectElementMarkup += ' width="' + pdfElement.Dimension.Width + '"';
            }
            else {
                objectElementMarkup += ' width="100%"';
            }
        }
        else {
            objectElementMarkup += ' width="100%"';
        }

        // object</>
        pdfElementMarkup += '>';
        objectElementMarkup += '></object>';

        // Div</>
        pdfElementMarkup += objectElementMarkup + '</div>';
        return pdfElementMarkup;

    };

    PDFElement.UpdateValue = function (element, pdfData) {

        // Get embed Element
        var embedElement = Common.Query('.gtc-pdfelement-embed', element);

        // Build PDF Source
        var pdfSource = null;
        var isBase64 = (Common.IsDefined(pdfData) && pdfData.indexOf('data:') == 0) ? true : false;
        if (!isBase64) {
            if (Common.IsDefined(pdfData)) {
                pdfSource = Common.BuildResourcePath(pdfData);
            }
        }
        else {
            pdfSource = pdfData;
        }

        // Build and Set embed Markup
        var embedElementMarkup = '<embed width="' + Common.GetAttr(element, 'data-width') + '" height="' + Common.GetAttr(element, 'data-height') + '" type="application/pdf" src="' + pdfSource + '"></embed>';
        Common.InsertHTMLString(embedElement, Common.InsertType.After, embedElementMarkup);
        Common.Remove(embedElement);

    };

} (window.PDFElement = window.PDFElement || {}, window, document, Common, Cache, Events, Velocity));
/** 
 * @class ViewSecurityPanel
 * @classdesc Suppors ViewSecurityPanel in the AuthorizationPanelPack<br>
 *            Based On: ViewElement > ViewSecurityPanel 
 * @category Authorization
 * @copyright Graphite GTC, LLC.
 * @author Graphite GTC, LLC. (info@graphitegtc.com)
 * @hideconstructor
 */
(function (ViewSecurityPanel, window, document, Common, Cache, Events, Velocity, undefined) {

    // Private Variables
    var DataCache = {
        CurrentDepth: 0,
        ActiveColumn: null,
        CurrentCheckboxId: null
    };

    /**
     * @function ViewSecurityPanel.Render
     * @param {object} viewSecurityPanel - The ViewSecurityPanel View Element in JSON format
     * @description Generates the HTML markup for the ViewSecurityPanel View Element
     * @returns {string} HTML Markup of the ViewSecurityPanel View Element
     * @listens click (id = <var>viewSecurityPanelName</var>AllowAllViewsLink)
     * @listens click (id = <var>viewSecurityPanelName</var>DenyAllViewsLink)
     * @listens click (id = <var>viewSecurityPanelName</var>AllowAllLink)
     * @listens click (id = <var>viewSecurityPanelName</var>DenyAllLink)
     */
    ViewSecurityPanel.Render = function (viewSecurityPanel) {

        // Div<, TabIndex@, Class@, Id@
        var viewSecurityPanelMarkup = '<div class="gtc-viewsecuritypanel" data-namespace="ViewSecurityPanel"' + ViewElement.RenderAttributes(viewSecurityPanel);

        // On Click Detail Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clickdetail=\'' + JSON.stringify(viewSecurityPanel.OnClickDetails) + '\'';
        }

        // On Click Save Allowed Details Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickSaveAllowedDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clicksavealloweddetails=\'' + JSON.stringify(viewSecurityPanel.OnClickSaveAllowedDetails) + '\'';
        }

        // On Click Save Denied Details Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickSaveDeniedDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clicksavedenieddetails=\'' + JSON.stringify(viewSecurityPanel.OnClickSaveDeniedDetails) + '\'';
        }

        // On Click Save All Details Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickSaveAllDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clicksavealldetails=\'' + JSON.stringify(viewSecurityPanel.OnClickSaveAllDetails) + '\'';
        }

        // On Click Save All Views Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickSaveAllViews)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clicksaveallviews=\'' + JSON.stringify(viewSecurityPanel.OnClickSaveAllViews) + '\'';
        }

        // On Click Header Detail Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickHeaderDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clickheaderdetail=\'' + JSON.stringify(viewSecurityPanel.OnClickHeaderDetails) + '\'';
        }

        // On Click Save All Header Details Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickSaveAllHeaderDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clicksaveallheaderdetails=\'' + JSON.stringify(viewSecurityPanel.OnClickSaveAllHeaderDetails) + '\'';
        }

        // On Click Content Detail Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickContentDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clickcontentdetail=\'' + JSON.stringify(viewSecurityPanel.OnClickContentDetails) + '\'';
        }

        // On Click Save All Content Details Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickSaveAllContentDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clicksaveallcontentdetails=\'' + JSON.stringify(viewSecurityPanel.OnClickSaveAllContentDetails) + '\'';
        }

        // On Click Region Detail Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickRegionDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clickregiondetail=\'' + JSON.stringify(viewSecurityPanel.OnClickRegionDetails) + '\'';
        }

        // On Click Save All Region Details Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickSaveAllRegionDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clicksaveallregiondetails=\'' + JSON.stringify(viewSecurityPanel.OnClickSaveAllRegionDetails) + '\'';
        }

        // On Click Footer Detail Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickFooterDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clickfooterdetail=\'' + JSON.stringify(viewSecurityPanel.OnClickFooterDetails) + '\'';
        }

        // On Click Save All Footer Details Event
        if (Common.IsEventViewElementDefined(viewSecurityPanel.OnClickSaveAllFooterDetails)) {
            // Data-ControllerPath/ActionName
            viewSecurityPanelMarkup += ' data-clicksaveallfooterdetails=\'' + JSON.stringify(viewSecurityPanel.OnClickSaveAllFooterDetails) + '\'';
        }

        // Div>
        viewSecurityPanelMarkup += '>';

        // H2<>, Title, H2</>
        viewSecurityPanelMarkup += '<h2 id="' + viewSecurityPanel.Name + 'Title" class="gtc-page-theme-color gtc-viewsecuritypanel-title"';

        // Translations
        viewSecurityPanel.Title = Common.IsDefined(viewSecurityPanel.Title) ? viewSecurityPanel.Title : '';
        viewSecurityPanelMarkup += ' data-originaltitle="' + viewSecurityPanel.Title + '" data-translate="' + viewSecurityPanel.Title + '"';
        viewSecurityPanelMarkup += '>' + Common.TranslateKey(viewSecurityPanel.Title) + '</h2>';

        // Allow/Deny All Views Links
        viewSecurityPanelMarkup += '<span id="' + viewSecurityPanel.Name + 'AllowAllViews" style="display:none;" class="gtc-viewsecuritypanel-saveall"><span data-translate="AllowAllViews">' + Common.TranslateKey('AllowAllViews') + '</span><a id="' + viewSecurityPanel.Name + 'AllowAllViewsLink"><i class="gtc-icon-styles fa fa-check"></i></a><a id="' + viewSecurityPanel.Name + 'DenyAllViewsLink"><i class="gtc-icon-styles fa fa-times"></i></a></span>';
        Events.On(document.body, 'click.' + viewSecurityPanel.Name + 'AllowAllViewsLink', '#' + viewSecurityPanel.Name + 'AllowAllViewsLink', ViewSecurityPanel.OnClickSaveAllViews);
        Events.On(document.body, 'click.' + viewSecurityPanel.Name + 'DenyAllViewsLink', '#' + viewSecurityPanel.Name + 'DenyAllViewsLink', ViewSecurityPanel.OnClickSaveAllViews);

        // Save All Details
        viewSecurityPanelMarkup += '<span id="' + viewSecurityPanel.Name + 'AllowAll" style="display:none;" class="gtc-viewsecuritypanel-saveall"><span data-translate="AllowAll">' + Common.TranslateKey('AllowAll') + '</span><a id="' + viewSecurityPanel.Name + 'AllowAllLink"><i class="gtc-icon-styles fa fa-check"></i></a><a id="' + viewSecurityPanel.Name + 'DenyAllLink"><i class="gtc-icon-styles fa fa-times"></i></a></span>';
        Events.On(document.body, 'click.' + viewSecurityPanel.Name + 'AllowAllLink', '#' + viewSecurityPanel.Name + 'AllowAllLink', ViewSecurityPanel.OnClickSaveAllDetails);
        Events.On(document.body, 'click.' + viewSecurityPanel.Name + 'DenyAllLink', '#' + viewSecurityPanel.Name + 'DenyAllLink', ViewSecurityPanel.OnClickSaveAllDetails);

        // Allow\Deny All Buttons
        // Div<>, View Element Sections, Div</>, // Div</>
        viewSecurityPanelMarkup += '<div id="' + viewSecurityPanel.Name + 'AllowAllViewsDisplay" style="display:none;" class="gtc-viewsecuritypanel-allowdenyall">';
        viewSecurityPanelMarkup += '<div class="gtc-viewsecuritypanel-titlebar gtc-viewsecuritypanel-titlebar-allviews"><h3 data-translate="AllViews">' + Common.TranslateKey('AllViews') + '</h3></div>';
        viewSecurityPanelMarkup += '</div>';

        // Display choose a view
        viewSecurityPanelMarkup += NoItemsToDisplay(false, false);

        // Div<>
        viewSecurityPanelMarkup += '<div style="display:none;" class="gtc-viewsecuritypanel-container"><div class="gtc-viewsecuritypanel-columns">';

        // Div</>, Div</>, Div</>
        viewSecurityPanelMarkup += '</div></div></div>';
        return viewSecurityPanelMarkup;

    };

    /**
     * @function ViewSecurityPanel.OnClickTopLevelDetail
     * @param {event} event - A DOM click Event
     * @description Calls the OnClickContentDetailsViewSecurityPanel Behavior of AuthorizationPanelPack when an item in the first column is clicked
     */
    ViewSecurityPanel.OnClickTopLevelDetail = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();
        var viewSecurityPanel = Common.Closest('.gtc-viewsecuritypanel', this);
        Common.RemoveClass(Common.Query('.gtc-active', this.parentNode), 'gtc-active');
        Common.AddClass(this, 'gtc-active');
        var onClickParameters = [];

        // Get OnClickEvent object
        var onClickEvent = JSON.parse(Common.GetAttr(viewSecurityPanel, 'data-click' + Common.GetAttr(this, 'data-toplevel').toLowerCase() + 'detail'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickEvent.FormToSerialize)) {
            onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
        }

        // Set depth
        DataCache.CurrentDepth = 1;

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, viewSecurityPanel);

    };

    /**
     * @function ViewSecurityPanel.OnClickDetail
     * @param {event} event - A DOM click Event
     * @description Calls the OnClickDetailsViewSecurityPanel Behavior of AuthorizationPanelPack when an item in the subsequent columns is clicked
     */
    ViewSecurityPanel.OnClickDetail = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();
        var viewSecurityPanel = Common.Closest('.gtc-viewsecuritypanel', this);
        Common.RemoveClass(Common.Query('.gtc-active', this.parentNode), 'gtc-active');
        Common.AddClass(this, 'gtc-active');
        var onClickParameters = [];

        // Get OnClickEvent object
        var onClickEvent = JSON.parse(Common.GetAttr(viewSecurityPanel, 'data-clickdetail'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickEvent.FormToSerialize)) {
            onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
        }

        // Get ViewElementDetail
        onClickParameters = onClickParameters.concat([
            {
                Name: 'ViewElementDetail',
                Value: Common.GetAttr(this, 'data-id'),
                UiParameters: null
            }
        ]);

        // Set depth
        DataCache.CurrentDepth = Common.GetIndex(Common.Closest('.gtc-viewsecuritypanel-column', this)) + 1;

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, viewSecurityPanel);

    };

    /**
     * @function ViewSecurityPanel.OnClickChildlessDetail
     * @param {event} event - A DOM click Event
     * @description Handle the click of an item in the last column
     */
    ViewSecurityPanel.OnClickChildlessDetail = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();
        var viewSecurityPanel = Common.Closest('.gtc-viewsecuritypanel', this);
        Common.RemoveClass(Common.Query('.gtc-active', this.parentNode), 'gtc-active');

        // Set depth
        DataCache.CurrentDepth = Common.GetIndex(Common.Closest('.gtc-viewsecuritypanel-column', this)) + 1;

        // Clear previous columns and events
        var columns = Common.QueryAll('.gtc-viewsecuritypanel-column', viewSecurityPanel);
        var previousColumns = Common.GetAllSibling(columns[DataCache.CurrentDepth - 1], Common.SiblingType.Next);
        Common.Remove(previousColumns);
        Events.Off(document.body, 'click.viewsecuritypanelonclickdetails.Depth' + (DataCache.CurrentDepth + 1));

    };

    /**
     * @function ViewSecurityPanel.OnClickSaveAllDetails
     * @param {event} event - A DOM click Event
     * @description Calls the OnClickSaveAllDetailsSecurityPanel Behavior of AuthorizationPanelPack when "Allow All" (Green check and Red x) buttons are clicked
     */
    ViewSecurityPanel.OnClickSaveAllDetails = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();
        var viewSecurityPanel = Common.Closest('.gtc-viewsecuritypanel', this);
        var viewSecurityPanelId = viewSecurityPanel.id;
        var onClickParameters = [];

        // Get OnClickEvent object
        var onClickEvent = JSON.parse(Common.GetAttr(viewSecurityPanel, 'data-clicksavealldetails'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickEvent.FormToSerialize)) {
            onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
        }

        // Set Allow/Deny
        var allow = '';
        var eventTarget = event.target;
        if (eventTarget.id == viewSecurityPanelId + 'AllowAllLink' || Common.IsDefined(Common.Closest('#' + viewSecurityPanelId + 'AllowAllLink', eventTarget))) {
            allow = 'Yes';
        }
        else {
            allow = 'No';
        }
        onClickParameters = onClickParameters.concat([
            {
                Name: 'Allow',
                Value: allow,
                UiParameters: null
            }
        ]);

        // Set depth, remove previous columns, clear delegated events
        DataCache.CurrentDepth = 0;
        var columns = Common.QueryAll('.gtc-viewsecuritypanel-column', viewSecurityPanel);
        var previousColumns = Common.GetAllSibling(columns[DataCache.CurrentDepth], Common.SiblingType.Next);
        Common.Remove(previousColumns);
        Events.Off(document.body, 'click.viewsecuritypanelonclickdetails.Depth' + (DataCache.CurrentDepth + 1));

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, viewSecurityPanel);

    };

    /**
     * @function ViewSecurityPanel.OnClickSaveAllViews
     * @param {event} event - A DOM click Event
     * @description Calls the OnClickSaveAllViewsSecurityPanel Behavior of AuthorizationPanelPack when "Allow All Views" (Green check and Red x) buttons are clicked
     */
    ViewSecurityPanel.OnClickSaveAllViews = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();
        var viewSecurityPanel = Common.Closest('.gtc-viewsecuritypanel', this);
        var viewSecurityPanelId = viewSecurityPanel.id;
        var onClickParameters = [];

        // Get OnClickEvent object
        var onClickEvent = JSON.parse(Common.GetAttr(viewSecurityPanel, 'data-clicksaveallviews'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickEvent.FormToSerialize)) {
            onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
        }

        // Set Allow/Deny
        var allow = '';
        var eventTarget = event.target;
        if (eventTarget.id == viewSecurityPanelId + 'AllowAllViewsLink' || Common.IsDefined(Common.Closest('#' + viewSecurityPanelId + 'AllowAllViewsLink', eventTarget))) {
            allow = 'Yes';
        }
        else {
            allow = 'No';
        }
        onClickParameters = onClickParameters.concat([
            {
                Name: 'Allow',
                Value: allow,
                UiParameters: null
            }
        ]);

        // Set depth, remove previous columns, clear delegated events
        DataCache.CurrentDepth = 0;
        var columns = Common.QueryAll('.gtc-viewsecuritypanel-column', viewSecurityPanel);
        var previousColumns = Common.GetAllSibling(columns[DataCache.CurrentDepth], Common.SiblingType.Next);
        Common.Remove(previousColumns);
        Events.Off(document.body, 'click.viewsecuritypanelonclickdetails.Depth' + (DataCache.CurrentDepth + 1));

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, viewSecurityPanel);

    };

    /**
     * @function ViewSecurityPanel.OnClickSaveAllTopLevelDetails
     * @param {event} event - A DOM click Event
     * @description Calls the OnClickSaveAllHeader/Content/Region/FooterDetailsSecurityPanel Behavior of AuthorizationPanelPack when first column (Green check and Red x) buttons are clicked
     */
    ViewSecurityPanel.OnClickSaveAllTopLevelDetails = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();
        var viewSecurityPanel = Common.Closest('.gtc-viewsecuritypanel', this);
        var viewSecurityPanelId = viewSecurityPanel.id;
        var onClickParameters = [];

        // Get OnClickEvent object
        var topLevelValue = Common.GetAttr(Common.Closest('.gtc-viewsecuritypanel-node', this), 'data-toplevel');
        var onClickEvent = JSON.parse(Common.GetAttr(viewSecurityPanel, 'data-clicksaveall' + topLevelValue.toLowerCase() + 'details'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickEvent.FormToSerialize)) {
            onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
        }

        // Set Allow/Deny
        var allow = '';
        var eventTarget = event.target;
        var linkId = viewSecurityPanelId + topLevelValue + 'AllowAllLink';
        if (eventTarget.id == linkId || Common.IsDefined(Common.Closest('#' + linkId, eventTarget))) {
            allow = 'Yes';
        }
        else {
            allow = 'No';
        }
        onClickParameters = onClickParameters.concat([
            {
                Name: 'Allow',
                Value: allow,
                UiParameters: null
            }
        ]);

        // Set depth, remove previous columns, clear delegated events
        DataCache.CurrentDepth = 0;
        var columns = Common.QueryAll('.gtc-viewsecuritypanel-column', viewSecurityPanel);
        var previousColumns = Common.GetAllSibling(columns[DataCache.CurrentDepth], Common.SiblingType.Next);
        Common.Remove(previousColumns);
        Events.Off(document.body, 'click.viewsecuritypanelonclickdetails.Depth' + (DataCache.CurrentDepth + 1));

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, viewSecurityPanel);

    };

    /**
     * @function ViewSecurityPanel.OnClickSaveDetails
     * @param {event} event - A DOM click Event
     * @description Calls ClickSaveAllowedDetails or ClickSaveDeniedDetails based on the checkbox click of a View Element in the subsequent columns 
     */
    ViewSecurityPanel.OnClickSaveDetails = function (event) {

        // Initialize
        event.preventDefault();
        event.stopPropagation();

        // Semaphore to stop bubbling events
        if (DataCache.CurrentCheckboxId == null) {
            if (this.checked == true) {
                ClickSaveAllowedDetails(this);
            }
            else {
                ClickSaveDeniedDetails(this);
            }
        }

    };

    /**
     * @function ViewSecurityPanel.ReplaceElement
     * @param {object} viewSecurityPanel - The ViewSecurityPanel DOM element
     * @param {object[]} viewElements - An array that contains one ViewSecurityPanel View Element in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @description Replaces the ViewSecurityPanel's first column (Also handles "All Views" and "Please choose a Security Group and View")
     * @listens click (class = gtc-viewsecuritypanel-node)
     * @listens click (id = SecurityPanelHeader/Content/Region/FooterAllowAllLink)
     * @listens click (id = SecurityPanelHeader/Content/Region/FooterDenyAllLink)
     * @listens click (id = GTC<var>ViewElementSecurityDisplayId</var>)
     */
    ViewSecurityPanel.ReplaceElement = function (viewSecurityPanel, viewElements, promises) {

        // Animation Promise
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Initialize
        var noItemsToDisplay = Common.Query('.gtc-displaydetail-noitems', viewSecurityPanel);
        var viewSecurityPanelId = viewSecurityPanel.id;
        var viewSecurityPanelContainer = Common.Query('.gtc-viewsecuritypanel-container', viewSecurityPanel);

        // Build Markup
        Velocity(viewSecurityPanelContainer, 'slideUp', 'slow',
            function () {
                var viewSecurityPanelMarkup = '';
                if (Common.IsDefined(viewElements) && viewElements.length > 0) {

                    // Remove the nothing to display detail
                    if (Common.IsDefined(noItemsToDisplay)) {
                        var noItemsPromise = Common.Promise();
                        promises.push(noItemsPromise.promise);
                        Velocity(noItemsToDisplay, 'slideUp', 'slow',
                            function () {
                                Common.Remove(noItemsToDisplay);
                                noItemsPromise.resolve();
                            }
                        );
                    }

                    // Remove colums
                    Common.Remove(Common.QueryAll('.gtc-viewsecuritypanel-column', viewSecurityPanel));
                    var uiViewDetail = viewElements[0];

                    // Clear everything when View.IsAllowed is No
                    if (uiViewDetail.IsAllowed == 'No') {
                        ClearAll(viewSecurityPanel, viewSecurityPanelId);
                        return;
                    }

                    // Update Title
                    var title = Common.Get(viewSecurityPanelId + 'Title');
                    var currentTranslation = Common.GetAttr(title, 'data-translate');
                    if (currentTranslation != uiViewDetail.Display) {
                        var updateTitlePromise = Common.Promise();
                        promises.push(updateTitlePromise.promise);
                        Velocity(title, { 'opacity': 0 }, 'slow',
                            function () {
                                Common.SetAttr(title, 'data-translate', uiViewDetail.Display);
                                title.textContent = Common.TranslateKey(uiViewDetail.Display);
                                Velocity(title, 'reverse');
                                updateTitlePromise.resolve();
                            }
                        );
                    }

                    // Display All?
                    var allowDenyAllDisplay = Common.Get(viewSecurityPanelId + 'AllowAllViewsDisplay');
                    var allowDenyAllLinks = Common.Get(viewSecurityPanelId + 'AllowAllViews');
                    var allowAll = Common.Get(viewSecurityPanelId + 'AllowAll');
                    if (uiViewDetail.Display == 'All') {
                        Velocity(allowDenyAllDisplay, 'slideDown', 'slow');
                        Velocity(allowDenyAllLinks, 'fadeIn', { duration: 'slow', display: '' });
                        Velocity(allowAll, 'fadeOut', 'slow');
                    }
                    else {
                        // Hide All Views
                        Velocity(allowDenyAllDisplay, 'slideUp', 'slow');
                        Velocity(allowDenyAllLinks, 'fadeOut', 'slow');

                        // Show allow all buttons
                        Velocity(allowAll, 'fadeIn', { duration: 'slow', display: '' });

                        // Set depth, clear top level node all events, clear delegated events
                        DataCache.CurrentDepth = 0;
                        Events.Off(document.body, 'click.viewsecuritypanelonclickallowall');
                        Events.Off(document.body, 'click.viewsecuritypanelonclickdetails');

                        // Create top level nodes
                        var topLevelElements = [];
                        if (uiViewDetail.HasHeaderChildren == 'Yes') {
                            var headerNode = {
                                Name: 'HeaderNode',
                                Id: '',
                                Display: 'Header',
                                HasChildren: 'Yes',
                                IsAllowed: 'Yes',
                                TopLevelClickEvent: 'Yes'
                            };
                            topLevelElements.push(headerNode);
                        }
                        if (uiViewDetail.HasContentChildren == 'Yes') {
                            var contentNode = {
                                Name: 'ContentNode',
                                Id: '',
                                Display: 'Content',
                                HasChildren: 'Yes',
                                IsAllowed: 'Yes',
                                TopLevelClickEvent: 'Yes'
                            };
                            topLevelElements.push(contentNode);
                        }
                        if (uiViewDetail.HasRegionChildren == 'Yes') {
                            var regionNode = {
                                Name: 'RegionNode',
                                Id: '',
                                Display: 'Region',
                                HasChildren: 'Yes',
                                IsAllowed: 'Yes',
                                TopLevelClickEvent: 'Yes'
                            };
                            topLevelElements.push(regionNode);
                        }
                        if (uiViewDetail.HasFooterChildren == 'Yes') {
                            var footerNode = {
                                Name: 'FooterNode',
                                Id: '',
                                Display: 'Footer',
                                HasChildren: 'Yes',
                                IsAllowed: 'Yes',
                                TopLevelClickEvent: 'Yes'
                            };
                            topLevelElements.push(footerNode);
                        }

                        // Build markup and insert
                        viewSecurityPanelMarkup += BuildColumns(topLevelElements, viewSecurityPanelId);
                        Common.InsertHTMLString(Common.Query('.gtc-viewsecuritypanel-columns', viewSecurityPanel), Common.InsertType.Append, viewSecurityPanelMarkup);

                        // Update current view id
                        Common.SetAttr(viewSecurityPanel, 'data-id', uiViewDetail.Id);

                        // Show security panel
                        Velocity(viewSecurityPanelContainer, 'slideDown', 'slow',
                            function () {
                                Page.SetPageHeight();
                            }
                        );
                    }
                }
                else {
                    // Display no items?
                    if (Common.IsNotDefined(noItemsToDisplay)) {
                        var noItemsPromise = Common.Promise();
                        promises.push(noItemsPromise.promise);
                        viewSecurityPanelMarkup += NoItemsToDisplay(true, false);
                        Common.InsertHTMLString(viewSecurityPanel, Common.InsertType.Append, viewSecurityPanelMarkup);
                        Velocity(viewSecurityPanelContainer, 'slideUp', 'slow');
                        Velocity(Common.Query('.gtc-displaydetail-noitems', viewSecurityPanel), 'slideDown', 'slow',
                            function () {
                                noItemsPromise.resolve();
                                Page.SetPageHeight();
                            }
                        );
                    }

                    // Update Title
                    var title = Common.Get(viewSecurityPanelId + 'Title');
                    var currentTranslation = Common.GetAttr(title, 'data-translate');
                    var originalTitle = Common.GetAttr(title, 'data-originaltitle');
                    if (currentTranslation != originalTitle) {
                        var updateTitlePromise = Common.Promise();
                        promises.push(updateTitlePromise.promise);
                        Velocity(title, { 'opacity': 0 }, 'slow',
                            function () {
                                Common.SetAttr(title, 'data-translate', originalTitle);
                                title.textContent = Common.TranslateKey(originalTitle);
                                Velocity(title, 'reverse');
                                updateTitlePromise.resolve();
                            }
                        );
                    }

                    // Show allow all buttons
                    var allowAll = Common.Get(viewSecurityPanelId + 'AllowAll');
                    Velocity(allowAll, 'fadeOut', 'slow');

                    // Hide All Views
                    var allowDenyAllDisplay = Common.Get(viewSecurityPanelId + 'AllowAllViewsDisplay');
                    var allowDenyAllLinks = Common.Get(viewSecurityPanelId + 'AllowAllViews');
                    Velocity(allowDenyAllDisplay, 'slideUp', 'slow');
                    Velocity(allowDenyAllLinks, 'fadeOut', 'slow');
                }
                animationPromise.resolve();
            }
        );

    };

    /**
     * @function ViewSecurityPanel.AppendContent
     * @param {object} viewSecurityPanel - The ViewSecurityPanel DOM element
     * @param {object[]} viewElements - An array of ViewElementSecurityDisplay View Elements in JSON format
     * @param {object[]} promises - An array of promises that is used to know when all Page Instructions are completed
     * @param {string} context - Current or Parent View
     * @description Populates a subsequent column in the ViewSecurityPanel
     * @listens click (id = GTC<var>ViewElementSecurityDisplayId</var>)
     * @listens change (id = GTC<var>ViewElementSecurityDisplayId</var>CheckboxField<var>ViewElementSecurityDisplayId</var>-Choice)
     */
    ViewSecurityPanel.AppendContent = function (viewSecurityPanel, viewElements, promises, context) {

        // Animation Promise
        var animationPromise = Common.Promise();
        promises.push(animationPromise.promise);

        // Build Markup
        var viewSecurityPanelMarkup = '';
        if (Common.IsDefined(viewElements) && viewElements.length > 0) {
            var noItemsToDisplay = Common.Query('.gtc-displaydetail-noitems', viewSecurityPanel);

            // Remove the nothing to display detail
            if (Common.IsDefined(noItemsToDisplay)) {
                var noItemsPromise = Common.Promise();
                promises.push(noItemsPromise.promise);
                Velocity(noItemsToDisplay, 'slideUp', 'slow',
                    function () {
                        Common.Remove(noItemsToDisplay);
                        noItemsPromise.resolve();
                    }
                );
            }

            // Clear previous columns and events
            var columns = Common.QueryAll('.gtc-viewsecuritypanel-column', viewSecurityPanel);
            var previousColumns = Common.GetAllSibling(columns[DataCache.CurrentDepth - 1], Common.SiblingType.Next);
            Common.Remove(previousColumns);
            Events.Off(document.body, 'click.viewsecuritypanelonclickdetails.Depth' + DataCache.CurrentDepth);

            // Build markup
            viewSecurityPanelMarkup += BuildColumns(viewElements);

            // Insert new column and show
            var columnsContainer = Common.Query('.gtc-viewsecuritypanel-columns', viewSecurityPanel);
            Common.InsertHTMLString(columnsContainer, Common.InsertType.Append, viewSecurityPanelMarkup);
            var insertedColumn = columnsContainer.lastChild;
            Common.Slide(insertedColumn, 'show', 'left', 200);

            // Setup checkboxes
            var insertedChoices = Common.QueryAll('.gtc-input-checkbox-choice', insertedColumn);
            Widgets.checkbox(insertedChoices, { ClassLabelCheckboxUnchecked: 'gtc-classLabelCheckboxUnchecked', ClassLabelCheckboxUncheckedHover: 'gtc-classLabelCheckboxUncheckedHover', ClassLabelCheckboxChecked: 'gtc-input-checkbox-selected', ClassLabelCheckboxCheckedHover: 'gtc-classLabelCheckboxCheckedHover' });
            Events.On(insertedChoices, 'change', ViewSecurityPanel.OnClickSaveDetails);

            // Setup tooltips
            ConfigureInfoTooltips(Common.QueryAll('.gtc-viewsecuritypanel-infotooltip-icon', insertedColumn));
            animationPromise.resolve();
        }
        else {
            animationPromise.resolve();
        }

    };

    /**
     * @function ViewSecurityPanel.ShowPinwheel
     * @param {object} viewSecurityPanel - The ViewSecurityPanel DOM element
     * @description Shows Pinwheel on the View Element
     */
    ViewSecurityPanel.ShowPinwheel = function (viewSecurityPanel) {

        Common.InsertHTMLString(document.body, Common.InsertType.Append, '<div class="gtc-pinwheel-overlay gtc-pinwheel-overlay-transparent" id="ViewSecurityPanelPinwheelOverlay"></div>');
        SpinKit.Show(document.body, 'FadingCircle');

    };

    /**
     * @function ViewSecurityPanel.HidePinwheel
     * @param {object} viewSecurityPanel - The ViewSecurityPanel DOM element
     * @description Hides Pinwheel on the View Element
     */
    ViewSecurityPanel.HidePinwheel = function (viewSecurityPanel) {

        setTimeout(
            function () {
                SpinKit.Hide(document.body);
                Common.Remove(Common.Get('ViewSecurityPanelPinwheelOverlay'));
            }, 200
        );

    };

    // Private Methods
    function BuildColumns (viewElements, viewSecurityPanelId) {

        // Builds html structure for nodes
        var hasTopLevel = false;
        var columnMarkup = '';
        if (Common.IsDefined(viewElements) && viewElements.length > 0) {
            var element, elementId, checkboxField, isChecked, index = 0, length = viewElements.length;
            for ( ; index < length; index++) {
                element = viewElements[index];
                if (Common.IsDefined(element.Name)) {
                    elementId = element.Name + Common.SanitizeToken(element.Id);
                }
                else {
                    elementId = Common.SanitizeToken(element.Id);
                }
                columnMarkup += '<li class="gtc-viewsecuritypanel-node" id="' + elementId + '"';
                if (Common.IsDefined(element.Id)) {
                    columnMarkup += ' data-id="' + element.Id + '"';
                }
                var depthNamespace = BuildDepthNamespace();
                if (element.TopLevelClickEvent == 'Yes') {
                    hasTopLevel = true;
                    columnMarkup += ' data-toplevel="' + element.Display + '">';
                    columnMarkup += '<span id="' + elementId + element.Display + 'AllowAll" class="gtc-viewsecuritypanel-saveall-toplevel"><a id="' + viewSecurityPanelId + element.Display + 'AllowAllLink"><i class="gtc-icon-styles fa fa-check"></i></a><a id="' + viewSecurityPanelId + element.Display + 'DenyAllLink"><i class="gtc-icon-styles fa fa-times"></i></a></span>';
                    Events.On(document.body, 'click.viewsecuritypanelonclickdetails' + depthNamespace + '.' + elementId, '#' + elementId, ViewSecurityPanel.OnClickTopLevelDetail);
                    Events.On(document.body, 'click.viewsecuritypanelonclickallowall' + depthNamespace + '.' + viewSecurityPanelId + element.Display + 'AllowAllLink', '#' + viewSecurityPanelId + element.Display + 'AllowAllLink', ViewSecurityPanel.OnClickSaveAllTopLevelDetails);
                    Events.On(document.body, 'click.viewsecuritypanelonclickallowall' + depthNamespace + '.' + viewSecurityPanelId + element.Display + 'DenyAllLink', '#' + viewSecurityPanelId + element.Display + 'DenyAllLink', ViewSecurityPanel.OnClickSaveAllTopLevelDetails);
                }
                else {
                    columnMarkup += '>';
                    isChecked = (element.IsAllowed == 'Yes') ? 'Yes' : 'No';
                    checkboxField = CreateCheckboxObject(isChecked, elementId + '-Choice', elementId + 'CheckboxField');
                    columnMarkup += CheckboxField.Render(checkboxField);
                    if (element.HasChildren == 'Yes') {
                        Events.On(document.body, 'click.viewsecuritypanelonclickdetails' + depthNamespace + '.' + elementId, '#' + elementId, ViewSecurityPanel.OnClickDetail);
                    }
                    else {
                        Events.On(document.body, 'click.viewsecuritypanelonclickdetails' + depthNamespace + '.' + elementId, '#' + elementId, ViewSecurityPanel.OnClickChildlessDetail);
                    }
                }
                columnMarkup += element.Display;
                if (element.TopLevelClickEvent != 'Yes') {
                    columnMarkup += '<i class="gtc-viewsecuritypanel-infotooltip-icon gtc-icon-styles fa fa-info-circle"';
                    var tooltip = element.Display + '<br>Type:&nbsp;' + element.ElementType;
                    columnMarkup += ' data-tooltip="' + tooltip + '"';
                    columnMarkup += '></i>';
                }
                if (element.HasChildren == 'Yes') {
                    columnMarkup += '<i class="gtc-viewsecuritypanel-haschildren-icon gtc-icon-styles fa fa-caret-right"></i>';
                }
                columnMarkup += '</li>';
            }
        }
        var styleMarkup = '';
        if (hasTopLevel == false) {
            styleMarkup = ' style="display:none;"';
        }
        return '<div' + styleMarkup + ' class="gtc-viewsecuritypanel-column"><ul>' + columnMarkup + '</ul></div>';

    };

    function NoItemsToDisplay (isHidden, displayNotAllowed) {

        // Initialize
        var hiddenStyle = '';
        var textDisplay = 'PleaseChooseASecurityGroupAndView';

        // Start as hidden?
        if (isHidden == true) {
            hiddenStyle = ' style="display: none;"';
        }

        // Security group and view selected but not allowed?
        if (displayNotAllowed == true) {
            textDisplay = 'AllowViewToChangeElementSecurity'
        }
        return '<div class="gtc-displaydetail gtc-displaydetail-noitems"' + hiddenStyle + '><p data-translate="' + textDisplay + '">' + Common.TranslateKey(textDisplay) + '</p></div>';

    };

    function BuildDepthNamespace () {

        var namespace = '';
        var index = 0, length = DataCache.CurrentDepth + 1;
        for ( ; index < length; index++) {
            namespace += '.Depth' + index
        }
        return namespace;

    };

    function CreateCheckboxObject (isChecked, choiceName, checkboxName) {

        var checkboxField = {
            ChoiceDetail: {
                Choices: [
                    {
                        Display: '',
                        IsChecked: isChecked,
                        Name: choiceName
                    }
                ],
            },
            FocusIndex: 0,
            IsSerializable: 'Yes',
            MaximumGrids: 0,
            Name: checkboxName,
            Type: 'CheckboxField'
        };
        return checkboxField;

    };

    function ConfigureInfoTooltips (labelTooltips) {

        Events.On(labelTooltips, 'click',
            function (event) {
                event.preventDefault();
                event.stopPropagation();
                var that = this;
                Widgets.tooltip(that, {
                    tooltipClass: 'gtc-viewsecuritypanel-infotooltip gtc-label-tooltip-style',
                    items: '[data-tooltip]',
                    content: function () {
                        return Common.GetAttr(this, 'data-tooltip');
                    },
                    close: function (event, ui) {
                        Widgets.tooltip(that, 'destroy');
                    },
                    position: {
                        my: 'center bottom-20',
                        at: 'center top',
                        using: function (position, positionData) {
                            var thisStyle = this.style;
                            thisStyle.top = position.top + 'px';
                            thisStyle.left = position.left + 'px';
                            var horizontal = 'center';
                            if (position.left == 0) {
                                horizontal = 'left';
                            }
                            else if (position.left + Common.Width(this) == Common.Width(window)) {
                                horizontal = 'right';
                            }
                            var newDiv = Common.Create('div', null, 'gtc-tooltip-arrow ' + positionData.vertical + ' ' + horizontal);
                            this.appendChild(newDiv);
                        }
                    }
                });
                Widgets.tooltip(that, 'open');
            }
        );

    };

    function ClearAll (viewSecurityPanel, viewSecurityPanelId) {

        // Initialize
        var translatePromises = [];

        // Clear all columns
        Common.Remove(Common.QueryAll('.gtc-viewsecuritypanel-column', viewSecurityPanel));

        // Update Title
        var title = Common.Get(viewSecurityPanelId + 'Title');
        var currentTranslation = Common.GetAttr(title, 'data-translate');
        var originalTitle = Common.GetAttr(title, 'data-originaltitle');
        if (currentTranslation != originalTitle) {
            var updateTitlePromise = Common.Promise();
            translatePromises.push(updateTitlePromise.promise);
            Velocity(title, { 'opacity': 0 }, 'slow',
                function () {
                    Common.SetAttr(title, 'data-translate', originalTitle);
                    title.textContent = Common.TranslateKey(originalTitle);
                    Velocity(title, 'reverse');
                    updateTitlePromise.resolve();
                }
            );
        }

        // Hide allow all buttons
        var allowAll = Common.Get(viewSecurityPanelId + 'AllowAll');
        Velocity(allowAll, 'fadeOut', 'slow');

        // Hide All Views
        var allowDenyAllDisplay = Common.Get(viewSecurityPanelId + 'AllowAllViewsDisplay');
        var allowDenyAllLinks = Common.Get(viewSecurityPanelId + 'AllowAllViews');
        Velocity(allowDenyAllDisplay, 'slideUp', 'slow');
        Velocity(allowDenyAllLinks, 'fadeOut', 'slow');

        // View not allowed, tell user
        var noItemsPromise = Common.Promise();
        translatePromises.push(noItemsPromise.promise);
        var viewSecurityPanelMarkup = NoItemsToDisplay(true, true);
        Common.InsertHTMLString(viewSecurityPanel, Common.InsertType.Append, viewSecurityPanelMarkup);
        Velocity(Common.Query('.gtc-displaydetail-noitems', viewSecurityPanel), 'slideDown', 'slow',
            function () {
                noItemsPromise.resolve();
                Page.SetPageHeight();
            }
        );

        // Retranslate
        if (translatePromises.length > 0) {
            var allPromise = Promise.all(translatePromises);
            allPromise.then(
                function () {
                    Common.RetranslatePage();
                }
            );
        }

    };

    function ClickSaveAllowedDetails (choice) {

        // Initialize
        DataCache.CurrentCheckboxId = choice.id;
        var viewSecurityPanel = Common.Closest('.gtc-viewsecuritypanel', choice);
        var node = Common.Closest('.gtc-viewsecuritypanel-node', choice);
        var viewSecurityPanelId = viewSecurityPanel.id;
        var onClickParameters = [];

        // Get OnClickEvent object
        var onClickEvent = JSON.parse(Common.GetAttr(viewSecurityPanel, 'data-clicksavealloweddetails'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickEvent.FormToSerialize)) {
            onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
        }

        // Create list of elements
        var elementDetailList = {
            Name: 'ViewElementDetails',
            Value: null,
            UiParameters: []
        };

        // Properties
        var propertiesUiParameters = [];

        // Id
        propertiesUiParameters.push(
            {
                Name: 'Id',
                Value: Common.GetAttr(node, 'data-id'),
                UiParameters: null
            }
        );

        // Entity
        var entityUiParameter = {
            Name: 'ViewElementDetail',
            Value: null,
            UiParameters: null
        };
        entityUiParameter.UiParameters = propertiesUiParameters;
        elementDetailList.UiParameters.push(entityUiParameter);

        // This finds all selected nodes that are NOT top level (e.g. Header/Content etc..) and are NOT in columns after the node whose checkbox was clicked
        var nodeColumnIndex = Common.GetIndex(Common.Closest('.gtc-viewsecuritypanel-column', node));
        var nodeParents = Common.QueryAll('.gtc-viewsecuritypanel-node.gtc-active:not([data-toplevel]):not(#' + node.id + '):nth-child(-n+' + nodeColumnIndex + ')', viewSecurityPanel);

        // Build list of parents and clicked element
        var index = 0, currentNode, currentChoice, length = nodeParents.length;
        for ( ; index < length; index++) {
            currentNode = nodeParents[index];

            // Check parents
            currentChoice = Common.Query('.gtc-input-checkbox-choice', currentNode);
            if (currentChoice.checked != true) {
                Events.Trigger(currentChoice.parentNode, 'click');
            }

            // Properties
            propertiesUiParameters = [];

            // Id
            propertiesUiParameters.push(
                {
                    Name: 'Id',
                    Value: Common.GetAttr(currentNode, 'data-id'),
                    UiParameters: null
                }
            );

            // Entity
            entityUiParameter = {
                Name: 'ViewElementDetail',
                Value: null,
                UiParameters: null
            };
            entityUiParameter.UiParameters = propertiesUiParameters;
            elementDetailList.UiParameters.push(entityUiParameter);
        }
        onClickParameters = onClickParameters.concat(elementDetailList);

        // Clear semaphore
        DataCache.CurrentCheckboxId = null;

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, viewSecurityPanel);

    };

    function ClickSaveDeniedDetails (choice) {

        // Initialize
        var viewSecurityPanel = Common.Closest('.gtc-viewsecuritypanel', choice);
        var viewSecurityPanelId = viewSecurityPanel.id;
        var onClickParameters = [];

        // Get OnClickEvent object
        var onClickEvent = JSON.parse(Common.GetAttr(viewSecurityPanel, 'data-clicksavedenieddetails'));
        if (Common.IsDefined(onClickEvent.UiParameters)) {
            onClickParameters = onClickParameters.concat(onClickEvent.UiParameters);
        }

        // Serialize Form?
        if (Common.IsDefined(onClickEvent.FormToSerialize)) {
            onClickParameters = onClickParameters.concat(Form.SerializeArray(Common.Get(onClickEvent.FormToSerialize)));
        }

        // Get ViewElementDetail
        onClickParameters = onClickParameters.concat([
            {
                Name: 'ViewElementDetail',
                Value: Common.GetAttr(Common.Closest('.gtc-viewsecuritypanel-node', choice), 'data-id'),
                UiParameters: null
            }
        ]);

        // Set depth, remove previous columns, clear delegated events
        DataCache.CurrentDepth = Common.GetIndex(Common.Closest('.gtc-viewsecuritypanel-column', choice));
        var columns = Common.QueryAll('.gtc-viewsecuritypanel-column', viewSecurityPanel);
        var previousColumns = Common.GetAllSibling(columns[DataCache.CurrentDepth], Common.SiblingType.Next);
        Common.Remove(previousColumns);
        Events.Off(document.body, 'click.viewsecuritypanelonclickdetails.Depth' + (DataCache.CurrentDepth + 1));

        // Execute View Behavior
        Common.ExecuteViewBehavior(onClickEvent.ControllerPath + onClickEvent.ActionName, onClickParameters, Page.RunInstructions, viewSecurityPanel);

    };

} (window.ViewSecurityPanel = window.ViewSecurityPanel || {}, window, document, Common, Cache, Events, Velocity));
